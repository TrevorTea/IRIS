
L4Initial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000174  08004db8  08004db8  00014db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f2c  08004f2c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f34  08004f34  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08004fac  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08004fac  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d384  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d42  00000000  00000000  0002d424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  0002f168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ad0  00000000  00000000  0002fd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b403  00000000  00000000  000307d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e237  00000000  00000000  0004bbd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a56ec  00000000  00000000  00059e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ff4f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a4  00000000  00000000  000ff548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004da0 	.word	0x08004da0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004da0 	.word	0x08004da0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
#if(_DEBUG)
PUTCHAR_PROTOTYPE {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800057c:	1d39      	adds	r1, r7, #4
 800057e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000582:	2201      	movs	r2, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <__io_putchar+0x20>)
 8000586:	f002 ffad 	bl	80034e4 <HAL_UART_Transmit>

	return ch;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000f0 	.word	0x200000f0

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059e:	f000 fcc3 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a2:	f000 f881 	bl	80006a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a6:	f000 f93d 	bl	8000824 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005aa:	f000 f90b 	bl	80007c4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80005ae:	f000 f8cb 	bl	8000748 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
	int upTime = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	607b      	str	r3, [r7, #4]
	LCD_Active_Mode(&hspi1);
 80005b6:	482e      	ldr	r0, [pc, #184]	; (8000670 <main+0xd8>)
 80005b8:	f000 fbac 	bl	8000d14 <LCD_Active_Mode>
	//Double dummy read?
	LCD_Read8(0x00000000, &hspi1);
 80005bc:	492c      	ldr	r1, [pc, #176]	; (8000670 <main+0xd8>)
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 fc0a 	bl	8000dd8 <LCD_Read8>
	LCD_Read8(0x00000000, &hspi1);
 80005c4:	492a      	ldr	r1, [pc, #168]	; (8000670 <main+0xd8>)
 80005c6:	2000      	movs	r0, #0
 80005c8:	f000 fc06 	bl	8000dd8 <LCD_Read8>
	HAL_Delay(3000);
 80005cc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005d0:	f000 fd26 	bl	8001020 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		printf("Uptime: %d\n\r", upTime++);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	1c5a      	adds	r2, r3, #1
 80005d8:	607a      	str	r2, [r7, #4]
 80005da:	4619      	mov	r1, r3
 80005dc:	4825      	ldr	r0, [pc, #148]	; (8000674 <main+0xdc>)
 80005de:	f003 fc51 	bl	8003e84 <iprintf>
		printf("C0003: %x\n\r", LCD_Read8(0x000C0003, &hspi1));
 80005e2:	4923      	ldr	r1, [pc, #140]	; (8000670 <main+0xd8>)
 80005e4:	4824      	ldr	r0, [pc, #144]	; (8000678 <main+0xe0>)
 80005e6:	f000 fbf7 	bl	8000dd8 <LCD_Read8>
 80005ea:	4603      	mov	r3, r0
 80005ec:	4619      	mov	r1, r3
 80005ee:	4823      	ldr	r0, [pc, #140]	; (800067c <main+0xe4>)
 80005f0:	f003 fc48 	bl	8003e84 <iprintf>
		printf("C0002: %x\n\r", LCD_Read8(0x000C0002, &hspi1));
 80005f4:	491e      	ldr	r1, [pc, #120]	; (8000670 <main+0xd8>)
 80005f6:	4822      	ldr	r0, [pc, #136]	; (8000680 <main+0xe8>)
 80005f8:	f000 fbee 	bl	8000dd8 <LCD_Read8>
 80005fc:	4603      	mov	r3, r0
 80005fe:	4619      	mov	r1, r3
 8000600:	4820      	ldr	r0, [pc, #128]	; (8000684 <main+0xec>)
 8000602:	f003 fc3f 	bl	8003e84 <iprintf>
		printf("C0001: %x\n\r", LCD_Read8(0x000C0001, &hspi1));
 8000606:	491a      	ldr	r1, [pc, #104]	; (8000670 <main+0xd8>)
 8000608:	481f      	ldr	r0, [pc, #124]	; (8000688 <main+0xf0>)
 800060a:	f000 fbe5 	bl	8000dd8 <LCD_Read8>
 800060e:	4603      	mov	r3, r0
 8000610:	4619      	mov	r1, r3
 8000612:	481e      	ldr	r0, [pc, #120]	; (800068c <main+0xf4>)
 8000614:	f003 fc36 	bl	8003e84 <iprintf>
		printf("C0000: %x\n\r", LCD_Read8(0x000C0000, &hspi1));
 8000618:	4915      	ldr	r1, [pc, #84]	; (8000670 <main+0xd8>)
 800061a:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800061e:	f000 fbdb 	bl	8000dd8 <LCD_Read8>
 8000622:	4603      	mov	r3, r0
 8000624:	4619      	mov	r1, r3
 8000626:	481a      	ldr	r0, [pc, #104]	; (8000690 <main+0xf8>)
 8000628:	f003 fc2c 	bl	8003e84 <iprintf>
		printf("302000: %x\n\r", LCD_Read8(0x00302000, &hspi1));
 800062c:	4910      	ldr	r1, [pc, #64]	; (8000670 <main+0xd8>)
 800062e:	4819      	ldr	r0, [pc, #100]	; (8000694 <main+0xfc>)
 8000630:	f000 fbd2 	bl	8000dd8 <LCD_Read8>
 8000634:	4603      	mov	r3, r0
 8000636:	4619      	mov	r1, r3
 8000638:	4817      	ldr	r0, [pc, #92]	; (8000698 <main+0x100>)
 800063a:	f003 fc23 	bl	8003e84 <iprintf>
		printf("Writing to RAM 0x1000: \n\r");
 800063e:	4817      	ldr	r0, [pc, #92]	; (800069c <main+0x104>)
 8000640:	f003 fc20 	bl	8003e84 <iprintf>
		LCD_Write32(0x1000, 0xAA55FF66, &hspi1);
 8000644:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <main+0xd8>)
 8000646:	4916      	ldr	r1, [pc, #88]	; (80006a0 <main+0x108>)
 8000648:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800064c:	f000 fc38 	bl	8000ec0 <LCD_Write32>
		printf("Read Results from RAM 0x1000: %lx\n\r", LCD_Read32(0x1000, &hspi1));
 8000650:	4907      	ldr	r1, [pc, #28]	; (8000670 <main+0xd8>)
 8000652:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000656:	f000 fbdf 	bl	8000e18 <LCD_Read32>
 800065a:	4603      	mov	r3, r0
 800065c:	4619      	mov	r1, r3
 800065e:	4811      	ldr	r0, [pc, #68]	; (80006a4 <main+0x10c>)
 8000660:	f003 fc10 	bl	8003e84 <iprintf>
		HAL_Delay(1000);
 8000664:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000668:	f000 fcda 	bl	8001020 <HAL_Delay>
		printf("Uptime: %d\n\r", upTime++);
 800066c:	e7b2      	b.n	80005d4 <main+0x3c>
 800066e:	bf00      	nop
 8000670:	2000008c 	.word	0x2000008c
 8000674:	08004db8 	.word	0x08004db8
 8000678:	000c0003 	.word	0x000c0003
 800067c:	08004dc8 	.word	0x08004dc8
 8000680:	000c0002 	.word	0x000c0002
 8000684:	08004dd4 	.word	0x08004dd4
 8000688:	000c0001 	.word	0x000c0001
 800068c:	08004de0 	.word	0x08004de0
 8000690:	08004dec 	.word	0x08004dec
 8000694:	00302000 	.word	0x00302000
 8000698:	08004df8 	.word	0x08004df8
 800069c:	08004e08 	.word	0x08004e08
 80006a0:	aa55ff66 	.word	0xaa55ff66
 80006a4:	08004e24 	.word	0x08004e24

080006a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b096      	sub	sp, #88	; 0x58
 80006ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ae:	f107 0314 	add.w	r3, r7, #20
 80006b2:	2244      	movs	r2, #68	; 0x44
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f003 fbdc 	bl	8003e74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006bc:	463b      	mov	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006ce:	f000 ff49 	bl	8001564 <HAL_PWREx_ControlVoltageScaling>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006d8:	f000 f94c 	bl	8000974 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006dc:	2310      	movs	r3, #16
 80006de:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006e0:	2301      	movs	r3, #1
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006e8:	2360      	movs	r3, #96	; 0x60
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006f0:	2301      	movs	r3, #1
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006f4:	2301      	movs	r3, #1
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 80006f8:	2328      	movs	r3, #40	; 0x28
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000700:	2302      	movs	r3, #2
 8000702:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000704:	f107 0314 	add.w	r3, r7, #20
 8000708:	4618      	mov	r0, r3
 800070a:	f000 ff81 	bl	8001610 <HAL_RCC_OscConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000714:	f000 f92e 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000718:	230f      	movs	r3, #15
 800071a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071c:	2303      	movs	r3, #3
 800071e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	2104      	movs	r1, #4
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fbcf 	bl	8001ed4 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800073c:	f000 f91a 	bl	8000974 <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3758      	adds	r7, #88	; 0x58
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_SPI1_Init+0x74>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <MX_SPI1_Init+0x78>)
 8000750:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_SPI1_Init+0x74>)
 8000754:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000758:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800075a:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_SPI1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000760:	4b16      	ldr	r3, [pc, #88]	; (80007bc <MX_SPI1_Init+0x74>)
 8000762:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000766:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000768:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_SPI1_Init+0x74>)
 800076a:	2200      	movs	r2, #0
 800076c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800076e:	4b13      	ldr	r3, [pc, #76]	; (80007bc <MX_SPI1_Init+0x74>)
 8000770:	2200      	movs	r2, #0
 8000772:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_SPI1_Init+0x74>)
 8000776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800077a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_SPI1_Init+0x74>)
 800077e:	2210      	movs	r2, #16
 8000780:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_SPI1_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_SPI1_Init+0x74>)
 800078a:	2200      	movs	r2, #0
 800078c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_SPI1_Init+0x74>)
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_SPI1_Init+0x74>)
 8000796:	2207      	movs	r2, #7
 8000798:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_SPI1_Init+0x74>)
 800079c:	2200      	movs	r2, #0
 800079e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_SPI1_Init+0x74>)
 80007a2:	2208      	movs	r2, #8
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_SPI1_Init+0x74>)
 80007a8:	f001 ff3e 	bl	8002628 <HAL_SPI_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80007b2:	f000 f8df 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	2000008c 	.word	0x2000008c
 80007c0:	40013000 	.word	0x40013000

080007c4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007c8:	4b14      	ldr	r3, [pc, #80]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MX_USART2_UART_Init+0x5c>)
 80007cc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ce:	4b13      	ldr	r3, [pc, #76]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007d6:	4b11      	ldr	r3, [pc, #68]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007e2:	4b0e      	ldr	r3, [pc, #56]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007ea:	220c      	movs	r2, #12
 80007ec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ee:	4b0b      	ldr	r3, [pc, #44]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f4:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fa:	4b08      	ldr	r3, [pc, #32]	; (800081c <MX_USART2_UART_Init+0x58>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000800:	4b06      	ldr	r3, [pc, #24]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000802:	2200      	movs	r2, #0
 8000804:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <MX_USART2_UART_Init+0x58>)
 8000808:	f002 fe1e 	bl	8003448 <HAL_UART_Init>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000812:	f000 f8af 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200000f0 	.word	0x200000f0
 8000820:	40004400 	.word	0x40004400

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	4b4b      	ldr	r3, [pc, #300]	; (8000968 <MX_GPIO_Init+0x144>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a4a      	ldr	r2, [pc, #296]	; (8000968 <MX_GPIO_Init+0x144>)
 8000840:	f043 0304 	orr.w	r3, r3, #4
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b48      	ldr	r3, [pc, #288]	; (8000968 <MX_GPIO_Init+0x144>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0304 	and.w	r3, r3, #4
 800084e:	613b      	str	r3, [r7, #16]
 8000850:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000852:	4b45      	ldr	r3, [pc, #276]	; (8000968 <MX_GPIO_Init+0x144>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a44      	ldr	r2, [pc, #272]	; (8000968 <MX_GPIO_Init+0x144>)
 8000858:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b42      	ldr	r3, [pc, #264]	; (8000968 <MX_GPIO_Init+0x144>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b3f      	ldr	r3, [pc, #252]	; (8000968 <MX_GPIO_Init+0x144>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a3e      	ldr	r2, [pc, #248]	; (8000968 <MX_GPIO_Init+0x144>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b3c      	ldr	r3, [pc, #240]	; (8000968 <MX_GPIO_Init+0x144>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000882:	4b39      	ldr	r3, [pc, #228]	; (8000968 <MX_GPIO_Init+0x144>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	4a38      	ldr	r2, [pc, #224]	; (8000968 <MX_GPIO_Init+0x144>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800088e:	4b36      	ldr	r3, [pc, #216]	; (8000968 <MX_GPIO_Init+0x144>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	21b0      	movs	r1, #176	; 0xb0
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f000 fe39 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008ac:	482f      	ldr	r0, [pc, #188]	; (800096c <MX_GPIO_Init+0x148>)
 80008ae:	f000 fe33 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AX_CS_GPIO_Port, AX_CS_Pin, GPIO_PIN_SET);
 80008b2:	2201      	movs	r2, #1
 80008b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f000 fe2c 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c6:	482a      	ldr	r0, [pc, #168]	; (8000970 <MX_GPIO_Init+0x14c>)
 80008c8:	f000 fe26 	bl	8001518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4823      	ldr	r0, [pc, #140]	; (8000970 <MX_GPIO_Init+0x14c>)
 80008e4:	f000 fca6 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin AX_CS_Pin */
  GPIO_InitStruct.Pin = SMPS_EN_Pin|SMPS_V1_Pin|SMPS_SW_Pin|AX_CS_Pin;
 80008e8:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0314 	add.w	r3, r7, #20
 80008fe:	4619      	mov	r1, r3
 8000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000904:	f000 fc96 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : SMPS_PG_Pin */
  GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000908:	2340      	movs	r3, #64	; 0x40
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000910:	2301      	movs	r3, #1
 8000912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 0314 	add.w	r3, r7, #20
 8000918:	4619      	mov	r1, r3
 800091a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091e:	f000 fc89 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000922:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	480c      	ldr	r0, [pc, #48]	; (800096c <MX_GPIO_Init+0x148>)
 800093c:	f000 fc7a 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 8000940:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <MX_GPIO_Init+0x14c>)
 800095a:	f000 fc6b 	bl	8001234 <HAL_GPIO_Init>

}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40021000 	.word	0x40021000
 800096c:	48000400 	.word	0x48000400
 8000970:	48000800 	.word	0x48000800

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */
__disable_irq();
while (1) {
 800097c:	e7fe      	b.n	800097c <Error_Handler+0x8>
	...

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	4b0f      	ldr	r3, [pc, #60]	; (80009c4 <HAL_MspInit+0x44>)
 8000988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800098a:	4a0e      	ldr	r2, [pc, #56]	; (80009c4 <HAL_MspInit+0x44>)
 800098c:	f043 0301 	orr.w	r3, r3, #1
 8000990:	6613      	str	r3, [r2, #96]	; 0x60
 8000992:	4b0c      	ldr	r3, [pc, #48]	; (80009c4 <HAL_MspInit+0x44>)
 8000994:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000996:	f003 0301 	and.w	r3, r3, #1
 800099a:	607b      	str	r3, [r7, #4]
 800099c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800099e:	4b09      	ldr	r3, [pc, #36]	; (80009c4 <HAL_MspInit+0x44>)
 80009a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a2:	4a08      	ldr	r2, [pc, #32]	; (80009c4 <HAL_MspInit+0x44>)
 80009a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009a8:	6593      	str	r3, [r2, #88]	; 0x58
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <HAL_MspInit+0x44>)
 80009ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009b2:	603b      	str	r3, [r7, #0]
 80009b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b6:	bf00      	nop
 80009b8:	370c      	adds	r7, #12
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a18      	ldr	r2, [pc, #96]	; (8000a48 <HAL_SPI_MspInit+0x80>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d129      	bne.n	8000a3e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ea:	4b18      	ldr	r3, [pc, #96]	; (8000a4c <HAL_SPI_MspInit+0x84>)
 80009ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ee:	4a17      	ldr	r2, [pc, #92]	; (8000a4c <HAL_SPI_MspInit+0x84>)
 80009f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009f4:	6613      	str	r3, [r2, #96]	; 0x60
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <HAL_SPI_MspInit+0x84>)
 80009f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_SPI_MspInit+0x84>)
 8000a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a06:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <HAL_SPI_MspInit+0x84>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_SPI_MspInit+0x84>)
 8000a10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8000a1a:	f641 0302 	movw	r3, #6146	; 0x1802
 8000a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a2c:	2305      	movs	r3, #5
 8000a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a3a:	f000 fbfb 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a3e:	bf00      	nop
 8000a40:	3728      	adds	r7, #40	; 0x28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40013000 	.word	0x40013000
 8000a4c:	40021000 	.word	0x40021000

08000a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b096      	sub	sp, #88	; 0x58
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a68:	f107 0310 	add.w	r3, r7, #16
 8000a6c:	2234      	movs	r2, #52	; 0x34
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4618      	mov	r0, r3
 8000a72:	f003 f9ff 	bl	8003e74 <memset>
  if(huart->Instance==USART2)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a1f      	ldr	r2, [pc, #124]	; (8000af8 <HAL_UART_MspInit+0xa8>)
 8000a7c:	4293      	cmp	r3, r2
 8000a7e:	d136      	bne.n	8000aee <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a80:	2302      	movs	r3, #2
 8000a82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f001 fc45 	bl	800231c <HAL_RCCEx_PeriphCLKConfig>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a98:	f7ff ff6c 	bl	8000974 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a9c:	4b17      	ldr	r3, [pc, #92]	; (8000afc <HAL_UART_MspInit+0xac>)
 8000a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aa0:	4a16      	ldr	r2, [pc, #88]	; (8000afc <HAL_UART_MspInit+0xac>)
 8000aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <HAL_UART_MspInit+0xac>)
 8000aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab4:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_UART_MspInit+0xac>)
 8000ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab8:	4a10      	ldr	r2, [pc, #64]	; (8000afc <HAL_UART_MspInit+0xac>)
 8000aba:	f043 0301 	orr.w	r3, r3, #1
 8000abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_UART_MspInit+0xac>)
 8000ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac4:	f003 0301 	and.w	r3, r3, #1
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000acc:	230c      	movs	r3, #12
 8000ace:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000adc:	2307      	movs	r3, #7
 8000ade:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f000 fba3 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aee:	bf00      	nop
 8000af0:	3758      	adds	r7, #88	; 0x58
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	40004400 	.word	0x40004400
 8000afc:	40021000 	.word	0x40021000

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f000 fa48 	bl	8000fe0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b086      	sub	sp, #24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	60f8      	str	r0, [r7, #12]
 8000b5c:	60b9      	str	r1, [r7, #8]
 8000b5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	e00a      	b.n	8000b7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b66:	f3af 8000 	nop.w
 8000b6a:	4601      	mov	r1, r0
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	60ba      	str	r2, [r7, #8]
 8000b72:	b2ca      	uxtb	r2, r1
 8000b74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	3301      	adds	r3, #1
 8000b7a:	617b      	str	r3, [r7, #20]
 8000b7c:	697a      	ldr	r2, [r7, #20]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dbf0      	blt.n	8000b66 <_read+0x12>
	}

return len;
 8000b84:	687b      	ldr	r3, [r7, #4]
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3718      	adds	r7, #24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}

08000b8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b8e:	b580      	push	{r7, lr}
 8000b90:	b086      	sub	sp, #24
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	60f8      	str	r0, [r7, #12]
 8000b96:	60b9      	str	r1, [r7, #8]
 8000b98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
 8000b9e:	e009      	b.n	8000bb4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	60ba      	str	r2, [r7, #8]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f7ff fce3 	bl	8000574 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	3301      	adds	r3, #1
 8000bb2:	617b      	str	r3, [r7, #20]
 8000bb4:	697a      	ldr	r2, [r7, #20]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	429a      	cmp	r2, r3
 8000bba:	dbf1      	blt.n	8000ba0 <_write+0x12>
	}
	return len;
 8000bbc:	687b      	ldr	r3, [r7, #4]
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3718      	adds	r7, #24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <_close>:

int _close(int file)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
	return -1;
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	370c      	adds	r7, #12
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bde:	b480      	push	{r7}
 8000be0:	b083      	sub	sp, #12
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
 8000be6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bee:	605a      	str	r2, [r3, #4]
	return 0;
 8000bf0:	2300      	movs	r3, #0
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	370c      	adds	r7, #12
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <_isatty>:

int _isatty(int file)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b083      	sub	sp, #12
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
	return 1;
 8000c06:	2301      	movs	r3, #1
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b085      	sub	sp, #20
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	return 0;
 8000c20:	2300      	movs	r3, #0
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	3714      	adds	r7, #20
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c38:	4a14      	ldr	r2, [pc, #80]	; (8000c8c <_sbrk+0x5c>)
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <_sbrk+0x60>)
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c44:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <_sbrk+0x64>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d102      	bne.n	8000c52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <_sbrk+0x64>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <_sbrk+0x68>)
 8000c50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4413      	add	r3, r2
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	d207      	bcs.n	8000c70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c60:	f003 f8de 	bl	8003e20 <__errno>
 8000c64:	4603      	mov	r3, r0
 8000c66:	220c      	movs	r2, #12
 8000c68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c6e:	e009      	b.n	8000c84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c70:	4b08      	ldr	r3, [pc, #32]	; (8000c94 <_sbrk+0x64>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c76:	4b07      	ldr	r3, [pc, #28]	; (8000c94 <_sbrk+0x64>)
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	4a05      	ldr	r2, [pc, #20]	; (8000c94 <_sbrk+0x64>)
 8000c80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	2000a000 	.word	0x2000a000
 8000c90:	00000400 	.word	0x00000400
 8000c94:	20000174 	.word	0x20000174
 8000c98:	20000190 	.word	0x20000190

08000c9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <SystemInit+0x20>)
 8000ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ca6:	4a05      	ldr	r2, [pc, #20]	; (8000cbc <SystemInit+0x20>)
 8000ca8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cb0:	bf00      	nop
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc4:	f7ff ffea 	bl	8000c9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	; (8000d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	; (8000d04 <LoopForever+0xe>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	; (8000d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	; (8000d0c <LoopForever+0x16>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cee:	f003 f89d 	bl	8003e2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cf2:	f7ff fc51 	bl	8000598 <main>

08000cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf6:	e7fe      	b.n	8000cf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf8:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d04:	08004f3c 	.word	0x08004f3c
  ldr r2, =_sbss
 8000d08:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d0c:	2000018c 	.word	0x2000018c

08000d10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <ADC1_2_IRQHandler>
	...

08000d14 <LCD_Active_Mode>:
 *	@author Trevor Thomas
 *  Created on: Dec 21, 2022
 */
#include "LCD_low.h"

HAL_StatusTypeDef LCD_Active_Mode(SPI_HandleTypeDef *hspi) {
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b084      	sub	sp, #16
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef status = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	73fb      	strb	r3, [r7, #15]
	uint8_t payload[3] = { 0, 0, 0 };
 8000d20:	4a11      	ldr	r2, [pc, #68]	; (8000d68 <LCD_Active_Mode+0x54>)
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	6812      	ldr	r2, [r2, #0]
 8000d28:	4611      	mov	r1, r2
 8000d2a:	8019      	strh	r1, [r3, #0]
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	0c12      	lsrs	r2, r2, #16
 8000d30:	701a      	strb	r2, [r3, #0]
	//bring chip select low
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <LCD_Active_Mode+0x58>)
 8000d3a:	f000 fbed 	bl	8001518 <HAL_GPIO_WritePin>
	//Transmit three bytes of zeros
	status = HAL_SPI_Transmit(hspi, payload, 3, 0xFF);
 8000d3e:	f107 010c 	add.w	r1, r7, #12
 8000d42:	23ff      	movs	r3, #255	; 0xff
 8000d44:	2203      	movs	r2, #3
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f001 fd11 	bl	800276e <HAL_SPI_Transmit>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	73fb      	strb	r3, [r7, #15]
	//Bring chip select high
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d56:	4805      	ldr	r0, [pc, #20]	; (8000d6c <LCD_Active_Mode+0x58>)
 8000d58:	f000 fbde 	bl	8001518 <HAL_GPIO_WritePin>

	return status;
 8000d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	08004e48 	.word	0x08004e48
 8000d6c:	48000800 	.word	0x48000800

08000d70 <LCD_Begin_Read>:

HAL_StatusTypeDef LCD_Begin_Read(uint32_t addr, SPI_HandleTypeDef *hspi) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint8_t addrBytes[3] = { (addr >> 16) & 0xFF, (addr >> 8) & 0xFF, addr & 0xFF };
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	0c1b      	lsrs	r3, r3, #16
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	733b      	strb	r3, [r7, #12]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	b2db      	uxtb	r3, r3
 8000d88:	737b      	strb	r3, [r7, #13]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	73bb      	strb	r3, [r7, #14]
	uint8_t dummyByte = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	72fb      	strb	r3, [r7, #11]
	//bring chip select low
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000d94:	2200      	movs	r2, #0
 8000d96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d9a:	480e      	ldr	r0, [pc, #56]	; (8000dd4 <LCD_Begin_Read+0x64>)
 8000d9c:	f000 fbbc 	bl	8001518 <HAL_GPIO_WritePin>
	//Ship address bytes
	status = HAL_SPI_Transmit(hspi, addrBytes, 3, 0xFF);
 8000da0:	f107 010c 	add.w	r1, r7, #12
 8000da4:	23ff      	movs	r3, #255	; 0xff
 8000da6:	2203      	movs	r2, #3
 8000da8:	6838      	ldr	r0, [r7, #0]
 8000daa:	f001 fce0 	bl	800276e <HAL_SPI_Transmit>
 8000dae:	4603      	mov	r3, r0
 8000db0:	73fb      	strb	r3, [r7, #15]
	//Send dummy byte
	status |= HAL_SPI_Transmit(hspi, &dummyByte, 1, 0xFF);
 8000db2:	f107 010b 	add.w	r1, r7, #11
 8000db6:	23ff      	movs	r3, #255	; 0xff
 8000db8:	2201      	movs	r2, #1
 8000dba:	6838      	ldr	r0, [r7, #0]
 8000dbc:	f001 fcd7 	bl	800276e <HAL_SPI_Transmit>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	73fb      	strb	r3, [r7, #15]
	return status;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	48000800 	.word	0x48000800

08000dd8 <LCD_Read8>:

uint8_t LCD_Read8(uint32_t addr, SPI_HandleTypeDef *hspi) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b084      	sub	sp, #16
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
	uint8_t dataByte = 0;
 8000de2:	2300      	movs	r3, #0
 8000de4:	73fb      	strb	r3, [r7, #15]
	//Begin read
	LCD_Begin_Read(addr, hspi);
 8000de6:	6839      	ldr	r1, [r7, #0]
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ffc1 	bl	8000d70 <LCD_Begin_Read>
	//Read single byte
	HAL_SPI_Receive(hspi, &dataByte, 1, 0xFF);
 8000dee:	f107 010f 	add.w	r1, r7, #15
 8000df2:	23ff      	movs	r3, #255	; 0xff
 8000df4:	2201      	movs	r2, #1
 8000df6:	6838      	ldr	r0, [r7, #0]
 8000df8:	f001 fe27 	bl	8002a4a <HAL_SPI_Receive>
	//Bring chip select high
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000dfc:	2201      	movs	r2, #1
 8000dfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e02:	4804      	ldr	r0, [pc, #16]	; (8000e14 <LCD_Read8+0x3c>)
 8000e04:	f000 fb88 	bl	8001518 <HAL_GPIO_WritePin>
	return dataByte;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3710      	adds	r7, #16
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	48000800 	.word	0x48000800

08000e18 <LCD_Read32>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
	uint16_t result = (dataBytes[1] << 8) | (dataBytes[0]);
	return result;
}

uint32_t LCD_Read32(uint32_t addr, SPI_HandleTypeDef *hspi) {
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
 8000e20:	6039      	str	r1, [r7, #0]
	uint8_t dataBytes[4] = { 0, 0, 0, 0 };
 8000e22:	2300      	movs	r3, #0
 8000e24:	60bb      	str	r3, [r7, #8]
	//Begin read
	LCD_Begin_Read(addr, hspi);
 8000e26:	6839      	ldr	r1, [r7, #0]
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ffa1 	bl	8000d70 <LCD_Begin_Read>
	//Read single byte
	HAL_SPI_Receive(hspi, dataBytes, 4, 0xFF);
 8000e2e:	f107 0108 	add.w	r1, r7, #8
 8000e32:	23ff      	movs	r3, #255	; 0xff
 8000e34:	2204      	movs	r2, #4
 8000e36:	6838      	ldr	r0, [r7, #0]
 8000e38:	f001 fe07 	bl	8002a4a <HAL_SPI_Receive>
	//Bring chip select high
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e42:	4809      	ldr	r0, [pc, #36]	; (8000e68 <LCD_Read32+0x50>)
 8000e44:	f000 fb68 	bl	8001518 <HAL_GPIO_WritePin>
	uint32_t result = (dataBytes[3] << 24) | (dataBytes[2] << 16) | (dataBytes[1] << 8) | (dataBytes[0]);
 8000e48:	7afb      	ldrb	r3, [r7, #11]
 8000e4a:	061a      	lsls	r2, r3, #24
 8000e4c:	7abb      	ldrb	r3, [r7, #10]
 8000e4e:	041b      	lsls	r3, r3, #16
 8000e50:	431a      	orrs	r2, r3
 8000e52:	7a7b      	ldrb	r3, [r7, #9]
 8000e54:	021b      	lsls	r3, r3, #8
 8000e56:	4313      	orrs	r3, r2
 8000e58:	7a3a      	ldrb	r2, [r7, #8]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	60fb      	str	r3, [r7, #12]
	return result;
 8000e5e:	68fb      	ldr	r3, [r7, #12]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	48000800 	.word	0x48000800

08000e6c <LCD_Begin_Write>:
	HAL_StatusTypeDef status = HAL_SPI_Transmit(hspi, payload, 3, 0xFF);
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
	return status;
}

HAL_StatusTypeDef LCD_Begin_Write(uint32_t addr, SPI_HandleTypeDef *hspi) {
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
 8000e74:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef status;
	uint8_t addrBytes[3] = { ((addr >> 16) & 0xFF) | 0x80, (addr >> 8) & 0xFF, addr & 0xFF };
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	0c1b      	lsrs	r3, r3, #16
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	733b      	strb	r3, [r7, #12]
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	0a1b      	lsrs	r3, r3, #8
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	737b      	strb	r3, [r7, #13]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	73bb      	strb	r3, [r7, #14]
	//bring chip select low
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e92:	2200      	movs	r2, #0
 8000e94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e98:	4808      	ldr	r0, [pc, #32]	; (8000ebc <LCD_Begin_Write+0x50>)
 8000e9a:	f000 fb3d 	bl	8001518 <HAL_GPIO_WritePin>
	//Ship address bytes
	status = HAL_SPI_Transmit(hspi, addrBytes, 3, 0xFF);
 8000e9e:	f107 010c 	add.w	r1, r7, #12
 8000ea2:	23ff      	movs	r3, #255	; 0xff
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	6838      	ldr	r0, [r7, #0]
 8000ea8:	f001 fc61 	bl	800276e <HAL_SPI_Transmit>
 8000eac:	4603      	mov	r3, r0
 8000eae:	73fb      	strb	r3, [r7, #15]
	return status;
 8000eb0:	7bfb      	ldrb	r3, [r7, #15]
//	uint8_t viewBytes [3] = {*(addrBytes), *(addrBytes + 1), *(addrBytes + 2)};
//	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_RESET);
//	status = HAL_SPI_Transmit(hspi, addrBytes, 3, 0xFF);
//	free(addrBytes);
//	return status;
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	48000800 	.word	0x48000800

08000ec0 <LCD_Write32>:
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
	return status;
}

HAL_StatusTypeDef LCD_Write32(uint32_t addr, uint32_t data,
		SPI_HandleTypeDef *hspi) {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
	uint8_t payload[4] = { data & 0xFF, (data >> 8) & 0xFF, (data >> 16) & 0xFF, (data >> 24) & 0xFF };
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	743b      	strb	r3, [r7, #16]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	0a1b      	lsrs	r3, r3, #8
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	747b      	strb	r3, [r7, #17]
 8000eda:	68bb      	ldr	r3, [r7, #8]
 8000edc:	0c1b      	lsrs	r3, r3, #16
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	74bb      	strb	r3, [r7, #18]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	0e1b      	lsrs	r3, r3, #24
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	74fb      	strb	r3, [r7, #19]
	HAL_StatusTypeDef status = LCD_Begin_Write(addr, hspi);
 8000eea:	6879      	ldr	r1, [r7, #4]
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff ffbd 	bl	8000e6c <LCD_Begin_Write>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	75fb      	strb	r3, [r7, #23]
	status |= HAL_SPI_Transmit(hspi, payload, 4, 0xFF);
 8000ef6:	f107 0110 	add.w	r1, r7, #16
 8000efa:	23ff      	movs	r3, #255	; 0xff
 8000efc:	2204      	movs	r2, #4
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f001 fc35 	bl	800276e <HAL_SPI_Transmit>
 8000f04:	4603      	mov	r3, r0
 8000f06:	461a      	mov	r2, r3
 8000f08:	7dfb      	ldrb	r3, [r7, #23]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	75fb      	strb	r3, [r7, #23]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, GPIO_PIN_SET);
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000f14:	4803      	ldr	r0, [pc, #12]	; (8000f24 <LCD_Write32+0x64>)
 8000f16:	f000 faff 	bl	8001518 <HAL_GPIO_WritePin>
	return status;
 8000f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	48000800 	.word	0x48000800

08000f28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f32:	4b0c      	ldr	r3, [pc, #48]	; (8000f64 <HAL_Init+0x3c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a0b      	ldr	r2, [pc, #44]	; (8000f64 <HAL_Init+0x3c>)
 8000f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f3e:	2003      	movs	r0, #3
 8000f40:	f000 f944 	bl	80011cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f44:	2000      	movs	r0, #0
 8000f46:	f000 f80f 	bl	8000f68 <HAL_InitTick>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d002      	beq.n	8000f56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f50:	2301      	movs	r3, #1
 8000f52:	71fb      	strb	r3, [r7, #7]
 8000f54:	e001      	b.n	8000f5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f56:	f7ff fd13 	bl	8000980 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40022000 	.word	0x40022000

08000f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b084      	sub	sp, #16
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f70:	2300      	movs	r3, #0
 8000f72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <HAL_InitTick+0x6c>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d023      	beq.n	8000fc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f7c:	4b16      	ldr	r3, [pc, #88]	; (8000fd8 <HAL_InitTick+0x70>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <HAL_InitTick+0x6c>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 f941 	bl	800121a <HAL_SYSTICK_Config>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d10f      	bne.n	8000fbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	2b0f      	cmp	r3, #15
 8000fa2:	d809      	bhi.n	8000fb8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	6879      	ldr	r1, [r7, #4]
 8000fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fac:	f000 f919 	bl	80011e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fb0:	4a0a      	ldr	r2, [pc, #40]	; (8000fdc <HAL_InitTick+0x74>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	6013      	str	r3, [r2, #0]
 8000fb6:	e007      	b.n	8000fc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e004      	b.n	8000fc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	73fb      	strb	r3, [r7, #15]
 8000fc2:	e001      	b.n	8000fc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000008 	.word	0x20000008
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	20000004 	.word	0x20000004

08000fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <HAL_IncTick+0x20>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_IncTick+0x24>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4413      	add	r3, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	; (8001004 <HAL_IncTick+0x24>)
 8000ff2:	6013      	str	r3, [r2, #0]
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	20000008 	.word	0x20000008
 8001004:	20000178 	.word	0x20000178

08001008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  return uwTick;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <HAL_GetTick+0x14>)
 800100e:	681b      	ldr	r3, [r3, #0]
}
 8001010:	4618      	mov	r0, r3
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	20000178 	.word	0x20000178

08001020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001028:	f7ff ffee 	bl	8001008 <HAL_GetTick>
 800102c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001038:	d005      	beq.n	8001046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800103a:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <HAL_Delay+0x44>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	461a      	mov	r2, r3
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	4413      	add	r3, r2
 8001044:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001046:	bf00      	nop
 8001048:	f7ff ffde 	bl	8001008 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68bb      	ldr	r3, [r7, #8]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	68fa      	ldr	r2, [r7, #12]
 8001054:	429a      	cmp	r2, r3
 8001056:	d8f7      	bhi.n	8001048 <HAL_Delay+0x28>
  {
  }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	20000008 	.word	0x20000008

08001068 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001068:	b480      	push	{r7}
 800106a:	b085      	sub	sp, #20
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800107e:	68ba      	ldr	r2, [r7, #8]
 8001080:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001084:	4013      	ands	r3, r2
 8001086:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001090:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001094:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001098:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109a:	4a04      	ldr	r2, [pc, #16]	; (80010ac <__NVIC_SetPriorityGrouping+0x44>)
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	60d3      	str	r3, [r2, #12]
}
 80010a0:	bf00      	nop
 80010a2:	3714      	adds	r7, #20
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	e000ed00 	.word	0xe000ed00

080010b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b4:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <__NVIC_GetPriorityGrouping+0x18>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	0a1b      	lsrs	r3, r3, #8
 80010ba:	f003 0307 	and.w	r3, r3, #7
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	db0a      	blt.n	80010f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	490c      	ldr	r1, [pc, #48]	; (8001118 <__NVIC_SetPriority+0x4c>)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	0112      	lsls	r2, r2, #4
 80010ec:	b2d2      	uxtb	r2, r2
 80010ee:	440b      	add	r3, r1
 80010f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010f4:	e00a      	b.n	800110c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	b2da      	uxtb	r2, r3
 80010fa:	4908      	ldr	r1, [pc, #32]	; (800111c <__NVIC_SetPriority+0x50>)
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	f003 030f 	and.w	r3, r3, #15
 8001102:	3b04      	subs	r3, #4
 8001104:	0112      	lsls	r2, r2, #4
 8001106:	b2d2      	uxtb	r2, r2
 8001108:	440b      	add	r3, r1
 800110a:	761a      	strb	r2, [r3, #24]
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	e000e100 	.word	0xe000e100
 800111c:	e000ed00 	.word	0xe000ed00

08001120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001120:	b480      	push	{r7}
 8001122:	b089      	sub	sp, #36	; 0x24
 8001124:	af00      	add	r7, sp, #0
 8001126:	60f8      	str	r0, [r7, #12]
 8001128:	60b9      	str	r1, [r7, #8]
 800112a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f1c3 0307 	rsb	r3, r3, #7
 800113a:	2b04      	cmp	r3, #4
 800113c:	bf28      	it	cs
 800113e:	2304      	movcs	r3, #4
 8001140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3304      	adds	r3, #4
 8001146:	2b06      	cmp	r3, #6
 8001148:	d902      	bls.n	8001150 <NVIC_EncodePriority+0x30>
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	3b03      	subs	r3, #3
 800114e:	e000      	b.n	8001152 <NVIC_EncodePriority+0x32>
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001154:	f04f 32ff 	mov.w	r2, #4294967295
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	fa02 f303 	lsl.w	r3, r2, r3
 800115e:	43da      	mvns	r2, r3
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	401a      	ands	r2, r3
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001168:	f04f 31ff 	mov.w	r1, #4294967295
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	fa01 f303 	lsl.w	r3, r1, r3
 8001172:	43d9      	mvns	r1, r3
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001178:	4313      	orrs	r3, r2
         );
}
 800117a:	4618      	mov	r0, r3
 800117c:	3724      	adds	r7, #36	; 0x24
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3b01      	subs	r3, #1
 8001194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001198:	d301      	bcc.n	800119e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800119a:	2301      	movs	r3, #1
 800119c:	e00f      	b.n	80011be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800119e:	4a0a      	ldr	r2, [pc, #40]	; (80011c8 <SysTick_Config+0x40>)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011a6:	210f      	movs	r1, #15
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f7ff ff8e 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <SysTick_Config+0x40>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011b6:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <SysTick_Config+0x40>)
 80011b8:	2207      	movs	r2, #7
 80011ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	e000e010 	.word	0xe000e010

080011cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff ff47 	bl	8001068 <__NVIC_SetPriorityGrouping>
}
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}

080011e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e2:	b580      	push	{r7, lr}
 80011e4:	b086      	sub	sp, #24
 80011e6:	af00      	add	r7, sp, #0
 80011e8:	4603      	mov	r3, r0
 80011ea:	60b9      	str	r1, [r7, #8]
 80011ec:	607a      	str	r2, [r7, #4]
 80011ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80011f4:	f7ff ff5c 	bl	80010b0 <__NVIC_GetPriorityGrouping>
 80011f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011fa:	687a      	ldr	r2, [r7, #4]
 80011fc:	68b9      	ldr	r1, [r7, #8]
 80011fe:	6978      	ldr	r0, [r7, #20]
 8001200:	f7ff ff8e 	bl	8001120 <NVIC_EncodePriority>
 8001204:	4602      	mov	r2, r0
 8001206:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff5d 	bl	80010cc <__NVIC_SetPriority>
}
 8001212:	bf00      	nop
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffb0 	bl	8001188 <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	e14e      	b.n	80014e2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 8140 	beq.w	80014dc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d005      	beq.n	8001274 <HAL_GPIO_Init+0x40>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d130      	bne.n	80012d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012aa:	2201      	movs	r2, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 0201 	and.w	r2, r3, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d017      	beq.n	8001312 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d123      	bne.n	8001366 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	6939      	ldr	r1, [r7, #16]
 8001362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0203 	and.w	r2, r3, #3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 809a 	beq.w	80014dc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a8:	4b55      	ldr	r3, [pc, #340]	; (8001500 <HAL_GPIO_Init+0x2cc>)
 80013aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ac:	4a54      	ldr	r2, [pc, #336]	; (8001500 <HAL_GPIO_Init+0x2cc>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6613      	str	r3, [r2, #96]	; 0x60
 80013b4:	4b52      	ldr	r3, [pc, #328]	; (8001500 <HAL_GPIO_Init+0x2cc>)
 80013b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013c0:	4a50      	ldr	r2, [pc, #320]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ea:	d013      	beq.n	8001414 <HAL_GPIO_Init+0x1e0>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a46      	ldr	r2, [pc, #280]	; (8001508 <HAL_GPIO_Init+0x2d4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d00d      	beq.n	8001410 <HAL_GPIO_Init+0x1dc>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a45      	ldr	r2, [pc, #276]	; (800150c <HAL_GPIO_Init+0x2d8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d007      	beq.n	800140c <HAL_GPIO_Init+0x1d8>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a44      	ldr	r2, [pc, #272]	; (8001510 <HAL_GPIO_Init+0x2dc>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d101      	bne.n	8001408 <HAL_GPIO_Init+0x1d4>
 8001404:	2303      	movs	r3, #3
 8001406:	e006      	b.n	8001416 <HAL_GPIO_Init+0x1e2>
 8001408:	2307      	movs	r3, #7
 800140a:	e004      	b.n	8001416 <HAL_GPIO_Init+0x1e2>
 800140c:	2302      	movs	r3, #2
 800140e:	e002      	b.n	8001416 <HAL_GPIO_Init+0x1e2>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <HAL_GPIO_Init+0x1e2>
 8001414:	2300      	movs	r3, #0
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	f002 0203 	and.w	r2, r2, #3
 800141c:	0092      	lsls	r2, r2, #2
 800141e:	4093      	lsls	r3, r2
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	4313      	orrs	r3, r2
 8001424:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001426:	4937      	ldr	r1, [pc, #220]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001434:	4b37      	ldr	r3, [pc, #220]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	43db      	mvns	r3, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4013      	ands	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4313      	orrs	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001458:	4a2e      	ldr	r2, [pc, #184]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800145e:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	43db      	mvns	r3, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001476:	2b00      	cmp	r3, #0
 8001478:	d003      	beq.n	8001482 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	4313      	orrs	r3, r2
 8001480:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001482:	4a24      	ldr	r2, [pc, #144]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43db      	mvns	r3, r3
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	4013      	ands	r3, r2
 8001496:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d003      	beq.n	80014ac <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014ac:	4a19      	ldr	r2, [pc, #100]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	43db      	mvns	r3, r3
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d003      	beq.n	80014d6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4313      	orrs	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014d6:	4a0f      	ldr	r2, [pc, #60]	; (8001514 <HAL_GPIO_Init+0x2e0>)
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	3301      	adds	r3, #1
 80014e0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	fa22 f303 	lsr.w	r3, r2, r3
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f47f aea9 	bne.w	8001244 <HAL_GPIO_Init+0x10>
  }
}
 80014f2:	bf00      	nop
 80014f4:	bf00      	nop
 80014f6:	371c      	adds	r7, #28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40021000 	.word	0x40021000
 8001504:	40010000 	.word	0x40010000
 8001508:	48000400 	.word	0x48000400
 800150c:	48000800 	.word	0x48000800
 8001510:	48000c00 	.word	0x48000c00
 8001514:	40010400 	.word	0x40010400

08001518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	460b      	mov	r3, r1
 8001522:	807b      	strh	r3, [r7, #2]
 8001524:	4613      	mov	r3, r2
 8001526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001528:	787b      	ldrb	r3, [r7, #1]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152e:	887a      	ldrh	r2, [r7, #2]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001534:	e002      	b.n	800153c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001536:	887a      	ldrh	r2, [r7, #2]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <HAL_PWREx_GetVoltageRange+0x18>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40007000 	.word	0x40007000

08001564 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001572:	d130      	bne.n	80015d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001574:	4b23      	ldr	r3, [pc, #140]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800157c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001580:	d038      	beq.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001582:	4b20      	ldr	r3, [pc, #128]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800158a:	4a1e      	ldr	r2, [pc, #120]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001590:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001592:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	2232      	movs	r2, #50	; 0x32
 8001598:	fb02 f303 	mul.w	r3, r2, r3
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800159e:	fba2 2303 	umull	r2, r3, r2, r3
 80015a2:	0c9b      	lsrs	r3, r3, #18
 80015a4:	3301      	adds	r3, #1
 80015a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a8:	e002      	b.n	80015b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b2:	695b      	ldr	r3, [r3, #20]
 80015b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015bc:	d102      	bne.n	80015c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d1f2      	bne.n	80015aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015c4:	4b0f      	ldr	r3, [pc, #60]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c6:	695b      	ldr	r3, [r3, #20]
 80015c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d0:	d110      	bne.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e00f      	b.n	80015f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015d6:	4b0b      	ldr	r3, [pc, #44]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e2:	d007      	beq.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015e4:	4b07      	ldr	r3, [pc, #28]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015ec:	4a05      	ldr	r2, [pc, #20]	; (8001604 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015f4:	2300      	movs	r3, #0
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3714      	adds	r7, #20
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40007000 	.word	0x40007000
 8001608:	20000000 	.word	0x20000000
 800160c:	431bde83 	.word	0x431bde83

08001610 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	f000 bc4f 	b.w	8001ec2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001624:	4b97      	ldr	r3, [pc, #604]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	f003 030c 	and.w	r3, r3, #12
 800162c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800162e:	4b95      	ldr	r3, [pc, #596]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f003 0310 	and.w	r3, r3, #16
 8001640:	2b00      	cmp	r3, #0
 8001642:	f000 80e6 	beq.w	8001812 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <HAL_RCC_OscConfig+0x4c>
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	2b0c      	cmp	r3, #12
 8001650:	f040 808d 	bne.w	800176e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b01      	cmp	r3, #1
 8001658:	f040 8089 	bne.w	800176e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800165c:	4b89      	ldr	r3, [pc, #548]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d006      	beq.n	8001676 <HAL_RCC_OscConfig+0x66>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d102      	bne.n	8001676 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001670:	2301      	movs	r3, #1
 8001672:	f000 bc26 	b.w	8001ec2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800167a:	4b82      	ldr	r3, [pc, #520]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0308 	and.w	r3, r3, #8
 8001682:	2b00      	cmp	r3, #0
 8001684:	d004      	beq.n	8001690 <HAL_RCC_OscConfig+0x80>
 8001686:	4b7f      	ldr	r3, [pc, #508]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800168e:	e005      	b.n	800169c <HAL_RCC_OscConfig+0x8c>
 8001690:	4b7c      	ldr	r3, [pc, #496]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001692:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001696:	091b      	lsrs	r3, r3, #4
 8001698:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800169c:	4293      	cmp	r3, r2
 800169e:	d224      	bcs.n	80016ea <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 fdd9 	bl	800225c <RCC_SetFlashLatencyFromMSIRange>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d002      	beq.n	80016b6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	f000 bc06 	b.w	8001ec2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b6:	4b73      	ldr	r3, [pc, #460]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a72      	ldr	r2, [pc, #456]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b70      	ldr	r3, [pc, #448]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	496d      	ldr	r1, [pc, #436]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d4:	4b6b      	ldr	r3, [pc, #428]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	4968      	ldr	r1, [pc, #416]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
 80016e8:	e025      	b.n	8001736 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ea:	4b66      	ldr	r3, [pc, #408]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a65      	ldr	r2, [pc, #404]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	4960      	ldr	r1, [pc, #384]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001708:	4b5e      	ldr	r3, [pc, #376]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	495b      	ldr	r1, [pc, #364]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fd98 	bl	800225c <RCC_SetFlashLatencyFromMSIRange>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e3c5      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001736:	f000 fccd 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 800173a:	4602      	mov	r2, r0
 800173c:	4b51      	ldr	r3, [pc, #324]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	4950      	ldr	r1, [pc, #320]	; (8001888 <HAL_RCC_OscConfig+0x278>)
 8001748:	5ccb      	ldrb	r3, [r1, r3]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	4a4e      	ldr	r2, [pc, #312]	; (800188c <HAL_RCC_OscConfig+0x27c>)
 8001754:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001756:	4b4e      	ldr	r3, [pc, #312]	; (8001890 <HAL_RCC_OscConfig+0x280>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fc04 	bl	8000f68 <HAL_InitTick>
 8001760:	4603      	mov	r3, r0
 8001762:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d052      	beq.n	8001810 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	e3a9      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d032      	beq.n	80017dc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001776:	4b43      	ldr	r3, [pc, #268]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a42      	ldr	r2, [pc, #264]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001782:	f7ff fc41 	bl	8001008 <HAL_GetTick>
 8001786:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800178a:	f7ff fc3d 	bl	8001008 <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e392      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800179c:	4b39      	ldr	r3, [pc, #228]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a8:	4b36      	ldr	r3, [pc, #216]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a35      	ldr	r2, [pc, #212]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017ae:	f043 0308 	orr.w	r3, r3, #8
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b33      	ldr	r3, [pc, #204]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	4930      	ldr	r1, [pc, #192]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c6:	4b2f      	ldr	r3, [pc, #188]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6a1b      	ldr	r3, [r3, #32]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	492b      	ldr	r1, [pc, #172]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
 80017da:	e01a      	b.n	8001812 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a28      	ldr	r2, [pc, #160]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fc0e 	bl	8001008 <HAL_GetTick>
 80017ec:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f0:	f7ff fc0a 	bl	8001008 <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e35f      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x1e0>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d073      	beq.n	8001906 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800181e:	6a3b      	ldr	r3, [r7, #32]
 8001820:	2b08      	cmp	r3, #8
 8001822:	d005      	beq.n	8001830 <HAL_RCC_OscConfig+0x220>
 8001824:	6a3b      	ldr	r3, [r7, #32]
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d10e      	bne.n	8001848 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d10b      	bne.n	8001848 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	4b14      	ldr	r3, [pc, #80]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d063      	beq.n	8001904 <HAL_RCC_OscConfig+0x2f4>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d15f      	bne.n	8001904 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e33c      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001850:	d106      	bne.n	8001860 <HAL_RCC_OscConfig+0x250>
 8001852:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a0b      	ldr	r2, [pc, #44]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e025      	b.n	80018ac <HAL_RCC_OscConfig+0x29c>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001868:	d114      	bne.n	8001894 <HAL_RCC_OscConfig+0x284>
 800186a:	4b06      	ldr	r3, [pc, #24]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a05      	ldr	r2, [pc, #20]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001870:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b03      	ldr	r3, [pc, #12]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a02      	ldr	r2, [pc, #8]	; (8001884 <HAL_RCC_OscConfig+0x274>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e013      	b.n	80018ac <HAL_RCC_OscConfig+0x29c>
 8001884:	40021000 	.word	0x40021000
 8001888:	08004e4c 	.word	0x08004e4c
 800188c:	20000000 	.word	0x20000000
 8001890:	20000004 	.word	0x20000004
 8001894:	4b8f      	ldr	r3, [pc, #572]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a8e      	ldr	r2, [pc, #568]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800189a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b8c      	ldr	r3, [pc, #560]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a8b      	ldr	r2, [pc, #556]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d013      	beq.n	80018dc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fba8 	bl	8001008 <HAL_GetTick>
 80018b8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fba4 	bl	8001008 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	69bb      	ldr	r3, [r7, #24]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	; 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e2f9      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ce:	4b81      	ldr	r3, [pc, #516]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x2ac>
 80018da:	e014      	b.n	8001906 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb94 	bl	8001008 <HAL_GetTick>
 80018e0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fb90 	bl	8001008 <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e2e5      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018f6:	4b77      	ldr	r3, [pc, #476]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x2d4>
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d060      	beq.n	80019d4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001912:	6a3b      	ldr	r3, [r7, #32]
 8001914:	2b04      	cmp	r3, #4
 8001916:	d005      	beq.n	8001924 <HAL_RCC_OscConfig+0x314>
 8001918:	6a3b      	ldr	r3, [r7, #32]
 800191a:	2b0c      	cmp	r3, #12
 800191c:	d119      	bne.n	8001952 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d116      	bne.n	8001952 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001924:	4b6b      	ldr	r3, [pc, #428]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_OscConfig+0x32c>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e2c2      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b65      	ldr	r3, [pc, #404]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	061b      	lsls	r3, r3, #24
 800194a:	4962      	ldr	r1, [pc, #392]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001950:	e040      	b.n	80019d4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d023      	beq.n	80019a2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800195a:	4b5e      	ldr	r3, [pc, #376]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a5d      	ldr	r2, [pc, #372]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff fb4f 	bl	8001008 <HAL_GetTick>
 800196a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196e:	f7ff fb4b 	bl	8001008 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e2a0      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001980:	4b54      	ldr	r3, [pc, #336]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198c:	4b51      	ldr	r3, [pc, #324]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	061b      	lsls	r3, r3, #24
 800199a:	494e      	ldr	r1, [pc, #312]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
 80019a0:	e018      	b.n	80019d4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a2:	4b4c      	ldr	r3, [pc, #304]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a4b      	ldr	r2, [pc, #300]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff fb2b 	bl	8001008 <HAL_GetTick>
 80019b2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff fb27 	bl	8001008 <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	69bb      	ldr	r3, [r7, #24]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e27c      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c8:	4b42      	ldr	r3, [pc, #264]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f0      	bne.n	80019b6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	f000 8082 	beq.w	8001ae6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d05f      	beq.n	8001aaa <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80019ea:	4b3a      	ldr	r3, [pc, #232]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 80019ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699a      	ldr	r2, [r3, #24]
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	f003 0310 	and.w	r3, r3, #16
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d037      	beq.n	8001a70 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d006      	beq.n	8001a18 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d101      	bne.n	8001a18 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e254      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d01b      	beq.n	8001a5a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001a22:	4b2c      	ldr	r3, [pc, #176]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a28:	4a2a      	ldr	r2, [pc, #168]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a32:	f7ff fae9 	bl	8001008 <HAL_GetTick>
 8001a36:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3a:	f7ff fae5 	bl	8001008 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b11      	cmp	r3, #17
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e23a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a4c:	4b21      	ldr	r3, [pc, #132]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ef      	bne.n	8001a3a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001a5a:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a60:	f023 0210 	bic.w	r2, r3, #16
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	491a      	ldr	r1, [pc, #104]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a70:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a76:	4a17      	ldr	r2, [pc, #92]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7ff fac2 	bl	8001008 <HAL_GetTick>
 8001a84:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff fabe 	bl	8001008 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b11      	cmp	r3, #17
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e213      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001a9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0ef      	beq.n	8001a88 <HAL_RCC_OscConfig+0x478>
 8001aa8:	e01d      	b.n	8001ae6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab0:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_RCC_OscConfig+0x4c4>)
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aba:	f7ff faa5 	bl	8001008 <HAL_GetTick>
 8001abe:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ac0:	e00a      	b.n	8001ad8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac2:	f7ff faa1 	bl	8001008 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b11      	cmp	r3, #17
 8001ace:	d903      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e1f6      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
 8001ad4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad8:	4ba9      	ldr	r3, [pc, #676]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001ada:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ade:	f003 0302 	and.w	r3, r3, #2
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1ed      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0304 	and.w	r3, r3, #4
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f000 80bd 	beq.w	8001c6e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001af4:	2300      	movs	r3, #0
 8001af6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001afa:	4ba1      	ldr	r3, [pc, #644]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d10e      	bne.n	8001b24 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	4b9e      	ldr	r3, [pc, #632]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0a:	4a9d      	ldr	r2, [pc, #628]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b10:	6593      	str	r3, [r2, #88]	; 0x58
 8001b12:	4b9b      	ldr	r3, [pc, #620]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b24:	4b97      	ldr	r3, [pc, #604]	; (8001d84 <HAL_RCC_OscConfig+0x774>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d118      	bne.n	8001b62 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b30:	4b94      	ldr	r3, [pc, #592]	; (8001d84 <HAL_RCC_OscConfig+0x774>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a93      	ldr	r2, [pc, #588]	; (8001d84 <HAL_RCC_OscConfig+0x774>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fa64 	bl	8001008 <HAL_GetTick>
 8001b40:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b44:	f7ff fa60 	bl	8001008 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1b5      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b56:	4b8b      	ldr	r3, [pc, #556]	; (8001d84 <HAL_RCC_OscConfig+0x774>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d02c      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001b6e:	4b84      	ldr	r3, [pc, #528]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b74:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b80:	497f      	ldr	r1, [pc, #508]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d010      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001b94:	4b7a      	ldr	r3, [pc, #488]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9a:	4a79      	ldr	r2, [pc, #484]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001b9c:	f043 0304 	orr.w	r3, r3, #4
 8001ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001ba4:	4b76      	ldr	r3, [pc, #472]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001baa:	4a75      	ldr	r2, [pc, #468]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bb4:	e018      	b.n	8001be8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bb6:	4b72      	ldr	r3, [pc, #456]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001bb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bbc:	4a70      	ldr	r2, [pc, #448]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc6:	e00f      	b.n	8001be8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bc8:	4b6d      	ldr	r3, [pc, #436]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001bca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bce:	4a6c      	ldr	r2, [pc, #432]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001bd0:	f023 0301 	bic.w	r3, r3, #1
 8001bd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001bd8:	4b69      	ldr	r3, [pc, #420]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bde:	4a68      	ldr	r2, [pc, #416]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001be0:	f023 0304 	bic.w	r3, r3, #4
 8001be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d016      	beq.n	8001c1e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff fa0a 	bl	8001008 <HAL_GetTick>
 8001bf4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fa06 	bl	8001008 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e159      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0e:	4b5c      	ldr	r3, [pc, #368]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d0ed      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x5e8>
 8001c1c:	e01d      	b.n	8001c5a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1e:	f7ff f9f3 	bl	8001008 <HAL_GetTick>
 8001c22:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c24:	e00a      	b.n	8001c3c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c26:	f7ff f9ef 	bl	8001008 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d901      	bls.n	8001c3c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001c38:	2303      	movs	r3, #3
 8001c3a:	e142      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c3c:	4b50      	ldr	r3, [pc, #320]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ed      	bne.n	8001c26 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001c4a:	4b4d      	ldr	r3, [pc, #308]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c50:	4a4b      	ldr	r2, [pc, #300]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d105      	bne.n	8001c6e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c62:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c66:	4a46      	ldr	r2, [pc, #280]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d03c      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d01c      	beq.n	8001cbc <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c82:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c88:	4a3d      	ldr	r2, [pc, #244]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c92:	f7ff f9b9 	bl	8001008 <HAL_GetTick>
 8001c96:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c98:	e008      	b.n	8001cac <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c9a:	f7ff f9b5 	bl	8001008 <HAL_GetTick>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d901      	bls.n	8001cac <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e10a      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cac:	4b34      	ldr	r3, [pc, #208]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001cae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0ef      	beq.n	8001c9a <HAL_RCC_OscConfig+0x68a>
 8001cba:	e01b      	b.n	8001cf4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001cbc:	4b30      	ldr	r3, [pc, #192]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc2:	4a2f      	ldr	r2, [pc, #188]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ccc:	f7ff f99c 	bl	8001008 <HAL_GetTick>
 8001cd0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001cd4:	f7ff f998 	bl	8001008 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b02      	cmp	r3, #2
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e0ed      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ce6:	4b26      	ldr	r3, [pc, #152]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001ce8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cec:	f003 0302 	and.w	r3, r3, #2
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ef      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	f000 80e1 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	f040 80b5 	bne.w	8001e72 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d08:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	f003 0203 	and.w	r2, r3, #3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d124      	bne.n	8001d66 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d26:	3b01      	subs	r3, #1
 8001d28:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d11b      	bne.n	8001d66 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d38:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d113      	bne.n	8001d66 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d48:	085b      	lsrs	r3, r3, #1
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d109      	bne.n	8001d66 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d52:	69fb      	ldr	r3, [r7, #28]
 8001d54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d05f      	beq.n	8001e26 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d66:	6a3b      	ldr	r3, [r7, #32]
 8001d68:	2b0c      	cmp	r3, #12
 8001d6a:	d05a      	beq.n	8001e22 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a03      	ldr	r2, [pc, #12]	; (8001d80 <HAL_RCC_OscConfig+0x770>)
 8001d72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d78:	f7ff f946 	bl	8001008 <HAL_GetTick>
 8001d7c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7e:	e00c      	b.n	8001d9a <HAL_RCC_OscConfig+0x78a>
 8001d80:	40021000 	.word	0x40021000
 8001d84:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff f93e 	bl	8001008 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e093      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1f0      	bne.n	8001d88 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001da6:	4b49      	ldr	r3, [pc, #292]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001da8:	68da      	ldr	r2, [r3, #12]
 8001daa:	4b49      	ldr	r3, [pc, #292]	; (8001ed0 <HAL_RCC_OscConfig+0x8c0>)
 8001dac:	4013      	ands	r3, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001db6:	3a01      	subs	r2, #1
 8001db8:	0112      	lsls	r2, r2, #4
 8001dba:	4311      	orrs	r1, r2
 8001dbc:	687a      	ldr	r2, [r7, #4]
 8001dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dc0:	0212      	lsls	r2, r2, #8
 8001dc2:	4311      	orrs	r1, r2
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dc8:	0852      	lsrs	r2, r2, #1
 8001dca:	3a01      	subs	r2, #1
 8001dcc:	0552      	lsls	r2, r2, #21
 8001dce:	4311      	orrs	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001dd4:	0852      	lsrs	r2, r2, #1
 8001dd6:	3a01      	subs	r2, #1
 8001dd8:	0652      	lsls	r2, r2, #25
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	493b      	ldr	r1, [pc, #236]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001de2:	4b3a      	ldr	r3, [pc, #232]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a39      	ldr	r2, [pc, #228]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001de8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dec:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	4a36      	ldr	r2, [pc, #216]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001df8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001dfa:	f7ff f905 	bl	8001008 <HAL_GetTick>
 8001dfe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e00:	e008      	b.n	8001e14 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e02:	f7ff f901 	bl	8001008 <HAL_GetTick>
 8001e06:	4602      	mov	r2, r0
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e056      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d0f0      	beq.n	8001e02 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e20:	e04e      	b.n	8001ec0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e04d      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e26:	4b29      	ldr	r3, [pc, #164]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d146      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a25      	ldr	r2, [pc, #148]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001e38:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e3c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e3e:	4b23      	ldr	r3, [pc, #140]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	4a22      	ldr	r2, [pc, #136]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001e44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e48:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e4a:	f7ff f8dd 	bl	8001008 <HAL_GetTick>
 8001e4e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7ff f8d9 	bl	8001008 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e02e      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e64:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d0f0      	beq.n	8001e52 <HAL_RCC_OscConfig+0x842>
 8001e70:	e026      	b.n	8001ec0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e72:	6a3b      	ldr	r3, [r7, #32]
 8001e74:	2b0c      	cmp	r3, #12
 8001e76:	d021      	beq.n	8001ebc <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e78:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a13      	ldr	r2, [pc, #76]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001e7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e84:	f7ff f8c0 	bl	8001008 <HAL_GetTick>
 8001e88:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7ff f8bc 	bl	8001008 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	69bb      	ldr	r3, [r7, #24]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e011      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9e:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d1f0      	bne.n	8001e8c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001eaa:	4b08      	ldr	r3, [pc, #32]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	4a07      	ldr	r2, [pc, #28]	; (8001ecc <HAL_RCC_OscConfig+0x8bc>)
 8001eb0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001eb4:	f023 0303 	bic.w	r3, r3, #3
 8001eb8:	60d3      	str	r3, [r2, #12]
 8001eba:	e001      	b.n	8001ec0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	e000      	b.n	8001ec2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001ec0:	2300      	movs	r3, #0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3728      	adds	r7, #40	; 0x28
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	f99f808c 	.word	0xf99f808c

08001ed4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
 8001edc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e0e7      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ee8:	4b75      	ldr	r3, [pc, #468]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0307 	and.w	r3, r3, #7
 8001ef0:	683a      	ldr	r2, [r7, #0]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d910      	bls.n	8001f18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef6:	4b72      	ldr	r3, [pc, #456]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f023 0207 	bic.w	r2, r3, #7
 8001efe:	4970      	ldr	r1, [pc, #448]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	4b6e      	ldr	r3, [pc, #440]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e0cf      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d010      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	4b66      	ldr	r3, [pc, #408]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d908      	bls.n	8001f46 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f34:	4b63      	ldr	r3, [pc, #396]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4960      	ldr	r1, [pc, #384]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d04c      	beq.n	8001fec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	2b03      	cmp	r3, #3
 8001f58:	d107      	bne.n	8001f6a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f5a:	4b5a      	ldr	r3, [pc, #360]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d121      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0a6      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d107      	bne.n	8001f82 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f72:	4b54      	ldr	r3, [pc, #336]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d115      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e09a      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f8a:	4b4e      	ldr	r3, [pc, #312]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d109      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e08e      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f9a:	4b4a      	ldr	r3, [pc, #296]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d101      	bne.n	8001faa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e086      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001faa:	4b46      	ldr	r3, [pc, #280]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f023 0203 	bic.w	r2, r3, #3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	4943      	ldr	r1, [pc, #268]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fbc:	f7ff f824 	bl	8001008 <HAL_GetTick>
 8001fc0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fc2:	e00a      	b.n	8001fda <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fc4:	f7ff f820 	bl	8001008 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e06e      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	4b3a      	ldr	r3, [pc, #232]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	f003 020c 	and.w	r2, r3, #12
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d1eb      	bne.n	8001fc4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d010      	beq.n	800201a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	4b31      	ldr	r3, [pc, #196]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002004:	429a      	cmp	r2, r3
 8002006:	d208      	bcs.n	800201a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002008:	4b2e      	ldr	r3, [pc, #184]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	492b      	ldr	r1, [pc, #172]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800201a:	4b29      	ldr	r3, [pc, #164]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f003 0307 	and.w	r3, r3, #7
 8002022:	683a      	ldr	r2, [r7, #0]
 8002024:	429a      	cmp	r2, r3
 8002026:	d210      	bcs.n	800204a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f023 0207 	bic.w	r2, r3, #7
 8002030:	4923      	ldr	r1, [pc, #140]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	4313      	orrs	r3, r2
 8002036:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <HAL_RCC_ClockConfig+0x1ec>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	683a      	ldr	r2, [r7, #0]
 8002042:	429a      	cmp	r2, r3
 8002044:	d001      	beq.n	800204a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	e036      	b.n	80020b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002056:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	4918      	ldr	r1, [pc, #96]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d009      	beq.n	8002088 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002074:	4b13      	ldr	r3, [pc, #76]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4910      	ldr	r1, [pc, #64]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002084:	4313      	orrs	r3, r2
 8002086:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002088:	f000 f824 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 800208c:	4602      	mov	r2, r0
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <HAL_RCC_ClockConfig+0x1f0>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	091b      	lsrs	r3, r3, #4
 8002094:	f003 030f 	and.w	r3, r3, #15
 8002098:	490b      	ldr	r1, [pc, #44]	; (80020c8 <HAL_RCC_ClockConfig+0x1f4>)
 800209a:	5ccb      	ldrb	r3, [r1, r3]
 800209c:	f003 031f 	and.w	r3, r3, #31
 80020a0:	fa22 f303 	lsr.w	r3, r2, r3
 80020a4:	4a09      	ldr	r2, [pc, #36]	; (80020cc <HAL_RCC_ClockConfig+0x1f8>)
 80020a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_ClockConfig+0x1fc>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe ff5b 	bl	8000f68 <HAL_InitTick>
 80020b2:	4603      	mov	r3, r0
 80020b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80020b6:	7afb      	ldrb	r3, [r7, #11]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3710      	adds	r7, #16
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40022000 	.word	0x40022000
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08004e4c 	.word	0x08004e4c
 80020cc:	20000000 	.word	0x20000000
 80020d0:	20000004 	.word	0x20000004

080020d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b089      	sub	sp, #36	; 0x24
 80020d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020e2:	4b3e      	ldr	r3, [pc, #248]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
 80020ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020ec:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0x34>
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	2b0c      	cmp	r3, #12
 8002100:	d121      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d11e      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002108:	4b34      	ldr	r3, [pc, #208]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d107      	bne.n	8002124 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002114:	4b31      	ldr	r3, [pc, #196]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002116:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	61fb      	str	r3, [r7, #28]
 8002122:	e005      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002124:	4b2d      	ldr	r3, [pc, #180]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 030f 	and.w	r3, r3, #15
 800212e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002130:	4a2b      	ldr	r2, [pc, #172]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002138:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d10d      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002144:	e00a      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b04      	cmp	r3, #4
 800214a:	d102      	bne.n	8002152 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800214c:	4b25      	ldr	r3, [pc, #148]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	e004      	b.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d101      	bne.n	800215c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002158:	4b23      	ldr	r3, [pc, #140]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800215a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	2b0c      	cmp	r3, #12
 8002160:	d134      	bne.n	80021cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002162:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f003 0303 	and.w	r3, r3, #3
 800216a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d003      	beq.n	800217a <HAL_RCC_GetSysClockFreq+0xa6>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d003      	beq.n	8002180 <HAL_RCC_GetSysClockFreq+0xac>
 8002178:	e005      	b.n	8002186 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800217a:	4b1a      	ldr	r3, [pc, #104]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800217c:	617b      	str	r3, [r7, #20]
      break;
 800217e:	e005      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002180:	4b19      	ldr	r3, [pc, #100]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002182:	617b      	str	r3, [r7, #20]
      break;
 8002184:	e002      	b.n	800218c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	617b      	str	r3, [r7, #20]
      break;
 800218a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	091b      	lsrs	r3, r3, #4
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	3301      	adds	r3, #1
 8002198:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	fb03 f202 	mul.w	r2, r3, r2
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021b2:	4b0a      	ldr	r3, [pc, #40]	; (80021dc <HAL_RCC_GetSysClockFreq+0x108>)
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	0e5b      	lsrs	r3, r3, #25
 80021b8:	f003 0303 	and.w	r3, r3, #3
 80021bc:	3301      	adds	r3, #1
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021cc:	69bb      	ldr	r3, [r7, #24]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3724      	adds	r7, #36	; 0x24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08004e64 	.word	0x08004e64
 80021e4:	00f42400 	.word	0x00f42400
 80021e8:	007a1200 	.word	0x007a1200

080021ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_RCC_GetHCLKFreq+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000000 	.word	0x20000000

08002204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002208:	f7ff fff0 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0a1b      	lsrs	r3, r3, #8
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4904      	ldr	r1, [pc, #16]	; (800222c <HAL_RCC_GetPCLK1Freq+0x28>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40021000 	.word	0x40021000
 800222c:	08004e5c 	.word	0x08004e5c

08002230 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002234:	f7ff ffda 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 8002238:	4602      	mov	r2, r0
 800223a:	4b06      	ldr	r3, [pc, #24]	; (8002254 <HAL_RCC_GetPCLK2Freq+0x24>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	0adb      	lsrs	r3, r3, #11
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	4904      	ldr	r1, [pc, #16]	; (8002258 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002246:	5ccb      	ldrb	r3, [r1, r3]
 8002248:	f003 031f 	and.w	r3, r3, #31
 800224c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002250:	4618      	mov	r0, r3
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40021000 	.word	0x40021000
 8002258:	08004e5c 	.word	0x08004e5c

0800225c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002264:	2300      	movs	r3, #0
 8002266:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800226a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d003      	beq.n	800227c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002274:	f7ff f968 	bl	8001548 <HAL_PWREx_GetVoltageRange>
 8002278:	6178      	str	r0, [r7, #20]
 800227a:	e014      	b.n	80022a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800227c:	4b25      	ldr	r3, [pc, #148]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002280:	4a24      	ldr	r2, [pc, #144]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002286:	6593      	str	r3, [r2, #88]	; 0x58
 8002288:	4b22      	ldr	r3, [pc, #136]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002294:	f7ff f958 	bl	8001548 <HAL_PWREx_GetVoltageRange>
 8002298:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800229a:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229e:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022ac:	d10b      	bne.n	80022c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b80      	cmp	r3, #128	; 0x80
 80022b2:	d919      	bls.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2ba0      	cmp	r3, #160	; 0xa0
 80022b8:	d902      	bls.n	80022c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ba:	2302      	movs	r3, #2
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	e013      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c0:	2301      	movs	r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
 80022c4:	e010      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2b80      	cmp	r3, #128	; 0x80
 80022ca:	d902      	bls.n	80022d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022cc:	2303      	movs	r3, #3
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	e00a      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2b80      	cmp	r3, #128	; 0x80
 80022d6:	d102      	bne.n	80022de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022d8:	2302      	movs	r3, #2
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	e004      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2b70      	cmp	r3, #112	; 0x70
 80022e2:	d101      	bne.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022e4:	2301      	movs	r3, #1
 80022e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022e8:	4b0b      	ldr	r3, [pc, #44]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 0207 	bic.w	r2, r3, #7
 80022f0:	4909      	ldr	r1, [pc, #36]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022f8:	4b07      	ldr	r3, [pc, #28]	; (8002318 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}
 8002314:	40021000 	.word	0x40021000
 8002318:	40022000 	.word	0x40022000

0800231c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002324:	2300      	movs	r3, #0
 8002326:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002328:	2300      	movs	r3, #0
 800232a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 809e 	beq.w	8002476 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800233e:	4b46      	ldr	r3, [pc, #280]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800234a:	2301      	movs	r3, #1
 800234c:	e000      	b.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800234e:	2300      	movs	r3, #0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d00d      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002354:	4b40      	ldr	r3, [pc, #256]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002358:	4a3f      	ldr	r2, [pc, #252]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800235a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235e:	6593      	str	r3, [r2, #88]	; 0x58
 8002360:	4b3d      	ldr	r3, [pc, #244]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800236c:	2301      	movs	r3, #1
 800236e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002370:	4b3a      	ldr	r3, [pc, #232]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a39      	ldr	r2, [pc, #228]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800237c:	f7fe fe44 	bl	8001008 <HAL_GetTick>
 8002380:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002382:	e009      	b.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002384:	f7fe fe40 	bl	8001008 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d902      	bls.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	74fb      	strb	r3, [r7, #19]
        break;
 8002396:	e005      	b.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002398:	4b30      	ldr	r3, [pc, #192]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0ef      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d15a      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023aa:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d01e      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0xde>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d019      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023d0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023d2:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	4a1f      	ldr	r2, [pc, #124]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	4a1b      	ldr	r2, [pc, #108]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023f2:	4a19      	ldr	r2, [pc, #100]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 0301 	and.w	r3, r3, #1
 8002400:	2b00      	cmp	r3, #0
 8002402:	d016      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7fe fe00 	bl	8001008 <HAL_GetTick>
 8002408:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240a:	e00b      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7fe fdfc 	bl	8001008 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	; 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d902      	bls.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	74fb      	strb	r3, [r7, #19]
            break;
 8002422:	e006      	b.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0ec      	beq.n	800240c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002432:	7cfb      	ldrb	r3, [r7, #19]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10b      	bne.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	4904      	ldr	r1, [pc, #16]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800244e:	e009      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	74bb      	strb	r3, [r7, #18]
 8002454:	e006      	b.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002464:	7c7b      	ldrb	r3, [r7, #17]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d105      	bne.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246a:	4b6e      	ldr	r3, [pc, #440]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800246c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246e:	4a6d      	ldr	r2, [pc, #436]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002474:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00a      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002482:	4b68      	ldr	r3, [pc, #416]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002488:	f023 0203 	bic.w	r2, r3, #3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4964      	ldr	r1, [pc, #400]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002492:	4313      	orrs	r3, r2
 8002494:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024a4:	4b5f      	ldr	r3, [pc, #380]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f023 020c 	bic.w	r2, r3, #12
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	495c      	ldr	r1, [pc, #368]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00a      	beq.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024c6:	4b57      	ldr	r3, [pc, #348]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024cc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	4953      	ldr	r1, [pc, #332]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0320 	and.w	r3, r3, #32
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00a      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024e8:	4b4e      	ldr	r3, [pc, #312]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	494b      	ldr	r1, [pc, #300]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002506:	2b00      	cmp	r3, #0
 8002508:	d00a      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800250a:	4b46      	ldr	r3, [pc, #280]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800250c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002510:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	4942      	ldr	r1, [pc, #264]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800251a:	4313      	orrs	r3, r2
 800251c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00a      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800252c:	4b3d      	ldr	r3, [pc, #244]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800252e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002532:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	493a      	ldr	r1, [pc, #232]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800253c:	4313      	orrs	r3, r2
 800253e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00a      	beq.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800254e:	4b35      	ldr	r3, [pc, #212]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002554:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	695b      	ldr	r3, [r3, #20]
 800255c:	4931      	ldr	r1, [pc, #196]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800255e:	4313      	orrs	r3, r2
 8002560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00a      	beq.n	8002586 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002570:	4b2c      	ldr	r3, [pc, #176]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	4929      	ldr	r1, [pc, #164]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00a      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002592:	4b24      	ldr	r3, [pc, #144]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002598:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	4920      	ldr	r1, [pc, #128]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d015      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025b4:	4b1b      	ldr	r3, [pc, #108]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c2:	4918      	ldr	r1, [pc, #96]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025d2:	d105      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025de:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d015      	beq.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025fa:	490a      	ldr	r1, [pc, #40]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800260a:	d105      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800260c:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	4a04      	ldr	r2, [pc, #16]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002616:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002618:	7cbb      	ldrb	r3, [r7, #18]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	40021000 	.word	0x40021000

08002628 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d101      	bne.n	800263a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e095      	b.n	8002766 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263e:	2b00      	cmp	r3, #0
 8002640:	d108      	bne.n	8002654 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800264a:	d009      	beq.n	8002660 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	61da      	str	r2, [r3, #28]
 8002652:	e005      	b.n	8002660 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2200      	movs	r2, #0
 8002658:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe f9a4 	bl	80009c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2202      	movs	r2, #2
 8002684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002696:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026a0:	d902      	bls.n	80026a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	e002      	b.n	80026ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80026b6:	d007      	beq.n	80026c8 <HAL_SPI_Init+0xa0>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68db      	ldr	r3, [r3, #12]
 80026bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026c0:	d002      	beq.n	80026c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	431a      	orrs	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	699b      	ldr	r3, [r3, #24]
 80026f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69db      	ldr	r3, [r3, #28]
 80026fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270a:	ea42 0103 	orr.w	r1, r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	0c1b      	lsrs	r3, r3, #16
 8002724:	f003 0204 	and.w	r2, r3, #4
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	f003 0310 	and.w	r3, r3, #16
 8002730:	431a      	orrs	r2, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	431a      	orrs	r2, r3
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002744:	ea42 0103 	orr.w	r1, r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b088      	sub	sp, #32
 8002772:	af00      	add	r7, sp, #0
 8002774:	60f8      	str	r0, [r7, #12]
 8002776:	60b9      	str	r1, [r7, #8]
 8002778:	603b      	str	r3, [r7, #0]
 800277a:	4613      	mov	r3, r2
 800277c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800277e:	2300      	movs	r3, #0
 8002780:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002788:	2b01      	cmp	r3, #1
 800278a:	d101      	bne.n	8002790 <HAL_SPI_Transmit+0x22>
 800278c:	2302      	movs	r3, #2
 800278e:	e158      	b.n	8002a42 <HAL_SPI_Transmit+0x2d4>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002798:	f7fe fc36 	bl	8001008 <HAL_GetTick>
 800279c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800279e:	88fb      	ldrh	r3, [r7, #6]
 80027a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d002      	beq.n	80027b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027b2:	e13d      	b.n	8002a30 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_SPI_Transmit+0x52>
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d102      	bne.n	80027c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80027c4:	e134      	b.n	8002a30 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2203      	movs	r2, #3
 80027ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	68ba      	ldr	r2, [r7, #8]
 80027d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	88fa      	ldrh	r2, [r7, #6]
 80027de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	88fa      	ldrh	r2, [r7, #6]
 80027e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2200      	movs	r2, #0
 8002806:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002810:	d10f      	bne.n	8002832 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002820:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002830:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283c:	2b40      	cmp	r3, #64	; 0x40
 800283e:	d007      	beq.n	8002850 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800284e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002858:	d94b      	bls.n	80028f2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d002      	beq.n	8002868 <HAL_SPI_Transmit+0xfa>
 8002862:	8afb      	ldrh	r3, [r7, #22]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d13e      	bne.n	80028e6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	881a      	ldrh	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	1c9a      	adds	r2, r3, #2
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002882:	b29b      	uxth	r3, r3
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800288c:	e02b      	b.n	80028e6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 0302 	and.w	r3, r3, #2
 8002898:	2b02      	cmp	r3, #2
 800289a:	d112      	bne.n	80028c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a0:	881a      	ldrh	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ac:	1c9a      	adds	r2, r3, #2
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028b6:	b29b      	uxth	r3, r3
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80028c0:	e011      	b.n	80028e6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80028c2:	f7fe fba1 	bl	8001008 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	683a      	ldr	r2, [r7, #0]
 80028ce:	429a      	cmp	r2, r3
 80028d0:	d803      	bhi.n	80028da <HAL_SPI_Transmit+0x16c>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d8:	d102      	bne.n	80028e0 <HAL_SPI_Transmit+0x172>
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d102      	bne.n	80028e6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80028e4:	e0a4      	b.n	8002a30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1ce      	bne.n	800288e <HAL_SPI_Transmit+0x120>
 80028f0:	e07c      	b.n	80029ec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d002      	beq.n	8002900 <HAL_SPI_Transmit+0x192>
 80028fa:	8afb      	ldrh	r3, [r7, #22]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d170      	bne.n	80029e2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002904:	b29b      	uxth	r3, r3
 8002906:	2b01      	cmp	r3, #1
 8002908:	d912      	bls.n	8002930 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800290e:	881a      	ldrh	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800291a:	1c9a      	adds	r2, r3, #2
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002924:	b29b      	uxth	r3, r3
 8002926:	3b02      	subs	r3, #2
 8002928:	b29a      	uxth	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800292e:	e058      	b.n	80029e2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	330c      	adds	r3, #12
 800293a:	7812      	ldrb	r2, [r2, #0]
 800293c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002942:	1c5a      	adds	r2, r3, #1
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800294c:	b29b      	uxth	r3, r3
 800294e:	3b01      	subs	r3, #1
 8002950:	b29a      	uxth	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002956:	e044      	b.n	80029e2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b02      	cmp	r3, #2
 8002964:	d12b      	bne.n	80029be <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800296a:	b29b      	uxth	r3, r3
 800296c:	2b01      	cmp	r3, #1
 800296e:	d912      	bls.n	8002996 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002974:	881a      	ldrh	r2, [r3, #0]
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	1c9a      	adds	r2, r3, #2
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800298a:	b29b      	uxth	r3, r3
 800298c:	3b02      	subs	r3, #2
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002994:	e025      	b.n	80029e2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	330c      	adds	r3, #12
 80029a0:	7812      	ldrb	r2, [r2, #0]
 80029a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a8:	1c5a      	adds	r2, r3, #1
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b2:	b29b      	uxth	r3, r3
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029bc:	e011      	b.n	80029e2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029be:	f7fe fb23 	bl	8001008 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	683a      	ldr	r2, [r7, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d803      	bhi.n	80029d6 <HAL_SPI_Transmit+0x268>
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d4:	d102      	bne.n	80029dc <HAL_SPI_Transmit+0x26e>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d102      	bne.n	80029e2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80029e0:	e026      	b.n	8002a30 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1b5      	bne.n	8002958 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	6839      	ldr	r1, [r7, #0]
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f000 fce3 	bl	80033bc <SPI_EndRxTxTransaction>
 80029f6:	4603      	mov	r3, r0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d002      	beq.n	8002a02 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10a      	bne.n	8002a20 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	77fb      	strb	r3, [r7, #31]
 8002a2c:	e000      	b.n	8002a30 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002a2e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2201      	movs	r2, #1
 8002a34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002a40:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3720      	adds	r7, #32
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a4a:	b580      	push	{r7, lr}
 8002a4c:	b088      	sub	sp, #32
 8002a4e:	af02      	add	r7, sp, #8
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	603b      	str	r3, [r7, #0]
 8002a56:	4613      	mov	r3, r2
 8002a58:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a66:	d112      	bne.n	8002a8e <HAL_SPI_Receive+0x44>
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10e      	bne.n	8002a8e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2204      	movs	r2, #4
 8002a74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a78:	88fa      	ldrh	r2, [r7, #6]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f910 	bl	8002caa <HAL_SPI_TransmitReceive>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	e109      	b.n	8002ca2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_SPI_Receive+0x52>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e102      	b.n	8002ca2 <HAL_SPI_Receive+0x258>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002aa4:	f7fe fab0 	bl	8001008 <HAL_GetTick>
 8002aa8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d002      	beq.n	8002abc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ab6:	2302      	movs	r3, #2
 8002ab8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002aba:	e0e9      	b.n	8002c90 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d002      	beq.n	8002ac8 <HAL_SPI_Receive+0x7e>
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002acc:	e0e0      	b.n	8002c90 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2204      	movs	r2, #4
 8002ad2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	88fa      	ldrh	r2, [r7, #6]
 8002ae6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	88fa      	ldrh	r2, [r7, #6]
 8002aee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2200      	movs	r2, #0
 8002af6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b18:	d908      	bls.n	8002b2c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b28:	605a      	str	r2, [r3, #4]
 8002b2a:	e007      	b.n	8002b3c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002b3a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b44:	d10f      	bne.n	8002b66 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b54:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002b64:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b70:	2b40      	cmp	r3, #64	; 0x40
 8002b72:	d007      	beq.n	8002b84 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b82:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b8c:	d867      	bhi.n	8002c5e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002b8e:	e030      	b.n	8002bf2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d117      	bne.n	8002bce <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f103 020c 	add.w	r2, r3, #12
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	7812      	ldrb	r2, [r2, #0]
 8002bac:	b2d2      	uxtb	r2, r2
 8002bae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	1c5a      	adds	r2, r3, #1
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bc0:	b29b      	uxth	r3, r3
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002bcc:	e011      	b.n	8002bf2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bce:	f7fe fa1b 	bl	8001008 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d803      	bhi.n	8002be6 <HAL_SPI_Receive+0x19c>
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d102      	bne.n	8002bec <HAL_SPI_Receive+0x1a2>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002bec:	2303      	movs	r3, #3
 8002bee:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002bf0:	e04e      	b.n	8002c90 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1c8      	bne.n	8002b90 <HAL_SPI_Receive+0x146>
 8002bfe:	e034      	b.n	8002c6a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d115      	bne.n	8002c3a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	68da      	ldr	r2, [r3, #12]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	b292      	uxth	r2, r2
 8002c1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c20:	1c9a      	adds	r2, r3, #2
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002c38:	e011      	b.n	8002c5e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c3a:	f7fe f9e5 	bl	8001008 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d803      	bhi.n	8002c52 <HAL_SPI_Receive+0x208>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c50:	d102      	bne.n	8002c58 <HAL_SPI_Receive+0x20e>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d102      	bne.n	8002c5e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002c5c:	e018      	b.n	8002c90 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d1ca      	bne.n	8002c00 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	6839      	ldr	r1, [r7, #0]
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 fb4c 	bl	800330c <SPI_EndRxTransaction>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d002      	beq.n	8002c80 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2220      	movs	r2, #32
 8002c7e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d002      	beq.n	8002c8e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	75fb      	strb	r3, [r7, #23]
 8002c8c:	e000      	b.n	8002c90 <HAL_SPI_Receive+0x246>
  }

error :
 8002c8e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002ca0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b08a      	sub	sp, #40	; 0x28
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	60f8      	str	r0, [r7, #12]
 8002cb2:	60b9      	str	r1, [r7, #8]
 8002cb4:	607a      	str	r2, [r7, #4]
 8002cb6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d101      	bne.n	8002cd0 <HAL_SPI_TransmitReceive+0x26>
 8002ccc:	2302      	movs	r3, #2
 8002cce:	e1fb      	b.n	80030c8 <HAL_SPI_TransmitReceive+0x41e>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cd8:	f7fe f996 	bl	8001008 <HAL_GetTick>
 8002cdc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ce4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002cec:	887b      	ldrh	r3, [r7, #2]
 8002cee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002cf0:	887b      	ldrh	r3, [r7, #2]
 8002cf2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002cf4:	7efb      	ldrb	r3, [r7, #27]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d00e      	beq.n	8002d18 <HAL_SPI_TransmitReceive+0x6e>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d00:	d106      	bne.n	8002d10 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d102      	bne.n	8002d10 <HAL_SPI_TransmitReceive+0x66>
 8002d0a:	7efb      	ldrb	r3, [r7, #27]
 8002d0c:	2b04      	cmp	r3, #4
 8002d0e:	d003      	beq.n	8002d18 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002d10:	2302      	movs	r3, #2
 8002d12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d16:	e1cd      	b.n	80030b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d005      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x80>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d002      	beq.n	8002d2a <HAL_SPI_TransmitReceive+0x80>
 8002d24:	887b      	ldrh	r3, [r7, #2]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002d30:	e1c0      	b.n	80030b4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d003      	beq.n	8002d46 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2205      	movs	r2, #5
 8002d42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	887a      	ldrh	r2, [r7, #2]
 8002d56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	887a      	ldrh	r2, [r7, #2]
 8002d5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	68ba      	ldr	r2, [r7, #8]
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	887a      	ldrh	r2, [r7, #2]
 8002d72:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d88:	d802      	bhi.n	8002d90 <HAL_SPI_TransmitReceive+0xe6>
 8002d8a:	8a3b      	ldrh	r3, [r7, #16]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d908      	bls.n	8002da2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	e007      	b.n	8002db2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002db0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d007      	beq.n	8002dd0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dd8:	d97c      	bls.n	8002ed4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_SPI_TransmitReceive+0x13e>
 8002de2:	8a7b      	ldrh	r3, [r7, #18]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d169      	bne.n	8002ebc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	1c9a      	adds	r2, r3, #2
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e0c:	e056      	b.n	8002ebc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d11b      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x1aa>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d016      	beq.n	8002e54 <HAL_SPI_TransmitReceive+0x1aa>
 8002e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d113      	bne.n	8002e54 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	881a      	ldrh	r2, [r3, #0]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3c:	1c9a      	adds	r2, r3, #2
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e50:	2300      	movs	r3, #0
 8002e52:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d11c      	bne.n	8002e9c <HAL_SPI_TransmitReceive+0x1f2>
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d016      	beq.n	8002e9c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68da      	ldr	r2, [r3, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e78:	b292      	uxth	r2, r2
 8002e7a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e80:	1c9a      	adds	r2, r3, #2
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002e9c:	f7fe f8b4 	bl	8001008 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d807      	bhi.n	8002ebc <HAL_SPI_TransmitReceive+0x212>
 8002eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb2:	d003      	beq.n	8002ebc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002eba:	e0fb      	b.n	80030b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1a3      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x164>
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d19d      	bne.n	8002e0e <HAL_SPI_TransmitReceive+0x164>
 8002ed2:	e0df      	b.n	8003094 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_SPI_TransmitReceive+0x23a>
 8002edc:	8a7b      	ldrh	r3, [r7, #18]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	f040 80cb 	bne.w	800307a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d912      	bls.n	8002f14 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef2:	881a      	ldrh	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	1c9a      	adds	r2, r3, #2
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b02      	subs	r3, #2
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f12:	e0b2      	b.n	800307a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	330c      	adds	r3, #12
 8002f1e:	7812      	ldrb	r2, [r2, #0]
 8002f20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f26:	1c5a      	adds	r2, r3, #1
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	3b01      	subs	r3, #1
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002f3a:	e09e      	b.n	800307a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d134      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x30a>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d02f      	beq.n	8002fb4 <HAL_SPI_TransmitReceive+0x30a>
 8002f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d12c      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d912      	bls.n	8002f8a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f68:	881a      	ldrh	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f74:	1c9a      	adds	r2, r3, #2
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b02      	subs	r3, #2
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f88:	e012      	b.n	8002fb0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	330c      	adds	r3, #12
 8002f94:	7812      	ldrb	r2, [r2, #0]
 8002f96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9c:	1c5a      	adds	r2, r3, #1
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d148      	bne.n	8003054 <HAL_SPI_TransmitReceive+0x3aa>
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d042      	beq.n	8003054 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fd4:	b29b      	uxth	r3, r3
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d923      	bls.n	8003022 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68da      	ldr	r2, [r3, #12]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	b292      	uxth	r2, r2
 8002fe6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	1c9a      	adds	r2, r3, #2
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ff8:	b29b      	uxth	r3, r3
 8002ffa:	3b02      	subs	r3, #2
 8002ffc:	b29a      	uxth	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	d81f      	bhi.n	8003050 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	685a      	ldr	r2, [r3, #4]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800301e:	605a      	str	r2, [r3, #4]
 8003020:	e016      	b.n	8003050 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f103 020c 	add.w	r2, r3, #12
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	7812      	ldrb	r2, [r2, #0]
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003038:	1c5a      	adds	r2, r3, #1
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003044:	b29b      	uxth	r3, r3
 8003046:	3b01      	subs	r3, #1
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003050:	2301      	movs	r3, #1
 8003052:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003054:	f7fd ffd8 	bl	8001008 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003060:	429a      	cmp	r2, r3
 8003062:	d803      	bhi.n	800306c <HAL_SPI_TransmitReceive+0x3c2>
 8003064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003066:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306a:	d102      	bne.n	8003072 <HAL_SPI_TransmitReceive+0x3c8>
 800306c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800306e:	2b00      	cmp	r3, #0
 8003070:	d103      	bne.n	800307a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003078:	e01c      	b.n	80030b4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800307e:	b29b      	uxth	r3, r3
 8003080:	2b00      	cmp	r3, #0
 8003082:	f47f af5b 	bne.w	8002f3c <HAL_SPI_TransmitReceive+0x292>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	f47f af54 	bne.w	8002f3c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003094:	69fa      	ldr	r2, [r7, #28]
 8003096:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f98f 	bl	80033bc <SPI_EndRxTxTransaction>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d006      	beq.n	80030b2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2220      	movs	r2, #32
 80030ae:	661a      	str	r2, [r3, #96]	; 0x60
 80030b0:	e000      	b.n	80030b4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80030b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80030c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3728      	adds	r7, #40	; 0x28
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b088      	sub	sp, #32
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	603b      	str	r3, [r7, #0]
 80030dc:	4613      	mov	r3, r2
 80030de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80030e0:	f7fd ff92 	bl	8001008 <HAL_GetTick>
 80030e4:	4602      	mov	r2, r0
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	4413      	add	r3, r2
 80030ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80030f0:	f7fd ff8a 	bl	8001008 <HAL_GetTick>
 80030f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80030f6:	4b39      	ldr	r3, [pc, #228]	; (80031dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	015b      	lsls	r3, r3, #5
 80030fc:	0d1b      	lsrs	r3, r3, #20
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	fb02 f303 	mul.w	r3, r2, r3
 8003104:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003106:	e054      	b.n	80031b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800310e:	d050      	beq.n	80031b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003110:	f7fd ff7a 	bl	8001008 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	69bb      	ldr	r3, [r7, #24]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	69fa      	ldr	r2, [r7, #28]
 800311c:	429a      	cmp	r2, r3
 800311e:	d902      	bls.n	8003126 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d13d      	bne.n	80031a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003134:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800313e:	d111      	bne.n	8003164 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003148:	d004      	beq.n	8003154 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003152:	d107      	bne.n	8003164 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681a      	ldr	r2, [r3, #0]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003162:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003168:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800316c:	d10f      	bne.n	800318e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800318c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e017      	b.n	80031d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d101      	bne.n	80031ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4013      	ands	r3, r2
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	429a      	cmp	r2, r3
 80031c0:	bf0c      	ite	eq
 80031c2:	2301      	moveq	r3, #1
 80031c4:	2300      	movne	r3, #0
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	461a      	mov	r2, r3
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d19b      	bne.n	8003108 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	20000000 	.word	0x20000000

080031e0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b08a      	sub	sp, #40	; 0x28
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
 80031ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80031ee:	2300      	movs	r3, #0
 80031f0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80031f2:	f7fd ff09 	bl	8001008 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	4413      	add	r3, r2
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003202:	f7fd ff01 	bl	8001008 <HAL_GetTick>
 8003206:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	330c      	adds	r3, #12
 800320e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003210:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4613      	mov	r3, r2
 8003216:	009b      	lsls	r3, r3, #2
 8003218:	4413      	add	r3, r2
 800321a:	00da      	lsls	r2, r3, #3
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	0d1b      	lsrs	r3, r3, #20
 8003220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003228:	e060      	b.n	80032ec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003230:	d107      	bne.n	8003242 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d104      	bne.n	8003242 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	b2db      	uxtb	r3, r3
 800323e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003240:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d050      	beq.n	80032ec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800324a:	f7fd fedd 	bl	8001008 <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003256:	429a      	cmp	r2, r3
 8003258:	d902      	bls.n	8003260 <SPI_WaitFifoStateUntilTimeout+0x80>
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	2b00      	cmp	r3, #0
 800325e:	d13d      	bne.n	80032dc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800326e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003278:	d111      	bne.n	800329e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003282:	d004      	beq.n	800328e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800328c:	d107      	bne.n	800329e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800329c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032a6:	d10f      	bne.n	80032c8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80032c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e010      	b.n	80032fe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d101      	bne.n	80032e6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80032e2:	2300      	movs	r3, #0
 80032e4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	3b01      	subs	r3, #1
 80032ea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	4013      	ands	r3, r2
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d196      	bne.n	800322a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3728      	adds	r7, #40	; 0x28
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	20000000 	.word	0x20000000

0800330c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af02      	add	r7, sp, #8
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003320:	d111      	bne.n	8003346 <SPI_EndRxTransaction+0x3a>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800332a:	d004      	beq.n	8003336 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003334:	d107      	bne.n	8003346 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	9300      	str	r3, [sp, #0]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2200      	movs	r2, #0
 800334e:	2180      	movs	r1, #128	; 0x80
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f7ff febd 	bl	80030d0 <SPI_WaitFlagStateUntilTimeout>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d007      	beq.n	800336c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003360:	f043 0220 	orr.w	r2, r3, #32
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003368:	2303      	movs	r3, #3
 800336a:	e023      	b.n	80033b4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003374:	d11d      	bne.n	80033b2 <SPI_EndRxTransaction+0xa6>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800337e:	d004      	beq.n	800338a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003388:	d113      	bne.n	80033b2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	2200      	movs	r2, #0
 8003392:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f7ff ff22 	bl	80031e0 <SPI_WaitFifoStateUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a6:	f043 0220 	orr.w	r2, r3, #32
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80033ae:	2303      	movs	r3, #3
 80033b0:	e000      	b.n	80033b4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80033b2:	2300      	movs	r3, #0
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b086      	sub	sp, #24
 80033c0:	af02      	add	r7, sp, #8
 80033c2:	60f8      	str	r0, [r7, #12]
 80033c4:	60b9      	str	r1, [r7, #8]
 80033c6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f7ff ff03 	bl	80031e0 <SPI_WaitFifoStateUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d007      	beq.n	80033f0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e4:	f043 0220 	orr.w	r2, r3, #32
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e027      	b.n	8003440 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2200      	movs	r2, #0
 80033f8:	2180      	movs	r1, #128	; 0x80
 80033fa:	68f8      	ldr	r0, [r7, #12]
 80033fc:	f7ff fe68 	bl	80030d0 <SPI_WaitFlagStateUntilTimeout>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800340a:	f043 0220 	orr.w	r2, r3, #32
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e014      	b.n	8003440 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	2200      	movs	r2, #0
 800341e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f7ff fedc 	bl	80031e0 <SPI_WaitFifoStateUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d007      	beq.n	800343e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003432:	f043 0220 	orr.w	r2, r3, #32
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e000      	b.n	8003440 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e040      	b.n	80034dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd faf0 	bl	8000a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2224      	movs	r2, #36	; 0x24
 8003474:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0201 	bic.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f8c0 	bl	800360c <UART_SetConfig>
 800348c:	4603      	mov	r3, r0
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e022      	b.n	80034dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	2b00      	cmp	r3, #0
 800349c:	d002      	beq.n	80034a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fb0e 	bl	8003ac0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 fb95 	bl	8003c04 <UART_CheckIdleState>
 80034da:	4603      	mov	r3, r0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3708      	adds	r7, #8
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08a      	sub	sp, #40	; 0x28
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	603b      	str	r3, [r7, #0]
 80034f0:	4613      	mov	r3, r2
 80034f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f8:	2b20      	cmp	r3, #32
 80034fa:	f040 8082 	bne.w	8003602 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <HAL_UART_Transmit+0x26>
 8003504:	88fb      	ldrh	r3, [r7, #6]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e07a      	b.n	8003604 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003514:	2b01      	cmp	r3, #1
 8003516:	d101      	bne.n	800351c <HAL_UART_Transmit+0x38>
 8003518:	2302      	movs	r3, #2
 800351a:	e073      	b.n	8003604 <HAL_UART_Transmit+0x120>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2221      	movs	r2, #33	; 0x21
 8003530:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003532:	f7fd fd69 	bl	8001008 <HAL_GetTick>
 8003536:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	88fa      	ldrh	r2, [r7, #6]
 800353c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	88fa      	ldrh	r2, [r7, #6]
 8003544:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003550:	d108      	bne.n	8003564 <HAL_UART_Transmit+0x80>
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d104      	bne.n	8003564 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800355a:	2300      	movs	r3, #0
 800355c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	61bb      	str	r3, [r7, #24]
 8003562:	e003      	b.n	800356c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003568:	2300      	movs	r3, #0
 800356a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003574:	e02d      	b.n	80035d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	2200      	movs	r2, #0
 800357e:	2180      	movs	r1, #128	; 0x80
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f000 fb88 	bl	8003c96 <UART_WaitOnFlagUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d001      	beq.n	8003590 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e039      	b.n	8003604 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d10b      	bne.n	80035ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	881a      	ldrh	r2, [r3, #0]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035a2:	b292      	uxth	r2, r2
 80035a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	3302      	adds	r3, #2
 80035aa:	61bb      	str	r3, [r7, #24]
 80035ac:	e008      	b.n	80035c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	781a      	ldrb	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	b292      	uxth	r2, r2
 80035b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	3301      	adds	r3, #1
 80035be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1cb      	bne.n	8003576 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2200      	movs	r2, #0
 80035e6:	2140      	movs	r1, #64	; 0x40
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f000 fb54 	bl	8003c96 <UART_WaitOnFlagUntilTimeout>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e005      	b.n	8003604 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e000      	b.n	8003604 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003602:	2302      	movs	r3, #2
  }
}
 8003604:	4618      	mov	r0, r3
 8003606:	3720      	adds	r7, #32
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800360c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003610:	b08a      	sub	sp, #40	; 0x28
 8003612:	af00      	add	r7, sp, #0
 8003614:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689a      	ldr	r2, [r3, #8]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	691b      	ldr	r3, [r3, #16]
 8003624:	431a      	orrs	r2, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	431a      	orrs	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	4313      	orrs	r3, r2
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	4b9e      	ldr	r3, [pc, #632]	; (80038b4 <UART_SetConfig+0x2a8>)
 800363c:	4013      	ands	r3, r2
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	6812      	ldr	r2, [r2, #0]
 8003642:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003644:	430b      	orrs	r3, r1
 8003646:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	68da      	ldr	r2, [r3, #12]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	430a      	orrs	r2, r1
 800365c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a93      	ldr	r2, [pc, #588]	; (80038b8 <UART_SetConfig+0x2ac>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d004      	beq.n	8003678 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003674:	4313      	orrs	r3, r2
 8003676:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003688:	430a      	orrs	r2, r1
 800368a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a8a      	ldr	r2, [pc, #552]	; (80038bc <UART_SetConfig+0x2b0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d126      	bne.n	80036e4 <UART_SetConfig+0xd8>
 8003696:	4b8a      	ldr	r3, [pc, #552]	; (80038c0 <UART_SetConfig+0x2b4>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f003 0303 	and.w	r3, r3, #3
 80036a0:	2b03      	cmp	r3, #3
 80036a2:	d81b      	bhi.n	80036dc <UART_SetConfig+0xd0>
 80036a4:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <UART_SetConfig+0xa0>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	080036bd 	.word	0x080036bd
 80036b0:	080036cd 	.word	0x080036cd
 80036b4:	080036c5 	.word	0x080036c5
 80036b8:	080036d5 	.word	0x080036d5
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c2:	e0ab      	b.n	800381c <UART_SetConfig+0x210>
 80036c4:	2302      	movs	r3, #2
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ca:	e0a7      	b.n	800381c <UART_SetConfig+0x210>
 80036cc:	2304      	movs	r3, #4
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d2:	e0a3      	b.n	800381c <UART_SetConfig+0x210>
 80036d4:	2308      	movs	r3, #8
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036da:	e09f      	b.n	800381c <UART_SetConfig+0x210>
 80036dc:	2310      	movs	r3, #16
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e2:	e09b      	b.n	800381c <UART_SetConfig+0x210>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a76      	ldr	r2, [pc, #472]	; (80038c4 <UART_SetConfig+0x2b8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d138      	bne.n	8003760 <UART_SetConfig+0x154>
 80036ee:	4b74      	ldr	r3, [pc, #464]	; (80038c0 <UART_SetConfig+0x2b4>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f003 030c 	and.w	r3, r3, #12
 80036f8:	2b0c      	cmp	r3, #12
 80036fa:	d82d      	bhi.n	8003758 <UART_SetConfig+0x14c>
 80036fc:	a201      	add	r2, pc, #4	; (adr r2, 8003704 <UART_SetConfig+0xf8>)
 80036fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003702:	bf00      	nop
 8003704:	08003739 	.word	0x08003739
 8003708:	08003759 	.word	0x08003759
 800370c:	08003759 	.word	0x08003759
 8003710:	08003759 	.word	0x08003759
 8003714:	08003749 	.word	0x08003749
 8003718:	08003759 	.word	0x08003759
 800371c:	08003759 	.word	0x08003759
 8003720:	08003759 	.word	0x08003759
 8003724:	08003741 	.word	0x08003741
 8003728:	08003759 	.word	0x08003759
 800372c:	08003759 	.word	0x08003759
 8003730:	08003759 	.word	0x08003759
 8003734:	08003751 	.word	0x08003751
 8003738:	2300      	movs	r3, #0
 800373a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373e:	e06d      	b.n	800381c <UART_SetConfig+0x210>
 8003740:	2302      	movs	r3, #2
 8003742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003746:	e069      	b.n	800381c <UART_SetConfig+0x210>
 8003748:	2304      	movs	r3, #4
 800374a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374e:	e065      	b.n	800381c <UART_SetConfig+0x210>
 8003750:	2308      	movs	r3, #8
 8003752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003756:	e061      	b.n	800381c <UART_SetConfig+0x210>
 8003758:	2310      	movs	r3, #16
 800375a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800375e:	e05d      	b.n	800381c <UART_SetConfig+0x210>
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a58      	ldr	r2, [pc, #352]	; (80038c8 <UART_SetConfig+0x2bc>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d125      	bne.n	80037b6 <UART_SetConfig+0x1aa>
 800376a:	4b55      	ldr	r3, [pc, #340]	; (80038c0 <UART_SetConfig+0x2b4>)
 800376c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003770:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003774:	2b30      	cmp	r3, #48	; 0x30
 8003776:	d016      	beq.n	80037a6 <UART_SetConfig+0x19a>
 8003778:	2b30      	cmp	r3, #48	; 0x30
 800377a:	d818      	bhi.n	80037ae <UART_SetConfig+0x1a2>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d00a      	beq.n	8003796 <UART_SetConfig+0x18a>
 8003780:	2b20      	cmp	r3, #32
 8003782:	d814      	bhi.n	80037ae <UART_SetConfig+0x1a2>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <UART_SetConfig+0x182>
 8003788:	2b10      	cmp	r3, #16
 800378a:	d008      	beq.n	800379e <UART_SetConfig+0x192>
 800378c:	e00f      	b.n	80037ae <UART_SetConfig+0x1a2>
 800378e:	2300      	movs	r3, #0
 8003790:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003794:	e042      	b.n	800381c <UART_SetConfig+0x210>
 8003796:	2302      	movs	r3, #2
 8003798:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800379c:	e03e      	b.n	800381c <UART_SetConfig+0x210>
 800379e:	2304      	movs	r3, #4
 80037a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a4:	e03a      	b.n	800381c <UART_SetConfig+0x210>
 80037a6:	2308      	movs	r3, #8
 80037a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ac:	e036      	b.n	800381c <UART_SetConfig+0x210>
 80037ae:	2310      	movs	r3, #16
 80037b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037b4:	e032      	b.n	800381c <UART_SetConfig+0x210>
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a3f      	ldr	r2, [pc, #252]	; (80038b8 <UART_SetConfig+0x2ac>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d12a      	bne.n	8003816 <UART_SetConfig+0x20a>
 80037c0:	4b3f      	ldr	r3, [pc, #252]	; (80038c0 <UART_SetConfig+0x2b4>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037c6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80037ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037ce:	d01a      	beq.n	8003806 <UART_SetConfig+0x1fa>
 80037d0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80037d4:	d81b      	bhi.n	800380e <UART_SetConfig+0x202>
 80037d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037da:	d00c      	beq.n	80037f6 <UART_SetConfig+0x1ea>
 80037dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e0:	d815      	bhi.n	800380e <UART_SetConfig+0x202>
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <UART_SetConfig+0x1e2>
 80037e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037ea:	d008      	beq.n	80037fe <UART_SetConfig+0x1f2>
 80037ec:	e00f      	b.n	800380e <UART_SetConfig+0x202>
 80037ee:	2300      	movs	r3, #0
 80037f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f4:	e012      	b.n	800381c <UART_SetConfig+0x210>
 80037f6:	2302      	movs	r3, #2
 80037f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fc:	e00e      	b.n	800381c <UART_SetConfig+0x210>
 80037fe:	2304      	movs	r3, #4
 8003800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003804:	e00a      	b.n	800381c <UART_SetConfig+0x210>
 8003806:	2308      	movs	r3, #8
 8003808:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380c:	e006      	b.n	800381c <UART_SetConfig+0x210>
 800380e:	2310      	movs	r3, #16
 8003810:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003814:	e002      	b.n	800381c <UART_SetConfig+0x210>
 8003816:	2310      	movs	r3, #16
 8003818:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a25      	ldr	r2, [pc, #148]	; (80038b8 <UART_SetConfig+0x2ac>)
 8003822:	4293      	cmp	r3, r2
 8003824:	f040 808a 	bne.w	800393c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003828:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800382c:	2b08      	cmp	r3, #8
 800382e:	d824      	bhi.n	800387a <UART_SetConfig+0x26e>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <UART_SetConfig+0x22c>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	0800385d 	.word	0x0800385d
 800383c:	0800387b 	.word	0x0800387b
 8003840:	08003865 	.word	0x08003865
 8003844:	0800387b 	.word	0x0800387b
 8003848:	0800386b 	.word	0x0800386b
 800384c:	0800387b 	.word	0x0800387b
 8003850:	0800387b 	.word	0x0800387b
 8003854:	0800387b 	.word	0x0800387b
 8003858:	08003873 	.word	0x08003873
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800385c:	f7fe fcd2 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8003860:	61f8      	str	r0, [r7, #28]
        break;
 8003862:	e010      	b.n	8003886 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003864:	4b19      	ldr	r3, [pc, #100]	; (80038cc <UART_SetConfig+0x2c0>)
 8003866:	61fb      	str	r3, [r7, #28]
        break;
 8003868:	e00d      	b.n	8003886 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800386a:	f7fe fc33 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 800386e:	61f8      	str	r0, [r7, #28]
        break;
 8003870:	e009      	b.n	8003886 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003872:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003876:	61fb      	str	r3, [r7, #28]
        break;
 8003878:	e005      	b.n	8003886 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003884:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 8109 	beq.w	8003aa0 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	4413      	add	r3, r2
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	429a      	cmp	r2, r3
 800389c:	d305      	bcc.n	80038aa <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038a4:	69fa      	ldr	r2, [r7, #28]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d912      	bls.n	80038d0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80038b0:	e0f6      	b.n	8003aa0 <UART_SetConfig+0x494>
 80038b2:	bf00      	nop
 80038b4:	efff69f3 	.word	0xefff69f3
 80038b8:	40008000 	.word	0x40008000
 80038bc:	40013800 	.word	0x40013800
 80038c0:	40021000 	.word	0x40021000
 80038c4:	40004400 	.word	0x40004400
 80038c8:	40004800 	.word	0x40004800
 80038cc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	2200      	movs	r2, #0
 80038d4:	461c      	mov	r4, r3
 80038d6:	4615      	mov	r5, r2
 80038d8:	f04f 0200 	mov.w	r2, #0
 80038dc:	f04f 0300 	mov.w	r3, #0
 80038e0:	022b      	lsls	r3, r5, #8
 80038e2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80038e6:	0222      	lsls	r2, r4, #8
 80038e8:	68f9      	ldr	r1, [r7, #12]
 80038ea:	6849      	ldr	r1, [r1, #4]
 80038ec:	0849      	lsrs	r1, r1, #1
 80038ee:	2000      	movs	r0, #0
 80038f0:	4688      	mov	r8, r1
 80038f2:	4681      	mov	r9, r0
 80038f4:	eb12 0a08 	adds.w	sl, r2, r8
 80038f8:	eb43 0b09 	adc.w	fp, r3, r9
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	607a      	str	r2, [r7, #4]
 8003906:	e9d7 2300 	ldrd	r2, r3, [r7]
 800390a:	4650      	mov	r0, sl
 800390c:	4659      	mov	r1, fp
 800390e:	f7fc fcaf 	bl	8000270 <__aeabi_uldivmod>
 8003912:	4602      	mov	r2, r0
 8003914:	460b      	mov	r3, r1
 8003916:	4613      	mov	r3, r2
 8003918:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800391a:	69bb      	ldr	r3, [r7, #24]
 800391c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003920:	d308      	bcc.n	8003934 <UART_SetConfig+0x328>
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003928:	d204      	bcs.n	8003934 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	60da      	str	r2, [r3, #12]
 8003932:	e0b5      	b.n	8003aa0 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800393a:	e0b1      	b.n	8003aa0 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003944:	d15d      	bne.n	8003a02 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003946:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800394a:	2b08      	cmp	r3, #8
 800394c:	d827      	bhi.n	800399e <UART_SetConfig+0x392>
 800394e:	a201      	add	r2, pc, #4	; (adr r2, 8003954 <UART_SetConfig+0x348>)
 8003950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003954:	08003979 	.word	0x08003979
 8003958:	08003981 	.word	0x08003981
 800395c:	08003989 	.word	0x08003989
 8003960:	0800399f 	.word	0x0800399f
 8003964:	0800398f 	.word	0x0800398f
 8003968:	0800399f 	.word	0x0800399f
 800396c:	0800399f 	.word	0x0800399f
 8003970:	0800399f 	.word	0x0800399f
 8003974:	08003997 	.word	0x08003997
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003978:	f7fe fc44 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 800397c:	61f8      	str	r0, [r7, #28]
        break;
 800397e:	e014      	b.n	80039aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003980:	f7fe fc56 	bl	8002230 <HAL_RCC_GetPCLK2Freq>
 8003984:	61f8      	str	r0, [r7, #28]
        break;
 8003986:	e010      	b.n	80039aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003988:	4b4c      	ldr	r3, [pc, #304]	; (8003abc <UART_SetConfig+0x4b0>)
 800398a:	61fb      	str	r3, [r7, #28]
        break;
 800398c:	e00d      	b.n	80039aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800398e:	f7fe fba1 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8003992:	61f8      	str	r0, [r7, #28]
        break;
 8003994:	e009      	b.n	80039aa <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003996:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800399a:	61fb      	str	r3, [r7, #28]
        break;
 800399c:	e005      	b.n	80039aa <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d077      	beq.n	8003aa0 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	005a      	lsls	r2, r3, #1
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	441a      	add	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039c6:	69bb      	ldr	r3, [r7, #24]
 80039c8:	2b0f      	cmp	r3, #15
 80039ca:	d916      	bls.n	80039fa <UART_SetConfig+0x3ee>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d2:	d212      	bcs.n	80039fa <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	f023 030f 	bic.w	r3, r3, #15
 80039dc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	085b      	lsrs	r3, r3, #1
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	b29a      	uxth	r2, r3
 80039ea:	8afb      	ldrh	r3, [r7, #22]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	8afa      	ldrh	r2, [r7, #22]
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	e052      	b.n	8003aa0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a00:	e04e      	b.n	8003aa0 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d827      	bhi.n	8003a5a <UART_SetConfig+0x44e>
 8003a0a:	a201      	add	r2, pc, #4	; (adr r2, 8003a10 <UART_SetConfig+0x404>)
 8003a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a10:	08003a35 	.word	0x08003a35
 8003a14:	08003a3d 	.word	0x08003a3d
 8003a18:	08003a45 	.word	0x08003a45
 8003a1c:	08003a5b 	.word	0x08003a5b
 8003a20:	08003a4b 	.word	0x08003a4b
 8003a24:	08003a5b 	.word	0x08003a5b
 8003a28:	08003a5b 	.word	0x08003a5b
 8003a2c:	08003a5b 	.word	0x08003a5b
 8003a30:	08003a53 	.word	0x08003a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a34:	f7fe fbe6 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8003a38:	61f8      	str	r0, [r7, #28]
        break;
 8003a3a:	e014      	b.n	8003a66 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a3c:	f7fe fbf8 	bl	8002230 <HAL_RCC_GetPCLK2Freq>
 8003a40:	61f8      	str	r0, [r7, #28]
        break;
 8003a42:	e010      	b.n	8003a66 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a44:	4b1d      	ldr	r3, [pc, #116]	; (8003abc <UART_SetConfig+0x4b0>)
 8003a46:	61fb      	str	r3, [r7, #28]
        break;
 8003a48:	e00d      	b.n	8003a66 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a4a:	f7fe fb43 	bl	80020d4 <HAL_RCC_GetSysClockFreq>
 8003a4e:	61f8      	str	r0, [r7, #28]
        break;
 8003a50:	e009      	b.n	8003a66 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a56:	61fb      	str	r3, [r7, #28]
        break;
 8003a58:	e005      	b.n	8003a66 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a64:	bf00      	nop
    }

    if (pclk != 0U)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d019      	beq.n	8003aa0 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	085a      	lsrs	r2, r3, #1
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	441a      	add	r2, r3
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	2b0f      	cmp	r3, #15
 8003a84:	d909      	bls.n	8003a9a <UART_SetConfig+0x48e>
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8c:	d205      	bcs.n	8003a9a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60da      	str	r2, [r3, #12]
 8003a98:	e002      	b.n	8003aa0 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003aac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3728      	adds	r7, #40	; 0x28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aba:	bf00      	nop
 8003abc:	00f42400 	.word	0x00f42400

08003ac0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00a      	beq.n	8003b0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d00a      	beq.n	8003b2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685b      	ldr	r3, [r3, #4]
 8003b1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00a      	beq.n	8003b50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	f003 0310 	and.w	r3, r3, #16
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b76:	f003 0320 	and.w	r3, r3, #32
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d00a      	beq.n	8003b94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d01a      	beq.n	8003bd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bbe:	d10a      	bne.n	8003bd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	430a      	orrs	r2, r1
 8003bf6:	605a      	str	r2, [r3, #4]
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b086      	sub	sp, #24
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c14:	f7fd f9f8 	bl	8001008 <HAL_GetTick>
 8003c18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	2b08      	cmp	r3, #8
 8003c26:	d10e      	bne.n	8003c46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f82d 	bl	8003c96 <UART_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e023      	b.n	8003c8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f003 0304 	and.w	r3, r3, #4
 8003c50:	2b04      	cmp	r3, #4
 8003c52:	d10e      	bne.n	8003c72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c58:	9300      	str	r3, [sp, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f817 	bl	8003c96 <UART_WaitOnFlagUntilTimeout>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d001      	beq.n	8003c72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c6e:	2303      	movs	r3, #3
 8003c70:	e00d      	b.n	8003c8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2220      	movs	r2, #32
 8003c76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b09c      	sub	sp, #112	; 0x70
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	603b      	str	r3, [r7, #0]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ca6:	e0a5      	b.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ca8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cae:	f000 80a1 	beq.w	8003df4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb2:	f7fd f9a9 	bl	8001008 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d302      	bcc.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d13e      	bne.n	8003d46 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cd8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cdc:	667b      	str	r3, [r7, #100]	; 0x64
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ce6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ce8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003cec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003cf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e6      	bne.n	8003cc8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3308      	adds	r3, #8
 8003d00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d04:	e853 3f00 	ldrex	r3, [r3]
 8003d08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0c:	f023 0301 	bic.w	r3, r3, #1
 8003d10:	663b      	str	r3, [r7, #96]	; 0x60
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3308      	adds	r3, #8
 8003d18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d22:	e841 2300 	strex	r3, r2, [r1]
 8003d26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e5      	bne.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2220      	movs	r2, #32
 8003d32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2220      	movs	r2, #32
 8003d38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e067      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d04f      	beq.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d62:	d147      	bne.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d6c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d76:	e853 3f00 	ldrex	r3, [r3]
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d94:	e841 2300 	strex	r3, r2, [r1]
 8003d98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1e6      	bne.n	8003d6e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3308      	adds	r3, #8
 8003da6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	613b      	str	r3, [r7, #16]
   return(result);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f023 0301 	bic.w	r3, r3, #1
 8003db6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003dc0:	623a      	str	r2, [r7, #32]
 8003dc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	69f9      	ldr	r1, [r7, #28]
 8003dc6:	6a3a      	ldr	r2, [r7, #32]
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e5      	bne.n	8003da0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2220      	movs	r2, #32
 8003dde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2220      	movs	r2, #32
 8003de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e010      	b.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	68ba      	ldr	r2, [r7, #8]
 8003e00:	429a      	cmp	r2, r3
 8003e02:	bf0c      	ite	eq
 8003e04:	2301      	moveq	r3, #1
 8003e06:	2300      	movne	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	429a      	cmp	r2, r3
 8003e10:	f43f af4a 	beq.w	8003ca8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3770      	adds	r7, #112	; 0x70
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
	...

08003e20 <__errno>:
 8003e20:	4b01      	ldr	r3, [pc, #4]	; (8003e28 <__errno+0x8>)
 8003e22:	6818      	ldr	r0, [r3, #0]
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	2000000c 	.word	0x2000000c

08003e2c <__libc_init_array>:
 8003e2c:	b570      	push	{r4, r5, r6, lr}
 8003e2e:	4d0d      	ldr	r5, [pc, #52]	; (8003e64 <__libc_init_array+0x38>)
 8003e30:	4c0d      	ldr	r4, [pc, #52]	; (8003e68 <__libc_init_array+0x3c>)
 8003e32:	1b64      	subs	r4, r4, r5
 8003e34:	10a4      	asrs	r4, r4, #2
 8003e36:	2600      	movs	r6, #0
 8003e38:	42a6      	cmp	r6, r4
 8003e3a:	d109      	bne.n	8003e50 <__libc_init_array+0x24>
 8003e3c:	4d0b      	ldr	r5, [pc, #44]	; (8003e6c <__libc_init_array+0x40>)
 8003e3e:	4c0c      	ldr	r4, [pc, #48]	; (8003e70 <__libc_init_array+0x44>)
 8003e40:	f000 ffae 	bl	8004da0 <_init>
 8003e44:	1b64      	subs	r4, r4, r5
 8003e46:	10a4      	asrs	r4, r4, #2
 8003e48:	2600      	movs	r6, #0
 8003e4a:	42a6      	cmp	r6, r4
 8003e4c:	d105      	bne.n	8003e5a <__libc_init_array+0x2e>
 8003e4e:	bd70      	pop	{r4, r5, r6, pc}
 8003e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e54:	4798      	blx	r3
 8003e56:	3601      	adds	r6, #1
 8003e58:	e7ee      	b.n	8003e38 <__libc_init_array+0xc>
 8003e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5e:	4798      	blx	r3
 8003e60:	3601      	adds	r6, #1
 8003e62:	e7f2      	b.n	8003e4a <__libc_init_array+0x1e>
 8003e64:	08004f34 	.word	0x08004f34
 8003e68:	08004f34 	.word	0x08004f34
 8003e6c:	08004f34 	.word	0x08004f34
 8003e70:	08004f38 	.word	0x08004f38

08003e74 <memset>:
 8003e74:	4402      	add	r2, r0
 8003e76:	4603      	mov	r3, r0
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d100      	bne.n	8003e7e <memset+0xa>
 8003e7c:	4770      	bx	lr
 8003e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e82:	e7f9      	b.n	8003e78 <memset+0x4>

08003e84 <iprintf>:
 8003e84:	b40f      	push	{r0, r1, r2, r3}
 8003e86:	4b0a      	ldr	r3, [pc, #40]	; (8003eb0 <iprintf+0x2c>)
 8003e88:	b513      	push	{r0, r1, r4, lr}
 8003e8a:	681c      	ldr	r4, [r3, #0]
 8003e8c:	b124      	cbz	r4, 8003e98 <iprintf+0x14>
 8003e8e:	69a3      	ldr	r3, [r4, #24]
 8003e90:	b913      	cbnz	r3, 8003e98 <iprintf+0x14>
 8003e92:	4620      	mov	r0, r4
 8003e94:	f000 f866 	bl	8003f64 <__sinit>
 8003e98:	ab05      	add	r3, sp, #20
 8003e9a:	9a04      	ldr	r2, [sp, #16]
 8003e9c:	68a1      	ldr	r1, [r4, #8]
 8003e9e:	9301      	str	r3, [sp, #4]
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	f000 f9bd 	bl	8004220 <_vfiprintf_r>
 8003ea6:	b002      	add	sp, #8
 8003ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eac:	b004      	add	sp, #16
 8003eae:	4770      	bx	lr
 8003eb0:	2000000c 	.word	0x2000000c

08003eb4 <std>:
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	b510      	push	{r4, lr}
 8003eb8:	4604      	mov	r4, r0
 8003eba:	e9c0 3300 	strd	r3, r3, [r0]
 8003ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ec2:	6083      	str	r3, [r0, #8]
 8003ec4:	8181      	strh	r1, [r0, #12]
 8003ec6:	6643      	str	r3, [r0, #100]	; 0x64
 8003ec8:	81c2      	strh	r2, [r0, #14]
 8003eca:	6183      	str	r3, [r0, #24]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	2208      	movs	r2, #8
 8003ed0:	305c      	adds	r0, #92	; 0x5c
 8003ed2:	f7ff ffcf 	bl	8003e74 <memset>
 8003ed6:	4b05      	ldr	r3, [pc, #20]	; (8003eec <std+0x38>)
 8003ed8:	6263      	str	r3, [r4, #36]	; 0x24
 8003eda:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <std+0x3c>)
 8003edc:	62a3      	str	r3, [r4, #40]	; 0x28
 8003ede:	4b05      	ldr	r3, [pc, #20]	; (8003ef4 <std+0x40>)
 8003ee0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ee2:	4b05      	ldr	r3, [pc, #20]	; (8003ef8 <std+0x44>)
 8003ee4:	6224      	str	r4, [r4, #32]
 8003ee6:	6323      	str	r3, [r4, #48]	; 0x30
 8003ee8:	bd10      	pop	{r4, pc}
 8003eea:	bf00      	nop
 8003eec:	080047c9 	.word	0x080047c9
 8003ef0:	080047eb 	.word	0x080047eb
 8003ef4:	08004823 	.word	0x08004823
 8003ef8:	08004847 	.word	0x08004847

08003efc <_cleanup_r>:
 8003efc:	4901      	ldr	r1, [pc, #4]	; (8003f04 <_cleanup_r+0x8>)
 8003efe:	f000 b8af 	b.w	8004060 <_fwalk_reent>
 8003f02:	bf00      	nop
 8003f04:	08004b21 	.word	0x08004b21

08003f08 <__sfmoreglue>:
 8003f08:	b570      	push	{r4, r5, r6, lr}
 8003f0a:	2268      	movs	r2, #104	; 0x68
 8003f0c:	1e4d      	subs	r5, r1, #1
 8003f0e:	4355      	muls	r5, r2
 8003f10:	460e      	mov	r6, r1
 8003f12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f16:	f000 f8e5 	bl	80040e4 <_malloc_r>
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	b140      	cbz	r0, 8003f30 <__sfmoreglue+0x28>
 8003f1e:	2100      	movs	r1, #0
 8003f20:	e9c0 1600 	strd	r1, r6, [r0]
 8003f24:	300c      	adds	r0, #12
 8003f26:	60a0      	str	r0, [r4, #8]
 8003f28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f2c:	f7ff ffa2 	bl	8003e74 <memset>
 8003f30:	4620      	mov	r0, r4
 8003f32:	bd70      	pop	{r4, r5, r6, pc}

08003f34 <__sfp_lock_acquire>:
 8003f34:	4801      	ldr	r0, [pc, #4]	; (8003f3c <__sfp_lock_acquire+0x8>)
 8003f36:	f000 b8b3 	b.w	80040a0 <__retarget_lock_acquire_recursive>
 8003f3a:	bf00      	nop
 8003f3c:	2000017d 	.word	0x2000017d

08003f40 <__sfp_lock_release>:
 8003f40:	4801      	ldr	r0, [pc, #4]	; (8003f48 <__sfp_lock_release+0x8>)
 8003f42:	f000 b8ae 	b.w	80040a2 <__retarget_lock_release_recursive>
 8003f46:	bf00      	nop
 8003f48:	2000017d 	.word	0x2000017d

08003f4c <__sinit_lock_acquire>:
 8003f4c:	4801      	ldr	r0, [pc, #4]	; (8003f54 <__sinit_lock_acquire+0x8>)
 8003f4e:	f000 b8a7 	b.w	80040a0 <__retarget_lock_acquire_recursive>
 8003f52:	bf00      	nop
 8003f54:	2000017e 	.word	0x2000017e

08003f58 <__sinit_lock_release>:
 8003f58:	4801      	ldr	r0, [pc, #4]	; (8003f60 <__sinit_lock_release+0x8>)
 8003f5a:	f000 b8a2 	b.w	80040a2 <__retarget_lock_release_recursive>
 8003f5e:	bf00      	nop
 8003f60:	2000017e 	.word	0x2000017e

08003f64 <__sinit>:
 8003f64:	b510      	push	{r4, lr}
 8003f66:	4604      	mov	r4, r0
 8003f68:	f7ff fff0 	bl	8003f4c <__sinit_lock_acquire>
 8003f6c:	69a3      	ldr	r3, [r4, #24]
 8003f6e:	b11b      	cbz	r3, 8003f78 <__sinit+0x14>
 8003f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f74:	f7ff bff0 	b.w	8003f58 <__sinit_lock_release>
 8003f78:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003f7c:	6523      	str	r3, [r4, #80]	; 0x50
 8003f7e:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <__sinit+0x68>)
 8003f80:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <__sinit+0x6c>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	62a2      	str	r2, [r4, #40]	; 0x28
 8003f86:	42a3      	cmp	r3, r4
 8003f88:	bf04      	itt	eq
 8003f8a:	2301      	moveq	r3, #1
 8003f8c:	61a3      	streq	r3, [r4, #24]
 8003f8e:	4620      	mov	r0, r4
 8003f90:	f000 f820 	bl	8003fd4 <__sfp>
 8003f94:	6060      	str	r0, [r4, #4]
 8003f96:	4620      	mov	r0, r4
 8003f98:	f000 f81c 	bl	8003fd4 <__sfp>
 8003f9c:	60a0      	str	r0, [r4, #8]
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	f000 f818 	bl	8003fd4 <__sfp>
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	60e0      	str	r0, [r4, #12]
 8003fa8:	2104      	movs	r1, #4
 8003faa:	6860      	ldr	r0, [r4, #4]
 8003fac:	f7ff ff82 	bl	8003eb4 <std>
 8003fb0:	68a0      	ldr	r0, [r4, #8]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	2109      	movs	r1, #9
 8003fb6:	f7ff ff7d 	bl	8003eb4 <std>
 8003fba:	68e0      	ldr	r0, [r4, #12]
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	2112      	movs	r1, #18
 8003fc0:	f7ff ff78 	bl	8003eb4 <std>
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	61a3      	str	r3, [r4, #24]
 8003fc8:	e7d2      	b.n	8003f70 <__sinit+0xc>
 8003fca:	bf00      	nop
 8003fcc:	08004e94 	.word	0x08004e94
 8003fd0:	08003efd 	.word	0x08003efd

08003fd4 <__sfp>:
 8003fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd6:	4607      	mov	r7, r0
 8003fd8:	f7ff ffac 	bl	8003f34 <__sfp_lock_acquire>
 8003fdc:	4b1e      	ldr	r3, [pc, #120]	; (8004058 <__sfp+0x84>)
 8003fde:	681e      	ldr	r6, [r3, #0]
 8003fe0:	69b3      	ldr	r3, [r6, #24]
 8003fe2:	b913      	cbnz	r3, 8003fea <__sfp+0x16>
 8003fe4:	4630      	mov	r0, r6
 8003fe6:	f7ff ffbd 	bl	8003f64 <__sinit>
 8003fea:	3648      	adds	r6, #72	; 0x48
 8003fec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	d503      	bpl.n	8003ffc <__sfp+0x28>
 8003ff4:	6833      	ldr	r3, [r6, #0]
 8003ff6:	b30b      	cbz	r3, 800403c <__sfp+0x68>
 8003ff8:	6836      	ldr	r6, [r6, #0]
 8003ffa:	e7f7      	b.n	8003fec <__sfp+0x18>
 8003ffc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004000:	b9d5      	cbnz	r5, 8004038 <__sfp+0x64>
 8004002:	4b16      	ldr	r3, [pc, #88]	; (800405c <__sfp+0x88>)
 8004004:	60e3      	str	r3, [r4, #12]
 8004006:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800400a:	6665      	str	r5, [r4, #100]	; 0x64
 800400c:	f000 f847 	bl	800409e <__retarget_lock_init_recursive>
 8004010:	f7ff ff96 	bl	8003f40 <__sfp_lock_release>
 8004014:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004018:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800401c:	6025      	str	r5, [r4, #0]
 800401e:	61a5      	str	r5, [r4, #24]
 8004020:	2208      	movs	r2, #8
 8004022:	4629      	mov	r1, r5
 8004024:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004028:	f7ff ff24 	bl	8003e74 <memset>
 800402c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004030:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004034:	4620      	mov	r0, r4
 8004036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004038:	3468      	adds	r4, #104	; 0x68
 800403a:	e7d9      	b.n	8003ff0 <__sfp+0x1c>
 800403c:	2104      	movs	r1, #4
 800403e:	4638      	mov	r0, r7
 8004040:	f7ff ff62 	bl	8003f08 <__sfmoreglue>
 8004044:	4604      	mov	r4, r0
 8004046:	6030      	str	r0, [r6, #0]
 8004048:	2800      	cmp	r0, #0
 800404a:	d1d5      	bne.n	8003ff8 <__sfp+0x24>
 800404c:	f7ff ff78 	bl	8003f40 <__sfp_lock_release>
 8004050:	230c      	movs	r3, #12
 8004052:	603b      	str	r3, [r7, #0]
 8004054:	e7ee      	b.n	8004034 <__sfp+0x60>
 8004056:	bf00      	nop
 8004058:	08004e94 	.word	0x08004e94
 800405c:	ffff0001 	.word	0xffff0001

08004060 <_fwalk_reent>:
 8004060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004064:	4606      	mov	r6, r0
 8004066:	4688      	mov	r8, r1
 8004068:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800406c:	2700      	movs	r7, #0
 800406e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004072:	f1b9 0901 	subs.w	r9, r9, #1
 8004076:	d505      	bpl.n	8004084 <_fwalk_reent+0x24>
 8004078:	6824      	ldr	r4, [r4, #0]
 800407a:	2c00      	cmp	r4, #0
 800407c:	d1f7      	bne.n	800406e <_fwalk_reent+0xe>
 800407e:	4638      	mov	r0, r7
 8004080:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004084:	89ab      	ldrh	r3, [r5, #12]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d907      	bls.n	800409a <_fwalk_reent+0x3a>
 800408a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800408e:	3301      	adds	r3, #1
 8004090:	d003      	beq.n	800409a <_fwalk_reent+0x3a>
 8004092:	4629      	mov	r1, r5
 8004094:	4630      	mov	r0, r6
 8004096:	47c0      	blx	r8
 8004098:	4307      	orrs	r7, r0
 800409a:	3568      	adds	r5, #104	; 0x68
 800409c:	e7e9      	b.n	8004072 <_fwalk_reent+0x12>

0800409e <__retarget_lock_init_recursive>:
 800409e:	4770      	bx	lr

080040a0 <__retarget_lock_acquire_recursive>:
 80040a0:	4770      	bx	lr

080040a2 <__retarget_lock_release_recursive>:
 80040a2:	4770      	bx	lr

080040a4 <sbrk_aligned>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	4e0e      	ldr	r6, [pc, #56]	; (80040e0 <sbrk_aligned+0x3c>)
 80040a8:	460c      	mov	r4, r1
 80040aa:	6831      	ldr	r1, [r6, #0]
 80040ac:	4605      	mov	r5, r0
 80040ae:	b911      	cbnz	r1, 80040b6 <sbrk_aligned+0x12>
 80040b0:	f000 fb7a 	bl	80047a8 <_sbrk_r>
 80040b4:	6030      	str	r0, [r6, #0]
 80040b6:	4621      	mov	r1, r4
 80040b8:	4628      	mov	r0, r5
 80040ba:	f000 fb75 	bl	80047a8 <_sbrk_r>
 80040be:	1c43      	adds	r3, r0, #1
 80040c0:	d00a      	beq.n	80040d8 <sbrk_aligned+0x34>
 80040c2:	1cc4      	adds	r4, r0, #3
 80040c4:	f024 0403 	bic.w	r4, r4, #3
 80040c8:	42a0      	cmp	r0, r4
 80040ca:	d007      	beq.n	80040dc <sbrk_aligned+0x38>
 80040cc:	1a21      	subs	r1, r4, r0
 80040ce:	4628      	mov	r0, r5
 80040d0:	f000 fb6a 	bl	80047a8 <_sbrk_r>
 80040d4:	3001      	adds	r0, #1
 80040d6:	d101      	bne.n	80040dc <sbrk_aligned+0x38>
 80040d8:	f04f 34ff 	mov.w	r4, #4294967295
 80040dc:	4620      	mov	r0, r4
 80040de:	bd70      	pop	{r4, r5, r6, pc}
 80040e0:	20000184 	.word	0x20000184

080040e4 <_malloc_r>:
 80040e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e8:	1ccd      	adds	r5, r1, #3
 80040ea:	f025 0503 	bic.w	r5, r5, #3
 80040ee:	3508      	adds	r5, #8
 80040f0:	2d0c      	cmp	r5, #12
 80040f2:	bf38      	it	cc
 80040f4:	250c      	movcc	r5, #12
 80040f6:	2d00      	cmp	r5, #0
 80040f8:	4607      	mov	r7, r0
 80040fa:	db01      	blt.n	8004100 <_malloc_r+0x1c>
 80040fc:	42a9      	cmp	r1, r5
 80040fe:	d905      	bls.n	800410c <_malloc_r+0x28>
 8004100:	230c      	movs	r3, #12
 8004102:	603b      	str	r3, [r7, #0]
 8004104:	2600      	movs	r6, #0
 8004106:	4630      	mov	r0, r6
 8004108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800410c:	4e2e      	ldr	r6, [pc, #184]	; (80041c8 <_malloc_r+0xe4>)
 800410e:	f000 fdbb 	bl	8004c88 <__malloc_lock>
 8004112:	6833      	ldr	r3, [r6, #0]
 8004114:	461c      	mov	r4, r3
 8004116:	bb34      	cbnz	r4, 8004166 <_malloc_r+0x82>
 8004118:	4629      	mov	r1, r5
 800411a:	4638      	mov	r0, r7
 800411c:	f7ff ffc2 	bl	80040a4 <sbrk_aligned>
 8004120:	1c43      	adds	r3, r0, #1
 8004122:	4604      	mov	r4, r0
 8004124:	d14d      	bne.n	80041c2 <_malloc_r+0xde>
 8004126:	6834      	ldr	r4, [r6, #0]
 8004128:	4626      	mov	r6, r4
 800412a:	2e00      	cmp	r6, #0
 800412c:	d140      	bne.n	80041b0 <_malloc_r+0xcc>
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	4631      	mov	r1, r6
 8004132:	4638      	mov	r0, r7
 8004134:	eb04 0803 	add.w	r8, r4, r3
 8004138:	f000 fb36 	bl	80047a8 <_sbrk_r>
 800413c:	4580      	cmp	r8, r0
 800413e:	d13a      	bne.n	80041b6 <_malloc_r+0xd2>
 8004140:	6821      	ldr	r1, [r4, #0]
 8004142:	3503      	adds	r5, #3
 8004144:	1a6d      	subs	r5, r5, r1
 8004146:	f025 0503 	bic.w	r5, r5, #3
 800414a:	3508      	adds	r5, #8
 800414c:	2d0c      	cmp	r5, #12
 800414e:	bf38      	it	cc
 8004150:	250c      	movcc	r5, #12
 8004152:	4629      	mov	r1, r5
 8004154:	4638      	mov	r0, r7
 8004156:	f7ff ffa5 	bl	80040a4 <sbrk_aligned>
 800415a:	3001      	adds	r0, #1
 800415c:	d02b      	beq.n	80041b6 <_malloc_r+0xd2>
 800415e:	6823      	ldr	r3, [r4, #0]
 8004160:	442b      	add	r3, r5
 8004162:	6023      	str	r3, [r4, #0]
 8004164:	e00e      	b.n	8004184 <_malloc_r+0xa0>
 8004166:	6822      	ldr	r2, [r4, #0]
 8004168:	1b52      	subs	r2, r2, r5
 800416a:	d41e      	bmi.n	80041aa <_malloc_r+0xc6>
 800416c:	2a0b      	cmp	r2, #11
 800416e:	d916      	bls.n	800419e <_malloc_r+0xba>
 8004170:	1961      	adds	r1, r4, r5
 8004172:	42a3      	cmp	r3, r4
 8004174:	6025      	str	r5, [r4, #0]
 8004176:	bf18      	it	ne
 8004178:	6059      	strne	r1, [r3, #4]
 800417a:	6863      	ldr	r3, [r4, #4]
 800417c:	bf08      	it	eq
 800417e:	6031      	streq	r1, [r6, #0]
 8004180:	5162      	str	r2, [r4, r5]
 8004182:	604b      	str	r3, [r1, #4]
 8004184:	4638      	mov	r0, r7
 8004186:	f104 060b 	add.w	r6, r4, #11
 800418a:	f000 fd83 	bl	8004c94 <__malloc_unlock>
 800418e:	f026 0607 	bic.w	r6, r6, #7
 8004192:	1d23      	adds	r3, r4, #4
 8004194:	1af2      	subs	r2, r6, r3
 8004196:	d0b6      	beq.n	8004106 <_malloc_r+0x22>
 8004198:	1b9b      	subs	r3, r3, r6
 800419a:	50a3      	str	r3, [r4, r2]
 800419c:	e7b3      	b.n	8004106 <_malloc_r+0x22>
 800419e:	6862      	ldr	r2, [r4, #4]
 80041a0:	42a3      	cmp	r3, r4
 80041a2:	bf0c      	ite	eq
 80041a4:	6032      	streq	r2, [r6, #0]
 80041a6:	605a      	strne	r2, [r3, #4]
 80041a8:	e7ec      	b.n	8004184 <_malloc_r+0xa0>
 80041aa:	4623      	mov	r3, r4
 80041ac:	6864      	ldr	r4, [r4, #4]
 80041ae:	e7b2      	b.n	8004116 <_malloc_r+0x32>
 80041b0:	4634      	mov	r4, r6
 80041b2:	6876      	ldr	r6, [r6, #4]
 80041b4:	e7b9      	b.n	800412a <_malloc_r+0x46>
 80041b6:	230c      	movs	r3, #12
 80041b8:	603b      	str	r3, [r7, #0]
 80041ba:	4638      	mov	r0, r7
 80041bc:	f000 fd6a 	bl	8004c94 <__malloc_unlock>
 80041c0:	e7a1      	b.n	8004106 <_malloc_r+0x22>
 80041c2:	6025      	str	r5, [r4, #0]
 80041c4:	e7de      	b.n	8004184 <_malloc_r+0xa0>
 80041c6:	bf00      	nop
 80041c8:	20000180 	.word	0x20000180

080041cc <__sfputc_r>:
 80041cc:	6893      	ldr	r3, [r2, #8]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	b410      	push	{r4}
 80041d4:	6093      	str	r3, [r2, #8]
 80041d6:	da08      	bge.n	80041ea <__sfputc_r+0x1e>
 80041d8:	6994      	ldr	r4, [r2, #24]
 80041da:	42a3      	cmp	r3, r4
 80041dc:	db01      	blt.n	80041e2 <__sfputc_r+0x16>
 80041de:	290a      	cmp	r1, #10
 80041e0:	d103      	bne.n	80041ea <__sfputc_r+0x1e>
 80041e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041e6:	f000 bb33 	b.w	8004850 <__swbuf_r>
 80041ea:	6813      	ldr	r3, [r2, #0]
 80041ec:	1c58      	adds	r0, r3, #1
 80041ee:	6010      	str	r0, [r2, #0]
 80041f0:	7019      	strb	r1, [r3, #0]
 80041f2:	4608      	mov	r0, r1
 80041f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80041f8:	4770      	bx	lr

080041fa <__sfputs_r>:
 80041fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fc:	4606      	mov	r6, r0
 80041fe:	460f      	mov	r7, r1
 8004200:	4614      	mov	r4, r2
 8004202:	18d5      	adds	r5, r2, r3
 8004204:	42ac      	cmp	r4, r5
 8004206:	d101      	bne.n	800420c <__sfputs_r+0x12>
 8004208:	2000      	movs	r0, #0
 800420a:	e007      	b.n	800421c <__sfputs_r+0x22>
 800420c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004210:	463a      	mov	r2, r7
 8004212:	4630      	mov	r0, r6
 8004214:	f7ff ffda 	bl	80041cc <__sfputc_r>
 8004218:	1c43      	adds	r3, r0, #1
 800421a:	d1f3      	bne.n	8004204 <__sfputs_r+0xa>
 800421c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004220 <_vfiprintf_r>:
 8004220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004224:	460d      	mov	r5, r1
 8004226:	b09d      	sub	sp, #116	; 0x74
 8004228:	4614      	mov	r4, r2
 800422a:	4698      	mov	r8, r3
 800422c:	4606      	mov	r6, r0
 800422e:	b118      	cbz	r0, 8004238 <_vfiprintf_r+0x18>
 8004230:	6983      	ldr	r3, [r0, #24]
 8004232:	b90b      	cbnz	r3, 8004238 <_vfiprintf_r+0x18>
 8004234:	f7ff fe96 	bl	8003f64 <__sinit>
 8004238:	4b89      	ldr	r3, [pc, #548]	; (8004460 <_vfiprintf_r+0x240>)
 800423a:	429d      	cmp	r5, r3
 800423c:	d11b      	bne.n	8004276 <_vfiprintf_r+0x56>
 800423e:	6875      	ldr	r5, [r6, #4]
 8004240:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004242:	07d9      	lsls	r1, r3, #31
 8004244:	d405      	bmi.n	8004252 <_vfiprintf_r+0x32>
 8004246:	89ab      	ldrh	r3, [r5, #12]
 8004248:	059a      	lsls	r2, r3, #22
 800424a:	d402      	bmi.n	8004252 <_vfiprintf_r+0x32>
 800424c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800424e:	f7ff ff27 	bl	80040a0 <__retarget_lock_acquire_recursive>
 8004252:	89ab      	ldrh	r3, [r5, #12]
 8004254:	071b      	lsls	r3, r3, #28
 8004256:	d501      	bpl.n	800425c <_vfiprintf_r+0x3c>
 8004258:	692b      	ldr	r3, [r5, #16]
 800425a:	b9eb      	cbnz	r3, 8004298 <_vfiprintf_r+0x78>
 800425c:	4629      	mov	r1, r5
 800425e:	4630      	mov	r0, r6
 8004260:	f000 fb5a 	bl	8004918 <__swsetup_r>
 8004264:	b1c0      	cbz	r0, 8004298 <_vfiprintf_r+0x78>
 8004266:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004268:	07dc      	lsls	r4, r3, #31
 800426a:	d50e      	bpl.n	800428a <_vfiprintf_r+0x6a>
 800426c:	f04f 30ff 	mov.w	r0, #4294967295
 8004270:	b01d      	add	sp, #116	; 0x74
 8004272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004276:	4b7b      	ldr	r3, [pc, #492]	; (8004464 <_vfiprintf_r+0x244>)
 8004278:	429d      	cmp	r5, r3
 800427a:	d101      	bne.n	8004280 <_vfiprintf_r+0x60>
 800427c:	68b5      	ldr	r5, [r6, #8]
 800427e:	e7df      	b.n	8004240 <_vfiprintf_r+0x20>
 8004280:	4b79      	ldr	r3, [pc, #484]	; (8004468 <_vfiprintf_r+0x248>)
 8004282:	429d      	cmp	r5, r3
 8004284:	bf08      	it	eq
 8004286:	68f5      	ldreq	r5, [r6, #12]
 8004288:	e7da      	b.n	8004240 <_vfiprintf_r+0x20>
 800428a:	89ab      	ldrh	r3, [r5, #12]
 800428c:	0598      	lsls	r0, r3, #22
 800428e:	d4ed      	bmi.n	800426c <_vfiprintf_r+0x4c>
 8004290:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004292:	f7ff ff06 	bl	80040a2 <__retarget_lock_release_recursive>
 8004296:	e7e9      	b.n	800426c <_vfiprintf_r+0x4c>
 8004298:	2300      	movs	r3, #0
 800429a:	9309      	str	r3, [sp, #36]	; 0x24
 800429c:	2320      	movs	r3, #32
 800429e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80042a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80042a6:	2330      	movs	r3, #48	; 0x30
 80042a8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800446c <_vfiprintf_r+0x24c>
 80042ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80042b0:	f04f 0901 	mov.w	r9, #1
 80042b4:	4623      	mov	r3, r4
 80042b6:	469a      	mov	sl, r3
 80042b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042bc:	b10a      	cbz	r2, 80042c2 <_vfiprintf_r+0xa2>
 80042be:	2a25      	cmp	r2, #37	; 0x25
 80042c0:	d1f9      	bne.n	80042b6 <_vfiprintf_r+0x96>
 80042c2:	ebba 0b04 	subs.w	fp, sl, r4
 80042c6:	d00b      	beq.n	80042e0 <_vfiprintf_r+0xc0>
 80042c8:	465b      	mov	r3, fp
 80042ca:	4622      	mov	r2, r4
 80042cc:	4629      	mov	r1, r5
 80042ce:	4630      	mov	r0, r6
 80042d0:	f7ff ff93 	bl	80041fa <__sfputs_r>
 80042d4:	3001      	adds	r0, #1
 80042d6:	f000 80aa 	beq.w	800442e <_vfiprintf_r+0x20e>
 80042da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80042dc:	445a      	add	r2, fp
 80042de:	9209      	str	r2, [sp, #36]	; 0x24
 80042e0:	f89a 3000 	ldrb.w	r3, [sl]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 80a2 	beq.w	800442e <_vfiprintf_r+0x20e>
 80042ea:	2300      	movs	r3, #0
 80042ec:	f04f 32ff 	mov.w	r2, #4294967295
 80042f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042f4:	f10a 0a01 	add.w	sl, sl, #1
 80042f8:	9304      	str	r3, [sp, #16]
 80042fa:	9307      	str	r3, [sp, #28]
 80042fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004300:	931a      	str	r3, [sp, #104]	; 0x68
 8004302:	4654      	mov	r4, sl
 8004304:	2205      	movs	r2, #5
 8004306:	f814 1b01 	ldrb.w	r1, [r4], #1
 800430a:	4858      	ldr	r0, [pc, #352]	; (800446c <_vfiprintf_r+0x24c>)
 800430c:	f7fb ff60 	bl	80001d0 <memchr>
 8004310:	9a04      	ldr	r2, [sp, #16]
 8004312:	b9d8      	cbnz	r0, 800434c <_vfiprintf_r+0x12c>
 8004314:	06d1      	lsls	r1, r2, #27
 8004316:	bf44      	itt	mi
 8004318:	2320      	movmi	r3, #32
 800431a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800431e:	0713      	lsls	r3, r2, #28
 8004320:	bf44      	itt	mi
 8004322:	232b      	movmi	r3, #43	; 0x2b
 8004324:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004328:	f89a 3000 	ldrb.w	r3, [sl]
 800432c:	2b2a      	cmp	r3, #42	; 0x2a
 800432e:	d015      	beq.n	800435c <_vfiprintf_r+0x13c>
 8004330:	9a07      	ldr	r2, [sp, #28]
 8004332:	4654      	mov	r4, sl
 8004334:	2000      	movs	r0, #0
 8004336:	f04f 0c0a 	mov.w	ip, #10
 800433a:	4621      	mov	r1, r4
 800433c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004340:	3b30      	subs	r3, #48	; 0x30
 8004342:	2b09      	cmp	r3, #9
 8004344:	d94e      	bls.n	80043e4 <_vfiprintf_r+0x1c4>
 8004346:	b1b0      	cbz	r0, 8004376 <_vfiprintf_r+0x156>
 8004348:	9207      	str	r2, [sp, #28]
 800434a:	e014      	b.n	8004376 <_vfiprintf_r+0x156>
 800434c:	eba0 0308 	sub.w	r3, r0, r8
 8004350:	fa09 f303 	lsl.w	r3, r9, r3
 8004354:	4313      	orrs	r3, r2
 8004356:	9304      	str	r3, [sp, #16]
 8004358:	46a2      	mov	sl, r4
 800435a:	e7d2      	b.n	8004302 <_vfiprintf_r+0xe2>
 800435c:	9b03      	ldr	r3, [sp, #12]
 800435e:	1d19      	adds	r1, r3, #4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	9103      	str	r1, [sp, #12]
 8004364:	2b00      	cmp	r3, #0
 8004366:	bfbb      	ittet	lt
 8004368:	425b      	neglt	r3, r3
 800436a:	f042 0202 	orrlt.w	r2, r2, #2
 800436e:	9307      	strge	r3, [sp, #28]
 8004370:	9307      	strlt	r3, [sp, #28]
 8004372:	bfb8      	it	lt
 8004374:	9204      	strlt	r2, [sp, #16]
 8004376:	7823      	ldrb	r3, [r4, #0]
 8004378:	2b2e      	cmp	r3, #46	; 0x2e
 800437a:	d10c      	bne.n	8004396 <_vfiprintf_r+0x176>
 800437c:	7863      	ldrb	r3, [r4, #1]
 800437e:	2b2a      	cmp	r3, #42	; 0x2a
 8004380:	d135      	bne.n	80043ee <_vfiprintf_r+0x1ce>
 8004382:	9b03      	ldr	r3, [sp, #12]
 8004384:	1d1a      	adds	r2, r3, #4
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	9203      	str	r2, [sp, #12]
 800438a:	2b00      	cmp	r3, #0
 800438c:	bfb8      	it	lt
 800438e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004392:	3402      	adds	r4, #2
 8004394:	9305      	str	r3, [sp, #20]
 8004396:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800447c <_vfiprintf_r+0x25c>
 800439a:	7821      	ldrb	r1, [r4, #0]
 800439c:	2203      	movs	r2, #3
 800439e:	4650      	mov	r0, sl
 80043a0:	f7fb ff16 	bl	80001d0 <memchr>
 80043a4:	b140      	cbz	r0, 80043b8 <_vfiprintf_r+0x198>
 80043a6:	2340      	movs	r3, #64	; 0x40
 80043a8:	eba0 000a 	sub.w	r0, r0, sl
 80043ac:	fa03 f000 	lsl.w	r0, r3, r0
 80043b0:	9b04      	ldr	r3, [sp, #16]
 80043b2:	4303      	orrs	r3, r0
 80043b4:	3401      	adds	r4, #1
 80043b6:	9304      	str	r3, [sp, #16]
 80043b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043bc:	482c      	ldr	r0, [pc, #176]	; (8004470 <_vfiprintf_r+0x250>)
 80043be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043c2:	2206      	movs	r2, #6
 80043c4:	f7fb ff04 	bl	80001d0 <memchr>
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d03f      	beq.n	800444c <_vfiprintf_r+0x22c>
 80043cc:	4b29      	ldr	r3, [pc, #164]	; (8004474 <_vfiprintf_r+0x254>)
 80043ce:	bb1b      	cbnz	r3, 8004418 <_vfiprintf_r+0x1f8>
 80043d0:	9b03      	ldr	r3, [sp, #12]
 80043d2:	3307      	adds	r3, #7
 80043d4:	f023 0307 	bic.w	r3, r3, #7
 80043d8:	3308      	adds	r3, #8
 80043da:	9303      	str	r3, [sp, #12]
 80043dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043de:	443b      	add	r3, r7
 80043e0:	9309      	str	r3, [sp, #36]	; 0x24
 80043e2:	e767      	b.n	80042b4 <_vfiprintf_r+0x94>
 80043e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80043e8:	460c      	mov	r4, r1
 80043ea:	2001      	movs	r0, #1
 80043ec:	e7a5      	b.n	800433a <_vfiprintf_r+0x11a>
 80043ee:	2300      	movs	r3, #0
 80043f0:	3401      	adds	r4, #1
 80043f2:	9305      	str	r3, [sp, #20]
 80043f4:	4619      	mov	r1, r3
 80043f6:	f04f 0c0a 	mov.w	ip, #10
 80043fa:	4620      	mov	r0, r4
 80043fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004400:	3a30      	subs	r2, #48	; 0x30
 8004402:	2a09      	cmp	r2, #9
 8004404:	d903      	bls.n	800440e <_vfiprintf_r+0x1ee>
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0c5      	beq.n	8004396 <_vfiprintf_r+0x176>
 800440a:	9105      	str	r1, [sp, #20]
 800440c:	e7c3      	b.n	8004396 <_vfiprintf_r+0x176>
 800440e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004412:	4604      	mov	r4, r0
 8004414:	2301      	movs	r3, #1
 8004416:	e7f0      	b.n	80043fa <_vfiprintf_r+0x1da>
 8004418:	ab03      	add	r3, sp, #12
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	462a      	mov	r2, r5
 800441e:	4b16      	ldr	r3, [pc, #88]	; (8004478 <_vfiprintf_r+0x258>)
 8004420:	a904      	add	r1, sp, #16
 8004422:	4630      	mov	r0, r6
 8004424:	f3af 8000 	nop.w
 8004428:	4607      	mov	r7, r0
 800442a:	1c78      	adds	r0, r7, #1
 800442c:	d1d6      	bne.n	80043dc <_vfiprintf_r+0x1bc>
 800442e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004430:	07d9      	lsls	r1, r3, #31
 8004432:	d405      	bmi.n	8004440 <_vfiprintf_r+0x220>
 8004434:	89ab      	ldrh	r3, [r5, #12]
 8004436:	059a      	lsls	r2, r3, #22
 8004438:	d402      	bmi.n	8004440 <_vfiprintf_r+0x220>
 800443a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800443c:	f7ff fe31 	bl	80040a2 <__retarget_lock_release_recursive>
 8004440:	89ab      	ldrh	r3, [r5, #12]
 8004442:	065b      	lsls	r3, r3, #25
 8004444:	f53f af12 	bmi.w	800426c <_vfiprintf_r+0x4c>
 8004448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800444a:	e711      	b.n	8004270 <_vfiprintf_r+0x50>
 800444c:	ab03      	add	r3, sp, #12
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	462a      	mov	r2, r5
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <_vfiprintf_r+0x258>)
 8004454:	a904      	add	r1, sp, #16
 8004456:	4630      	mov	r0, r6
 8004458:	f000 f880 	bl	800455c <_printf_i>
 800445c:	e7e4      	b.n	8004428 <_vfiprintf_r+0x208>
 800445e:	bf00      	nop
 8004460:	08004eb8 	.word	0x08004eb8
 8004464:	08004ed8 	.word	0x08004ed8
 8004468:	08004e98 	.word	0x08004e98
 800446c:	08004ef8 	.word	0x08004ef8
 8004470:	08004f02 	.word	0x08004f02
 8004474:	00000000 	.word	0x00000000
 8004478:	080041fb 	.word	0x080041fb
 800447c:	08004efe 	.word	0x08004efe

08004480 <_printf_common>:
 8004480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	4616      	mov	r6, r2
 8004486:	4699      	mov	r9, r3
 8004488:	688a      	ldr	r2, [r1, #8]
 800448a:	690b      	ldr	r3, [r1, #16]
 800448c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004490:	4293      	cmp	r3, r2
 8004492:	bfb8      	it	lt
 8004494:	4613      	movlt	r3, r2
 8004496:	6033      	str	r3, [r6, #0]
 8004498:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800449c:	4607      	mov	r7, r0
 800449e:	460c      	mov	r4, r1
 80044a0:	b10a      	cbz	r2, 80044a6 <_printf_common+0x26>
 80044a2:	3301      	adds	r3, #1
 80044a4:	6033      	str	r3, [r6, #0]
 80044a6:	6823      	ldr	r3, [r4, #0]
 80044a8:	0699      	lsls	r1, r3, #26
 80044aa:	bf42      	ittt	mi
 80044ac:	6833      	ldrmi	r3, [r6, #0]
 80044ae:	3302      	addmi	r3, #2
 80044b0:	6033      	strmi	r3, [r6, #0]
 80044b2:	6825      	ldr	r5, [r4, #0]
 80044b4:	f015 0506 	ands.w	r5, r5, #6
 80044b8:	d106      	bne.n	80044c8 <_printf_common+0x48>
 80044ba:	f104 0a19 	add.w	sl, r4, #25
 80044be:	68e3      	ldr	r3, [r4, #12]
 80044c0:	6832      	ldr	r2, [r6, #0]
 80044c2:	1a9b      	subs	r3, r3, r2
 80044c4:	42ab      	cmp	r3, r5
 80044c6:	dc26      	bgt.n	8004516 <_printf_common+0x96>
 80044c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80044cc:	1e13      	subs	r3, r2, #0
 80044ce:	6822      	ldr	r2, [r4, #0]
 80044d0:	bf18      	it	ne
 80044d2:	2301      	movne	r3, #1
 80044d4:	0692      	lsls	r2, r2, #26
 80044d6:	d42b      	bmi.n	8004530 <_printf_common+0xb0>
 80044d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044dc:	4649      	mov	r1, r9
 80044de:	4638      	mov	r0, r7
 80044e0:	47c0      	blx	r8
 80044e2:	3001      	adds	r0, #1
 80044e4:	d01e      	beq.n	8004524 <_printf_common+0xa4>
 80044e6:	6823      	ldr	r3, [r4, #0]
 80044e8:	68e5      	ldr	r5, [r4, #12]
 80044ea:	6832      	ldr	r2, [r6, #0]
 80044ec:	f003 0306 	and.w	r3, r3, #6
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	bf08      	it	eq
 80044f4:	1aad      	subeq	r5, r5, r2
 80044f6:	68a3      	ldr	r3, [r4, #8]
 80044f8:	6922      	ldr	r2, [r4, #16]
 80044fa:	bf0c      	ite	eq
 80044fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004500:	2500      	movne	r5, #0
 8004502:	4293      	cmp	r3, r2
 8004504:	bfc4      	itt	gt
 8004506:	1a9b      	subgt	r3, r3, r2
 8004508:	18ed      	addgt	r5, r5, r3
 800450a:	2600      	movs	r6, #0
 800450c:	341a      	adds	r4, #26
 800450e:	42b5      	cmp	r5, r6
 8004510:	d11a      	bne.n	8004548 <_printf_common+0xc8>
 8004512:	2000      	movs	r0, #0
 8004514:	e008      	b.n	8004528 <_printf_common+0xa8>
 8004516:	2301      	movs	r3, #1
 8004518:	4652      	mov	r2, sl
 800451a:	4649      	mov	r1, r9
 800451c:	4638      	mov	r0, r7
 800451e:	47c0      	blx	r8
 8004520:	3001      	adds	r0, #1
 8004522:	d103      	bne.n	800452c <_printf_common+0xac>
 8004524:	f04f 30ff 	mov.w	r0, #4294967295
 8004528:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800452c:	3501      	adds	r5, #1
 800452e:	e7c6      	b.n	80044be <_printf_common+0x3e>
 8004530:	18e1      	adds	r1, r4, r3
 8004532:	1c5a      	adds	r2, r3, #1
 8004534:	2030      	movs	r0, #48	; 0x30
 8004536:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800453a:	4422      	add	r2, r4
 800453c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004540:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004544:	3302      	adds	r3, #2
 8004546:	e7c7      	b.n	80044d8 <_printf_common+0x58>
 8004548:	2301      	movs	r3, #1
 800454a:	4622      	mov	r2, r4
 800454c:	4649      	mov	r1, r9
 800454e:	4638      	mov	r0, r7
 8004550:	47c0      	blx	r8
 8004552:	3001      	adds	r0, #1
 8004554:	d0e6      	beq.n	8004524 <_printf_common+0xa4>
 8004556:	3601      	adds	r6, #1
 8004558:	e7d9      	b.n	800450e <_printf_common+0x8e>
	...

0800455c <_printf_i>:
 800455c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004560:	7e0f      	ldrb	r7, [r1, #24]
 8004562:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004564:	2f78      	cmp	r7, #120	; 0x78
 8004566:	4691      	mov	r9, r2
 8004568:	4680      	mov	r8, r0
 800456a:	460c      	mov	r4, r1
 800456c:	469a      	mov	sl, r3
 800456e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004572:	d807      	bhi.n	8004584 <_printf_i+0x28>
 8004574:	2f62      	cmp	r7, #98	; 0x62
 8004576:	d80a      	bhi.n	800458e <_printf_i+0x32>
 8004578:	2f00      	cmp	r7, #0
 800457a:	f000 80d8 	beq.w	800472e <_printf_i+0x1d2>
 800457e:	2f58      	cmp	r7, #88	; 0x58
 8004580:	f000 80a3 	beq.w	80046ca <_printf_i+0x16e>
 8004584:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004588:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800458c:	e03a      	b.n	8004604 <_printf_i+0xa8>
 800458e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004592:	2b15      	cmp	r3, #21
 8004594:	d8f6      	bhi.n	8004584 <_printf_i+0x28>
 8004596:	a101      	add	r1, pc, #4	; (adr r1, 800459c <_printf_i+0x40>)
 8004598:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800459c:	080045f5 	.word	0x080045f5
 80045a0:	08004609 	.word	0x08004609
 80045a4:	08004585 	.word	0x08004585
 80045a8:	08004585 	.word	0x08004585
 80045ac:	08004585 	.word	0x08004585
 80045b0:	08004585 	.word	0x08004585
 80045b4:	08004609 	.word	0x08004609
 80045b8:	08004585 	.word	0x08004585
 80045bc:	08004585 	.word	0x08004585
 80045c0:	08004585 	.word	0x08004585
 80045c4:	08004585 	.word	0x08004585
 80045c8:	08004715 	.word	0x08004715
 80045cc:	08004639 	.word	0x08004639
 80045d0:	080046f7 	.word	0x080046f7
 80045d4:	08004585 	.word	0x08004585
 80045d8:	08004585 	.word	0x08004585
 80045dc:	08004737 	.word	0x08004737
 80045e0:	08004585 	.word	0x08004585
 80045e4:	08004639 	.word	0x08004639
 80045e8:	08004585 	.word	0x08004585
 80045ec:	08004585 	.word	0x08004585
 80045f0:	080046ff 	.word	0x080046ff
 80045f4:	682b      	ldr	r3, [r5, #0]
 80045f6:	1d1a      	adds	r2, r3, #4
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	602a      	str	r2, [r5, #0]
 80045fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004600:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004604:	2301      	movs	r3, #1
 8004606:	e0a3      	b.n	8004750 <_printf_i+0x1f4>
 8004608:	6820      	ldr	r0, [r4, #0]
 800460a:	6829      	ldr	r1, [r5, #0]
 800460c:	0606      	lsls	r6, r0, #24
 800460e:	f101 0304 	add.w	r3, r1, #4
 8004612:	d50a      	bpl.n	800462a <_printf_i+0xce>
 8004614:	680e      	ldr	r6, [r1, #0]
 8004616:	602b      	str	r3, [r5, #0]
 8004618:	2e00      	cmp	r6, #0
 800461a:	da03      	bge.n	8004624 <_printf_i+0xc8>
 800461c:	232d      	movs	r3, #45	; 0x2d
 800461e:	4276      	negs	r6, r6
 8004620:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004624:	485e      	ldr	r0, [pc, #376]	; (80047a0 <_printf_i+0x244>)
 8004626:	230a      	movs	r3, #10
 8004628:	e019      	b.n	800465e <_printf_i+0x102>
 800462a:	680e      	ldr	r6, [r1, #0]
 800462c:	602b      	str	r3, [r5, #0]
 800462e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004632:	bf18      	it	ne
 8004634:	b236      	sxthne	r6, r6
 8004636:	e7ef      	b.n	8004618 <_printf_i+0xbc>
 8004638:	682b      	ldr	r3, [r5, #0]
 800463a:	6820      	ldr	r0, [r4, #0]
 800463c:	1d19      	adds	r1, r3, #4
 800463e:	6029      	str	r1, [r5, #0]
 8004640:	0601      	lsls	r1, r0, #24
 8004642:	d501      	bpl.n	8004648 <_printf_i+0xec>
 8004644:	681e      	ldr	r6, [r3, #0]
 8004646:	e002      	b.n	800464e <_printf_i+0xf2>
 8004648:	0646      	lsls	r6, r0, #25
 800464a:	d5fb      	bpl.n	8004644 <_printf_i+0xe8>
 800464c:	881e      	ldrh	r6, [r3, #0]
 800464e:	4854      	ldr	r0, [pc, #336]	; (80047a0 <_printf_i+0x244>)
 8004650:	2f6f      	cmp	r7, #111	; 0x6f
 8004652:	bf0c      	ite	eq
 8004654:	2308      	moveq	r3, #8
 8004656:	230a      	movne	r3, #10
 8004658:	2100      	movs	r1, #0
 800465a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800465e:	6865      	ldr	r5, [r4, #4]
 8004660:	60a5      	str	r5, [r4, #8]
 8004662:	2d00      	cmp	r5, #0
 8004664:	bfa2      	ittt	ge
 8004666:	6821      	ldrge	r1, [r4, #0]
 8004668:	f021 0104 	bicge.w	r1, r1, #4
 800466c:	6021      	strge	r1, [r4, #0]
 800466e:	b90e      	cbnz	r6, 8004674 <_printf_i+0x118>
 8004670:	2d00      	cmp	r5, #0
 8004672:	d04d      	beq.n	8004710 <_printf_i+0x1b4>
 8004674:	4615      	mov	r5, r2
 8004676:	fbb6 f1f3 	udiv	r1, r6, r3
 800467a:	fb03 6711 	mls	r7, r3, r1, r6
 800467e:	5dc7      	ldrb	r7, [r0, r7]
 8004680:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004684:	4637      	mov	r7, r6
 8004686:	42bb      	cmp	r3, r7
 8004688:	460e      	mov	r6, r1
 800468a:	d9f4      	bls.n	8004676 <_printf_i+0x11a>
 800468c:	2b08      	cmp	r3, #8
 800468e:	d10b      	bne.n	80046a8 <_printf_i+0x14c>
 8004690:	6823      	ldr	r3, [r4, #0]
 8004692:	07de      	lsls	r6, r3, #31
 8004694:	d508      	bpl.n	80046a8 <_printf_i+0x14c>
 8004696:	6923      	ldr	r3, [r4, #16]
 8004698:	6861      	ldr	r1, [r4, #4]
 800469a:	4299      	cmp	r1, r3
 800469c:	bfde      	ittt	le
 800469e:	2330      	movle	r3, #48	; 0x30
 80046a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046a8:	1b52      	subs	r2, r2, r5
 80046aa:	6122      	str	r2, [r4, #16]
 80046ac:	f8cd a000 	str.w	sl, [sp]
 80046b0:	464b      	mov	r3, r9
 80046b2:	aa03      	add	r2, sp, #12
 80046b4:	4621      	mov	r1, r4
 80046b6:	4640      	mov	r0, r8
 80046b8:	f7ff fee2 	bl	8004480 <_printf_common>
 80046bc:	3001      	adds	r0, #1
 80046be:	d14c      	bne.n	800475a <_printf_i+0x1fe>
 80046c0:	f04f 30ff 	mov.w	r0, #4294967295
 80046c4:	b004      	add	sp, #16
 80046c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046ca:	4835      	ldr	r0, [pc, #212]	; (80047a0 <_printf_i+0x244>)
 80046cc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80046d0:	6829      	ldr	r1, [r5, #0]
 80046d2:	6823      	ldr	r3, [r4, #0]
 80046d4:	f851 6b04 	ldr.w	r6, [r1], #4
 80046d8:	6029      	str	r1, [r5, #0]
 80046da:	061d      	lsls	r5, r3, #24
 80046dc:	d514      	bpl.n	8004708 <_printf_i+0x1ac>
 80046de:	07df      	lsls	r7, r3, #31
 80046e0:	bf44      	itt	mi
 80046e2:	f043 0320 	orrmi.w	r3, r3, #32
 80046e6:	6023      	strmi	r3, [r4, #0]
 80046e8:	b91e      	cbnz	r6, 80046f2 <_printf_i+0x196>
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	f023 0320 	bic.w	r3, r3, #32
 80046f0:	6023      	str	r3, [r4, #0]
 80046f2:	2310      	movs	r3, #16
 80046f4:	e7b0      	b.n	8004658 <_printf_i+0xfc>
 80046f6:	6823      	ldr	r3, [r4, #0]
 80046f8:	f043 0320 	orr.w	r3, r3, #32
 80046fc:	6023      	str	r3, [r4, #0]
 80046fe:	2378      	movs	r3, #120	; 0x78
 8004700:	4828      	ldr	r0, [pc, #160]	; (80047a4 <_printf_i+0x248>)
 8004702:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004706:	e7e3      	b.n	80046d0 <_printf_i+0x174>
 8004708:	0659      	lsls	r1, r3, #25
 800470a:	bf48      	it	mi
 800470c:	b2b6      	uxthmi	r6, r6
 800470e:	e7e6      	b.n	80046de <_printf_i+0x182>
 8004710:	4615      	mov	r5, r2
 8004712:	e7bb      	b.n	800468c <_printf_i+0x130>
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	6826      	ldr	r6, [r4, #0]
 8004718:	6961      	ldr	r1, [r4, #20]
 800471a:	1d18      	adds	r0, r3, #4
 800471c:	6028      	str	r0, [r5, #0]
 800471e:	0635      	lsls	r5, r6, #24
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	d501      	bpl.n	8004728 <_printf_i+0x1cc>
 8004724:	6019      	str	r1, [r3, #0]
 8004726:	e002      	b.n	800472e <_printf_i+0x1d2>
 8004728:	0670      	lsls	r0, r6, #25
 800472a:	d5fb      	bpl.n	8004724 <_printf_i+0x1c8>
 800472c:	8019      	strh	r1, [r3, #0]
 800472e:	2300      	movs	r3, #0
 8004730:	6123      	str	r3, [r4, #16]
 8004732:	4615      	mov	r5, r2
 8004734:	e7ba      	b.n	80046ac <_printf_i+0x150>
 8004736:	682b      	ldr	r3, [r5, #0]
 8004738:	1d1a      	adds	r2, r3, #4
 800473a:	602a      	str	r2, [r5, #0]
 800473c:	681d      	ldr	r5, [r3, #0]
 800473e:	6862      	ldr	r2, [r4, #4]
 8004740:	2100      	movs	r1, #0
 8004742:	4628      	mov	r0, r5
 8004744:	f7fb fd44 	bl	80001d0 <memchr>
 8004748:	b108      	cbz	r0, 800474e <_printf_i+0x1f2>
 800474a:	1b40      	subs	r0, r0, r5
 800474c:	6060      	str	r0, [r4, #4]
 800474e:	6863      	ldr	r3, [r4, #4]
 8004750:	6123      	str	r3, [r4, #16]
 8004752:	2300      	movs	r3, #0
 8004754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004758:	e7a8      	b.n	80046ac <_printf_i+0x150>
 800475a:	6923      	ldr	r3, [r4, #16]
 800475c:	462a      	mov	r2, r5
 800475e:	4649      	mov	r1, r9
 8004760:	4640      	mov	r0, r8
 8004762:	47d0      	blx	sl
 8004764:	3001      	adds	r0, #1
 8004766:	d0ab      	beq.n	80046c0 <_printf_i+0x164>
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	079b      	lsls	r3, r3, #30
 800476c:	d413      	bmi.n	8004796 <_printf_i+0x23a>
 800476e:	68e0      	ldr	r0, [r4, #12]
 8004770:	9b03      	ldr	r3, [sp, #12]
 8004772:	4298      	cmp	r0, r3
 8004774:	bfb8      	it	lt
 8004776:	4618      	movlt	r0, r3
 8004778:	e7a4      	b.n	80046c4 <_printf_i+0x168>
 800477a:	2301      	movs	r3, #1
 800477c:	4632      	mov	r2, r6
 800477e:	4649      	mov	r1, r9
 8004780:	4640      	mov	r0, r8
 8004782:	47d0      	blx	sl
 8004784:	3001      	adds	r0, #1
 8004786:	d09b      	beq.n	80046c0 <_printf_i+0x164>
 8004788:	3501      	adds	r5, #1
 800478a:	68e3      	ldr	r3, [r4, #12]
 800478c:	9903      	ldr	r1, [sp, #12]
 800478e:	1a5b      	subs	r3, r3, r1
 8004790:	42ab      	cmp	r3, r5
 8004792:	dcf2      	bgt.n	800477a <_printf_i+0x21e>
 8004794:	e7eb      	b.n	800476e <_printf_i+0x212>
 8004796:	2500      	movs	r5, #0
 8004798:	f104 0619 	add.w	r6, r4, #25
 800479c:	e7f5      	b.n	800478a <_printf_i+0x22e>
 800479e:	bf00      	nop
 80047a0:	08004f09 	.word	0x08004f09
 80047a4:	08004f1a 	.word	0x08004f1a

080047a8 <_sbrk_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4d06      	ldr	r5, [pc, #24]	; (80047c4 <_sbrk_r+0x1c>)
 80047ac:	2300      	movs	r3, #0
 80047ae:	4604      	mov	r4, r0
 80047b0:	4608      	mov	r0, r1
 80047b2:	602b      	str	r3, [r5, #0]
 80047b4:	f7fc fa3c 	bl	8000c30 <_sbrk>
 80047b8:	1c43      	adds	r3, r0, #1
 80047ba:	d102      	bne.n	80047c2 <_sbrk_r+0x1a>
 80047bc:	682b      	ldr	r3, [r5, #0]
 80047be:	b103      	cbz	r3, 80047c2 <_sbrk_r+0x1a>
 80047c0:	6023      	str	r3, [r4, #0]
 80047c2:	bd38      	pop	{r3, r4, r5, pc}
 80047c4:	20000188 	.word	0x20000188

080047c8 <__sread>:
 80047c8:	b510      	push	{r4, lr}
 80047ca:	460c      	mov	r4, r1
 80047cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047d0:	f000 fab2 	bl	8004d38 <_read_r>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	bfab      	itete	ge
 80047d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047da:	89a3      	ldrhlt	r3, [r4, #12]
 80047dc:	181b      	addge	r3, r3, r0
 80047de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047e2:	bfac      	ite	ge
 80047e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80047e6:	81a3      	strhlt	r3, [r4, #12]
 80047e8:	bd10      	pop	{r4, pc}

080047ea <__swrite>:
 80047ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047ee:	461f      	mov	r7, r3
 80047f0:	898b      	ldrh	r3, [r1, #12]
 80047f2:	05db      	lsls	r3, r3, #23
 80047f4:	4605      	mov	r5, r0
 80047f6:	460c      	mov	r4, r1
 80047f8:	4616      	mov	r6, r2
 80047fa:	d505      	bpl.n	8004808 <__swrite+0x1e>
 80047fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004800:	2302      	movs	r3, #2
 8004802:	2200      	movs	r2, #0
 8004804:	f000 f9c8 	bl	8004b98 <_lseek_r>
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800480e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	4632      	mov	r2, r6
 8004816:	463b      	mov	r3, r7
 8004818:	4628      	mov	r0, r5
 800481a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800481e:	f000 b869 	b.w	80048f4 <_write_r>

08004822 <__sseek>:
 8004822:	b510      	push	{r4, lr}
 8004824:	460c      	mov	r4, r1
 8004826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800482a:	f000 f9b5 	bl	8004b98 <_lseek_r>
 800482e:	1c43      	adds	r3, r0, #1
 8004830:	89a3      	ldrh	r3, [r4, #12]
 8004832:	bf15      	itete	ne
 8004834:	6560      	strne	r0, [r4, #84]	; 0x54
 8004836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800483a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800483e:	81a3      	strheq	r3, [r4, #12]
 8004840:	bf18      	it	ne
 8004842:	81a3      	strhne	r3, [r4, #12]
 8004844:	bd10      	pop	{r4, pc}

08004846 <__sclose>:
 8004846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484a:	f000 b8d3 	b.w	80049f4 <_close_r>
	...

08004850 <__swbuf_r>:
 8004850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004852:	460e      	mov	r6, r1
 8004854:	4614      	mov	r4, r2
 8004856:	4605      	mov	r5, r0
 8004858:	b118      	cbz	r0, 8004862 <__swbuf_r+0x12>
 800485a:	6983      	ldr	r3, [r0, #24]
 800485c:	b90b      	cbnz	r3, 8004862 <__swbuf_r+0x12>
 800485e:	f7ff fb81 	bl	8003f64 <__sinit>
 8004862:	4b21      	ldr	r3, [pc, #132]	; (80048e8 <__swbuf_r+0x98>)
 8004864:	429c      	cmp	r4, r3
 8004866:	d12b      	bne.n	80048c0 <__swbuf_r+0x70>
 8004868:	686c      	ldr	r4, [r5, #4]
 800486a:	69a3      	ldr	r3, [r4, #24]
 800486c:	60a3      	str	r3, [r4, #8]
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	071a      	lsls	r2, r3, #28
 8004872:	d52f      	bpl.n	80048d4 <__swbuf_r+0x84>
 8004874:	6923      	ldr	r3, [r4, #16]
 8004876:	b36b      	cbz	r3, 80048d4 <__swbuf_r+0x84>
 8004878:	6923      	ldr	r3, [r4, #16]
 800487a:	6820      	ldr	r0, [r4, #0]
 800487c:	1ac0      	subs	r0, r0, r3
 800487e:	6963      	ldr	r3, [r4, #20]
 8004880:	b2f6      	uxtb	r6, r6
 8004882:	4283      	cmp	r3, r0
 8004884:	4637      	mov	r7, r6
 8004886:	dc04      	bgt.n	8004892 <__swbuf_r+0x42>
 8004888:	4621      	mov	r1, r4
 800488a:	4628      	mov	r0, r5
 800488c:	f000 f948 	bl	8004b20 <_fflush_r>
 8004890:	bb30      	cbnz	r0, 80048e0 <__swbuf_r+0x90>
 8004892:	68a3      	ldr	r3, [r4, #8]
 8004894:	3b01      	subs	r3, #1
 8004896:	60a3      	str	r3, [r4, #8]
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	1c5a      	adds	r2, r3, #1
 800489c:	6022      	str	r2, [r4, #0]
 800489e:	701e      	strb	r6, [r3, #0]
 80048a0:	6963      	ldr	r3, [r4, #20]
 80048a2:	3001      	adds	r0, #1
 80048a4:	4283      	cmp	r3, r0
 80048a6:	d004      	beq.n	80048b2 <__swbuf_r+0x62>
 80048a8:	89a3      	ldrh	r3, [r4, #12]
 80048aa:	07db      	lsls	r3, r3, #31
 80048ac:	d506      	bpl.n	80048bc <__swbuf_r+0x6c>
 80048ae:	2e0a      	cmp	r6, #10
 80048b0:	d104      	bne.n	80048bc <__swbuf_r+0x6c>
 80048b2:	4621      	mov	r1, r4
 80048b4:	4628      	mov	r0, r5
 80048b6:	f000 f933 	bl	8004b20 <_fflush_r>
 80048ba:	b988      	cbnz	r0, 80048e0 <__swbuf_r+0x90>
 80048bc:	4638      	mov	r0, r7
 80048be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048c0:	4b0a      	ldr	r3, [pc, #40]	; (80048ec <__swbuf_r+0x9c>)
 80048c2:	429c      	cmp	r4, r3
 80048c4:	d101      	bne.n	80048ca <__swbuf_r+0x7a>
 80048c6:	68ac      	ldr	r4, [r5, #8]
 80048c8:	e7cf      	b.n	800486a <__swbuf_r+0x1a>
 80048ca:	4b09      	ldr	r3, [pc, #36]	; (80048f0 <__swbuf_r+0xa0>)
 80048cc:	429c      	cmp	r4, r3
 80048ce:	bf08      	it	eq
 80048d0:	68ec      	ldreq	r4, [r5, #12]
 80048d2:	e7ca      	b.n	800486a <__swbuf_r+0x1a>
 80048d4:	4621      	mov	r1, r4
 80048d6:	4628      	mov	r0, r5
 80048d8:	f000 f81e 	bl	8004918 <__swsetup_r>
 80048dc:	2800      	cmp	r0, #0
 80048de:	d0cb      	beq.n	8004878 <__swbuf_r+0x28>
 80048e0:	f04f 37ff 	mov.w	r7, #4294967295
 80048e4:	e7ea      	b.n	80048bc <__swbuf_r+0x6c>
 80048e6:	bf00      	nop
 80048e8:	08004eb8 	.word	0x08004eb8
 80048ec:	08004ed8 	.word	0x08004ed8
 80048f0:	08004e98 	.word	0x08004e98

080048f4 <_write_r>:
 80048f4:	b538      	push	{r3, r4, r5, lr}
 80048f6:	4d07      	ldr	r5, [pc, #28]	; (8004914 <_write_r+0x20>)
 80048f8:	4604      	mov	r4, r0
 80048fa:	4608      	mov	r0, r1
 80048fc:	4611      	mov	r1, r2
 80048fe:	2200      	movs	r2, #0
 8004900:	602a      	str	r2, [r5, #0]
 8004902:	461a      	mov	r2, r3
 8004904:	f7fc f943 	bl	8000b8e <_write>
 8004908:	1c43      	adds	r3, r0, #1
 800490a:	d102      	bne.n	8004912 <_write_r+0x1e>
 800490c:	682b      	ldr	r3, [r5, #0]
 800490e:	b103      	cbz	r3, 8004912 <_write_r+0x1e>
 8004910:	6023      	str	r3, [r4, #0]
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	20000188 	.word	0x20000188

08004918 <__swsetup_r>:
 8004918:	4b32      	ldr	r3, [pc, #200]	; (80049e4 <__swsetup_r+0xcc>)
 800491a:	b570      	push	{r4, r5, r6, lr}
 800491c:	681d      	ldr	r5, [r3, #0]
 800491e:	4606      	mov	r6, r0
 8004920:	460c      	mov	r4, r1
 8004922:	b125      	cbz	r5, 800492e <__swsetup_r+0x16>
 8004924:	69ab      	ldr	r3, [r5, #24]
 8004926:	b913      	cbnz	r3, 800492e <__swsetup_r+0x16>
 8004928:	4628      	mov	r0, r5
 800492a:	f7ff fb1b 	bl	8003f64 <__sinit>
 800492e:	4b2e      	ldr	r3, [pc, #184]	; (80049e8 <__swsetup_r+0xd0>)
 8004930:	429c      	cmp	r4, r3
 8004932:	d10f      	bne.n	8004954 <__swsetup_r+0x3c>
 8004934:	686c      	ldr	r4, [r5, #4]
 8004936:	89a3      	ldrh	r3, [r4, #12]
 8004938:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800493c:	0719      	lsls	r1, r3, #28
 800493e:	d42c      	bmi.n	800499a <__swsetup_r+0x82>
 8004940:	06dd      	lsls	r5, r3, #27
 8004942:	d411      	bmi.n	8004968 <__swsetup_r+0x50>
 8004944:	2309      	movs	r3, #9
 8004946:	6033      	str	r3, [r6, #0]
 8004948:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800494c:	81a3      	strh	r3, [r4, #12]
 800494e:	f04f 30ff 	mov.w	r0, #4294967295
 8004952:	e03e      	b.n	80049d2 <__swsetup_r+0xba>
 8004954:	4b25      	ldr	r3, [pc, #148]	; (80049ec <__swsetup_r+0xd4>)
 8004956:	429c      	cmp	r4, r3
 8004958:	d101      	bne.n	800495e <__swsetup_r+0x46>
 800495a:	68ac      	ldr	r4, [r5, #8]
 800495c:	e7eb      	b.n	8004936 <__swsetup_r+0x1e>
 800495e:	4b24      	ldr	r3, [pc, #144]	; (80049f0 <__swsetup_r+0xd8>)
 8004960:	429c      	cmp	r4, r3
 8004962:	bf08      	it	eq
 8004964:	68ec      	ldreq	r4, [r5, #12]
 8004966:	e7e6      	b.n	8004936 <__swsetup_r+0x1e>
 8004968:	0758      	lsls	r0, r3, #29
 800496a:	d512      	bpl.n	8004992 <__swsetup_r+0x7a>
 800496c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800496e:	b141      	cbz	r1, 8004982 <__swsetup_r+0x6a>
 8004970:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004974:	4299      	cmp	r1, r3
 8004976:	d002      	beq.n	800497e <__swsetup_r+0x66>
 8004978:	4630      	mov	r0, r6
 800497a:	f000 f991 	bl	8004ca0 <_free_r>
 800497e:	2300      	movs	r3, #0
 8004980:	6363      	str	r3, [r4, #52]	; 0x34
 8004982:	89a3      	ldrh	r3, [r4, #12]
 8004984:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004988:	81a3      	strh	r3, [r4, #12]
 800498a:	2300      	movs	r3, #0
 800498c:	6063      	str	r3, [r4, #4]
 800498e:	6923      	ldr	r3, [r4, #16]
 8004990:	6023      	str	r3, [r4, #0]
 8004992:	89a3      	ldrh	r3, [r4, #12]
 8004994:	f043 0308 	orr.w	r3, r3, #8
 8004998:	81a3      	strh	r3, [r4, #12]
 800499a:	6923      	ldr	r3, [r4, #16]
 800499c:	b94b      	cbnz	r3, 80049b2 <__swsetup_r+0x9a>
 800499e:	89a3      	ldrh	r3, [r4, #12]
 80049a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80049a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049a8:	d003      	beq.n	80049b2 <__swsetup_r+0x9a>
 80049aa:	4621      	mov	r1, r4
 80049ac:	4630      	mov	r0, r6
 80049ae:	f000 f92b 	bl	8004c08 <__smakebuf_r>
 80049b2:	89a0      	ldrh	r0, [r4, #12]
 80049b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80049b8:	f010 0301 	ands.w	r3, r0, #1
 80049bc:	d00a      	beq.n	80049d4 <__swsetup_r+0xbc>
 80049be:	2300      	movs	r3, #0
 80049c0:	60a3      	str	r3, [r4, #8]
 80049c2:	6963      	ldr	r3, [r4, #20]
 80049c4:	425b      	negs	r3, r3
 80049c6:	61a3      	str	r3, [r4, #24]
 80049c8:	6923      	ldr	r3, [r4, #16]
 80049ca:	b943      	cbnz	r3, 80049de <__swsetup_r+0xc6>
 80049cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80049d0:	d1ba      	bne.n	8004948 <__swsetup_r+0x30>
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
 80049d4:	0781      	lsls	r1, r0, #30
 80049d6:	bf58      	it	pl
 80049d8:	6963      	ldrpl	r3, [r4, #20]
 80049da:	60a3      	str	r3, [r4, #8]
 80049dc:	e7f4      	b.n	80049c8 <__swsetup_r+0xb0>
 80049de:	2000      	movs	r0, #0
 80049e0:	e7f7      	b.n	80049d2 <__swsetup_r+0xba>
 80049e2:	bf00      	nop
 80049e4:	2000000c 	.word	0x2000000c
 80049e8:	08004eb8 	.word	0x08004eb8
 80049ec:	08004ed8 	.word	0x08004ed8
 80049f0:	08004e98 	.word	0x08004e98

080049f4 <_close_r>:
 80049f4:	b538      	push	{r3, r4, r5, lr}
 80049f6:	4d06      	ldr	r5, [pc, #24]	; (8004a10 <_close_r+0x1c>)
 80049f8:	2300      	movs	r3, #0
 80049fa:	4604      	mov	r4, r0
 80049fc:	4608      	mov	r0, r1
 80049fe:	602b      	str	r3, [r5, #0]
 8004a00:	f7fc f8e1 	bl	8000bc6 <_close>
 8004a04:	1c43      	adds	r3, r0, #1
 8004a06:	d102      	bne.n	8004a0e <_close_r+0x1a>
 8004a08:	682b      	ldr	r3, [r5, #0]
 8004a0a:	b103      	cbz	r3, 8004a0e <_close_r+0x1a>
 8004a0c:	6023      	str	r3, [r4, #0]
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
 8004a10:	20000188 	.word	0x20000188

08004a14 <__sflush_r>:
 8004a14:	898a      	ldrh	r2, [r1, #12]
 8004a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a1a:	4605      	mov	r5, r0
 8004a1c:	0710      	lsls	r0, r2, #28
 8004a1e:	460c      	mov	r4, r1
 8004a20:	d458      	bmi.n	8004ad4 <__sflush_r+0xc0>
 8004a22:	684b      	ldr	r3, [r1, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	dc05      	bgt.n	8004a34 <__sflush_r+0x20>
 8004a28:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	dc02      	bgt.n	8004a34 <__sflush_r+0x20>
 8004a2e:	2000      	movs	r0, #0
 8004a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a36:	2e00      	cmp	r6, #0
 8004a38:	d0f9      	beq.n	8004a2e <__sflush_r+0x1a>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a40:	682f      	ldr	r7, [r5, #0]
 8004a42:	602b      	str	r3, [r5, #0]
 8004a44:	d032      	beq.n	8004aac <__sflush_r+0x98>
 8004a46:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a48:	89a3      	ldrh	r3, [r4, #12]
 8004a4a:	075a      	lsls	r2, r3, #29
 8004a4c:	d505      	bpl.n	8004a5a <__sflush_r+0x46>
 8004a4e:	6863      	ldr	r3, [r4, #4]
 8004a50:	1ac0      	subs	r0, r0, r3
 8004a52:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a54:	b10b      	cbz	r3, 8004a5a <__sflush_r+0x46>
 8004a56:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a58:	1ac0      	subs	r0, r0, r3
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a60:	6a21      	ldr	r1, [r4, #32]
 8004a62:	4628      	mov	r0, r5
 8004a64:	47b0      	blx	r6
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	89a3      	ldrh	r3, [r4, #12]
 8004a6a:	d106      	bne.n	8004a7a <__sflush_r+0x66>
 8004a6c:	6829      	ldr	r1, [r5, #0]
 8004a6e:	291d      	cmp	r1, #29
 8004a70:	d82c      	bhi.n	8004acc <__sflush_r+0xb8>
 8004a72:	4a2a      	ldr	r2, [pc, #168]	; (8004b1c <__sflush_r+0x108>)
 8004a74:	40ca      	lsrs	r2, r1
 8004a76:	07d6      	lsls	r6, r2, #31
 8004a78:	d528      	bpl.n	8004acc <__sflush_r+0xb8>
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	6062      	str	r2, [r4, #4]
 8004a7e:	04d9      	lsls	r1, r3, #19
 8004a80:	6922      	ldr	r2, [r4, #16]
 8004a82:	6022      	str	r2, [r4, #0]
 8004a84:	d504      	bpl.n	8004a90 <__sflush_r+0x7c>
 8004a86:	1c42      	adds	r2, r0, #1
 8004a88:	d101      	bne.n	8004a8e <__sflush_r+0x7a>
 8004a8a:	682b      	ldr	r3, [r5, #0]
 8004a8c:	b903      	cbnz	r3, 8004a90 <__sflush_r+0x7c>
 8004a8e:	6560      	str	r0, [r4, #84]	; 0x54
 8004a90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a92:	602f      	str	r7, [r5, #0]
 8004a94:	2900      	cmp	r1, #0
 8004a96:	d0ca      	beq.n	8004a2e <__sflush_r+0x1a>
 8004a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a9c:	4299      	cmp	r1, r3
 8004a9e:	d002      	beq.n	8004aa6 <__sflush_r+0x92>
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	f000 f8fd 	bl	8004ca0 <_free_r>
 8004aa6:	2000      	movs	r0, #0
 8004aa8:	6360      	str	r0, [r4, #52]	; 0x34
 8004aaa:	e7c1      	b.n	8004a30 <__sflush_r+0x1c>
 8004aac:	6a21      	ldr	r1, [r4, #32]
 8004aae:	2301      	movs	r3, #1
 8004ab0:	4628      	mov	r0, r5
 8004ab2:	47b0      	blx	r6
 8004ab4:	1c41      	adds	r1, r0, #1
 8004ab6:	d1c7      	bne.n	8004a48 <__sflush_r+0x34>
 8004ab8:	682b      	ldr	r3, [r5, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0c4      	beq.n	8004a48 <__sflush_r+0x34>
 8004abe:	2b1d      	cmp	r3, #29
 8004ac0:	d001      	beq.n	8004ac6 <__sflush_r+0xb2>
 8004ac2:	2b16      	cmp	r3, #22
 8004ac4:	d101      	bne.n	8004aca <__sflush_r+0xb6>
 8004ac6:	602f      	str	r7, [r5, #0]
 8004ac8:	e7b1      	b.n	8004a2e <__sflush_r+0x1a>
 8004aca:	89a3      	ldrh	r3, [r4, #12]
 8004acc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ad0:	81a3      	strh	r3, [r4, #12]
 8004ad2:	e7ad      	b.n	8004a30 <__sflush_r+0x1c>
 8004ad4:	690f      	ldr	r7, [r1, #16]
 8004ad6:	2f00      	cmp	r7, #0
 8004ad8:	d0a9      	beq.n	8004a2e <__sflush_r+0x1a>
 8004ada:	0793      	lsls	r3, r2, #30
 8004adc:	680e      	ldr	r6, [r1, #0]
 8004ade:	bf08      	it	eq
 8004ae0:	694b      	ldreq	r3, [r1, #20]
 8004ae2:	600f      	str	r7, [r1, #0]
 8004ae4:	bf18      	it	ne
 8004ae6:	2300      	movne	r3, #0
 8004ae8:	eba6 0807 	sub.w	r8, r6, r7
 8004aec:	608b      	str	r3, [r1, #8]
 8004aee:	f1b8 0f00 	cmp.w	r8, #0
 8004af2:	dd9c      	ble.n	8004a2e <__sflush_r+0x1a>
 8004af4:	6a21      	ldr	r1, [r4, #32]
 8004af6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004af8:	4643      	mov	r3, r8
 8004afa:	463a      	mov	r2, r7
 8004afc:	4628      	mov	r0, r5
 8004afe:	47b0      	blx	r6
 8004b00:	2800      	cmp	r0, #0
 8004b02:	dc06      	bgt.n	8004b12 <__sflush_r+0xfe>
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b0a:	81a3      	strh	r3, [r4, #12]
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	e78e      	b.n	8004a30 <__sflush_r+0x1c>
 8004b12:	4407      	add	r7, r0
 8004b14:	eba8 0800 	sub.w	r8, r8, r0
 8004b18:	e7e9      	b.n	8004aee <__sflush_r+0xda>
 8004b1a:	bf00      	nop
 8004b1c:	20400001 	.word	0x20400001

08004b20 <_fflush_r>:
 8004b20:	b538      	push	{r3, r4, r5, lr}
 8004b22:	690b      	ldr	r3, [r1, #16]
 8004b24:	4605      	mov	r5, r0
 8004b26:	460c      	mov	r4, r1
 8004b28:	b913      	cbnz	r3, 8004b30 <_fflush_r+0x10>
 8004b2a:	2500      	movs	r5, #0
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	bd38      	pop	{r3, r4, r5, pc}
 8004b30:	b118      	cbz	r0, 8004b3a <_fflush_r+0x1a>
 8004b32:	6983      	ldr	r3, [r0, #24]
 8004b34:	b90b      	cbnz	r3, 8004b3a <_fflush_r+0x1a>
 8004b36:	f7ff fa15 	bl	8003f64 <__sinit>
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <_fflush_r+0x6c>)
 8004b3c:	429c      	cmp	r4, r3
 8004b3e:	d11b      	bne.n	8004b78 <_fflush_r+0x58>
 8004b40:	686c      	ldr	r4, [r5, #4]
 8004b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0ef      	beq.n	8004b2a <_fflush_r+0xa>
 8004b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004b4c:	07d0      	lsls	r0, r2, #31
 8004b4e:	d404      	bmi.n	8004b5a <_fflush_r+0x3a>
 8004b50:	0599      	lsls	r1, r3, #22
 8004b52:	d402      	bmi.n	8004b5a <_fflush_r+0x3a>
 8004b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b56:	f7ff faa3 	bl	80040a0 <__retarget_lock_acquire_recursive>
 8004b5a:	4628      	mov	r0, r5
 8004b5c:	4621      	mov	r1, r4
 8004b5e:	f7ff ff59 	bl	8004a14 <__sflush_r>
 8004b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004b64:	07da      	lsls	r2, r3, #31
 8004b66:	4605      	mov	r5, r0
 8004b68:	d4e0      	bmi.n	8004b2c <_fflush_r+0xc>
 8004b6a:	89a3      	ldrh	r3, [r4, #12]
 8004b6c:	059b      	lsls	r3, r3, #22
 8004b6e:	d4dd      	bmi.n	8004b2c <_fflush_r+0xc>
 8004b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004b72:	f7ff fa96 	bl	80040a2 <__retarget_lock_release_recursive>
 8004b76:	e7d9      	b.n	8004b2c <_fflush_r+0xc>
 8004b78:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <_fflush_r+0x70>)
 8004b7a:	429c      	cmp	r4, r3
 8004b7c:	d101      	bne.n	8004b82 <_fflush_r+0x62>
 8004b7e:	68ac      	ldr	r4, [r5, #8]
 8004b80:	e7df      	b.n	8004b42 <_fflush_r+0x22>
 8004b82:	4b04      	ldr	r3, [pc, #16]	; (8004b94 <_fflush_r+0x74>)
 8004b84:	429c      	cmp	r4, r3
 8004b86:	bf08      	it	eq
 8004b88:	68ec      	ldreq	r4, [r5, #12]
 8004b8a:	e7da      	b.n	8004b42 <_fflush_r+0x22>
 8004b8c:	08004eb8 	.word	0x08004eb8
 8004b90:	08004ed8 	.word	0x08004ed8
 8004b94:	08004e98 	.word	0x08004e98

08004b98 <_lseek_r>:
 8004b98:	b538      	push	{r3, r4, r5, lr}
 8004b9a:	4d07      	ldr	r5, [pc, #28]	; (8004bb8 <_lseek_r+0x20>)
 8004b9c:	4604      	mov	r4, r0
 8004b9e:	4608      	mov	r0, r1
 8004ba0:	4611      	mov	r1, r2
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	602a      	str	r2, [r5, #0]
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f7fc f834 	bl	8000c14 <_lseek>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	d102      	bne.n	8004bb6 <_lseek_r+0x1e>
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	b103      	cbz	r3, 8004bb6 <_lseek_r+0x1e>
 8004bb4:	6023      	str	r3, [r4, #0]
 8004bb6:	bd38      	pop	{r3, r4, r5, pc}
 8004bb8:	20000188 	.word	0x20000188

08004bbc <__swhatbuf_r>:
 8004bbc:	b570      	push	{r4, r5, r6, lr}
 8004bbe:	460e      	mov	r6, r1
 8004bc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bc4:	2900      	cmp	r1, #0
 8004bc6:	b096      	sub	sp, #88	; 0x58
 8004bc8:	4614      	mov	r4, r2
 8004bca:	461d      	mov	r5, r3
 8004bcc:	da08      	bge.n	8004be0 <__swhatbuf_r+0x24>
 8004bce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	602a      	str	r2, [r5, #0]
 8004bd6:	061a      	lsls	r2, r3, #24
 8004bd8:	d410      	bmi.n	8004bfc <__swhatbuf_r+0x40>
 8004bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bde:	e00e      	b.n	8004bfe <__swhatbuf_r+0x42>
 8004be0:	466a      	mov	r2, sp
 8004be2:	f000 f8bb 	bl	8004d5c <_fstat_r>
 8004be6:	2800      	cmp	r0, #0
 8004be8:	dbf1      	blt.n	8004bce <__swhatbuf_r+0x12>
 8004bea:	9a01      	ldr	r2, [sp, #4]
 8004bec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004bf0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004bf4:	425a      	negs	r2, r3
 8004bf6:	415a      	adcs	r2, r3
 8004bf8:	602a      	str	r2, [r5, #0]
 8004bfa:	e7ee      	b.n	8004bda <__swhatbuf_r+0x1e>
 8004bfc:	2340      	movs	r3, #64	; 0x40
 8004bfe:	2000      	movs	r0, #0
 8004c00:	6023      	str	r3, [r4, #0]
 8004c02:	b016      	add	sp, #88	; 0x58
 8004c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08004c08 <__smakebuf_r>:
 8004c08:	898b      	ldrh	r3, [r1, #12]
 8004c0a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004c0c:	079d      	lsls	r5, r3, #30
 8004c0e:	4606      	mov	r6, r0
 8004c10:	460c      	mov	r4, r1
 8004c12:	d507      	bpl.n	8004c24 <__smakebuf_r+0x1c>
 8004c14:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	6123      	str	r3, [r4, #16]
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	6163      	str	r3, [r4, #20]
 8004c20:	b002      	add	sp, #8
 8004c22:	bd70      	pop	{r4, r5, r6, pc}
 8004c24:	ab01      	add	r3, sp, #4
 8004c26:	466a      	mov	r2, sp
 8004c28:	f7ff ffc8 	bl	8004bbc <__swhatbuf_r>
 8004c2c:	9900      	ldr	r1, [sp, #0]
 8004c2e:	4605      	mov	r5, r0
 8004c30:	4630      	mov	r0, r6
 8004c32:	f7ff fa57 	bl	80040e4 <_malloc_r>
 8004c36:	b948      	cbnz	r0, 8004c4c <__smakebuf_r+0x44>
 8004c38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c3c:	059a      	lsls	r2, r3, #22
 8004c3e:	d4ef      	bmi.n	8004c20 <__smakebuf_r+0x18>
 8004c40:	f023 0303 	bic.w	r3, r3, #3
 8004c44:	f043 0302 	orr.w	r3, r3, #2
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	e7e3      	b.n	8004c14 <__smakebuf_r+0xc>
 8004c4c:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <__smakebuf_r+0x7c>)
 8004c4e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c50:	89a3      	ldrh	r3, [r4, #12]
 8004c52:	6020      	str	r0, [r4, #0]
 8004c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c58:	81a3      	strh	r3, [r4, #12]
 8004c5a:	9b00      	ldr	r3, [sp, #0]
 8004c5c:	6163      	str	r3, [r4, #20]
 8004c5e:	9b01      	ldr	r3, [sp, #4]
 8004c60:	6120      	str	r0, [r4, #16]
 8004c62:	b15b      	cbz	r3, 8004c7c <__smakebuf_r+0x74>
 8004c64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c68:	4630      	mov	r0, r6
 8004c6a:	f000 f889 	bl	8004d80 <_isatty_r>
 8004c6e:	b128      	cbz	r0, 8004c7c <__smakebuf_r+0x74>
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	f043 0301 	orr.w	r3, r3, #1
 8004c7a:	81a3      	strh	r3, [r4, #12]
 8004c7c:	89a0      	ldrh	r0, [r4, #12]
 8004c7e:	4305      	orrs	r5, r0
 8004c80:	81a5      	strh	r5, [r4, #12]
 8004c82:	e7cd      	b.n	8004c20 <__smakebuf_r+0x18>
 8004c84:	08003efd 	.word	0x08003efd

08004c88 <__malloc_lock>:
 8004c88:	4801      	ldr	r0, [pc, #4]	; (8004c90 <__malloc_lock+0x8>)
 8004c8a:	f7ff ba09 	b.w	80040a0 <__retarget_lock_acquire_recursive>
 8004c8e:	bf00      	nop
 8004c90:	2000017c 	.word	0x2000017c

08004c94 <__malloc_unlock>:
 8004c94:	4801      	ldr	r0, [pc, #4]	; (8004c9c <__malloc_unlock+0x8>)
 8004c96:	f7ff ba04 	b.w	80040a2 <__retarget_lock_release_recursive>
 8004c9a:	bf00      	nop
 8004c9c:	2000017c 	.word	0x2000017c

08004ca0 <_free_r>:
 8004ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004ca2:	2900      	cmp	r1, #0
 8004ca4:	d044      	beq.n	8004d30 <_free_r+0x90>
 8004ca6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004caa:	9001      	str	r0, [sp, #4]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f1a1 0404 	sub.w	r4, r1, #4
 8004cb2:	bfb8      	it	lt
 8004cb4:	18e4      	addlt	r4, r4, r3
 8004cb6:	f7ff ffe7 	bl	8004c88 <__malloc_lock>
 8004cba:	4a1e      	ldr	r2, [pc, #120]	; (8004d34 <_free_r+0x94>)
 8004cbc:	9801      	ldr	r0, [sp, #4]
 8004cbe:	6813      	ldr	r3, [r2, #0]
 8004cc0:	b933      	cbnz	r3, 8004cd0 <_free_r+0x30>
 8004cc2:	6063      	str	r3, [r4, #4]
 8004cc4:	6014      	str	r4, [r2, #0]
 8004cc6:	b003      	add	sp, #12
 8004cc8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ccc:	f7ff bfe2 	b.w	8004c94 <__malloc_unlock>
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	d908      	bls.n	8004ce6 <_free_r+0x46>
 8004cd4:	6825      	ldr	r5, [r4, #0]
 8004cd6:	1961      	adds	r1, r4, r5
 8004cd8:	428b      	cmp	r3, r1
 8004cda:	bf01      	itttt	eq
 8004cdc:	6819      	ldreq	r1, [r3, #0]
 8004cde:	685b      	ldreq	r3, [r3, #4]
 8004ce0:	1949      	addeq	r1, r1, r5
 8004ce2:	6021      	streq	r1, [r4, #0]
 8004ce4:	e7ed      	b.n	8004cc2 <_free_r+0x22>
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	b10b      	cbz	r3, 8004cf0 <_free_r+0x50>
 8004cec:	42a3      	cmp	r3, r4
 8004cee:	d9fa      	bls.n	8004ce6 <_free_r+0x46>
 8004cf0:	6811      	ldr	r1, [r2, #0]
 8004cf2:	1855      	adds	r5, r2, r1
 8004cf4:	42a5      	cmp	r5, r4
 8004cf6:	d10b      	bne.n	8004d10 <_free_r+0x70>
 8004cf8:	6824      	ldr	r4, [r4, #0]
 8004cfa:	4421      	add	r1, r4
 8004cfc:	1854      	adds	r4, r2, r1
 8004cfe:	42a3      	cmp	r3, r4
 8004d00:	6011      	str	r1, [r2, #0]
 8004d02:	d1e0      	bne.n	8004cc6 <_free_r+0x26>
 8004d04:	681c      	ldr	r4, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	6053      	str	r3, [r2, #4]
 8004d0a:	4421      	add	r1, r4
 8004d0c:	6011      	str	r1, [r2, #0]
 8004d0e:	e7da      	b.n	8004cc6 <_free_r+0x26>
 8004d10:	d902      	bls.n	8004d18 <_free_r+0x78>
 8004d12:	230c      	movs	r3, #12
 8004d14:	6003      	str	r3, [r0, #0]
 8004d16:	e7d6      	b.n	8004cc6 <_free_r+0x26>
 8004d18:	6825      	ldr	r5, [r4, #0]
 8004d1a:	1961      	adds	r1, r4, r5
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	bf04      	itt	eq
 8004d20:	6819      	ldreq	r1, [r3, #0]
 8004d22:	685b      	ldreq	r3, [r3, #4]
 8004d24:	6063      	str	r3, [r4, #4]
 8004d26:	bf04      	itt	eq
 8004d28:	1949      	addeq	r1, r1, r5
 8004d2a:	6021      	streq	r1, [r4, #0]
 8004d2c:	6054      	str	r4, [r2, #4]
 8004d2e:	e7ca      	b.n	8004cc6 <_free_r+0x26>
 8004d30:	b003      	add	sp, #12
 8004d32:	bd30      	pop	{r4, r5, pc}
 8004d34:	20000180 	.word	0x20000180

08004d38 <_read_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	4d07      	ldr	r5, [pc, #28]	; (8004d58 <_read_r+0x20>)
 8004d3c:	4604      	mov	r4, r0
 8004d3e:	4608      	mov	r0, r1
 8004d40:	4611      	mov	r1, r2
 8004d42:	2200      	movs	r2, #0
 8004d44:	602a      	str	r2, [r5, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	f7fb ff04 	bl	8000b54 <_read>
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	d102      	bne.n	8004d56 <_read_r+0x1e>
 8004d50:	682b      	ldr	r3, [r5, #0]
 8004d52:	b103      	cbz	r3, 8004d56 <_read_r+0x1e>
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	bd38      	pop	{r3, r4, r5, pc}
 8004d58:	20000188 	.word	0x20000188

08004d5c <_fstat_r>:
 8004d5c:	b538      	push	{r3, r4, r5, lr}
 8004d5e:	4d07      	ldr	r5, [pc, #28]	; (8004d7c <_fstat_r+0x20>)
 8004d60:	2300      	movs	r3, #0
 8004d62:	4604      	mov	r4, r0
 8004d64:	4608      	mov	r0, r1
 8004d66:	4611      	mov	r1, r2
 8004d68:	602b      	str	r3, [r5, #0]
 8004d6a:	f7fb ff38 	bl	8000bde <_fstat>
 8004d6e:	1c43      	adds	r3, r0, #1
 8004d70:	d102      	bne.n	8004d78 <_fstat_r+0x1c>
 8004d72:	682b      	ldr	r3, [r5, #0]
 8004d74:	b103      	cbz	r3, 8004d78 <_fstat_r+0x1c>
 8004d76:	6023      	str	r3, [r4, #0]
 8004d78:	bd38      	pop	{r3, r4, r5, pc}
 8004d7a:	bf00      	nop
 8004d7c:	20000188 	.word	0x20000188

08004d80 <_isatty_r>:
 8004d80:	b538      	push	{r3, r4, r5, lr}
 8004d82:	4d06      	ldr	r5, [pc, #24]	; (8004d9c <_isatty_r+0x1c>)
 8004d84:	2300      	movs	r3, #0
 8004d86:	4604      	mov	r4, r0
 8004d88:	4608      	mov	r0, r1
 8004d8a:	602b      	str	r3, [r5, #0]
 8004d8c:	f7fb ff37 	bl	8000bfe <_isatty>
 8004d90:	1c43      	adds	r3, r0, #1
 8004d92:	d102      	bne.n	8004d9a <_isatty_r+0x1a>
 8004d94:	682b      	ldr	r3, [r5, #0]
 8004d96:	b103      	cbz	r3, 8004d9a <_isatty_r+0x1a>
 8004d98:	6023      	str	r3, [r4, #0]
 8004d9a:	bd38      	pop	{r3, r4, r5, pc}
 8004d9c:	20000188 	.word	0x20000188

08004da0 <_init>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	bf00      	nop
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr

08004dac <_fini>:
 8004dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dae:	bf00      	nop
 8004db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004db2:	bc08      	pop	{r3}
 8004db4:	469e      	mov	lr, r3
 8004db6:	4770      	bx	lr
