
L4Initial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000344  08007b44  08007b44  00017b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e88  08007e88  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08007e88  08007e88  00017e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e90  08007e90  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e90  08007e90  00017e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e94  08007e94  00017e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007e98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f8  20000088  08007f20  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08007f20  00020480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010e36  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026fe  00000000  00000000  00030eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  000335f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000da8  00000000  00000000  000344b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001cc40  00000000  00000000  00035258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001486e  00000000  00000000  00051e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a74ca  00000000  00000000  00066706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010dbd0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043b8  00000000  00000000  0010dc20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007b2c 	.word	0x08007b2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08007b2c 	.word	0x08007b2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
#if(_DEBUG)
PUTCHAR_PROTOTYPE {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800057c:	1d39      	adds	r1, r7, #4
 800057e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000582:	2201      	movs	r2, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <__io_putchar+0x20>)
 8000586:	f002 fcbf 	bl	8002f08 <HAL_UART_Transmit>

	return ch;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000016c 	.word	0x2000016c

08000598 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000598:	b590      	push	{r4, r7, lr}
 800059a:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 800059e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a0:	f000 fcca 	bl	8000f38 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a4:	f000 f904 	bl	80007b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a8:	f000 f9fe 	bl	80009a8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005ac:	f000 f9cc 	bl	8000948 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80005b0:	f000 f94e 	bl	8000850 <MX_SPI1_Init>
	MX_FATFS_Init();
 80005b4:	f003 f946 	bl	8003844 <MX_FATFS_Init>
	MX_SPI2_Init();
 80005b8:	f000 f988 	bl	80008cc <MX_SPI2_Init>
	/* USER CODE BEGIN 2 */
	printf("File system demo\r\n");
 80005bc:	486b      	ldr	r0, [pc, #428]	; (800076c <main+0x1d4>)
 80005be:	f006 fb37 	bl	8006c30 <puts>
	HAL_Delay(3000);
 80005c2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80005c6:	f000 fd33 	bl	8001030 <HAL_Delay>

	//FILE SYSTEM MOUNTING
	FRESULT result = f_mount(&fs, "", 1);
 80005ca:	2201      	movs	r2, #1
 80005cc:	4968      	ldr	r1, [pc, #416]	; (8000770 <main+0x1d8>)
 80005ce:	4869      	ldr	r0, [pc, #420]	; (8000774 <main+0x1dc>)
 80005d0:	f005 fbc8 	bl	8005d64 <f_mount>
 80005d4:	4603      	mov	r3, r0
 80005d6:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
	if (result != FR_OK) {
 80005da:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d006      	beq.n	80005f0 <main+0x58>
		printf("Mounting failed: %d\r\n", result);
 80005e2:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 80005e6:	4619      	mov	r1, r3
 80005e8:	4863      	ldr	r0, [pc, #396]	; (8000778 <main+0x1e0>)
 80005ea:	f006 fa9b 	bl	8006b24 <iprintf>
		while (1)
 80005ee:	e7fe      	b.n	80005ee <main+0x56>
			;
	}

	//FILE SYSTEM ANALYSIS
	DWORD free_clusters, free_sectors, total_sectors;
	FATFS *getFreeFs = &fs;
 80005f0:	4b60      	ldr	r3, [pc, #384]	; (8000774 <main+0x1dc>)
 80005f2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
	result = f_getfree("", &free_clusters, &getFreeFs);
 80005f6:	f507 7216 	add.w	r2, r7, #600	; 0x258
 80005fa:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 80005fe:	4619      	mov	r1, r3
 8000600:	485b      	ldr	r0, [pc, #364]	; (8000770 <main+0x1d8>)
 8000602:	f006 f90f 	bl	8006824 <f_getfree>
 8000606:	4603      	mov	r3, r0
 8000608:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
	if (result != FR_OK) {
 800060c:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 8000610:	2b00      	cmp	r3, #0
 8000612:	d006      	beq.n	8000622 <main+0x8a>
		printf("f_getfree error (%i)\r\n", result);
 8000614:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 8000618:	4619      	mov	r1, r3
 800061a:	4858      	ldr	r0, [pc, #352]	; (800077c <main+0x1e4>)
 800061c:	f006 fa82 	bl	8006b24 <iprintf>
		while (1)
 8000620:	e7fe      	b.n	8000620 <main+0x88>
			;
	}

	//Formula comes from ChaN's documentation
	total_sectors = (getFreeFs->n_fatent - 2) * getFreeFs->csize;
 8000622:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8000626:	695b      	ldr	r3, [r3, #20]
 8000628:	3b02      	subs	r3, #2
 800062a:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 800062e:	8952      	ldrh	r2, [r2, #10]
 8000630:	fb02 f303 	mul.w	r3, r2, r3
 8000634:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
	free_sectors = free_clusters * getFreeFs->csize;
 8000638:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 800063c:	895b      	ldrh	r3, [r3, #10]
 800063e:	461a      	mov	r2, r3
 8000640:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8000644:	fb02 f303 	mul.w	r3, r2, r3
 8000648:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264

	printf(
 800064c:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8000650:	0859      	lsrs	r1, r3, #1
 8000652:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 8000656:	085b      	lsrs	r3, r3, #1
 8000658:	461a      	mov	r2, r3
 800065a:	4849      	ldr	r0, [pc, #292]	; (8000780 <main+0x1e8>)
 800065c:	f006 fa62 	bl	8006b24 <iprintf>
			"SD card stats:\r\n%10lu KiB total drive space.\r\n%10lu KiB available.\r\n",
			total_sectors / 2, free_sectors / 2);

	//FILE SYSTEM READ
	FIL file; //For some reason they chose not to use the C std file type
	result = f_open(&file, "test.txt", FA_READ);
 8000660:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000664:	2201      	movs	r2, #1
 8000666:	4947      	ldr	r1, [pc, #284]	; (8000784 <main+0x1ec>)
 8000668:	4618      	mov	r0, r3
 800066a:	f005 fbc1 	bl	8005df0 <f_open>
 800066e:	4603      	mov	r3, r0
 8000670:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
	if (result != FR_OK) {
 8000674:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 8000678:	2b00      	cmp	r3, #0
 800067a:	d006      	beq.n	800068a <main+0xf2>
		printf("f_open error (%i)\r\n", result);
 800067c:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 8000680:	4619      	mov	r1, r3
 8000682:	4841      	ldr	r0, [pc, #260]	; (8000788 <main+0x1f0>)
 8000684:	f006 fa4e 	bl	8006b24 <iprintf>
		while (1)
 8000688:	e7fe      	b.n	8000688 <main+0xf0>
			;
	}
	printf("Open file for read: SUCCESS\r\n");
 800068a:	4840      	ldr	r0, [pc, #256]	; (800078c <main+0x1f4>)
 800068c:	f006 fad0 	bl	8006c30 <puts>
	//Read 30 bytes from "test.txt" on the SD card
	BYTE readBuf[30];
	//We can either use f_read OR f_gets to get data out of files
	//f_gets is a wrapper on f_read that does some string formatting for us
	TCHAR *rres = f_gets((TCHAR*) readBuf, 30, &file);
 8000690:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000694:	f107 0308 	add.w	r3, r7, #8
 8000698:	211e      	movs	r1, #30
 800069a:	4618      	mov	r0, r3
 800069c:	f006 f977 	bl	800698e <f_gets>
 80006a0:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
	if (rres != 0) {
 80006a4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d006      	beq.n	80006ba <main+0x122>
		printf("Read string from 'test.txt' contents: %s\r\n", readBuf);
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	4619      	mov	r1, r3
 80006b2:	4837      	ldr	r0, [pc, #220]	; (8000790 <main+0x1f8>)
 80006b4:	f006 fa36 	bl	8006b24 <iprintf>
 80006b8:	e005      	b.n	80006c6 <main+0x12e>
	} else {
		printf("f_gets error (%i)\r\n", result);
 80006ba:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 80006be:	4619      	mov	r1, r3
 80006c0:	4834      	ldr	r0, [pc, #208]	; (8000794 <main+0x1fc>)
 80006c2:	f006 fa2f 	bl	8006b24 <iprintf>
	}

	f_close(&file);
 80006c6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006ca:	4618      	mov	r0, r3
 80006cc:	f006 f880 	bl	80067d0 <f_close>

	//FILE SYSTEM WRITE
	result = f_open(&file, "write.txt",
 80006d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006d4:	221a      	movs	r2, #26
 80006d6:	4930      	ldr	r1, [pc, #192]	; (8000798 <main+0x200>)
 80006d8:	4618      	mov	r0, r3
 80006da:	f005 fb89 	bl	8005df0 <f_open>
 80006de:	4603      	mov	r3, r0
 80006e0:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
			FA_WRITE | FA_OPEN_ALWAYS | FA_CREATE_ALWAYS);
	if (result == FR_OK) {
 80006e4:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d103      	bne.n	80006f4 <main+0x15c>
		printf("Open for write: SUCCESS\r\n");
 80006ec:	482b      	ldr	r0, [pc, #172]	; (800079c <main+0x204>)
 80006ee:	f006 fa9f 	bl	8006c30 <puts>
 80006f2:	e005      	b.n	8000700 <main+0x168>
	} else {
		printf("f_open error (%i)\r\n", result);
 80006f4:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 80006f8:	4619      	mov	r1, r3
 80006fa:	4823      	ldr	r0, [pc, #140]	; (8000788 <main+0x1f0>)
 80006fc:	f006 fa12 	bl	8006b24 <iprintf>
	}

	//Copy in a string
	strncpy((char*) readBuf, "Test write file", 16);
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4a26      	ldr	r2, [pc, #152]	; (80007a0 <main+0x208>)
 8000706:	461c      	mov	r4, r3
 8000708:	4613      	mov	r3, r2
 800070a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800070c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UINT bytesWrote;
	result = f_write(&file, readBuf, 16, &bytesWrote);
 8000710:	1d3b      	adds	r3, r7, #4
 8000712:	f107 0108 	add.w	r1, r7, #8
 8000716:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800071a:	2210      	movs	r2, #16
 800071c:	f005 fe65 	bl	80063ea <f_write>
 8000720:	4603      	mov	r3, r0
 8000722:	f887 326f 	strb.w	r3, [r7, #623]	; 0x26f
	if (result == FR_OK) {
 8000726:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 800072a:	2b00      	cmp	r3, #0
 800072c:	d109      	bne.n	8000742 <main+0x1aa>
		printf("Wrote %i bytes to 'write.txt'!\r\n", bytesWrote);
 800072e:	f507 731c 	add.w	r3, r7, #624	; 0x270
 8000732:	f5a3 731b 	sub.w	r3, r3, #620	; 0x26c
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4619      	mov	r1, r3
 800073a:	481a      	ldr	r0, [pc, #104]	; (80007a4 <main+0x20c>)
 800073c:	f006 f9f2 	bl	8006b24 <iprintf>
 8000740:	e005      	b.n	800074e <main+0x1b6>
	} else {
		printf("f_write error (%i)\r\n", result);
 8000742:	f897 326f 	ldrb.w	r3, [r7, #623]	; 0x26f
 8000746:	4619      	mov	r1, r3
 8000748:	4817      	ldr	r0, [pc, #92]	; (80007a8 <main+0x210>)
 800074a:	f006 f9eb 	bl	8006b24 <iprintf>
	}
	f_close(&file);
 800074e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000752:	4618      	mov	r0, r3
 8000754:	f006 f83c 	bl	80067d0 <f_close>

	//FILE SYSTEM UNMOUNT
	f_mount(NULL, "", 0);
 8000758:	2200      	movs	r2, #0
 800075a:	4905      	ldr	r1, [pc, #20]	; (8000770 <main+0x1d8>)
 800075c:	2000      	movs	r0, #0
 800075e:	f005 fb01 	bl	8005d64 <f_mount>

	printf("Entering eternal loop\n\n\r");
 8000762:	4812      	ldr	r0, [pc, #72]	; (80007ac <main+0x214>)
 8000764:	f006 f9de 	bl	8006b24 <iprintf>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000768:	e7fe      	b.n	8000768 <main+0x1d0>
 800076a:	bf00      	nop
 800076c:	08007b44 	.word	0x08007b44
 8000770:	08007b58 	.word	0x08007b58
 8000774:	200001f0 	.word	0x200001f0
 8000778:	08007b5c 	.word	0x08007b5c
 800077c:	08007b74 	.word	0x08007b74
 8000780:	08007b8c 	.word	0x08007b8c
 8000784:	08007bd4 	.word	0x08007bd4
 8000788:	08007be0 	.word	0x08007be0
 800078c:	08007bf4 	.word	0x08007bf4
 8000790:	08007c14 	.word	0x08007c14
 8000794:	08007c40 	.word	0x08007c40
 8000798:	08007c54 	.word	0x08007c54
 800079c:	08007c60 	.word	0x08007c60
 80007a0:	08007c7c 	.word	0x08007c7c
 80007a4:	08007c8c 	.word	0x08007c8c
 80007a8:	08007cb0 	.word	0x08007cb0
 80007ac:	08007cc8 	.word	0x08007cc8

080007b0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b096      	sub	sp, #88	; 0x58
 80007b4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	2244      	movs	r2, #68	; 0x44
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f006 f9a8 	bl	8006b14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80007c4:	463b      	mov	r3, r7
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80007d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007d6:	f000 fecd 	bl	8001574 <HAL_PWREx_ControlVoltageScaling>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80007e0:	f000 f98a 	bl	8000af8 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80007e4:	2310      	movs	r3, #16
 80007e6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80007e8:	2301      	movs	r3, #1
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80007f0:	2360      	movs	r3, #96	; 0x60
 80007f2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f4:	2302      	movs	r3, #2
 80007f6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80007f8:	2301      	movs	r3, #1
 80007fa:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80007fc:	2301      	movs	r3, #1
 80007fe:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000800:	2328      	movs	r3, #40	; 0x28
 8000802:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000804:	2302      	movs	r3, #2
 8000806:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800080c:	f107 0314 	add.w	r3, r7, #20
 8000810:	4618      	mov	r0, r3
 8000812:	f000 ff05 	bl	8001620 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x70>
		Error_Handler();
 800081c:	f000 f96c 	bl	8000af8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000824:	2303      	movs	r3, #3
 8000826:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800082c:	2300      	movs	r3, #0
 800082e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000834:	463b      	mov	r3, r7
 8000836:	2104      	movs	r1, #4
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fb53 	bl	8001ee4 <HAL_RCC_ClockConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x98>
		Error_Handler();
 8000844:	f000 f958 	bl	8000af8 <Error_Handler>
	}
}
 8000848:	bf00      	nop
 800084a:	3758      	adds	r7, #88	; 0x58
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}

08000850 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_SPI1_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_SPI1_Init+0x74>)
 800085c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000860:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000862:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000868:	4b16      	ldr	r3, [pc, #88]	; (80008c4 <MX_SPI1_Init+0x74>)
 800086a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800086e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000876:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800087c:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_SPI1_Init+0x74>)
 800087e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000882:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_SPI1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000892:	2200      	movs	r2, #0
 8000894:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_SPI1_Init+0x74>)
 8000898:	2200      	movs	r2, #0
 800089a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_SPI1_Init+0x74>)
 800089e:	2207      	movs	r2, #7
 80008a0:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_SPI1_Init+0x74>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_SPI1_Init+0x74>)
 80008aa:	2208      	movs	r2, #8
 80008ac:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_SPI1_Init+0x74>)
 80008b0:	f001 fec2 	bl	8002638 <HAL_SPI_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_SPI1_Init+0x6e>
		Error_Handler();
 80008ba:	f000 f91d 	bl	8000af8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	200000a4 	.word	0x200000a4
 80008c8:	40013000 	.word	0x40013000

080008cc <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_SPI2_Init+0x74>)
 80008d2:	4a1c      	ldr	r2, [pc, #112]	; (8000944 <MX_SPI2_Init+0x78>)
 80008d4:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <MX_SPI2_Init+0x74>)
 80008d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008dc:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008de:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_SPI2_Init+0x74>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008e4:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI2_Init+0x74>)
 80008e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80008ea:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ec:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI2_Init+0x74>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f2:	4b13      	ldr	r3, [pc, #76]	; (8000940 <MX_SPI2_Init+0x74>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 80008f8:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI2_Init+0x74>)
 80008fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fe:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI2_Init+0x74>)
 8000902:	2238      	movs	r2, #56	; 0x38
 8000904:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI2_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI2_Init+0x74>)
 800090e:	2200      	movs	r2, #0
 8000910:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <MX_SPI2_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 7;
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI2_Init+0x74>)
 800091a:	2207      	movs	r2, #7
 800091c:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091e:	4b08      	ldr	r3, [pc, #32]	; (8000940 <MX_SPI2_Init+0x74>)
 8000920:	2200      	movs	r2, #0
 8000922:	631a      	str	r2, [r3, #48]	; 0x30
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI2_Init+0x74>)
 8000926:	2208      	movs	r2, #8
 8000928:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800092a:	4805      	ldr	r0, [pc, #20]	; (8000940 <MX_SPI2_Init+0x74>)
 800092c:	f001 fe84 	bl	8002638 <HAL_SPI_Init>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_SPI2_Init+0x6e>
		Error_Handler();
 8000936:	f000 f8df 	bl	8000af8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000108 	.word	0x20000108
 8000944:	40003800 	.word	0x40003800

08000948 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800094c:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800094e:	4a15      	ldr	r2, [pc, #84]	; (80009a4 <MX_USART2_UART_Init+0x5c>)
 8000950:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000952:	4b13      	ldr	r3, [pc, #76]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000954:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000958:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 8000986:	2200      	movs	r2, #0
 8000988:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USART2_UART_Init+0x58>)
 800098c:	f002 fa6e 	bl	8002e6c <HAL_UART_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000996:	f000 f8af 	bl	8000af8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2000016c 	.word	0x2000016c
 80009a4:	40004400 	.word	0x40004400

080009a8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	; 0x28
 80009ac:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4b4b      	ldr	r3, [pc, #300]	; (8000aec <MX_GPIO_Init+0x144>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	4a4a      	ldr	r2, [pc, #296]	; (8000aec <MX_GPIO_Init+0x144>)
 80009c4:	f043 0304 	orr.w	r3, r3, #4
 80009c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ca:	4b48      	ldr	r3, [pc, #288]	; (8000aec <MX_GPIO_Init+0x144>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	f003 0304 	and.w	r3, r3, #4
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009d6:	4b45      	ldr	r3, [pc, #276]	; (8000aec <MX_GPIO_Init+0x144>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	4a44      	ldr	r2, [pc, #272]	; (8000aec <MX_GPIO_Init+0x144>)
 80009dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e2:	4b42      	ldr	r3, [pc, #264]	; (8000aec <MX_GPIO_Init+0x144>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80009ee:	4b3f      	ldr	r3, [pc, #252]	; (8000aec <MX_GPIO_Init+0x144>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	4a3e      	ldr	r2, [pc, #248]	; (8000aec <MX_GPIO_Init+0x144>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fa:	4b3c      	ldr	r3, [pc, #240]	; (8000aec <MX_GPIO_Init+0x144>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a06:	4b39      	ldr	r3, [pc, #228]	; (8000aec <MX_GPIO_Init+0x144>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	4a38      	ldr	r2, [pc, #224]	; (8000aec <MX_GPIO_Init+0x144>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a12:	4b36      	ldr	r3, [pc, #216]	; (8000aec <MX_GPIO_Init+0x144>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin,
 8000a1e:	2200      	movs	r2, #0
 8000a20:	21b0      	movs	r1, #176	; 0xb0
 8000a22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a26:	f000 fd7f 	bl	8001528 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a30:	482f      	ldr	r0, [pc, #188]	; (8000af0 <MX_GPIO_Init+0x148>)
 8000a32:	f000 fd79 	bl	8001528 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3c:	482d      	ldr	r0, [pc, #180]	; (8000af4 <MX_GPIO_Init+0x14c>)
 8000a3e:	f000 fd73 	bl	8001528 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(AX_CS_GPIO_Port, AX_CS_Pin, GPIO_PIN_SET);
 8000a42:	2201      	movs	r2, #1
 8000a44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a4c:	f000 fd6c 	bl	8001528 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a54:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a56:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a5a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4823      	ldr	r0, [pc, #140]	; (8000af4 <MX_GPIO_Init+0x14c>)
 8000a68:	f000 fbec 	bl	8001244 <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin AX_CS_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin | AX_CS_Pin;
 8000a6c:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8000a70:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a88:	f000 fbdc 	bl	8001244 <HAL_GPIO_Init>

	/*Configure GPIO pin : SMPS_PG_Pin */
	GPIO_InitStruct.Pin = SMPS_PG_Pin;
 8000a8c:	2340      	movs	r3, #64	; 0x40
 8000a8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a94:	2301      	movs	r3, #1
 8000a96:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000a98:	f107 0314 	add.w	r3, r7, #20
 8000a9c:	4619      	mov	r1, r3
 8000a9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa2:	f000 fbcf 	bl	8001244 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 8000aa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aaa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	480c      	ldr	r0, [pc, #48]	; (8000af0 <MX_GPIO_Init+0x148>)
 8000ac0:	f000 fbc0 	bl	8001244 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 8000ac4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aca:	2301      	movs	r3, #1
 8000acc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8000ad6:	f107 0314 	add.w	r3, r7, #20
 8000ada:	4619      	mov	r1, r3
 8000adc:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_GPIO_Init+0x14c>)
 8000ade:	f000 fbb1 	bl	8001244 <HAL_GPIO_Init>

}
 8000ae2:	bf00      	nop
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000
 8000af0:	48000400 	.word	0x48000400
 8000af4:	48000800 	.word	0x48000800

08000af8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000afc:	b672      	cpsid	i
}
 8000afe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000b00:	e7fe      	b.n	8000b00 <Error_Handler+0x8>
	...

08000b04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <HAL_MspInit+0x44>)
 8000b0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0e:	4a0e      	ldr	r2, [pc, #56]	; (8000b48 <HAL_MspInit+0x44>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6613      	str	r3, [r2, #96]	; 0x60
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_MspInit+0x44>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	607b      	str	r3, [r7, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <HAL_MspInit+0x44>)
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_MspInit+0x44>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b36:	603b      	str	r3, [r7, #0]
 8000b38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	; 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a3d      	ldr	r2, [pc, #244]	; (8000c60 <HAL_SPI_MspInit+0x114>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12a      	bne.n	8000bc4 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b6e:	4b3d      	ldr	r3, [pc, #244]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000b70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b72:	4a3c      	ldr	r2, [pc, #240]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000b74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b78:	6613      	str	r3, [r2, #96]	; 0x60
 8000b7a:	4b3a      	ldr	r3, [pc, #232]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b82:	61bb      	str	r3, [r7, #24]
 8000b84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a36      	ldr	r2, [pc, #216]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b34      	ldr	r3, [pc, #208]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 8000b9e:	f641 0302 	movw	r3, #6146	; 0x1802
 8000ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bac:	2303      	movs	r3, #3
 8000bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000bb0:	2305      	movs	r3, #5
 8000bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 031c 	add.w	r3, r7, #28
 8000bb8:	4619      	mov	r1, r3
 8000bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbe:	f000 fb41 	bl	8001244 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000bc2:	e049      	b.n	8000c58 <HAL_SPI_MspInit+0x10c>
  else if(hspi->Instance==SPI2)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a27      	ldr	r2, [pc, #156]	; (8000c68 <HAL_SPI_MspInit+0x11c>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d144      	bne.n	8000c58 <HAL_SPI_MspInit+0x10c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000bce:	4b25      	ldr	r3, [pc, #148]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd2:	4a24      	ldr	r2, [pc, #144]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000bd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd8:	6593      	str	r3, [r2, #88]	; 0x58
 8000bda:	4b22      	ldr	r3, [pc, #136]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be2:	613b      	str	r3, [r7, #16]
 8000be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be6:	4b1f      	ldr	r3, [pc, #124]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf2:	4b1c      	ldr	r3, [pc, #112]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	4b19      	ldr	r3, [pc, #100]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a18      	ldr	r2, [pc, #96]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000c04:	f043 0302 	orr.w	r3, r3, #2
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b16      	ldr	r3, [pc, #88]	; (8000c64 <HAL_SPI_MspInit+0x118>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000c16:	230c      	movs	r3, #12
 8000c18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c26:	2305      	movs	r3, #5
 8000c28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	480e      	ldr	r0, [pc, #56]	; (8000c6c <HAL_SPI_MspInit+0x120>)
 8000c32:	f000 fb07 	bl	8001244 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c40:	2300      	movs	r3, #0
 8000c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c44:	2303      	movs	r3, #3
 8000c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c48:	2305      	movs	r3, #5
 8000c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4c:	f107 031c 	add.w	r3, r7, #28
 8000c50:	4619      	mov	r1, r3
 8000c52:	4807      	ldr	r0, [pc, #28]	; (8000c70 <HAL_SPI_MspInit+0x124>)
 8000c54:	f000 faf6 	bl	8001244 <HAL_GPIO_Init>
}
 8000c58:	bf00      	nop
 8000c5a:	3730      	adds	r7, #48	; 0x30
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40013000 	.word	0x40013000
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40003800 	.word	0x40003800
 8000c6c:	48000800 	.word	0x48000800
 8000c70:	48000400 	.word	0x48000400

08000c74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b096      	sub	sp, #88	; 0x58
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	2234      	movs	r2, #52	; 0x34
 8000c92:	2100      	movs	r1, #0
 8000c94:	4618      	mov	r0, r3
 8000c96:	f005 ff3d 	bl	8006b14 <memset>
  if(huart->Instance==USART2)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a1f      	ldr	r2, [pc, #124]	; (8000d1c <HAL_UART_MspInit+0xa8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d136      	bne.n	8000d12 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 fb3b 	bl	800232c <HAL_RCCEx_PeriphCLKConfig>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d001      	beq.n	8000cc0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cbc:	f7ff ff1c 	bl	8000af8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_UART_MspInit+0xac>)
 8000cc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cc4:	4a16      	ldr	r2, [pc, #88]	; (8000d20 <HAL_UART_MspInit+0xac>)
 8000cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cca:	6593      	str	r3, [r2, #88]	; 0x58
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_UART_MspInit+0xac>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd8:	4b11      	ldr	r3, [pc, #68]	; (8000d20 <HAL_UART_MspInit+0xac>)
 8000cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cdc:	4a10      	ldr	r2, [pc, #64]	; (8000d20 <HAL_UART_MspInit+0xac>)
 8000cde:	f043 0301 	orr.w	r3, r3, #1
 8000ce2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ce4:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_UART_MspInit+0xac>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf0:	230c      	movs	r3, #12
 8000cf2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	2303      	movs	r3, #3
 8000cfe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d00:	2307      	movs	r3, #7
 8000d02:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f000 fa99 	bl	8001244 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d12:	bf00      	nop
 8000d14:	3758      	adds	r7, #88	; 0x58
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40004400 	.word	0x40004400
 8000d20:	40021000 	.word	0x40021000

08000d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <NMI_Handler+0x4>

08000d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <MemManage_Handler+0x4>

08000d36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d36:	b480      	push	{r7}
 8000d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <BusFault_Handler+0x4>

08000d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <UsageFault_Handler+0x4>

08000d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d42:	b480      	push	{r7}
 8000d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d70:	f000 f93e 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e00a      	b.n	8000da0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d8a:	f3af 8000 	nop.w
 8000d8e:	4601      	mov	r1, r0
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	1c5a      	adds	r2, r3, #1
 8000d94:	60ba      	str	r2, [r7, #8]
 8000d96:	b2ca      	uxtb	r2, r1
 8000d98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697a      	ldr	r2, [r7, #20]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	dbf0      	blt.n	8000d8a <_read+0x12>
	}

return len;
 8000da8:	687b      	ldr	r3, [r7, #4]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	60f8      	str	r0, [r7, #12]
 8000dba:	60b9      	str	r1, [r7, #8]
 8000dbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
 8000dc2:	e009      	b.n	8000dd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	1c5a      	adds	r2, r3, #1
 8000dc8:	60ba      	str	r2, [r7, #8]
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fbd1 	bl	8000574 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf1      	blt.n	8000dc4 <_write+0x12>
	}
	return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_close>:

int _close(int file)
{
 8000dea:	b480      	push	{r7}
 8000dec:	b083      	sub	sp, #12
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
	return -1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e12:	605a      	str	r2, [r3, #4]
	return 0;
 8000e14:	2300      	movs	r3, #0
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	370c      	adds	r7, #12
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <_isatty>:

int _isatty(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
	return 1;
 8000e2a:	2301      	movs	r3, #1
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
	return 0;
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3714      	adds	r7, #20
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e5c:	4a14      	ldr	r2, [pc, #80]	; (8000eb0 <_sbrk+0x5c>)
 8000e5e:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <_sbrk+0x60>)
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d102      	bne.n	8000e76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <_sbrk+0x64>)
 8000e72:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <_sbrk+0x68>)
 8000e74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <_sbrk+0x64>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d207      	bcs.n	8000e94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e84:	f005 fe1c 	bl	8006ac0 <__errno>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	220c      	movs	r2, #12
 8000e8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	e009      	b.n	8000ea8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e94:	4b08      	ldr	r3, [pc, #32]	; (8000eb8 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	4a05      	ldr	r2, [pc, #20]	; (8000eb8 <_sbrk+0x64>)
 8000ea4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3718      	adds	r7, #24
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	2000a000 	.word	0x2000a000
 8000eb4:	00000400 	.word	0x00000400
 8000eb8:	20000420 	.word	0x20000420
 8000ebc:	20000480 	.word	0x20000480

08000ec0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ec4:	4b06      	ldr	r3, [pc, #24]	; (8000ee0 <SystemInit+0x20>)
 8000ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <SystemInit+0x20>)
 8000ecc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ed0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ee8:	f7ff ffea 	bl	8000ec0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eec:	480c      	ldr	r0, [pc, #48]	; (8000f20 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eee:	490d      	ldr	r1, [pc, #52]	; (8000f24 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef0:	4a0d      	ldr	r2, [pc, #52]	; (8000f28 <LoopForever+0xe>)
  movs r3, #0
 8000ef2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef4:	e002      	b.n	8000efc <LoopCopyDataInit>

08000ef6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ef6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ef8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efa:	3304      	adds	r3, #4

08000efc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000efc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000efe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f00:	d3f9      	bcc.n	8000ef6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f04:	4c0a      	ldr	r4, [pc, #40]	; (8000f30 <LoopForever+0x16>)
  movs r3, #0
 8000f06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f08:	e001      	b.n	8000f0e <LoopFillZerobss>

08000f0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f0c:	3204      	adds	r2, #4

08000f0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f10:	d3fb      	bcc.n	8000f0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f12:	f005 fddb 	bl	8006acc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f16:	f7ff fb3f 	bl	8000598 <main>

08000f1a <LoopForever>:

LoopForever:
    b LoopForever
 8000f1a:	e7fe      	b.n	8000f1a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f1c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f24:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8000f28:	08007e98 	.word	0x08007e98
  ldr r2, =_sbss
 8000f2c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8000f30:	20000480 	.word	0x20000480

08000f34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f34:	e7fe      	b.n	8000f34 <ADC1_2_IRQHandler>
	...

08000f38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f42:	4b0c      	ldr	r3, [pc, #48]	; (8000f74 <HAL_Init+0x3c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <HAL_Init+0x3c>)
 8000f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f4c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4e:	2003      	movs	r0, #3
 8000f50:	f000 f944 	bl	80011dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f54:	2000      	movs	r0, #0
 8000f56:	f000 f80f 	bl	8000f78 <HAL_InitTick>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d002      	beq.n	8000f66 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000f60:	2301      	movs	r3, #1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	e001      	b.n	8000f6a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f66:	f7ff fdcd 	bl	8000b04 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3708      	adds	r7, #8
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40022000 	.word	0x40022000

08000f78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f80:	2300      	movs	r3, #0
 8000f82:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f84:	4b17      	ldr	r3, [pc, #92]	; (8000fe4 <HAL_InitTick+0x6c>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d023      	beq.n	8000fd4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f8c:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_InitTick+0x70>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <HAL_InitTick+0x6c>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	4619      	mov	r1, r3
 8000f96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f000 f941 	bl	800122a <HAL_SYSTICK_Config>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d10f      	bne.n	8000fce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2b0f      	cmp	r3, #15
 8000fb2:	d809      	bhi.n	8000fc8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f000 f919 	bl	80011f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_InitTick+0x74>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e007      	b.n	8000fd8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	73fb      	strb	r3, [r7, #15]
 8000fcc:	e004      	b.n	8000fd8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	73fb      	strb	r3, [r7, #15]
 8000fd2:	e001      	b.n	8000fd8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000004 	.word	0x20000004

08000ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ff4:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_IncTick+0x20>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_IncTick+0x24>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <HAL_IncTick+0x24>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	20000008 	.word	0x20000008
 8001014:	20000424 	.word	0x20000424

08001018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  return uwTick;
 800101c:	4b03      	ldr	r3, [pc, #12]	; (800102c <HAL_GetTick+0x14>)
 800101e:	681b      	ldr	r3, [r3, #0]
}
 8001020:	4618      	mov	r0, r3
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop
 800102c:	20000424 	.word	0x20000424

08001030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001038:	f7ff ffee 	bl	8001018 <HAL_GetTick>
 800103c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001048:	d005      	beq.n	8001056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <HAL_Delay+0x44>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	461a      	mov	r2, r3
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	4413      	add	r3, r2
 8001054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001056:	bf00      	nop
 8001058:	f7ff ffde 	bl	8001018 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	68fa      	ldr	r2, [r7, #12]
 8001064:	429a      	cmp	r2, r3
 8001066:	d8f7      	bhi.n	8001058 <HAL_Delay+0x28>
  {
  }
}
 8001068:	bf00      	nop
 800106a:	bf00      	nop
 800106c:	3710      	adds	r7, #16
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	20000008 	.word	0x20000008

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010aa:	4a04      	ldr	r2, [pc, #16]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	60d3      	str	r3, [r2, #12]
}
 80010b0:	bf00      	nop
 80010b2:	3714      	adds	r7, #20
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	6039      	str	r1, [r7, #0]
 80010e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	db0a      	blt.n	8001106 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	b2da      	uxtb	r2, r3
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <__NVIC_SetPriority+0x4c>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	0112      	lsls	r2, r2, #4
 80010fc:	b2d2      	uxtb	r2, r2
 80010fe:	440b      	add	r3, r1
 8001100:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001104:	e00a      	b.n	800111c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	b2da      	uxtb	r2, r3
 800110a:	4908      	ldr	r1, [pc, #32]	; (800112c <__NVIC_SetPriority+0x50>)
 800110c:	79fb      	ldrb	r3, [r7, #7]
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	3b04      	subs	r3, #4
 8001114:	0112      	lsls	r2, r2, #4
 8001116:	b2d2      	uxtb	r2, r2
 8001118:	440b      	add	r3, r1
 800111a:	761a      	strb	r2, [r3, #24]
}
 800111c:	bf00      	nop
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000e100 	.word	0xe000e100
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001130:	b480      	push	{r7}
 8001132:	b089      	sub	sp, #36	; 0x24
 8001134:	af00      	add	r7, sp, #0
 8001136:	60f8      	str	r0, [r7, #12]
 8001138:	60b9      	str	r1, [r7, #8]
 800113a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	f1c3 0307 	rsb	r3, r3, #7
 800114a:	2b04      	cmp	r3, #4
 800114c:	bf28      	it	cs
 800114e:	2304      	movcs	r3, #4
 8001150:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	3304      	adds	r3, #4
 8001156:	2b06      	cmp	r3, #6
 8001158:	d902      	bls.n	8001160 <NVIC_EncodePriority+0x30>
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3b03      	subs	r3, #3
 800115e:	e000      	b.n	8001162 <NVIC_EncodePriority+0x32>
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001164:	f04f 32ff 	mov.w	r2, #4294967295
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43da      	mvns	r2, r3
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	401a      	ands	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	43d9      	mvns	r1, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001188:	4313      	orrs	r3, r2
         );
}
 800118a:	4618      	mov	r0, r3
 800118c:	3724      	adds	r7, #36	; 0x24
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
	...

08001198 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011a8:	d301      	bcc.n	80011ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011aa:	2301      	movs	r3, #1
 80011ac:	e00f      	b.n	80011ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011ae:	4a0a      	ldr	r2, [pc, #40]	; (80011d8 <SysTick_Config+0x40>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b6:	210f      	movs	r1, #15
 80011b8:	f04f 30ff 	mov.w	r0, #4294967295
 80011bc:	f7ff ff8e 	bl	80010dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <SysTick_Config+0x40>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c6:	4b04      	ldr	r3, [pc, #16]	; (80011d8 <SysTick_Config+0x40>)
 80011c8:	2207      	movs	r2, #7
 80011ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	e000e010 	.word	0xe000e010

080011dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e4:	6878      	ldr	r0, [r7, #4]
 80011e6:	f7ff ff47 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	b086      	sub	sp, #24
 80011f6:	af00      	add	r7, sp, #0
 80011f8:	4603      	mov	r3, r0
 80011fa:	60b9      	str	r1, [r7, #8]
 80011fc:	607a      	str	r2, [r7, #4]
 80011fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001204:	f7ff ff5c 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 8001208:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800120a:	687a      	ldr	r2, [r7, #4]
 800120c:	68b9      	ldr	r1, [r7, #8]
 800120e:	6978      	ldr	r0, [r7, #20]
 8001210:	f7ff ff8e 	bl	8001130 <NVIC_EncodePriority>
 8001214:	4602      	mov	r2, r0
 8001216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800121a:	4611      	mov	r1, r2
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff5d 	bl	80010dc <__NVIC_SetPriority>
}
 8001222:	bf00      	nop
 8001224:	3718      	adds	r7, #24
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff ffb0 	bl	8001198 <SysTick_Config>
 8001238:	4603      	mov	r3, r0
}
 800123a:	4618      	mov	r0, r3
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001244:	b480      	push	{r7}
 8001246:	b087      	sub	sp, #28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800124e:	2300      	movs	r3, #0
 8001250:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001252:	e14e      	b.n	80014f2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	2101      	movs	r1, #1
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	4013      	ands	r3, r2
 8001262:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	f000 8140 	beq.w	80014ec <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 0303 	and.w	r3, r3, #3
 8001274:	2b01      	cmp	r3, #1
 8001276:	d005      	beq.n	8001284 <HAL_GPIO_Init+0x40>
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b02      	cmp	r3, #2
 8001282:	d130      	bne.n	80012e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	4013      	ands	r3, r2
 800129a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	68da      	ldr	r2, [r3, #12]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ba:	2201      	movs	r2, #1
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	4013      	ands	r3, r2
 80012c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	091b      	lsrs	r3, r3, #4
 80012d0:	f003 0201 	and.w	r2, r3, #1
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	f003 0303 	and.w	r3, r3, #3
 80012ee:	2b03      	cmp	r3, #3
 80012f0:	d017      	beq.n	8001322 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	2203      	movs	r2, #3
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	43db      	mvns	r3, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4013      	ands	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	689a      	ldr	r2, [r3, #8]
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f003 0303 	and.w	r3, r3, #3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d123      	bne.n	8001376 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	08da      	lsrs	r2, r3, #3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	3208      	adds	r2, #8
 8001336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800133a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	009b      	lsls	r3, r3, #2
 8001344:	220f      	movs	r2, #15
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	691a      	ldr	r2, [r3, #16]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	693a      	ldr	r2, [r7, #16]
 8001364:	4313      	orrs	r3, r2
 8001366:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	08da      	lsrs	r2, r3, #3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	3208      	adds	r2, #8
 8001370:	6939      	ldr	r1, [r7, #16]
 8001372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	2203      	movs	r2, #3
 8001382:	fa02 f303 	lsl.w	r3, r2, r3
 8001386:	43db      	mvns	r3, r3
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	4013      	ands	r3, r2
 800138c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0203 	and.w	r2, r3, #3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	005b      	lsls	r3, r3, #1
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	693a      	ldr	r2, [r7, #16]
 80013a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	f000 809a 	beq.w	80014ec <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013b8:	4b55      	ldr	r3, [pc, #340]	; (8001510 <HAL_GPIO_Init+0x2cc>)
 80013ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013bc:	4a54      	ldr	r2, [pc, #336]	; (8001510 <HAL_GPIO_Init+0x2cc>)
 80013be:	f043 0301 	orr.w	r3, r3, #1
 80013c2:	6613      	str	r3, [r2, #96]	; 0x60
 80013c4:	4b52      	ldr	r3, [pc, #328]	; (8001510 <HAL_GPIO_Init+0x2cc>)
 80013c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013c8:	f003 0301 	and.w	r3, r3, #1
 80013cc:	60bb      	str	r3, [r7, #8]
 80013ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013d0:	4a50      	ldr	r2, [pc, #320]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	089b      	lsrs	r3, r3, #2
 80013d6:	3302      	adds	r3, #2
 80013d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f003 0303 	and.w	r3, r3, #3
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013fa:	d013      	beq.n	8001424 <HAL_GPIO_Init+0x1e0>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a46      	ldr	r2, [pc, #280]	; (8001518 <HAL_GPIO_Init+0x2d4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d00d      	beq.n	8001420 <HAL_GPIO_Init+0x1dc>
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a45      	ldr	r2, [pc, #276]	; (800151c <HAL_GPIO_Init+0x2d8>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d007      	beq.n	800141c <HAL_GPIO_Init+0x1d8>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a44      	ldr	r2, [pc, #272]	; (8001520 <HAL_GPIO_Init+0x2dc>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d101      	bne.n	8001418 <HAL_GPIO_Init+0x1d4>
 8001414:	2303      	movs	r3, #3
 8001416:	e006      	b.n	8001426 <HAL_GPIO_Init+0x1e2>
 8001418:	2307      	movs	r3, #7
 800141a:	e004      	b.n	8001426 <HAL_GPIO_Init+0x1e2>
 800141c:	2302      	movs	r3, #2
 800141e:	e002      	b.n	8001426 <HAL_GPIO_Init+0x1e2>
 8001420:	2301      	movs	r3, #1
 8001422:	e000      	b.n	8001426 <HAL_GPIO_Init+0x1e2>
 8001424:	2300      	movs	r3, #0
 8001426:	697a      	ldr	r2, [r7, #20]
 8001428:	f002 0203 	and.w	r2, r2, #3
 800142c:	0092      	lsls	r2, r2, #2
 800142e:	4093      	lsls	r3, r2
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001436:	4937      	ldr	r1, [pc, #220]	; (8001514 <HAL_GPIO_Init+0x2d0>)
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001444:	4b37      	ldr	r3, [pc, #220]	; (8001524 <HAL_GPIO_Init+0x2e0>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	43db      	mvns	r3, r3
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4013      	ands	r3, r2
 8001452:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4313      	orrs	r3, r2
 8001466:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001468:	4a2e      	ldr	r2, [pc, #184]	; (8001524 <HAL_GPIO_Init+0x2e0>)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800146e:	4b2d      	ldr	r3, [pc, #180]	; (8001524 <HAL_GPIO_Init+0x2e0>)
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	4313      	orrs	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001492:	4a24      	ldr	r2, [pc, #144]	; (8001524 <HAL_GPIO_Init+0x2e0>)
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001498:	4b22      	ldr	r3, [pc, #136]	; (8001524 <HAL_GPIO_Init+0x2e0>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4013      	ands	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014bc:	4a19      	ldr	r2, [pc, #100]	; (8001524 <HAL_GPIO_Init+0x2e0>)
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <HAL_GPIO_Init+0x2e0>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <HAL_GPIO_Init+0x2e0>)
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	3301      	adds	r3, #1
 80014f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	fa22 f303 	lsr.w	r3, r2, r3
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	f47f aea9 	bne.w	8001254 <HAL_GPIO_Init+0x10>
  }
}
 8001502:	bf00      	nop
 8001504:	bf00      	nop
 8001506:	371c      	adds	r7, #28
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	40021000 	.word	0x40021000
 8001514:	40010000 	.word	0x40010000
 8001518:	48000400 	.word	0x48000400
 800151c:	48000800 	.word	0x48000800
 8001520:	48000c00 	.word	0x48000c00
 8001524:	40010400 	.word	0x40010400

08001528 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	807b      	strh	r3, [r7, #2]
 8001534:	4613      	mov	r3, r2
 8001536:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001538:	787b      	ldrb	r3, [r7, #1]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d003      	beq.n	8001546 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800153e:	887a      	ldrh	r2, [r7, #2]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001544:	e002      	b.n	800154c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001546:	887a      	ldrh	r2, [r7, #2]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800154c:	bf00      	nop
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800155c:	4b04      	ldr	r3, [pc, #16]	; (8001570 <HAL_PWREx_GetVoltageRange+0x18>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40007000 	.word	0x40007000

08001574 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001582:	d130      	bne.n	80015e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001584:	4b23      	ldr	r3, [pc, #140]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800158c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001590:	d038      	beq.n	8001604 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800159a:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800159c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015a2:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	2232      	movs	r2, #50	; 0x32
 80015a8:	fb02 f303 	mul.w	r3, r2, r3
 80015ac:	4a1b      	ldr	r2, [pc, #108]	; (800161c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015ae:	fba2 2303 	umull	r2, r3, r2, r3
 80015b2:	0c9b      	lsrs	r3, r3, #18
 80015b4:	3301      	adds	r3, #1
 80015b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b8:	e002      	b.n	80015c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3b01      	subs	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015c0:	4b14      	ldr	r3, [pc, #80]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015cc:	d102      	bne.n	80015d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1f2      	bne.n	80015ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015d4:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e0:	d110      	bne.n	8001604 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e00f      	b.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015f2:	d007      	beq.n	8001604 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015f4:	4b07      	ldr	r3, [pc, #28]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015fc:	4a05      	ldr	r2, [pc, #20]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001602:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3714      	adds	r7, #20
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40007000 	.word	0x40007000
 8001618:	20000000 	.word	0x20000000
 800161c:	431bde83 	.word	0x431bde83

08001620 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d102      	bne.n	8001634 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	f000 bc4f 	b.w	8001ed2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001634:	4b97      	ldr	r3, [pc, #604]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800163e:	4b95      	ldr	r3, [pc, #596]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 80e6 	beq.w	8001822 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001656:	6a3b      	ldr	r3, [r7, #32]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d007      	beq.n	800166c <HAL_RCC_OscConfig+0x4c>
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	2b0c      	cmp	r3, #12
 8001660:	f040 808d 	bne.w	800177e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	2b01      	cmp	r3, #1
 8001668:	f040 8089 	bne.w	800177e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800166c:	4b89      	ldr	r3, [pc, #548]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d006      	beq.n	8001686 <HAL_RCC_OscConfig+0x66>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d102      	bne.n	8001686 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	f000 bc26 	b.w	8001ed2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800168a:	4b82      	ldr	r3, [pc, #520]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d004      	beq.n	80016a0 <HAL_RCC_OscConfig+0x80>
 8001696:	4b7f      	ldr	r3, [pc, #508]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800169e:	e005      	b.n	80016ac <HAL_RCC_OscConfig+0x8c>
 80016a0:	4b7c      	ldr	r3, [pc, #496]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80016a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a6:	091b      	lsrs	r3, r3, #4
 80016a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d224      	bcs.n	80016fa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	4618      	mov	r0, r3
 80016b6:	f000 fdd9 	bl	800226c <RCC_SetFlashLatencyFromMSIRange>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d002      	beq.n	80016c6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f000 bc06 	b.w	8001ed2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016c6:	4b73      	ldr	r3, [pc, #460]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a72      	ldr	r2, [pc, #456]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80016cc:	f043 0308 	orr.w	r3, r3, #8
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	4b70      	ldr	r3, [pc, #448]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	496d      	ldr	r1, [pc, #436]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016e4:	4b6b      	ldr	r3, [pc, #428]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a1b      	ldr	r3, [r3, #32]
 80016f0:	021b      	lsls	r3, r3, #8
 80016f2:	4968      	ldr	r1, [pc, #416]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80016f4:	4313      	orrs	r3, r2
 80016f6:	604b      	str	r3, [r1, #4]
 80016f8:	e025      	b.n	8001746 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016fa:	4b66      	ldr	r3, [pc, #408]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a65      	ldr	r2, [pc, #404]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	4b63      	ldr	r3, [pc, #396]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001712:	4960      	ldr	r1, [pc, #384]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001718:	4b5e      	ldr	r3, [pc, #376]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	021b      	lsls	r3, r3, #8
 8001726:	495b      	ldr	r1, [pc, #364]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001728:	4313      	orrs	r3, r2
 800172a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800172c:	6a3b      	ldr	r3, [r7, #32]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	4618      	mov	r0, r3
 8001738:	f000 fd98 	bl	800226c <RCC_SetFlashLatencyFromMSIRange>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e3c5      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001746:	f000 fccd 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 800174a:	4602      	mov	r2, r0
 800174c:	4b51      	ldr	r3, [pc, #324]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	091b      	lsrs	r3, r3, #4
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	4950      	ldr	r1, [pc, #320]	; (8001898 <HAL_RCC_OscConfig+0x278>)
 8001758:	5ccb      	ldrb	r3, [r1, r3]
 800175a:	f003 031f 	and.w	r3, r3, #31
 800175e:	fa22 f303 	lsr.w	r3, r2, r3
 8001762:	4a4e      	ldr	r2, [pc, #312]	; (800189c <HAL_RCC_OscConfig+0x27c>)
 8001764:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001766:	4b4e      	ldr	r3, [pc, #312]	; (80018a0 <HAL_RCC_OscConfig+0x280>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7ff fc04 	bl	8000f78 <HAL_InitTick>
 8001770:	4603      	mov	r3, r0
 8001772:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001774:	7dfb      	ldrb	r3, [r7, #23]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d052      	beq.n	8001820 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 800177a:	7dfb      	ldrb	r3, [r7, #23]
 800177c:	e3a9      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d032      	beq.n	80017ec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001786:	4b43      	ldr	r3, [pc, #268]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a42      	ldr	r2, [pc, #264]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001792:	f7ff fc41 	bl	8001018 <HAL_GetTick>
 8001796:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001798:	e008      	b.n	80017ac <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800179a:	f7ff fc3d 	bl	8001018 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	69bb      	ldr	r3, [r7, #24]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d901      	bls.n	80017ac <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e392      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017ac:	4b39      	ldr	r3, [pc, #228]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0302 	and.w	r3, r3, #2
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d0f0      	beq.n	800179a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b8:	4b36      	ldr	r3, [pc, #216]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a35      	ldr	r2, [pc, #212]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	6013      	str	r3, [r2, #0]
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	4930      	ldr	r1, [pc, #192]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017d6:	4b2f      	ldr	r3, [pc, #188]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	492b      	ldr	r1, [pc, #172]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	604b      	str	r3, [r1, #4]
 80017ea:	e01a      	b.n	8001822 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017ec:	4b29      	ldr	r3, [pc, #164]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a28      	ldr	r2, [pc, #160]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 80017f2:	f023 0301 	bic.w	r3, r3, #1
 80017f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fc0e 	bl	8001018 <HAL_GetTick>
 80017fc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001800:	f7ff fc0a 	bl	8001018 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e35f      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001812:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x1e0>
 800181e:	e000      	b.n	8001822 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001820:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d073      	beq.n	8001916 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800182e:	6a3b      	ldr	r3, [r7, #32]
 8001830:	2b08      	cmp	r3, #8
 8001832:	d005      	beq.n	8001840 <HAL_RCC_OscConfig+0x220>
 8001834:	6a3b      	ldr	r3, [r7, #32]
 8001836:	2b0c      	cmp	r3, #12
 8001838:	d10e      	bne.n	8001858 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	2b03      	cmp	r3, #3
 800183e:	d10b      	bne.n	8001858 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001840:	4b14      	ldr	r3, [pc, #80]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d063      	beq.n	8001914 <HAL_RCC_OscConfig+0x2f4>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d15f      	bne.n	8001914 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e33c      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001860:	d106      	bne.n	8001870 <HAL_RCC_OscConfig+0x250>
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a0b      	ldr	r2, [pc, #44]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e025      	b.n	80018bc <HAL_RCC_OscConfig+0x29c>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001878:	d114      	bne.n	80018a4 <HAL_RCC_OscConfig+0x284>
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a05      	ldr	r2, [pc, #20]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b03      	ldr	r3, [pc, #12]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a02      	ldr	r2, [pc, #8]	; (8001894 <HAL_RCC_OscConfig+0x274>)
 800188c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001890:	6013      	str	r3, [r2, #0]
 8001892:	e013      	b.n	80018bc <HAL_RCC_OscConfig+0x29c>
 8001894:	40021000 	.word	0x40021000
 8001898:	08007d28 	.word	0x08007d28
 800189c:	20000000 	.word	0x20000000
 80018a0:	20000004 	.word	0x20000004
 80018a4:	4b8f      	ldr	r3, [pc, #572]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a8e      	ldr	r2, [pc, #568]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80018aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ae:	6013      	str	r3, [r2, #0]
 80018b0:	4b8c      	ldr	r3, [pc, #560]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a8b      	ldr	r2, [pc, #556]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80018b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d013      	beq.n	80018ec <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c4:	f7ff fba8 	bl	8001018 <HAL_GetTick>
 80018c8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018cc:	f7ff fba4 	bl	8001018 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b64      	cmp	r3, #100	; 0x64
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e2f9      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018de:	4b81      	ldr	r3, [pc, #516]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x2ac>
 80018ea:	e014      	b.n	8001916 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fb94 	bl	8001018 <HAL_GetTick>
 80018f0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f4:	f7ff fb90 	bl	8001018 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	69bb      	ldr	r3, [r7, #24]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e2e5      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001906:	4b77      	ldr	r3, [pc, #476]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x2d4>
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d060      	beq.n	80019e4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	2b04      	cmp	r3, #4
 8001926:	d005      	beq.n	8001934 <HAL_RCC_OscConfig+0x314>
 8001928:	6a3b      	ldr	r3, [r7, #32]
 800192a:	2b0c      	cmp	r3, #12
 800192c:	d119      	bne.n	8001962 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	2b02      	cmp	r3, #2
 8001932:	d116      	bne.n	8001962 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001934:	4b6b      	ldr	r3, [pc, #428]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_OscConfig+0x32c>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d101      	bne.n	800194c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001948:	2301      	movs	r3, #1
 800194a:	e2c2      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194c:	4b65      	ldr	r3, [pc, #404]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	061b      	lsls	r3, r3, #24
 800195a:	4962      	ldr	r1, [pc, #392]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001960:	e040      	b.n	80019e4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d023      	beq.n	80019b2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800196a:	4b5e      	ldr	r3, [pc, #376]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a5d      	ldr	r2, [pc, #372]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001974:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001976:	f7ff fb4f 	bl	8001018 <HAL_GetTick>
 800197a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800197c:	e008      	b.n	8001990 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800197e:	f7ff fb4b 	bl	8001018 <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	2b02      	cmp	r3, #2
 800198a:	d901      	bls.n	8001990 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 800198c:	2303      	movs	r3, #3
 800198e:	e2a0      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001990:	4b54      	ldr	r3, [pc, #336]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001998:	2b00      	cmp	r3, #0
 800199a:	d0f0      	beq.n	800197e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800199c:	4b51      	ldr	r3, [pc, #324]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	061b      	lsls	r3, r3, #24
 80019aa:	494e      	ldr	r1, [pc, #312]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	4313      	orrs	r3, r2
 80019ae:	604b      	str	r3, [r1, #4]
 80019b0:	e018      	b.n	80019e4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019b2:	4b4c      	ldr	r3, [pc, #304]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a4b      	ldr	r2, [pc, #300]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80019b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019be:	f7ff fb2b 	bl	8001018 <HAL_GetTick>
 80019c2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c4:	e008      	b.n	80019d8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019c6:	f7ff fb27 	bl	8001018 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d901      	bls.n	80019d8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e27c      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d8:	4b42      	ldr	r3, [pc, #264]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1f0      	bne.n	80019c6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0308 	and.w	r3, r3, #8
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	f000 8082 	beq.w	8001af6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	695b      	ldr	r3, [r3, #20]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d05f      	beq.n	8001aba <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 80019fa:	4b3a      	ldr	r3, [pc, #232]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a00:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	699a      	ldr	r2, [r3, #24]
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	f003 0310 	and.w	r3, r3, #16
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d037      	beq.n	8001a80 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e254      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	f003 0301 	and.w	r3, r3, #1
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d01b      	beq.n	8001a6a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001a32:	4b2c      	ldr	r3, [pc, #176]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a38:	4a2a      	ldr	r2, [pc, #168]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a3a:	f023 0301 	bic.w	r3, r3, #1
 8001a3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a42:	f7ff fae9 	bl	8001018 <HAL_GetTick>
 8001a46:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fae5 	bl	8001018 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b11      	cmp	r3, #17
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e23a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a5c:	4b21      	ldr	r3, [pc, #132]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1ef      	bne.n	8001a4a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001a6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a70:	f023 0210 	bic.w	r2, r3, #16
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	491a      	ldr	r1, [pc, #104]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a86:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001a88:	f043 0301 	orr.w	r3, r3, #1
 8001a8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a90:	f7ff fac2 	bl	8001018 <HAL_GetTick>
 8001a94:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a98:	f7ff fabe 	bl	8001018 <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b11      	cmp	r3, #17
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e213      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001aac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab0:	f003 0302 	and.w	r3, r3, #2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0ef      	beq.n	8001a98 <HAL_RCC_OscConfig+0x478>
 8001ab8:	e01d      	b.n	8001af6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001abc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ac0:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_RCC_OscConfig+0x4c4>)
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aca:	f7ff faa5 	bl	8001018 <HAL_GetTick>
 8001ace:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad0:	e00a      	b.n	8001ae8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ad2:	f7ff faa1 	bl	8001018 <HAL_GetTick>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	1ad3      	subs	r3, r2, r3
 8001adc:	2b11      	cmp	r3, #17
 8001ade:	d903      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e1f6      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
 8001ae4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae8:	4ba9      	ldr	r3, [pc, #676]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1ed      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0304 	and.w	r3, r3, #4
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80bd 	beq.w	8001c7e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b0a:	4ba1      	ldr	r3, [pc, #644]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d10e      	bne.n	8001b34 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b16:	4b9e      	ldr	r3, [pc, #632]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1a:	4a9d      	ldr	r2, [pc, #628]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001b1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b20:	6593      	str	r3, [r2, #88]	; 0x58
 8001b22:	4b9b      	ldr	r3, [pc, #620]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b34:	4b97      	ldr	r3, [pc, #604]	; (8001d94 <HAL_RCC_OscConfig+0x774>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d118      	bne.n	8001b72 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b40:	4b94      	ldr	r3, [pc, #592]	; (8001d94 <HAL_RCC_OscConfig+0x774>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a93      	ldr	r2, [pc, #588]	; (8001d94 <HAL_RCC_OscConfig+0x774>)
 8001b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b4c:	f7ff fa64 	bl	8001018 <HAL_GetTick>
 8001b50:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b54:	f7ff fa60 	bl	8001018 <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e1b5      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b66:	4b8b      	ldr	r3, [pc, #556]	; (8001d94 <HAL_RCC_OscConfig+0x774>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d02c      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001b7e:	4b84      	ldr	r3, [pc, #528]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b84:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b90:	497f      	ldr	r1, [pc, #508]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 0304 	and.w	r3, r3, #4
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d010      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001ba4:	4b7a      	ldr	r3, [pc, #488]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001baa:	4a79      	ldr	r2, [pc, #484]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bb4:	4b76      	ldr	r3, [pc, #472]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	4a75      	ldr	r2, [pc, #468]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc4:	e018      	b.n	8001bf8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bc6:	4b72      	ldr	r3, [pc, #456]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bcc:	4a70      	ldr	r2, [pc, #448]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001bce:	f043 0301 	orr.w	r3, r3, #1
 8001bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bd6:	e00f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001bd8:	4b6d      	ldr	r3, [pc, #436]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001bda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bde:	4a6c      	ldr	r2, [pc, #432]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001be8:	4b69      	ldr	r3, [pc, #420]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bee:	4a68      	ldr	r2, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001bf0:	f023 0304 	bic.w	r3, r3, #4
 8001bf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d016      	beq.n	8001c2e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c00:	f7ff fa0a 	bl	8001018 <HAL_GetTick>
 8001c04:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c06:	e00a      	b.n	8001c1e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c08:	f7ff fa06 	bl	8001018 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e159      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c1e:	4b5c      	ldr	r3, [pc, #368]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c24:	f003 0302 	and.w	r3, r3, #2
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d0ed      	beq.n	8001c08 <HAL_RCC_OscConfig+0x5e8>
 8001c2c:	e01d      	b.n	8001c6a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2e:	f7ff f9f3 	bl	8001018 <HAL_GetTick>
 8001c32:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c34:	e00a      	b.n	8001c4c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c36:	f7ff f9ef 	bl	8001018 <HAL_GetTick>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d901      	bls.n	8001c4c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e142      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c4c:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d1ed      	bne.n	8001c36 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001c5a:	4b4d      	ldr	r3, [pc, #308]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001c5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c60:	4a4b      	ldr	r2, [pc, #300]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001c62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c6a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d105      	bne.n	8001c7e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	4a46      	ldr	r2, [pc, #280]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001c78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c7c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0320 	and.w	r3, r3, #32
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d03c      	beq.n	8001d04 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d01c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c92:	4b3f      	ldr	r3, [pc, #252]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c98:	4a3d      	ldr	r2, [pc, #244]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca2:	f7ff f9b9 	bl	8001018 <HAL_GetTick>
 8001ca6:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001caa:	f7ff f9b5 	bl	8001018 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e10a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001cbc:	4b34      	ldr	r3, [pc, #208]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0ef      	beq.n	8001caa <HAL_RCC_OscConfig+0x68a>
 8001cca:	e01b      	b.n	8001d04 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ccc:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001cce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cd2:	4a2f      	ldr	r2, [pc, #188]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cdc:	f7ff f99c 	bl	8001018 <HAL_GetTick>
 8001ce0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ce4:	f7ff f998 	bl	8001018 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0ed      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cf6:	4b26      	ldr	r3, [pc, #152]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001cf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001cfc:	f003 0302 	and.w	r3, r3, #2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1ef      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	f000 80e1 	beq.w	8001ed0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	f040 80b5 	bne.w	8001e82 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d18:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d124      	bne.n	8001d76 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d36:	3b01      	subs	r3, #1
 8001d38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d11b      	bne.n	8001d76 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d113      	bne.n	8001d76 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d4e:	69fb      	ldr	r3, [r7, #28]
 8001d50:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d58:	085b      	lsrs	r3, r3, #1
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d109      	bne.n	8001d76 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6c:	085b      	lsrs	r3, r3, #1
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d05f      	beq.n	8001e36 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	d05a      	beq.n	8001e32 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a03      	ldr	r2, [pc, #12]	; (8001d90 <HAL_RCC_OscConfig+0x770>)
 8001d82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d86:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d88:	f7ff f946 	bl	8001018 <HAL_GetTick>
 8001d8c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d8e:	e00c      	b.n	8001daa <HAL_RCC_OscConfig+0x78a>
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d98:	f7ff f93e 	bl	8001018 <HAL_GetTick>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e093      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001daa:	4b4c      	ldr	r3, [pc, #304]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d1f0      	bne.n	8001d98 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001db6:	4b49      	ldr	r3, [pc, #292]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	4b49      	ldr	r3, [pc, #292]	; (8001ee0 <HAL_RCC_OscConfig+0x8c0>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001dc2:	687a      	ldr	r2, [r7, #4]
 8001dc4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dc6:	3a01      	subs	r2, #1
 8001dc8:	0112      	lsls	r2, r2, #4
 8001dca:	4311      	orrs	r1, r2
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001dd0:	0212      	lsls	r2, r2, #8
 8001dd2:	4311      	orrs	r1, r2
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001dd8:	0852      	lsrs	r2, r2, #1
 8001dda:	3a01      	subs	r2, #1
 8001ddc:	0552      	lsls	r2, r2, #21
 8001dde:	4311      	orrs	r1, r2
 8001de0:	687a      	ldr	r2, [r7, #4]
 8001de2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001de4:	0852      	lsrs	r2, r2, #1
 8001de6:	3a01      	subs	r2, #1
 8001de8:	0652      	lsls	r2, r2, #25
 8001dea:	430a      	orrs	r2, r1
 8001dec:	493b      	ldr	r1, [pc, #236]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001df2:	4b3a      	ldr	r3, [pc, #232]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a39      	ldr	r2, [pc, #228]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001df8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfc:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dfe:	4b37      	ldr	r3, [pc, #220]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	4a36      	ldr	r2, [pc, #216]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e08:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e0a:	f7ff f905 	bl	8001018 <HAL_GetTick>
 8001e0e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e10:	e008      	b.n	8001e24 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e12:	f7ff f901 	bl	8001018 <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	2b02      	cmp	r3, #2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e056      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0f0      	beq.n	8001e12 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e30:	e04e      	b.n	8001ed0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e04d      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e36:	4b29      	ldr	r3, [pc, #164]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d146      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a25      	ldr	r2, [pc, #148]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001e48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e4c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	4a22      	ldr	r2, [pc, #136]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001e54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e58:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e5a:	f7ff f8dd 	bl	8001018 <HAL_GetTick>
 8001e5e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e62:	f7ff f8d9 	bl	8001018 <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e02e      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e74:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0f0      	beq.n	8001e62 <HAL_RCC_OscConfig+0x842>
 8001e80:	e026      	b.n	8001ed0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e82:	6a3b      	ldr	r3, [r7, #32]
 8001e84:	2b0c      	cmp	r3, #12
 8001e86:	d021      	beq.n	8001ecc <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e88:	4b14      	ldr	r3, [pc, #80]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a13      	ldr	r2, [pc, #76]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001e8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff f8c0 	bl	8001018 <HAL_GetTick>
 8001e98:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e9c:	f7ff f8bc 	bl	8001018 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e011      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d1f0      	bne.n	8001e9c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001eba:	4b08      	ldr	r3, [pc, #32]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001ebc:	68db      	ldr	r3, [r3, #12]
 8001ebe:	4a07      	ldr	r2, [pc, #28]	; (8001edc <HAL_RCC_OscConfig+0x8bc>)
 8001ec0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ec4:	f023 0303 	bic.w	r3, r3, #3
 8001ec8:	60d3      	str	r3, [r2, #12]
 8001eca:	e001      	b.n	8001ed0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3728      	adds	r7, #40	; 0x28
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	f99f808c 	.word	0xf99f808c

08001ee4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0e7      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b75      	ldr	r3, [pc, #468]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d910      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b72      	ldr	r3, [pc, #456]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 0207 	bic.w	r2, r3, #7
 8001f0e:	4970      	ldr	r1, [pc, #448]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b6e      	ldr	r3, [pc, #440]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0cf      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d010      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689a      	ldr	r2, [r3, #8]
 8001f38:	4b66      	ldr	r3, [pc, #408]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d908      	bls.n	8001f56 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f44:	4b63      	ldr	r3, [pc, #396]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	4960      	ldr	r1, [pc, #384]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d04c      	beq.n	8001ffc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b03      	cmp	r3, #3
 8001f68:	d107      	bne.n	8001f7a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f6a:	4b5a      	ldr	r3, [pc, #360]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d121      	bne.n	8001fba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e0a6      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d107      	bne.n	8001f92 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f82:	4b54      	ldr	r3, [pc, #336]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d115      	bne.n	8001fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e09a      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d107      	bne.n	8001faa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f9a:	4b4e      	ldr	r3, [pc, #312]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e08e      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001faa:	4b4a      	ldr	r3, [pc, #296]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d101      	bne.n	8001fba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e086      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fba:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f023 0203 	bic.w	r2, r3, #3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	4943      	ldr	r1, [pc, #268]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fcc:	f7ff f824 	bl	8001018 <HAL_GetTick>
 8001fd0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fd2:	e00a      	b.n	8001fea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fd4:	f7ff f820 	bl	8001018 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e06e      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fea:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 020c 	and.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d1eb      	bne.n	8001fd4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d010      	beq.n	800202a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	4b31      	ldr	r3, [pc, #196]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002014:	429a      	cmp	r2, r3
 8002016:	d208      	bcs.n	800202a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002018:	4b2e      	ldr	r3, [pc, #184]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	492b      	ldr	r1, [pc, #172]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002026:	4313      	orrs	r3, r2
 8002028:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800202a:	4b29      	ldr	r3, [pc, #164]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f003 0307 	and.w	r3, r3, #7
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d210      	bcs.n	800205a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 0207 	bic.w	r2, r3, #7
 8002040:	4923      	ldr	r1, [pc, #140]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <HAL_RCC_ClockConfig+0x1ec>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0307 	and.w	r3, r3, #7
 8002050:	683a      	ldr	r2, [r7, #0]
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e036      	b.n	80020c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d008      	beq.n	8002078 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002066:	4b1b      	ldr	r3, [pc, #108]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	4918      	ldr	r1, [pc, #96]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0308 	and.w	r3, r3, #8
 8002080:	2b00      	cmp	r3, #0
 8002082:	d009      	beq.n	8002098 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002084:	4b13      	ldr	r3, [pc, #76]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4910      	ldr	r1, [pc, #64]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002098:	f000 f824 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 800209c:	4602      	mov	r2, r0
 800209e:	4b0d      	ldr	r3, [pc, #52]	; (80020d4 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	091b      	lsrs	r3, r3, #4
 80020a4:	f003 030f 	and.w	r3, r3, #15
 80020a8:	490b      	ldr	r1, [pc, #44]	; (80020d8 <HAL_RCC_ClockConfig+0x1f4>)
 80020aa:	5ccb      	ldrb	r3, [r1, r3]
 80020ac:	f003 031f 	and.w	r3, r3, #31
 80020b0:	fa22 f303 	lsr.w	r3, r2, r3
 80020b4:	4a09      	ldr	r2, [pc, #36]	; (80020dc <HAL_RCC_ClockConfig+0x1f8>)
 80020b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020b8:	4b09      	ldr	r3, [pc, #36]	; (80020e0 <HAL_RCC_ClockConfig+0x1fc>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7fe ff5b 	bl	8000f78 <HAL_InitTick>
 80020c2:	4603      	mov	r3, r0
 80020c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80020c6:	7afb      	ldrb	r3, [r7, #11]
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3710      	adds	r7, #16
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40022000 	.word	0x40022000
 80020d4:	40021000 	.word	0x40021000
 80020d8:	08007d28 	.word	0x08007d28
 80020dc:	20000000 	.word	0x20000000
 80020e0:	20000004 	.word	0x20000004

080020e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	; 0x24
 80020e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	61fb      	str	r3, [r7, #28]
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f2:	4b3e      	ldr	r3, [pc, #248]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020fc:	4b3b      	ldr	r3, [pc, #236]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0x34>
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	2b0c      	cmp	r3, #12
 8002110:	d121      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d11e      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002118:	4b34      	ldr	r3, [pc, #208]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d107      	bne.n	8002134 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002124:	4b31      	ldr	r3, [pc, #196]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 030f 	and.w	r3, r3, #15
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e005      	b.n	8002140 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002134:	4b2d      	ldr	r3, [pc, #180]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	091b      	lsrs	r3, r3, #4
 800213a:	f003 030f 	and.w	r3, r3, #15
 800213e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002140:	4a2b      	ldr	r2, [pc, #172]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002148:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d10d      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002154:	e00a      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b04      	cmp	r3, #4
 800215a:	d102      	bne.n	8002162 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800215c:	4b25      	ldr	r3, [pc, #148]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	e004      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	2b08      	cmp	r3, #8
 8002166:	d101      	bne.n	800216c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002168:	4b23      	ldr	r3, [pc, #140]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800216a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d134      	bne.n	80021dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d003      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0xa6>
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	2b03      	cmp	r3, #3
 8002186:	d003      	beq.n	8002190 <HAL_RCC_GetSysClockFreq+0xac>
 8002188:	e005      	b.n	8002196 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800218a:	4b1a      	ldr	r3, [pc, #104]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800218c:	617b      	str	r3, [r7, #20]
      break;
 800218e:	e005      	b.n	800219c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002190:	4b19      	ldr	r3, [pc, #100]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002192:	617b      	str	r3, [r7, #20]
      break;
 8002194:	e002      	b.n	800219c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	617b      	str	r3, [r7, #20]
      break;
 800219a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 0307 	and.w	r3, r3, #7
 80021a6:	3301      	adds	r3, #1
 80021a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021aa:	4b10      	ldr	r3, [pc, #64]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 80021ac:	68db      	ldr	r3, [r3, #12]
 80021ae:	0a1b      	lsrs	r3, r3, #8
 80021b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	fb03 f202 	mul.w	r2, r3, r2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021c2:	4b0a      	ldr	r3, [pc, #40]	; (80021ec <HAL_RCC_GetSysClockFreq+0x108>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	0e5b      	lsrs	r3, r3, #25
 80021c8:	f003 0303 	and.w	r3, r3, #3
 80021cc:	3301      	adds	r3, #1
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021d2:	697a      	ldr	r2, [r7, #20]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021dc:	69bb      	ldr	r3, [r7, #24]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08007d40 	.word	0x08007d40
 80021f4:	00f42400 	.word	0x00f42400
 80021f8:	007a1200 	.word	0x007a1200

080021fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000000 	.word	0x20000000

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002218:	f7ff fff0 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221c:	4602      	mov	r2, r0
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	4904      	ldr	r1, [pc, #16]	; (800223c <HAL_RCC_GetPCLK1Freq+0x28>)
 800222a:	5ccb      	ldrb	r3, [r1, r3]
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002234:	4618      	mov	r0, r3
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	08007d38 	.word	0x08007d38

08002240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002244:	f7ff ffda 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b06      	ldr	r3, [pc, #24]	; (8002264 <HAL_RCC_GetPCLK2Freq+0x24>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	0adb      	lsrs	r3, r3, #11
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	4904      	ldr	r1, [pc, #16]	; (8002268 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	08007d38 	.word	0x08007d38

0800226c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002274:	2300      	movs	r3, #0
 8002276:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002278:	4b2a      	ldr	r3, [pc, #168]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002284:	f7ff f968 	bl	8001558 <HAL_PWREx_GetVoltageRange>
 8002288:	6178      	str	r0, [r7, #20]
 800228a:	e014      	b.n	80022b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	4a24      	ldr	r2, [pc, #144]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002296:	6593      	str	r3, [r2, #88]	; 0x58
 8002298:	4b22      	ldr	r3, [pc, #136]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800229a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800229c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022a4:	f7ff f958 	bl	8001558 <HAL_PWREx_GetVoltageRange>
 80022a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022aa:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ae:	4a1d      	ldr	r2, [pc, #116]	; (8002324 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022b4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022bc:	d10b      	bne.n	80022d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b80      	cmp	r3, #128	; 0x80
 80022c2:	d919      	bls.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2ba0      	cmp	r3, #160	; 0xa0
 80022c8:	d902      	bls.n	80022d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022ca:	2302      	movs	r3, #2
 80022cc:	613b      	str	r3, [r7, #16]
 80022ce:	e013      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022d0:	2301      	movs	r3, #1
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	e010      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2b80      	cmp	r3, #128	; 0x80
 80022da:	d902      	bls.n	80022e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80022dc:	2303      	movs	r3, #3
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	e00a      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	d102      	bne.n	80022ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022e8:	2302      	movs	r3, #2
 80022ea:	613b      	str	r3, [r7, #16]
 80022ec:	e004      	b.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b70      	cmp	r3, #112	; 0x70
 80022f2:	d101      	bne.n	80022f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022f4:	2301      	movs	r3, #1
 80022f6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f023 0207 	bic.w	r2, r3, #7
 8002300:	4909      	ldr	r1, [pc, #36]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002308:	4b07      	ldr	r3, [pc, #28]	; (8002328 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0307 	and.w	r3, r3, #7
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	429a      	cmp	r2, r3
 8002314:	d001      	beq.n	800231a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e000      	b.n	800231c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800231a:	2300      	movs	r3, #0
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	40021000 	.word	0x40021000
 8002328:	40022000 	.word	0x40022000

0800232c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002334:	2300      	movs	r3, #0
 8002336:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002338:	2300      	movs	r3, #0
 800233a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002344:	2b00      	cmp	r3, #0
 8002346:	f000 809e 	beq.w	8002486 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800234a:	2300      	movs	r3, #0
 800234c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800234e:	4b46      	ldr	r3, [pc, #280]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d101      	bne.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800235e:	2300      	movs	r3, #0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d00d      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002364:	4b40      	ldr	r3, [pc, #256]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002368:	4a3f      	ldr	r2, [pc, #252]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800236a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800236e:	6593      	str	r3, [r2, #88]	; 0x58
 8002370:	4b3d      	ldr	r3, [pc, #244]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	60bb      	str	r3, [r7, #8]
 800237a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800237c:	2301      	movs	r3, #1
 800237e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002380:	4b3a      	ldr	r3, [pc, #232]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a39      	ldr	r2, [pc, #228]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002386:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800238a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800238c:	f7fe fe44 	bl	8001018 <HAL_GetTick>
 8002390:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002392:	e009      	b.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002394:	f7fe fe40 	bl	8001018 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d902      	bls.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	74fb      	strb	r3, [r7, #19]
        break;
 80023a6:	e005      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023a8:	4b30      	ldr	r3, [pc, #192]	; (800246c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0ef      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d15a      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023ba:	4b2b      	ldr	r3, [pc, #172]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d01e      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0xde>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d019      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023d6:	4b24      	ldr	r3, [pc, #144]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023e0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023e2:	4b21      	ldr	r3, [pc, #132]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e8:	4a1f      	ldr	r2, [pc, #124]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f8:	4a1b      	ldr	r2, [pc, #108]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002402:	4a19      	ldr	r2, [pc, #100]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	f003 0301 	and.w	r3, r3, #1
 8002410:	2b00      	cmp	r3, #0
 8002412:	d016      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7fe fe00 	bl	8001018 <HAL_GetTick>
 8002418:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241a:	e00b      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800241c:	f7fe fdfc 	bl	8001018 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	f241 3288 	movw	r2, #5000	; 0x1388
 800242a:	4293      	cmp	r3, r2
 800242c:	d902      	bls.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	74fb      	strb	r3, [r7, #19]
            break;
 8002432:	e006      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002434:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0ec      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10b      	bne.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002448:	4b07      	ldr	r3, [pc, #28]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	4904      	ldr	r1, [pc, #16]	; (8002468 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002458:	4313      	orrs	r3, r2
 800245a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800245e:	e009      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002460:	7cfb      	ldrb	r3, [r7, #19]
 8002462:	74bb      	strb	r3, [r7, #18]
 8002464:	e006      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000
 800246c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002470:	7cfb      	ldrb	r3, [r7, #19]
 8002472:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002474:	7c7b      	ldrb	r3, [r7, #17]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247a:	4b6e      	ldr	r3, [pc, #440]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800247c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247e:	4a6d      	ldr	r2, [pc, #436]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002484:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d00a      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002492:	4b68      	ldr	r3, [pc, #416]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002494:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002498:	f023 0203 	bic.w	r2, r3, #3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	4964      	ldr	r1, [pc, #400]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024a2:	4313      	orrs	r3, r2
 80024a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00a      	beq.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024b4:	4b5f      	ldr	r3, [pc, #380]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ba:	f023 020c 	bic.w	r2, r3, #12
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	495c      	ldr	r1, [pc, #368]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0304 	and.w	r3, r3, #4
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00a      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024d6:	4b57      	ldr	r3, [pc, #348]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024dc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4953      	ldr	r1, [pc, #332]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0320 	and.w	r3, r3, #32
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d00a      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024f8:	4b4e      	ldr	r3, [pc, #312]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80024fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	691b      	ldr	r3, [r3, #16]
 8002506:	494b      	ldr	r1, [pc, #300]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002508:	4313      	orrs	r3, r2
 800250a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00a      	beq.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800251a:	4b46      	ldr	r3, [pc, #280]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	4942      	ldr	r1, [pc, #264]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002538:	2b00      	cmp	r3, #0
 800253a:	d00a      	beq.n	8002552 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800253c:	4b3d      	ldr	r3, [pc, #244]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800253e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002542:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254a:	493a      	ldr	r1, [pc, #232]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800254c:	4313      	orrs	r3, r2
 800254e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00a      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800255e:	4b35      	ldr	r3, [pc, #212]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002564:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	4931      	ldr	r1, [pc, #196]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800256e:	4313      	orrs	r3, r2
 8002570:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00a      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002580:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002586:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	4929      	ldr	r1, [pc, #164]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d00a      	beq.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025a2:	4b24      	ldr	r3, [pc, #144]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	69db      	ldr	r3, [r3, #28]
 80025b0:	4920      	ldr	r1, [pc, #128]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d015      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	4918      	ldr	r1, [pc, #96]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025e2:	d105      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e4:	4b13      	ldr	r3, [pc, #76]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4a12      	ldr	r2, [pc, #72]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d015      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025fc:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002602:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800260a:	490a      	ldr	r1, [pc, #40]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800261a:	d105      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a04      	ldr	r2, [pc, #16]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002622:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002626:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002628:	7cbb      	ldrb	r3, [r7, #18]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000

08002638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e095      	b.n	8002776 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d108      	bne.n	8002664 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800265a:	d009      	beq.n	8002670 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
 8002662:	e005      	b.n	8002670 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fa5e 	bl	8000b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026a6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026b0:	d902      	bls.n	80026b8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
 80026b6:	e002      	b.n	80026be <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80026b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026bc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80026c6:	d007      	beq.n	80026d8 <HAL_SPI_Init+0xa0>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80026d0:	d002      	beq.n	80026d8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002710:	431a      	orrs	r2, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271a:	ea42 0103 	orr.w	r1, r2, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002722:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	0c1b      	lsrs	r3, r3, #16
 8002734:	f003 0204 	and.w	r2, r3, #4
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	f003 0310 	and.w	r3, r3, #16
 8002740:	431a      	orrs	r2, r3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002746:	f003 0308 	and.w	r3, r3, #8
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002754:	ea42 0103 	orr.w	r1, r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	430a      	orrs	r2, r1
 8002764:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002774:	2300      	movs	r3, #0
}
 8002776:	4618      	mov	r0, r3
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b08a      	sub	sp, #40	; 0x28
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
 800278a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800278c:	2301      	movs	r3, #1
 800278e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002790:	2300      	movs	r3, #0
 8002792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_SPI_TransmitReceive+0x26>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e1fb      	b.n	8002b9c <HAL_SPI_TransmitReceive+0x41e>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80027ac:	f7fe fc34 	bl	8001018 <HAL_GetTick>
 80027b0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80027b8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80027c0:	887b      	ldrh	r3, [r7, #2]
 80027c2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80027c4:	887b      	ldrh	r3, [r7, #2]
 80027c6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80027c8:	7efb      	ldrb	r3, [r7, #27]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d00e      	beq.n	80027ec <HAL_SPI_TransmitReceive+0x6e>
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80027d4:	d106      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d102      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x66>
 80027de:	7efb      	ldrb	r3, [r7, #27]
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d003      	beq.n	80027ec <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80027e4:	2302      	movs	r3, #2
 80027e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80027ea:	e1cd      	b.n	8002b88 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d005      	beq.n	80027fe <HAL_SPI_TransmitReceive+0x80>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d002      	beq.n	80027fe <HAL_SPI_TransmitReceive+0x80>
 80027f8:	887b      	ldrh	r3, [r7, #2]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d103      	bne.n	8002806 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002804:	e1c0      	b.n	8002b88 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b04      	cmp	r3, #4
 8002810:	d003      	beq.n	800281a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2205      	movs	r2, #5
 8002816:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2200      	movs	r2, #0
 800281e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	887a      	ldrh	r2, [r7, #2]
 800282a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	887a      	ldrh	r2, [r7, #2]
 8002832:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	887a      	ldrh	r2, [r7, #2]
 8002840:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	887a      	ldrh	r2, [r7, #2]
 8002846:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2200      	movs	r2, #0
 800284c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800285c:	d802      	bhi.n	8002864 <HAL_SPI_TransmitReceive+0xe6>
 800285e:	8a3b      	ldrh	r3, [r7, #16]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d908      	bls.n	8002876 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002872:	605a      	str	r2, [r3, #4]
 8002874:	e007      	b.n	8002886 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002884:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002890:	2b40      	cmp	r3, #64	; 0x40
 8002892:	d007      	beq.n	80028a4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80028ac:	d97c      	bls.n	80029a8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_SPI_TransmitReceive+0x13e>
 80028b6:	8a7b      	ldrh	r3, [r7, #18]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d169      	bne.n	8002990 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	881a      	ldrh	r2, [r3, #0]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	1c9a      	adds	r2, r3, #2
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028e0:	e056      	b.n	8002990 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b02      	cmp	r3, #2
 80028ee:	d11b      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x1aa>
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d016      	beq.n	8002928 <HAL_SPI_TransmitReceive+0x1aa>
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d113      	bne.n	8002928 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002904:	881a      	ldrh	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002910:	1c9a      	adds	r2, r3, #2
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800291a:	b29b      	uxth	r3, r3
 800291c:	3b01      	subs	r3, #1
 800291e:	b29a      	uxth	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b01      	cmp	r3, #1
 8002934:	d11c      	bne.n	8002970 <HAL_SPI_TransmitReceive+0x1f2>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800293c:	b29b      	uxth	r3, r3
 800293e:	2b00      	cmp	r3, #0
 8002940:	d016      	beq.n	8002970 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	68da      	ldr	r2, [r3, #12]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294c:	b292      	uxth	r2, r2
 800294e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002954:	1c9a      	adds	r2, r3, #2
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002960:	b29b      	uxth	r3, r3
 8002962:	3b01      	subs	r3, #1
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800296c:	2301      	movs	r3, #1
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002970:	f7fe fb52 	bl	8001018 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800297c:	429a      	cmp	r2, r3
 800297e:	d807      	bhi.n	8002990 <HAL_SPI_TransmitReceive+0x212>
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002986:	d003      	beq.n	8002990 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800298e:	e0fb      	b.n	8002b88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002994:	b29b      	uxth	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d1a3      	bne.n	80028e2 <HAL_SPI_TransmitReceive+0x164>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d19d      	bne.n	80028e2 <HAL_SPI_TransmitReceive+0x164>
 80029a6:	e0df      	b.n	8002b68 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_SPI_TransmitReceive+0x23a>
 80029b0:	8a7b      	ldrh	r3, [r7, #18]
 80029b2:	2b01      	cmp	r3, #1
 80029b4:	f040 80cb 	bne.w	8002b4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029bc:	b29b      	uxth	r3, r3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d912      	bls.n	80029e8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c6:	881a      	ldrh	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	1c9a      	adds	r2, r3, #2
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b02      	subs	r3, #2
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029e6:	e0b2      	b.n	8002b4e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	330c      	adds	r3, #12
 80029f2:	7812      	ldrb	r2, [r2, #0]
 80029f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a0e:	e09e      	b.n	8002b4e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d134      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x30a>
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d02f      	beq.n	8002a88 <HAL_SPI_TransmitReceive+0x30a>
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d12c      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d912      	bls.n	8002a5e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	881a      	ldrh	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a48:	1c9a      	adds	r2, r3, #2
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	3b02      	subs	r3, #2
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a5c:	e012      	b.n	8002a84 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	330c      	adds	r3, #12
 8002a68:	7812      	ldrb	r2, [r2, #0]
 8002a6a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a70:	1c5a      	adds	r2, r3, #1
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7a:	b29b      	uxth	r3, r3
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	b29a      	uxth	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d148      	bne.n	8002b28 <HAL_SPI_TransmitReceive+0x3aa>
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d042      	beq.n	8002b28 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d923      	bls.n	8002af6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	b292      	uxth	r2, r2
 8002aba:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	1c9a      	adds	r2, r3, #2
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	3b02      	subs	r3, #2
 8002ad0:	b29a      	uxth	r2, r3
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d81f      	bhi.n	8002b24 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002af2:	605a      	str	r2, [r3, #4]
 8002af4:	e016      	b.n	8002b24 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f103 020c 	add.w	r2, r3, #12
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	7812      	ldrb	r2, [r2, #0]
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b24:	2301      	movs	r3, #1
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002b28:	f7fe fa76 	bl	8001018 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	69fb      	ldr	r3, [r7, #28]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d803      	bhi.n	8002b40 <HAL_SPI_TransmitReceive+0x3c2>
 8002b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b3e:	d102      	bne.n	8002b46 <HAL_SPI_TransmitReceive+0x3c8>
 8002b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d103      	bne.n	8002b4e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002b4c:	e01c      	b.n	8002b88 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	f47f af5b 	bne.w	8002a10 <HAL_SPI_TransmitReceive+0x292>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002b60:	b29b      	uxth	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	f47f af54 	bne.w	8002a10 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b68:	69fa      	ldr	r2, [r7, #28]
 8002b6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f937 	bl	8002de0 <SPI_EndRxTxTransaction>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	661a      	str	r2, [r3, #96]	; 0x60
 8002b84:	e000      	b.n	8002b88 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8002b86:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002b98:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3728      	adds	r7, #40	; 0x28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002bb4:	f7fe fa30 	bl	8001018 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	683a      	ldr	r2, [r7, #0]
 8002bc0:	4413      	add	r3, r2
 8002bc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bc4:	f7fe fa28 	bl	8001018 <HAL_GetTick>
 8002bc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bca:	4b39      	ldr	r3, [pc, #228]	; (8002cb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	015b      	lsls	r3, r3, #5
 8002bd0:	0d1b      	lsrs	r3, r3, #20
 8002bd2:	69fa      	ldr	r2, [r7, #28]
 8002bd4:	fb02 f303 	mul.w	r3, r2, r3
 8002bd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002bda:	e054      	b.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be2:	d050      	beq.n	8002c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002be4:	f7fe fa18 	bl	8001018 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	69fa      	ldr	r2, [r7, #28]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d902      	bls.n	8002bfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d13d      	bne.n	8002c76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c12:	d111      	bne.n	8002c38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c1c:	d004      	beq.n	8002c28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c26:	d107      	bne.n	8002c38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c40:	d10f      	bne.n	8002c62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2201      	movs	r2, #1
 8002c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002c72:	2303      	movs	r3, #3
 8002c74:	e017      	b.n	8002ca6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d101      	bne.n	8002c80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4013      	ands	r3, r2
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	bf0c      	ite	eq
 8002c96:	2301      	moveq	r3, #1
 8002c98:	2300      	movne	r3, #0
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	79fb      	ldrb	r3, [r7, #7]
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d19b      	bne.n	8002bdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3720      	adds	r7, #32
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000000 	.word	0x20000000

08002cb4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08a      	sub	sp, #40	; 0x28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002cc6:	f7fe f9a7 	bl	8001018 <HAL_GetTick>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002cd6:	f7fe f99f 	bl	8001018 <HAL_GetTick>
 8002cda:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002ce4:	4b3d      	ldr	r3, [pc, #244]	; (8002ddc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	009b      	lsls	r3, r3, #2
 8002cec:	4413      	add	r3, r2
 8002cee:	00da      	lsls	r2, r3, #3
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	0d1b      	lsrs	r3, r3, #20
 8002cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf6:	fb02 f303 	mul.w	r3, r2, r3
 8002cfa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002cfc:	e060      	b.n	8002dc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002d04:	d107      	bne.n	8002d16 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d104      	bne.n	8002d16 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d14:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1c:	d050      	beq.n	8002dc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d1e:	f7fe f97b 	bl	8001018 <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d902      	bls.n	8002d34 <SPI_WaitFifoStateUntilTimeout+0x80>
 8002d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d13d      	bne.n	8002db0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002d42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4c:	d111      	bne.n	8002d72 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d56:	d004      	beq.n	8002d62 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d60:	d107      	bne.n	8002d72 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7a:	d10f      	bne.n	8002d9c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d8a:	601a      	str	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e010      	b.n	8002dd2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d101      	bne.n	8002dba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8002db6:	2300      	movs	r3, #0
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	429a      	cmp	r2, r3
 8002dce:	d196      	bne.n	8002cfe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8002dd0:	2300      	movs	r3, #0
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3728      	adds	r7, #40	; 0x28
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	20000000 	.word	0x20000000

08002de0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af02      	add	r7, sp, #8
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff ff5b 	bl	8002cb4 <SPI_WaitFifoStateUntilTimeout>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d007      	beq.n	8002e14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e08:	f043 0220 	orr.w	r2, r3, #32
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e027      	b.n	8002e64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	9300      	str	r3, [sp, #0]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	2180      	movs	r1, #128	; 0x80
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f7ff fec0 	bl	8002ba4 <SPI_WaitFlagStateUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e2e:	f043 0220 	orr.w	r2, r3, #32
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e014      	b.n	8002e64 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f7ff ff34 	bl	8002cb4 <SPI_WaitFifoStateUntilTimeout>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e56:	f043 0220 	orr.w	r2, r3, #32
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e000      	b.n	8002e64 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e040      	b.n	8002f00 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d106      	bne.n	8002e94 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd fef0 	bl	8000c74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2224      	movs	r2, #36	; 0x24
 8002e98:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f022 0201 	bic.w	r2, r2, #1
 8002ea8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	f000 f8c0 	bl	8003030 <UART_SetConfig>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e022      	b.n	8002f00 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 fb0e 	bl	80034e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685a      	ldr	r2, [r3, #4]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ed6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689a      	ldr	r2, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ee6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f042 0201 	orr.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fb95 	bl	8003628 <UART_CheckIdleState>
 8002efe:	4603      	mov	r3, r0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3708      	adds	r7, #8
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b08a      	sub	sp, #40	; 0x28
 8002f0c:	af02      	add	r7, sp, #8
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	4613      	mov	r3, r2
 8002f16:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	f040 8082 	bne.w	8003026 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d002      	beq.n	8002f2e <HAL_UART_Transmit+0x26>
 8002f28:	88fb      	ldrh	r3, [r7, #6]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e07a      	b.n	8003028 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_UART_Transmit+0x38>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e073      	b.n	8003028 <HAL_UART_Transmit+0x120>
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2221      	movs	r2, #33	; 0x21
 8002f54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002f56:	f7fe f85f 	bl	8001018 <HAL_GetTick>
 8002f5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	88fa      	ldrh	r2, [r7, #6]
 8002f60:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	88fa      	ldrh	r2, [r7, #6]
 8002f68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d108      	bne.n	8002f88 <HAL_UART_Transmit+0x80>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d104      	bne.n	8002f88 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	61bb      	str	r3, [r7, #24]
 8002f86:	e003      	b.n	8002f90 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002f98:	e02d      	b.n	8002ff6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f000 fb88 	bl	80036ba <UART_WaitOnFlagUntilTimeout>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e039      	b.n	8003028 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10b      	bne.n	8002fd2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	881a      	ldrh	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fc6:	b292      	uxth	r2, r2
 8002fc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	3302      	adds	r3, #2
 8002fce:	61bb      	str	r3, [r7, #24]
 8002fd0:	e008      	b.n	8002fe4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	781a      	ldrb	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	b292      	uxth	r2, r2
 8002fdc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	3b01      	subs	r3, #1
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1cb      	bne.n	8002f9a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	2200      	movs	r2, #0
 800300a:	2140      	movs	r1, #64	; 0x40
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 fb54 	bl	80036ba <UART_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e005      	b.n	8003028 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	e000      	b.n	8003028 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003026:	2302      	movs	r3, #2
  }
}
 8003028:	4618      	mov	r0, r3
 800302a:	3720      	adds	r7, #32
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003030:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003034:	b08a      	sub	sp, #40	; 0x28
 8003036:	af00      	add	r7, sp, #0
 8003038:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800303a:	2300      	movs	r3, #0
 800303c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	431a      	orrs	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	431a      	orrs	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	69db      	ldr	r3, [r3, #28]
 8003054:	4313      	orrs	r3, r2
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	4b9e      	ldr	r3, [pc, #632]	; (80032d8 <UART_SetConfig+0x2a8>)
 8003060:	4013      	ands	r3, r2
 8003062:	68fa      	ldr	r2, [r7, #12]
 8003064:	6812      	ldr	r2, [r2, #0]
 8003066:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003068:	430b      	orrs	r3, r1
 800306a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a93      	ldr	r2, [pc, #588]	; (80032dc <UART_SetConfig+0x2ac>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d004      	beq.n	800309c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003098:	4313      	orrs	r3, r2
 800309a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030ac:	430a      	orrs	r2, r1
 80030ae:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a8a      	ldr	r2, [pc, #552]	; (80032e0 <UART_SetConfig+0x2b0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d126      	bne.n	8003108 <UART_SetConfig+0xd8>
 80030ba:	4b8a      	ldr	r3, [pc, #552]	; (80032e4 <UART_SetConfig+0x2b4>)
 80030bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b03      	cmp	r3, #3
 80030c6:	d81b      	bhi.n	8003100 <UART_SetConfig+0xd0>
 80030c8:	a201      	add	r2, pc, #4	; (adr r2, 80030d0 <UART_SetConfig+0xa0>)
 80030ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ce:	bf00      	nop
 80030d0:	080030e1 	.word	0x080030e1
 80030d4:	080030f1 	.word	0x080030f1
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030f9 	.word	0x080030f9
 80030e0:	2301      	movs	r3, #1
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e0ab      	b.n	8003240 <UART_SetConfig+0x210>
 80030e8:	2302      	movs	r3, #2
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ee:	e0a7      	b.n	8003240 <UART_SetConfig+0x210>
 80030f0:	2304      	movs	r3, #4
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f6:	e0a3      	b.n	8003240 <UART_SetConfig+0x210>
 80030f8:	2308      	movs	r3, #8
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fe:	e09f      	b.n	8003240 <UART_SetConfig+0x210>
 8003100:	2310      	movs	r3, #16
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003106:	e09b      	b.n	8003240 <UART_SetConfig+0x210>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a76      	ldr	r2, [pc, #472]	; (80032e8 <UART_SetConfig+0x2b8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d138      	bne.n	8003184 <UART_SetConfig+0x154>
 8003112:	4b74      	ldr	r3, [pc, #464]	; (80032e4 <UART_SetConfig+0x2b4>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003118:	f003 030c 	and.w	r3, r3, #12
 800311c:	2b0c      	cmp	r3, #12
 800311e:	d82d      	bhi.n	800317c <UART_SetConfig+0x14c>
 8003120:	a201      	add	r2, pc, #4	; (adr r2, 8003128 <UART_SetConfig+0xf8>)
 8003122:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003126:	bf00      	nop
 8003128:	0800315d 	.word	0x0800315d
 800312c:	0800317d 	.word	0x0800317d
 8003130:	0800317d 	.word	0x0800317d
 8003134:	0800317d 	.word	0x0800317d
 8003138:	0800316d 	.word	0x0800316d
 800313c:	0800317d 	.word	0x0800317d
 8003140:	0800317d 	.word	0x0800317d
 8003144:	0800317d 	.word	0x0800317d
 8003148:	08003165 	.word	0x08003165
 800314c:	0800317d 	.word	0x0800317d
 8003150:	0800317d 	.word	0x0800317d
 8003154:	0800317d 	.word	0x0800317d
 8003158:	08003175 	.word	0x08003175
 800315c:	2300      	movs	r3, #0
 800315e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003162:	e06d      	b.n	8003240 <UART_SetConfig+0x210>
 8003164:	2302      	movs	r3, #2
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800316a:	e069      	b.n	8003240 <UART_SetConfig+0x210>
 800316c:	2304      	movs	r3, #4
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003172:	e065      	b.n	8003240 <UART_SetConfig+0x210>
 8003174:	2308      	movs	r3, #8
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800317a:	e061      	b.n	8003240 <UART_SetConfig+0x210>
 800317c:	2310      	movs	r3, #16
 800317e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003182:	e05d      	b.n	8003240 <UART_SetConfig+0x210>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a58      	ldr	r2, [pc, #352]	; (80032ec <UART_SetConfig+0x2bc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d125      	bne.n	80031da <UART_SetConfig+0x1aa>
 800318e:	4b55      	ldr	r3, [pc, #340]	; (80032e4 <UART_SetConfig+0x2b4>)
 8003190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003194:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003198:	2b30      	cmp	r3, #48	; 0x30
 800319a:	d016      	beq.n	80031ca <UART_SetConfig+0x19a>
 800319c:	2b30      	cmp	r3, #48	; 0x30
 800319e:	d818      	bhi.n	80031d2 <UART_SetConfig+0x1a2>
 80031a0:	2b20      	cmp	r3, #32
 80031a2:	d00a      	beq.n	80031ba <UART_SetConfig+0x18a>
 80031a4:	2b20      	cmp	r3, #32
 80031a6:	d814      	bhi.n	80031d2 <UART_SetConfig+0x1a2>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <UART_SetConfig+0x182>
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d008      	beq.n	80031c2 <UART_SetConfig+0x192>
 80031b0:	e00f      	b.n	80031d2 <UART_SetConfig+0x1a2>
 80031b2:	2300      	movs	r3, #0
 80031b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b8:	e042      	b.n	8003240 <UART_SetConfig+0x210>
 80031ba:	2302      	movs	r3, #2
 80031bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c0:	e03e      	b.n	8003240 <UART_SetConfig+0x210>
 80031c2:	2304      	movs	r3, #4
 80031c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031c8:	e03a      	b.n	8003240 <UART_SetConfig+0x210>
 80031ca:	2308      	movs	r3, #8
 80031cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d0:	e036      	b.n	8003240 <UART_SetConfig+0x210>
 80031d2:	2310      	movs	r3, #16
 80031d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031d8:	e032      	b.n	8003240 <UART_SetConfig+0x210>
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a3f      	ldr	r2, [pc, #252]	; (80032dc <UART_SetConfig+0x2ac>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d12a      	bne.n	800323a <UART_SetConfig+0x20a>
 80031e4:	4b3f      	ldr	r3, [pc, #252]	; (80032e4 <UART_SetConfig+0x2b4>)
 80031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80031ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031f2:	d01a      	beq.n	800322a <UART_SetConfig+0x1fa>
 80031f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031f8:	d81b      	bhi.n	8003232 <UART_SetConfig+0x202>
 80031fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031fe:	d00c      	beq.n	800321a <UART_SetConfig+0x1ea>
 8003200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003204:	d815      	bhi.n	8003232 <UART_SetConfig+0x202>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d003      	beq.n	8003212 <UART_SetConfig+0x1e2>
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320e:	d008      	beq.n	8003222 <UART_SetConfig+0x1f2>
 8003210:	e00f      	b.n	8003232 <UART_SetConfig+0x202>
 8003212:	2300      	movs	r3, #0
 8003214:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003218:	e012      	b.n	8003240 <UART_SetConfig+0x210>
 800321a:	2302      	movs	r3, #2
 800321c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003220:	e00e      	b.n	8003240 <UART_SetConfig+0x210>
 8003222:	2304      	movs	r3, #4
 8003224:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003228:	e00a      	b.n	8003240 <UART_SetConfig+0x210>
 800322a:	2308      	movs	r3, #8
 800322c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003230:	e006      	b.n	8003240 <UART_SetConfig+0x210>
 8003232:	2310      	movs	r3, #16
 8003234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003238:	e002      	b.n	8003240 <UART_SetConfig+0x210>
 800323a:	2310      	movs	r3, #16
 800323c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a25      	ldr	r2, [pc, #148]	; (80032dc <UART_SetConfig+0x2ac>)
 8003246:	4293      	cmp	r3, r2
 8003248:	f040 808a 	bne.w	8003360 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800324c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003250:	2b08      	cmp	r3, #8
 8003252:	d824      	bhi.n	800329e <UART_SetConfig+0x26e>
 8003254:	a201      	add	r2, pc, #4	; (adr r2, 800325c <UART_SetConfig+0x22c>)
 8003256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325a:	bf00      	nop
 800325c:	08003281 	.word	0x08003281
 8003260:	0800329f 	.word	0x0800329f
 8003264:	08003289 	.word	0x08003289
 8003268:	0800329f 	.word	0x0800329f
 800326c:	0800328f 	.word	0x0800328f
 8003270:	0800329f 	.word	0x0800329f
 8003274:	0800329f 	.word	0x0800329f
 8003278:	0800329f 	.word	0x0800329f
 800327c:	08003297 	.word	0x08003297
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003280:	f7fe ffc8 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8003284:	61f8      	str	r0, [r7, #28]
        break;
 8003286:	e010      	b.n	80032aa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003288:	4b19      	ldr	r3, [pc, #100]	; (80032f0 <UART_SetConfig+0x2c0>)
 800328a:	61fb      	str	r3, [r7, #28]
        break;
 800328c:	e00d      	b.n	80032aa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328e:	f7fe ff29 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8003292:	61f8      	str	r0, [r7, #28]
        break;
 8003294:	e009      	b.n	80032aa <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003296:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800329a:	61fb      	str	r3, [r7, #28]
        break;
 800329c:	e005      	b.n	80032aa <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 8109 	beq.w	80034c4 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	005b      	lsls	r3, r3, #1
 80032ba:	4413      	add	r3, r2
 80032bc:	69fa      	ldr	r2, [r7, #28]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d305      	bcc.n	80032ce <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032c8:	69fa      	ldr	r2, [r7, #28]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d912      	bls.n	80032f4 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032d4:	e0f6      	b.n	80034c4 <UART_SetConfig+0x494>
 80032d6:	bf00      	nop
 80032d8:	efff69f3 	.word	0xefff69f3
 80032dc:	40008000 	.word	0x40008000
 80032e0:	40013800 	.word	0x40013800
 80032e4:	40021000 	.word	0x40021000
 80032e8:	40004400 	.word	0x40004400
 80032ec:	40004800 	.word	0x40004800
 80032f0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2200      	movs	r2, #0
 80032f8:	461c      	mov	r4, r3
 80032fa:	4615      	mov	r5, r2
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	f04f 0300 	mov.w	r3, #0
 8003304:	022b      	lsls	r3, r5, #8
 8003306:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800330a:	0222      	lsls	r2, r4, #8
 800330c:	68f9      	ldr	r1, [r7, #12]
 800330e:	6849      	ldr	r1, [r1, #4]
 8003310:	0849      	lsrs	r1, r1, #1
 8003312:	2000      	movs	r0, #0
 8003314:	4688      	mov	r8, r1
 8003316:	4681      	mov	r9, r0
 8003318:	eb12 0a08 	adds.w	sl, r2, r8
 800331c:	eb43 0b09 	adc.w	fp, r3, r9
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	607a      	str	r2, [r7, #4]
 800332a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800332e:	4650      	mov	r0, sl
 8003330:	4659      	mov	r1, fp
 8003332:	f7fc ff9d 	bl	8000270 <__aeabi_uldivmod>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4613      	mov	r3, r2
 800333c:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003344:	d308      	bcc.n	8003358 <UART_SetConfig+0x328>
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800334c:	d204      	bcs.n	8003358 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69ba      	ldr	r2, [r7, #24]
 8003354:	60da      	str	r2, [r3, #12]
 8003356:	e0b5      	b.n	80034c4 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800335e:	e0b1      	b.n	80034c4 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003368:	d15d      	bne.n	8003426 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 800336a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800336e:	2b08      	cmp	r3, #8
 8003370:	d827      	bhi.n	80033c2 <UART_SetConfig+0x392>
 8003372:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <UART_SetConfig+0x348>)
 8003374:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003378:	0800339d 	.word	0x0800339d
 800337c:	080033a5 	.word	0x080033a5
 8003380:	080033ad 	.word	0x080033ad
 8003384:	080033c3 	.word	0x080033c3
 8003388:	080033b3 	.word	0x080033b3
 800338c:	080033c3 	.word	0x080033c3
 8003390:	080033c3 	.word	0x080033c3
 8003394:	080033c3 	.word	0x080033c3
 8003398:	080033bb 	.word	0x080033bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800339c:	f7fe ff3a 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 80033a0:	61f8      	str	r0, [r7, #28]
        break;
 80033a2:	e014      	b.n	80033ce <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033a4:	f7fe ff4c 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 80033a8:	61f8      	str	r0, [r7, #28]
        break;
 80033aa:	e010      	b.n	80033ce <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033ac:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <UART_SetConfig+0x4b0>)
 80033ae:	61fb      	str	r3, [r7, #28]
        break;
 80033b0:	e00d      	b.n	80033ce <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033b2:	f7fe fe97 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 80033b6:	61f8      	str	r0, [r7, #28]
        break;
 80033b8:	e009      	b.n	80033ce <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033be:	61fb      	str	r3, [r7, #28]
        break;
 80033c0:	e005      	b.n	80033ce <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d077      	beq.n	80034c4 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005a      	lsls	r2, r3, #1
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	085b      	lsrs	r3, r3, #1
 80033de:	441a      	add	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	2b0f      	cmp	r3, #15
 80033ee:	d916      	bls.n	800341e <UART_SetConfig+0x3ee>
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033f6:	d212      	bcs.n	800341e <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033f8:	69bb      	ldr	r3, [r7, #24]
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	f023 030f 	bic.w	r3, r3, #15
 8003400:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	085b      	lsrs	r3, r3, #1
 8003406:	b29b      	uxth	r3, r3
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	b29a      	uxth	r2, r3
 800340e:	8afb      	ldrh	r3, [r7, #22]
 8003410:	4313      	orrs	r3, r2
 8003412:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	8afa      	ldrh	r2, [r7, #22]
 800341a:	60da      	str	r2, [r3, #12]
 800341c:	e052      	b.n	80034c4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003424:	e04e      	b.n	80034c4 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003426:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800342a:	2b08      	cmp	r3, #8
 800342c:	d827      	bhi.n	800347e <UART_SetConfig+0x44e>
 800342e:	a201      	add	r2, pc, #4	; (adr r2, 8003434 <UART_SetConfig+0x404>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	08003459 	.word	0x08003459
 8003438:	08003461 	.word	0x08003461
 800343c:	08003469 	.word	0x08003469
 8003440:	0800347f 	.word	0x0800347f
 8003444:	0800346f 	.word	0x0800346f
 8003448:	0800347f 	.word	0x0800347f
 800344c:	0800347f 	.word	0x0800347f
 8003450:	0800347f 	.word	0x0800347f
 8003454:	08003477 	.word	0x08003477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003458:	f7fe fedc 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 800345c:	61f8      	str	r0, [r7, #28]
        break;
 800345e:	e014      	b.n	800348a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003460:	f7fe feee 	bl	8002240 <HAL_RCC_GetPCLK2Freq>
 8003464:	61f8      	str	r0, [r7, #28]
        break;
 8003466:	e010      	b.n	800348a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <UART_SetConfig+0x4b0>)
 800346a:	61fb      	str	r3, [r7, #28]
        break;
 800346c:	e00d      	b.n	800348a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800346e:	f7fe fe39 	bl	80020e4 <HAL_RCC_GetSysClockFreq>
 8003472:	61f8      	str	r0, [r7, #28]
        break;
 8003474:	e009      	b.n	800348a <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800347a:	61fb      	str	r3, [r7, #28]
        break;
 800347c:	e005      	b.n	800348a <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003488:	bf00      	nop
    }

    if (pclk != 0U)
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d019      	beq.n	80034c4 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	085a      	lsrs	r2, r3, #1
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	441a      	add	r2, r3
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	2b0f      	cmp	r3, #15
 80034a8:	d909      	bls.n	80034be <UART_SetConfig+0x48e>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034b0:	d205      	bcs.n	80034be <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034b2:	69bb      	ldr	r3, [r7, #24]
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60da      	str	r2, [r3, #12]
 80034bc:	e002      	b.n	80034c4 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80034d0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	3728      	adds	r7, #40	; 0x28
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034de:	bf00      	nop
 80034e0:	00f42400 	.word	0x00f42400

080034e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d00a      	beq.n	800350e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00a      	beq.n	8003530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	430a      	orrs	r2, r1
 800352e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	f003 0304 	and.w	r3, r3, #4
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00a      	beq.n	8003552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00a      	beq.n	8003574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00a      	beq.n	8003596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	f003 0320 	and.w	r3, r3, #32
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01a      	beq.n	80035fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035e2:	d10a      	bne.n	80035fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	605a      	str	r2, [r3, #4]
  }
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af02      	add	r7, sp, #8
 800362e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003638:	f7fd fcee 	bl	8001018 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0308 	and.w	r3, r3, #8
 8003648:	2b08      	cmp	r3, #8
 800364a:	d10e      	bne.n	800366a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800364c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003650:	9300      	str	r3, [sp, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2200      	movs	r2, #0
 8003656:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f82d 	bl	80036ba <UART_WaitOnFlagUntilTimeout>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e023      	b.n	80036b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b04      	cmp	r3, #4
 8003676:	d10e      	bne.n	8003696 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003678:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800367c:	9300      	str	r3, [sp, #0]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2200      	movs	r2, #0
 8003682:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f817 	bl	80036ba <UART_WaitOnFlagUntilTimeout>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003692:	2303      	movs	r3, #3
 8003694:	e00d      	b.n	80036b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2220      	movs	r2, #32
 800369a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2220      	movs	r2, #32
 80036a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036ba:	b580      	push	{r7, lr}
 80036bc:	b09c      	sub	sp, #112	; 0x70
 80036be:	af00      	add	r7, sp, #0
 80036c0:	60f8      	str	r0, [r7, #12]
 80036c2:	60b9      	str	r1, [r7, #8]
 80036c4:	603b      	str	r3, [r7, #0]
 80036c6:	4613      	mov	r3, r2
 80036c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ca:	e0a5      	b.n	8003818 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d2:	f000 80a1 	beq.w	8003818 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036d6:	f7fd fc9f 	bl	8001018 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d302      	bcc.n	80036ec <UART_WaitOnFlagUntilTimeout+0x32>
 80036e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d13e      	bne.n	800376a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80036fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80036fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003700:	667b      	str	r3, [r7, #100]	; 0x64
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	461a      	mov	r2, r3
 8003708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800370a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800370c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003710:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003718:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e6      	bne.n	80036ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	3308      	adds	r3, #8
 8003724:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003728:	e853 3f00 	ldrex	r3, [r3]
 800372c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800372e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003730:	f023 0301 	bic.w	r3, r3, #1
 8003734:	663b      	str	r3, [r7, #96]	; 0x60
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3308      	adds	r3, #8
 800373c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800373e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003740:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003742:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003744:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800374c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e5      	bne.n	800371e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2220      	movs	r2, #32
 800375c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e067      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0304 	and.w	r3, r3, #4
 8003774:	2b00      	cmp	r3, #0
 8003776:	d04f      	beq.n	8003818 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	69db      	ldr	r3, [r3, #28]
 800377e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003782:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003786:	d147      	bne.n	8003818 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003790:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	461a      	mov	r2, r3
 80037ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037b0:	637b      	str	r3, [r7, #52]	; 0x34
 80037b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e6      	bne.n	8003792 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3308      	adds	r3, #8
 80037ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	613b      	str	r3, [r7, #16]
   return(result);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	66bb      	str	r3, [r7, #104]	; 0x68
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3308      	adds	r3, #8
 80037e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80037e4:	623a      	str	r2, [r7, #32]
 80037e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	69f9      	ldr	r1, [r7, #28]
 80037ea:	6a3a      	ldr	r2, [r7, #32]
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80037f2:	69bb      	ldr	r3, [r7, #24]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e5      	bne.n	80037c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2220      	movs	r2, #32
 80037fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	2220      	movs	r2, #32
 8003808:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e010      	b.n	800383a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	4013      	ands	r3, r2
 8003822:	68ba      	ldr	r2, [r7, #8]
 8003824:	429a      	cmp	r2, r3
 8003826:	bf0c      	ite	eq
 8003828:	2301      	moveq	r3, #1
 800382a:	2300      	movne	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	79fb      	ldrb	r3, [r7, #7]
 8003832:	429a      	cmp	r2, r3
 8003834:	f43f af4a 	beq.w	80036cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3770      	adds	r7, #112	; 0x70
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003848:	4904      	ldr	r1, [pc, #16]	; (800385c <MX_FATFS_Init+0x18>)
 800384a:	4805      	ldr	r0, [pc, #20]	; (8003860 <MX_FATFS_Init+0x1c>)
 800384c:	f003 f928 	bl	8006aa0 <FATFS_LinkDriver>
 8003850:	4603      	mov	r3, r0
 8003852:	461a      	mov	r2, r3
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <MX_FATFS_Init+0x20>)
 8003856:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003858:	bf00      	nop
 800385a:	bd80      	pop	{r7, pc}
 800385c:	2000042c 	.word	0x2000042c
 8003860:	2000000c 	.word	0x2000000c
 8003864:	20000428 	.word	0x20000428

08003868 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800386c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800386e:	4618      	mov	r0, r3
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv);
 8003882:	79fb      	ldrb	r3, [r7, #7]
 8003884:	4618      	mov	r0, r3
 8003886:	f000 f9dd 	bl	8003c44 <USER_SPI_initialize>
 800388a:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800388c:	4618      	mov	r0, r3
 800388e:	3708      	adds	r7, #8
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv);
 800389e:	79fb      	ldrb	r3, [r7, #7]
 80038a0:	4618      	mov	r0, r3
 80038a2:	f000 fab9 	bl	8003e18 <USER_SPI_status>
 80038a6:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3708      	adds	r7, #8
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b084      	sub	sp, #16
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60b9      	str	r1, [r7, #8]
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	603b      	str	r3, [r7, #0]
 80038bc:	4603      	mov	r3, r0
 80038be:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count);
 80038c0:	7bf8      	ldrb	r0, [r7, #15]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	68b9      	ldr	r1, [r7, #8]
 80038c8:	f000 fabc 	bl	8003e44 <USER_SPI_read>
 80038cc:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b084      	sub	sp, #16
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
 80038e0:	603b      	str	r3, [r7, #0]
 80038e2:	4603      	mov	r3, r0
 80038e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count);
 80038e6:	7bf8      	ldrb	r0, [r7, #15]
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68b9      	ldr	r1, [r7, #8]
 80038ee:	f000 fb0f 	bl	8003f10 <USER_SPI_write>
 80038f2:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	4603      	mov	r3, r0
 8003904:	603a      	str	r2, [r7, #0]
 8003906:	71fb      	strb	r3, [r7, #7]
 8003908:	460b      	mov	r3, r1
 800390a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800390c:	79b9      	ldrb	r1, [r7, #6]
 800390e:	79fb      	ldrb	r3, [r7, #7]
 8003910:	683a      	ldr	r2, [r7, #0]
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fb78 	bl	8004008 <USER_SPI_ioctl>
 8003918:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800391a:	4618      	mov	r0, r3
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
	...

08003924 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800392c:	f7fd fb74 	bl	8001018 <HAL_GetTick>
 8003930:	4603      	mov	r3, r0
 8003932:	4a04      	ldr	r2, [pc, #16]	; (8003944 <SPI_Timer_On+0x20>)
 8003934:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8003936:	4a04      	ldr	r2, [pc, #16]	; (8003948 <SPI_Timer_On+0x24>)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6013      	str	r3, [r2, #0]
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	20000434 	.word	0x20000434
 8003948:	20000438 	.word	0x20000438

0800394c <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800394c:	b580      	push	{r7, lr}
 800394e:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8003950:	f7fd fb62 	bl	8001018 <HAL_GetTick>
 8003954:	4602      	mov	r2, r0
 8003956:	4b06      	ldr	r3, [pc, #24]	; (8003970 <SPI_Timer_Status+0x24>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	1ad2      	subs	r2, r2, r3
 800395c:	4b05      	ldr	r3, [pc, #20]	; (8003974 <SPI_Timer_Status+0x28>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	429a      	cmp	r2, r3
 8003962:	bf34      	ite	cc
 8003964:	2301      	movcc	r3, #1
 8003966:	2300      	movcs	r3, #0
 8003968:	b2db      	uxtb	r3, r3
}
 800396a:	4618      	mov	r0, r3
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000434 	.word	0x20000434
 8003974:	20000438 	.word	0x20000438

08003978 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af02      	add	r7, sp, #8
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8003982:	f107 020f 	add.w	r2, r7, #15
 8003986:	1df9      	adds	r1, r7, #7
 8003988:	2332      	movs	r3, #50	; 0x32
 800398a:	9300      	str	r3, [sp, #0]
 800398c:	2301      	movs	r3, #1
 800398e:	4804      	ldr	r0, [pc, #16]	; (80039a0 <xchg_spi+0x28>)
 8003990:	f7fe fef5 	bl	800277e <HAL_SPI_TransmitReceive>
    return rxDat;
 8003994:	7bfb      	ldrb	r3, [r7, #15]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3710      	adds	r7, #16
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
 800399e:	bf00      	nop
 80039a0:	20000108 	.word	0x20000108

080039a4 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 80039a4:	b590      	push	{r4, r7, lr}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	e00a      	b.n	80039ca <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 80039b4:	687a      	ldr	r2, [r7, #4]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	18d4      	adds	r4, r2, r3
 80039ba:	20ff      	movs	r0, #255	; 0xff
 80039bc:	f7ff ffdc 	bl	8003978 <xchg_spi>
 80039c0:	4603      	mov	r3, r0
 80039c2:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3301      	adds	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d3f0      	bcc.n	80039b4 <rcvr_spi_multi+0x10>
	}
}
 80039d2:	bf00      	nop
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd90      	pop	{r4, r7, pc}

080039dc <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
 80039ea:	e009      	b.n	8003a00 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 80039ec:	687a      	ldr	r2, [r7, #4]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ffbf 	bl	8003978 <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3301      	adds	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d3f1      	bcc.n	80039ec <xmit_spi_multi+0x10>
	}
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b086      	sub	sp, #24
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8003a1a:	f7fd fafd 	bl	8001018 <HAL_GetTick>
 8003a1e:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 8003a24:	20ff      	movs	r0, #255	; 0xff
 8003a26:	f7ff ffa7 	bl	8003978 <xchg_spi>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 8003a2e:	7bfb      	ldrb	r3, [r7, #15]
 8003a30:	2bff      	cmp	r3, #255	; 0xff
 8003a32:	d007      	beq.n	8003a44 <wait_ready+0x32>
 8003a34:	f7fd faf0 	bl	8001018 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d8ef      	bhi.n	8003a24 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
 8003a46:	2bff      	cmp	r3, #255	; 0xff
 8003a48:	bf0c      	ite	eq
 8003a4a:	2301      	moveq	r3, #1
 8003a4c:	2300      	movne	r3, #0
 8003a4e:	b2db      	uxtb	r3, r3
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3718      	adds	r7, #24
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a62:	4804      	ldr	r0, [pc, #16]	; (8003a74 <despiselect+0x1c>)
 8003a64:	f7fd fd60 	bl	8001528 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8003a68:	20ff      	movs	r0, #255	; 0xff
 8003a6a:	f7ff ff85 	bl	8003978 <xchg_spi>

}
 8003a6e:	bf00      	nop
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	48000800 	.word	0x48000800

08003a78 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a82:	480a      	ldr	r0, [pc, #40]	; (8003aac <spiselect+0x34>)
 8003a84:	f7fd fd50 	bl	8001528 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8003a88:	20ff      	movs	r0, #255	; 0xff
 8003a8a:	f7ff ff75 	bl	8003978 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 8003a8e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003a92:	f7ff ffbe 	bl	8003a12 <wait_ready>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <spiselect+0x28>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e002      	b.n	8003aa6 <spiselect+0x2e>

	despiselect();
 8003aa0:	f7ff ffda 	bl	8003a58 <despiselect>
	return 0;	/* Timeout */
 8003aa4:	2300      	movs	r3, #0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	48000800 	.word	0x48000800

08003ab0 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 8003aba:	20c8      	movs	r0, #200	; 0xc8
 8003abc:	f7ff ff32 	bl	8003924 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8003ac0:	20ff      	movs	r0, #255	; 0xff
 8003ac2:	f7ff ff59 	bl	8003978 <xchg_spi>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8003aca:	7bfb      	ldrb	r3, [r7, #15]
 8003acc:	2bff      	cmp	r3, #255	; 0xff
 8003ace:	d104      	bne.n	8003ada <rcvr_datablock+0x2a>
 8003ad0:	f7ff ff3c 	bl	800394c <SPI_Timer_Status>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f2      	bne.n	8003ac0 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	2bfe      	cmp	r3, #254	; 0xfe
 8003ade:	d001      	beq.n	8003ae4 <rcvr_datablock+0x34>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e00a      	b.n	8003afa <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 8003ae4:	6839      	ldr	r1, [r7, #0]
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ff5c 	bl	80039a4 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 8003aec:	20ff      	movs	r0, #255	; 0xff
 8003aee:	f7ff ff43 	bl	8003978 <xchg_spi>
 8003af2:	20ff      	movs	r0, #255	; 0xff
 8003af4:	f7ff ff40 	bl	8003978 <xchg_spi>

	return 1;						/* Function succeeded */
 8003af8:	2301      	movs	r3, #1
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
 8003b0a:	460b      	mov	r3, r1
 8003b0c:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 8003b0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003b12:	f7ff ff7e 	bl	8003a12 <wait_ready>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <xmit_datablock+0x1e>
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	e01e      	b.n	8003b5e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 8003b20:	78fb      	ldrb	r3, [r7, #3]
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff ff28 	bl	8003978 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 8003b28:	78fb      	ldrb	r3, [r7, #3]
 8003b2a:	2bfd      	cmp	r3, #253	; 0xfd
 8003b2c:	d016      	beq.n	8003b5c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 8003b2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f7ff ff52 	bl	80039dc <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 8003b38:	20ff      	movs	r0, #255	; 0xff
 8003b3a:	f7ff ff1d 	bl	8003978 <xchg_spi>
 8003b3e:	20ff      	movs	r0, #255	; 0xff
 8003b40:	f7ff ff1a 	bl	8003978 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8003b44:	20ff      	movs	r0, #255	; 0xff
 8003b46:	f7ff ff17 	bl	8003978 <xchg_spi>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 8003b4e:	7bfb      	ldrb	r3, [r7, #15]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	2b05      	cmp	r3, #5
 8003b56:	d001      	beq.n	8003b5c <xmit_datablock+0x5a>
 8003b58:	2300      	movs	r3, #0
 8003b5a:	e000      	b.n	8003b5e <xmit_datablock+0x5c>
	}
	return 1;
 8003b5c:	2301      	movs	r3, #1
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	6039      	str	r1, [r7, #0]
 8003b70:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8003b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	da0e      	bge.n	8003b98 <send_cmd+0x32>
		cmd &= 0x7F;
 8003b7a:	79fb      	ldrb	r3, [r7, #7]
 8003b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b80:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8003b82:	2100      	movs	r1, #0
 8003b84:	2037      	movs	r0, #55	; 0x37
 8003b86:	f7ff ffee 	bl	8003b66 <send_cmd>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 8003b8e:	7bbb      	ldrb	r3, [r7, #14]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d901      	bls.n	8003b98 <send_cmd+0x32>
 8003b94:	7bbb      	ldrb	r3, [r7, #14]
 8003b96:	e051      	b.n	8003c3c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8003b98:	79fb      	ldrb	r3, [r7, #7]
 8003b9a:	2b0c      	cmp	r3, #12
 8003b9c:	d008      	beq.n	8003bb0 <send_cmd+0x4a>
		despiselect();
 8003b9e:	f7ff ff5b 	bl	8003a58 <despiselect>
		if (!spiselect()) return 0xFF;
 8003ba2:	f7ff ff69 	bl	8003a78 <spiselect>
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <send_cmd+0x4a>
 8003bac:	23ff      	movs	r3, #255	; 0xff
 8003bae:	e045      	b.n	8003c3c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8003bb0:	79fb      	ldrb	r3, [r7, #7]
 8003bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bb6:	b2db      	uxtb	r3, r3
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fedd 	bl	8003978 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	0e1b      	lsrs	r3, r3, #24
 8003bc2:	b2db      	uxtb	r3, r3
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f7ff fed7 	bl	8003978 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	0c1b      	lsrs	r3, r3, #16
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff fed1 	bl	8003978 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	0a1b      	lsrs	r3, r3, #8
 8003bda:	b2db      	uxtb	r3, r3
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7ff fecb 	bl	8003978 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	b2db      	uxtb	r3, r3
 8003be6:	4618      	mov	r0, r3
 8003be8:	f7ff fec6 	bl	8003978 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 8003bec:	2301      	movs	r3, #1
 8003bee:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 8003bf0:	79fb      	ldrb	r3, [r7, #7]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <send_cmd+0x94>
 8003bf6:	2395      	movs	r3, #149	; 0x95
 8003bf8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	2b08      	cmp	r3, #8
 8003bfe:	d101      	bne.n	8003c04 <send_cmd+0x9e>
 8003c00:	2387      	movs	r3, #135	; 0x87
 8003c02:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8003c04:	7bfb      	ldrb	r3, [r7, #15]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7ff feb6 	bl	8003978 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 8003c0c:	79fb      	ldrb	r3, [r7, #7]
 8003c0e:	2b0c      	cmp	r3, #12
 8003c10:	d102      	bne.n	8003c18 <send_cmd+0xb2>
 8003c12:	20ff      	movs	r0, #255	; 0xff
 8003c14:	f7ff feb0 	bl	8003978 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 8003c18:	230a      	movs	r3, #10
 8003c1a:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 8003c1c:	20ff      	movs	r0, #255	; 0xff
 8003c1e:	f7ff feab 	bl	8003978 <xchg_spi>
 8003c22:	4603      	mov	r3, r0
 8003c24:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8003c26:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	da05      	bge.n	8003c3a <send_cmd+0xd4>
 8003c2e:	7bfb      	ldrb	r3, [r7, #15]
 8003c30:	3b01      	subs	r3, #1
 8003c32:	73fb      	strb	r3, [r7, #15]
 8003c34:	7bfb      	ldrb	r3, [r7, #15]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d1f0      	bne.n	8003c1c <send_cmd+0xb6>

	return res;							/* Return received response */
 8003c3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003c44:	b590      	push	{r4, r7, lr}
 8003c46:	b085      	sub	sp, #20
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d001      	beq.n	8003c58 <USER_SPI_initialize+0x14>
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0d4      	b.n	8003e02 <USER_SPI_initialize+0x1be>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8003c58:	4b6c      	ldr	r3, [pc, #432]	; (8003e0c <USER_SPI_initialize+0x1c8>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <USER_SPI_initialize+0x2a>
 8003c66:	4b69      	ldr	r3, [pc, #420]	; (8003e0c <USER_SPI_initialize+0x1c8>)
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	e0c9      	b.n	8003e02 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8003c6e:	4b68      	ldr	r3, [pc, #416]	; (8003e10 <USER_SPI_initialize+0x1cc>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	4b66      	ldr	r3, [pc, #408]	; (8003e10 <USER_SPI_initialize+0x1cc>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8003c7c:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8003c7e:	230a      	movs	r3, #10
 8003c80:	73fb      	strb	r3, [r7, #15]
 8003c82:	e005      	b.n	8003c90 <USER_SPI_initialize+0x4c>
 8003c84:	20ff      	movs	r0, #255	; 0xff
 8003c86:	f7ff fe77 	bl	8003978 <xchg_spi>
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	7bfb      	ldrb	r3, [r7, #15]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f6      	bne.n	8003c84 <USER_SPI_initialize+0x40>

	ty = 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 8003c9a:	2100      	movs	r1, #0
 8003c9c:	2000      	movs	r0, #0
 8003c9e:	f7ff ff62 	bl	8003b66 <send_cmd>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	f040 808b 	bne.w	8003dc0 <USER_SPI_initialize+0x17c>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 8003caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cae:	f7ff fe39 	bl	8003924 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8003cb2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003cb6:	2008      	movs	r0, #8
 8003cb8:	f7ff ff55 	bl	8003b66 <send_cmd>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d151      	bne.n	8003d66 <USER_SPI_initialize+0x122>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	73fb      	strb	r3, [r7, #15]
 8003cc6:	e00d      	b.n	8003ce4 <USER_SPI_initialize+0xa0>
 8003cc8:	7bfc      	ldrb	r4, [r7, #15]
 8003cca:	20ff      	movs	r0, #255	; 0xff
 8003ccc:	f7ff fe54 	bl	8003978 <xchg_spi>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	461a      	mov	r2, r3
 8003cd4:	f104 0310 	add.w	r3, r4, #16
 8003cd8:	443b      	add	r3, r7
 8003cda:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	3301      	adds	r3, #1
 8003ce2:	73fb      	strb	r3, [r7, #15]
 8003ce4:	7bfb      	ldrb	r3, [r7, #15]
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d9ee      	bls.n	8003cc8 <USER_SPI_initialize+0x84>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 8003cea:	7abb      	ldrb	r3, [r7, #10]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d167      	bne.n	8003dc0 <USER_SPI_initialize+0x17c>
 8003cf0:	7afb      	ldrb	r3, [r7, #11]
 8003cf2:	2baa      	cmp	r3, #170	; 0xaa
 8003cf4:	d164      	bne.n	8003dc0 <USER_SPI_initialize+0x17c>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 8003cf6:	bf00      	nop
 8003cf8:	f7ff fe28 	bl	800394c <SPI_Timer_Status>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d007      	beq.n	8003d12 <USER_SPI_initialize+0xce>
 8003d02:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003d06:	20a9      	movs	r0, #169	; 0xa9
 8003d08:	f7ff ff2d 	bl	8003b66 <send_cmd>
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f2      	bne.n	8003cf8 <USER_SPI_initialize+0xb4>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 8003d12:	f7ff fe1b 	bl	800394c <SPI_Timer_Status>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d051      	beq.n	8003dc0 <USER_SPI_initialize+0x17c>
 8003d1c:	2100      	movs	r1, #0
 8003d1e:	203a      	movs	r0, #58	; 0x3a
 8003d20:	f7ff ff21 	bl	8003b66 <send_cmd>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d14a      	bne.n	8003dc0 <USER_SPI_initialize+0x17c>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]
 8003d2e:	e00d      	b.n	8003d4c <USER_SPI_initialize+0x108>
 8003d30:	7bfc      	ldrb	r4, [r7, #15]
 8003d32:	20ff      	movs	r0, #255	; 0xff
 8003d34:	f7ff fe20 	bl	8003978 <xchg_spi>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	f104 0310 	add.w	r3, r4, #16
 8003d40:	443b      	add	r3, r7
 8003d42:	f803 2c08 	strb.w	r2, [r3, #-8]
 8003d46:	7bfb      	ldrb	r3, [r7, #15]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	73fb      	strb	r3, [r7, #15]
 8003d4c:	7bfb      	ldrb	r3, [r7, #15]
 8003d4e:	2b03      	cmp	r3, #3
 8003d50:	d9ee      	bls.n	8003d30 <USER_SPI_initialize+0xec>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8003d52:	7a3b      	ldrb	r3, [r7, #8]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d001      	beq.n	8003d60 <USER_SPI_initialize+0x11c>
 8003d5c:	230c      	movs	r3, #12
 8003d5e:	e000      	b.n	8003d62 <USER_SPI_initialize+0x11e>
 8003d60:	2304      	movs	r3, #4
 8003d62:	737b      	strb	r3, [r7, #13]
 8003d64:	e02c      	b.n	8003dc0 <USER_SPI_initialize+0x17c>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8003d66:	2100      	movs	r1, #0
 8003d68:	20a9      	movs	r0, #169	; 0xa9
 8003d6a:	f7ff fefc 	bl	8003b66 <send_cmd>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d804      	bhi.n	8003d7e <USER_SPI_initialize+0x13a>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8003d74:	2302      	movs	r3, #2
 8003d76:	737b      	strb	r3, [r7, #13]
 8003d78:	23a9      	movs	r3, #169	; 0xa9
 8003d7a:	73bb      	strb	r3, [r7, #14]
 8003d7c:	e003      	b.n	8003d86 <USER_SPI_initialize+0x142>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8003d7e:	2301      	movs	r3, #1
 8003d80:	737b      	strb	r3, [r7, #13]
 8003d82:	2301      	movs	r3, #1
 8003d84:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8003d86:	bf00      	nop
 8003d88:	f7ff fde0 	bl	800394c <SPI_Timer_Status>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d007      	beq.n	8003da2 <USER_SPI_initialize+0x15e>
 8003d92:	7bbb      	ldrb	r3, [r7, #14]
 8003d94:	2100      	movs	r1, #0
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7ff fee5 	bl	8003b66 <send_cmd>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d1f2      	bne.n	8003d88 <USER_SPI_initialize+0x144>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8003da2:	f7ff fdd3 	bl	800394c <SPI_Timer_Status>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d007      	beq.n	8003dbc <USER_SPI_initialize+0x178>
 8003dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003db0:	2010      	movs	r0, #16
 8003db2:	f7ff fed8 	bl	8003b66 <send_cmd>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <USER_SPI_initialize+0x17c>
				ty = 0;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8003dc0:	4a14      	ldr	r2, [pc, #80]	; (8003e14 <USER_SPI_initialize+0x1d0>)
 8003dc2:	7b7b      	ldrb	r3, [r7, #13]
 8003dc4:	7013      	strb	r3, [r2, #0]
	despiselect();
 8003dc6:	f7ff fe47 	bl	8003a58 <despiselect>

	if (ty) {			/* OK */
 8003dca:	7b7b      	ldrb	r3, [r7, #13]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d012      	beq.n	8003df6 <USER_SPI_initialize+0x1b2>
		FCLK_FAST();			/* Set fast clock */
 8003dd0:	4b0f      	ldr	r3, [pc, #60]	; (8003e10 <USER_SPI_initialize+0x1cc>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003dda:	4b0d      	ldr	r3, [pc, #52]	; (8003e10 <USER_SPI_initialize+0x1cc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0218 	orr.w	r2, r2, #24
 8003de2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8003de4:	4b09      	ldr	r3, [pc, #36]	; (8003e0c <USER_SPI_initialize+0x1c8>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	f023 0301 	bic.w	r3, r3, #1
 8003dee:	b2da      	uxtb	r2, r3
 8003df0:	4b06      	ldr	r3, [pc, #24]	; (8003e0c <USER_SPI_initialize+0x1c8>)
 8003df2:	701a      	strb	r2, [r3, #0]
 8003df4:	e002      	b.n	8003dfc <USER_SPI_initialize+0x1b8>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <USER_SPI_initialize+0x1c8>)
 8003df8:	2201      	movs	r2, #1
 8003dfa:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <USER_SPI_initialize+0x1c8>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	b2db      	uxtb	r3, r3
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3714      	adds	r7, #20
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd90      	pop	{r4, r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20000020 	.word	0x20000020
 8003e10:	20000108 	.word	0x20000108
 8003e14:	20000430 	.word	0x20000430

08003e18 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b083      	sub	sp, #12
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	4603      	mov	r3, r0
 8003e20:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d001      	beq.n	8003e2c <USER_SPI_status+0x14>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e002      	b.n	8003e32 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8003e2c:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <USER_SPI_status+0x28>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	b2db      	uxtb	r3, r3
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	20000020 	.word	0x20000020

08003e44 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60b9      	str	r1, [r7, #8]
 8003e4c:	607a      	str	r2, [r7, #4]
 8003e4e:	603b      	str	r3, [r7, #0]
 8003e50:	4603      	mov	r3, r0
 8003e52:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003e54:	7bfb      	ldrb	r3, [r7, #15]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <USER_SPI_read+0x1c>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d101      	bne.n	8003e64 <USER_SPI_read+0x20>
 8003e60:	2304      	movs	r3, #4
 8003e62:	e04d      	b.n	8003f00 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8003e64:	4b28      	ldr	r3, [pc, #160]	; (8003f08 <USER_SPI_read+0xc4>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	f003 0301 	and.w	r3, r3, #1
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <USER_SPI_read+0x32>
 8003e72:	2303      	movs	r3, #3
 8003e74:	e044      	b.n	8003f00 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8003e76:	4b25      	ldr	r3, [pc, #148]	; (8003f0c <USER_SPI_read+0xc8>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	f003 0308 	and.w	r3, r3, #8
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d102      	bne.n	8003e88 <USER_SPI_read+0x44>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	025b      	lsls	r3, r3, #9
 8003e86:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d111      	bne.n	8003eb2 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8003e8e:	6879      	ldr	r1, [r7, #4]
 8003e90:	2011      	movs	r0, #17
 8003e92:	f7ff fe68 	bl	8003b66 <send_cmd>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d129      	bne.n	8003ef0 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8003e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ea0:	68b8      	ldr	r0, [r7, #8]
 8003ea2:	f7ff fe05 	bl	8003ab0 <rcvr_datablock>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d021      	beq.n	8003ef0 <USER_SPI_read+0xac>
			count = 0;
 8003eac:	2300      	movs	r3, #0
 8003eae:	603b      	str	r3, [r7, #0]
 8003eb0:	e01e      	b.n	8003ef0 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8003eb2:	6879      	ldr	r1, [r7, #4]
 8003eb4:	2012      	movs	r0, #18
 8003eb6:	f7ff fe56 	bl	8003b66 <send_cmd>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d117      	bne.n	8003ef0 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8003ec0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ec4:	68b8      	ldr	r0, [r7, #8]
 8003ec6:	f7ff fdf3 	bl	8003ab0 <rcvr_datablock>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d00a      	beq.n	8003ee6 <USER_SPI_read+0xa2>
				buff += 512;
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003ed6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	3b01      	subs	r3, #1
 8003edc:	603b      	str	r3, [r7, #0]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1ed      	bne.n	8003ec0 <USER_SPI_read+0x7c>
 8003ee4:	e000      	b.n	8003ee8 <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8003ee6:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8003ee8:	2100      	movs	r1, #0
 8003eea:	200c      	movs	r0, #12
 8003eec:	f7ff fe3b 	bl	8003b66 <send_cmd>
		}
	}
	despiselect();
 8003ef0:	f7ff fdb2 	bl	8003a58 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	bf14      	ite	ne
 8003efa:	2301      	movne	r3, #1
 8003efc:	2300      	moveq	r3, #0
 8003efe:	b2db      	uxtb	r3, r3
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	20000020 	.word	0x20000020
 8003f0c:	20000430 	.word	0x20000430

08003f10 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d102      	bne.n	8003f2c <USER_SPI_write+0x1c>
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <USER_SPI_write+0x20>
 8003f2c:	2304      	movs	r3, #4
 8003f2e:	e063      	b.n	8003ff8 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8003f30:	4b33      	ldr	r3, [pc, #204]	; (8004000 <USER_SPI_write+0xf0>)
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <USER_SPI_write+0x32>
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e05a      	b.n	8003ff8 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8003f42:	4b2f      	ldr	r3, [pc, #188]	; (8004000 <USER_SPI_write+0xf0>)
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f003 0304 	and.w	r3, r3, #4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <USER_SPI_write+0x44>
 8003f50:	2302      	movs	r3, #2
 8003f52:	e051      	b.n	8003ff8 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8003f54:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <USER_SPI_write+0xf4>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	f003 0308 	and.w	r3, r3, #8
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d102      	bne.n	8003f66 <USER_SPI_write+0x56>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	025b      	lsls	r3, r3, #9
 8003f64:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d110      	bne.n	8003f8e <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8003f6c:	6879      	ldr	r1, [r7, #4]
 8003f6e:	2018      	movs	r0, #24
 8003f70:	f7ff fdf9 	bl	8003b66 <send_cmd>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d136      	bne.n	8003fe8 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8003f7a:	21fe      	movs	r1, #254	; 0xfe
 8003f7c:	68b8      	ldr	r0, [r7, #8]
 8003f7e:	f7ff fdc0 	bl	8003b02 <xmit_datablock>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d02f      	beq.n	8003fe8 <USER_SPI_write+0xd8>
			count = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	603b      	str	r3, [r7, #0]
 8003f8c:	e02c      	b.n	8003fe8 <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8003f8e:	4b1d      	ldr	r3, [pc, #116]	; (8004004 <USER_SPI_write+0xf4>)
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	f003 0306 	and.w	r3, r3, #6
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d003      	beq.n	8003fa2 <USER_SPI_write+0x92>
 8003f9a:	6839      	ldr	r1, [r7, #0]
 8003f9c:	2097      	movs	r0, #151	; 0x97
 8003f9e:	f7ff fde2 	bl	8003b66 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8003fa2:	6879      	ldr	r1, [r7, #4]
 8003fa4:	2019      	movs	r0, #25
 8003fa6:	f7ff fdde 	bl	8003b66 <send_cmd>
 8003faa:	4603      	mov	r3, r0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d11b      	bne.n	8003fe8 <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8003fb0:	21fc      	movs	r1, #252	; 0xfc
 8003fb2:	68b8      	ldr	r0, [r7, #8]
 8003fb4:	f7ff fda5 	bl	8003b02 <xmit_datablock>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <USER_SPI_write+0xc4>
				buff += 512;
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003fc4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	603b      	str	r3, [r7, #0]
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1ee      	bne.n	8003fb0 <USER_SPI_write+0xa0>
 8003fd2:	e000      	b.n	8003fd6 <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8003fd4:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8003fd6:	21fd      	movs	r1, #253	; 0xfd
 8003fd8:	2000      	movs	r0, #0
 8003fda:	f7ff fd92 	bl	8003b02 <xmit_datablock>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <USER_SPI_write+0xd8>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8003fe8:	f7ff fd36 	bl	8003a58 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	bf14      	ite	ne
 8003ff2:	2301      	movne	r3, #1
 8003ff4:	2300      	moveq	r3, #0
 8003ff6:	b2db      	uxtb	r3, r3
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3710      	adds	r7, #16
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000020 	.word	0x20000020
 8004004:	20000430 	.word	0x20000430

08004008 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b08c      	sub	sp, #48	; 0x30
 800400c:	af00      	add	r7, sp, #0
 800400e:	4603      	mov	r3, r0
 8004010:	603a      	str	r2, [r7, #0]
 8004012:	71fb      	strb	r3, [r7, #7]
 8004014:	460b      	mov	r3, r1
 8004016:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8004018:	79fb      	ldrb	r3, [r7, #7]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <USER_SPI_ioctl+0x1a>
 800401e:	2304      	movs	r3, #4
 8004020:	e15a      	b.n	80042d8 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8004022:	4baf      	ldr	r3, [pc, #700]	; (80042e0 <USER_SPI_ioctl+0x2d8>)
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	b2db      	uxtb	r3, r3
 8004028:	f003 0301 	and.w	r3, r3, #1
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <USER_SPI_ioctl+0x2c>
 8004030:	2303      	movs	r3, #3
 8004032:	e151      	b.n	80042d8 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800403a:	79bb      	ldrb	r3, [r7, #6]
 800403c:	2b04      	cmp	r3, #4
 800403e:	f200 8136 	bhi.w	80042ae <USER_SPI_ioctl+0x2a6>
 8004042:	a201      	add	r2, pc, #4	; (adr r2, 8004048 <USER_SPI_ioctl+0x40>)
 8004044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004048:	0800405d 	.word	0x0800405d
 800404c:	08004071 	.word	0x08004071
 8004050:	080042af 	.word	0x080042af
 8004054:	0800411d 	.word	0x0800411d
 8004058:	08004213 	.word	0x08004213
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800405c:	f7ff fd0c 	bl	8003a78 <spiselect>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 8127 	beq.w	80042b6 <USER_SPI_ioctl+0x2ae>
 8004068:	2300      	movs	r3, #0
 800406a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800406e:	e122      	b.n	80042b6 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8004070:	2100      	movs	r1, #0
 8004072:	2009      	movs	r0, #9
 8004074:	f7ff fd77 	bl	8003b66 <send_cmd>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	f040 811d 	bne.w	80042ba <USER_SPI_ioctl+0x2b2>
 8004080:	f107 030c 	add.w	r3, r7, #12
 8004084:	2110      	movs	r1, #16
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fd12 	bl	8003ab0 <rcvr_datablock>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	f000 8113 	beq.w	80042ba <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8004094:	7b3b      	ldrb	r3, [r7, #12]
 8004096:	099b      	lsrs	r3, r3, #6
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b01      	cmp	r3, #1
 800409c:	d111      	bne.n	80040c2 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800409e:	7d7b      	ldrb	r3, [r7, #21]
 80040a0:	461a      	mov	r2, r3
 80040a2:	7d3b      	ldrb	r3, [r7, #20]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	4413      	add	r3, r2
 80040a8:	461a      	mov	r2, r3
 80040aa:	7cfb      	ldrb	r3, [r7, #19]
 80040ac:	041b      	lsls	r3, r3, #16
 80040ae:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 80040b2:	4413      	add	r3, r2
 80040b4:	3301      	adds	r3, #1
 80040b6:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	029a      	lsls	r2, r3, #10
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	601a      	str	r2, [r3, #0]
 80040c0:	e028      	b.n	8004114 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80040c2:	7c7b      	ldrb	r3, [r7, #17]
 80040c4:	f003 030f 	and.w	r3, r3, #15
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	7dbb      	ldrb	r3, [r7, #22]
 80040cc:	09db      	lsrs	r3, r3, #7
 80040ce:	b2db      	uxtb	r3, r3
 80040d0:	4413      	add	r3, r2
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	7d7b      	ldrb	r3, [r7, #21]
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f003 0306 	and.w	r3, r3, #6
 80040de:	b2db      	uxtb	r3, r3
 80040e0:	4413      	add	r3, r2
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	3302      	adds	r3, #2
 80040e6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80040ea:	7d3b      	ldrb	r3, [r7, #20]
 80040ec:	099b      	lsrs	r3, r3, #6
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	461a      	mov	r2, r3
 80040f2:	7cfb      	ldrb	r3, [r7, #19]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	441a      	add	r2, r3
 80040f8:	7cbb      	ldrb	r3, [r7, #18]
 80040fa:	029b      	lsls	r3, r3, #10
 80040fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004100:	4413      	add	r3, r2
 8004102:	3301      	adds	r3, #1
 8004104:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8004106:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800410a:	3b09      	subs	r3, #9
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	409a      	lsls	r2, r3
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8004114:	2300      	movs	r3, #0
 8004116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800411a:	e0ce      	b.n	80042ba <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800411c:	4b71      	ldr	r3, [pc, #452]	; (80042e4 <USER_SPI_ioctl+0x2dc>)
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	f003 0304 	and.w	r3, r3, #4
 8004124:	2b00      	cmp	r3, #0
 8004126:	d031      	beq.n	800418c <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8004128:	2100      	movs	r1, #0
 800412a:	208d      	movs	r0, #141	; 0x8d
 800412c:	f7ff fd1b 	bl	8003b66 <send_cmd>
 8004130:	4603      	mov	r3, r0
 8004132:	2b00      	cmp	r3, #0
 8004134:	f040 80c3 	bne.w	80042be <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8004138:	20ff      	movs	r0, #255	; 0xff
 800413a:	f7ff fc1d 	bl	8003978 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800413e:	f107 030c 	add.w	r3, r7, #12
 8004142:	2110      	movs	r1, #16
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff fcb3 	bl	8003ab0 <rcvr_datablock>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80b6 	beq.w	80042be <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8004152:	2330      	movs	r3, #48	; 0x30
 8004154:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8004158:	e007      	b.n	800416a <USER_SPI_ioctl+0x162>
 800415a:	20ff      	movs	r0, #255	; 0xff
 800415c:	f7ff fc0c 	bl	8003978 <xchg_spi>
 8004160:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004164:	3b01      	subs	r3, #1
 8004166:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800416a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800416e:	2b00      	cmp	r3, #0
 8004170:	d1f3      	bne.n	800415a <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8004172:	7dbb      	ldrb	r3, [r7, #22]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	b2db      	uxtb	r3, r3
 8004178:	461a      	mov	r2, r3
 800417a:	2310      	movs	r3, #16
 800417c:	fa03 f202 	lsl.w	r2, r3, r2
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800418a:	e098      	b.n	80042be <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800418c:	2100      	movs	r1, #0
 800418e:	2009      	movs	r0, #9
 8004190:	f7ff fce9 	bl	8003b66 <send_cmd>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	f040 8091 	bne.w	80042be <USER_SPI_ioctl+0x2b6>
 800419c:	f107 030c 	add.w	r3, r7, #12
 80041a0:	2110      	movs	r1, #16
 80041a2:	4618      	mov	r0, r3
 80041a4:	f7ff fc84 	bl	8003ab0 <rcvr_datablock>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f000 8087 	beq.w	80042be <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 80041b0:	4b4c      	ldr	r3, [pc, #304]	; (80042e4 <USER_SPI_ioctl+0x2dc>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d012      	beq.n	80041e2 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80041bc:	7dbb      	ldrb	r3, [r7, #22]
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80041c4:	7dfa      	ldrb	r2, [r7, #23]
 80041c6:	09d2      	lsrs	r2, r2, #7
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	4413      	add	r3, r2
 80041cc:	1c5a      	adds	r2, r3, #1
 80041ce:	7e7b      	ldrb	r3, [r7, #25]
 80041d0:	099b      	lsrs	r3, r3, #6
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	3b01      	subs	r3, #1
 80041d6:	fa02 f303 	lsl.w	r3, r2, r3
 80041da:	461a      	mov	r2, r3
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e013      	b.n	800420a <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80041e2:	7dbb      	ldrb	r3, [r7, #22]
 80041e4:	109b      	asrs	r3, r3, #2
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	3301      	adds	r3, #1
 80041ee:	7dfa      	ldrb	r2, [r7, #23]
 80041f0:	00d2      	lsls	r2, r2, #3
 80041f2:	f002 0218 	and.w	r2, r2, #24
 80041f6:	7df9      	ldrb	r1, [r7, #23]
 80041f8:	0949      	lsrs	r1, r1, #5
 80041fa:	b2c9      	uxtb	r1, r1
 80041fc:	440a      	add	r2, r1
 80041fe:	3201      	adds	r2, #1
 8004200:	fb02 f303 	mul.w	r3, r2, r3
 8004204:	461a      	mov	r2, r3
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 8004210:	e055      	b.n	80042be <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8004212:	4b34      	ldr	r3, [pc, #208]	; (80042e4 <USER_SPI_ioctl+0x2dc>)
 8004214:	781b      	ldrb	r3, [r3, #0]
 8004216:	f003 0306 	and.w	r3, r3, #6
 800421a:	2b00      	cmp	r3, #0
 800421c:	d051      	beq.n	80042c2 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800421e:	f107 020c 	add.w	r2, r7, #12
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	210b      	movs	r1, #11
 8004226:	4618      	mov	r0, r3
 8004228:	f7ff feee 	bl	8004008 <USER_SPI_ioctl>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d149      	bne.n	80042c6 <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8004232:	7b3b      	ldrb	r3, [r7, #12]
 8004234:	099b      	lsrs	r3, r3, #6
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <USER_SPI_ioctl+0x23e>
 800423c:	7dbb      	ldrb	r3, [r7, #22]
 800423e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004242:	2b00      	cmp	r3, #0
 8004244:	d041      	beq.n	80042ca <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	623b      	str	r3, [r7, #32]
 800424a:	6a3b      	ldr	r3, [r7, #32]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 8004256:	4b23      	ldr	r3, [pc, #140]	; (80042e4 <USER_SPI_ioctl+0x2dc>)
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	f003 0308 	and.w	r3, r3, #8
 800425e:	2b00      	cmp	r3, #0
 8004260:	d105      	bne.n	800426e <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8004262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004264:	025b      	lsls	r3, r3, #9
 8004266:	62bb      	str	r3, [r7, #40]	; 0x28
 8004268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426a:	025b      	lsls	r3, r3, #9
 800426c:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800426e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004270:	2020      	movs	r0, #32
 8004272:	f7ff fc78 	bl	8003b66 <send_cmd>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d128      	bne.n	80042ce <USER_SPI_ioctl+0x2c6>
 800427c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800427e:	2021      	movs	r0, #33	; 0x21
 8004280:	f7ff fc71 	bl	8003b66 <send_cmd>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d121      	bne.n	80042ce <USER_SPI_ioctl+0x2c6>
 800428a:	2100      	movs	r1, #0
 800428c:	2026      	movs	r0, #38	; 0x26
 800428e:	f7ff fc6a 	bl	8003b66 <send_cmd>
 8004292:	4603      	mov	r3, r0
 8004294:	2b00      	cmp	r3, #0
 8004296:	d11a      	bne.n	80042ce <USER_SPI_ioctl+0x2c6>
 8004298:	f247 5030 	movw	r0, #30000	; 0x7530
 800429c:	f7ff fbb9 	bl	8003a12 <wait_ready>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d013      	beq.n	80042ce <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 80042a6:	2300      	movs	r3, #0
 80042a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 80042ac:	e00f      	b.n	80042ce <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 80042ae:	2304      	movs	r3, #4
 80042b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80042b4:	e00c      	b.n	80042d0 <USER_SPI_ioctl+0x2c8>
		break;
 80042b6:	bf00      	nop
 80042b8:	e00a      	b.n	80042d0 <USER_SPI_ioctl+0x2c8>
		break;
 80042ba:	bf00      	nop
 80042bc:	e008      	b.n	80042d0 <USER_SPI_ioctl+0x2c8>
		break;
 80042be:	bf00      	nop
 80042c0:	e006      	b.n	80042d0 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 80042c2:	bf00      	nop
 80042c4:	e004      	b.n	80042d0 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 80042c6:	bf00      	nop
 80042c8:	e002      	b.n	80042d0 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 80042ca:	bf00      	nop
 80042cc:	e000      	b.n	80042d0 <USER_SPI_ioctl+0x2c8>
		break;
 80042ce:	bf00      	nop
	}

	despiselect();
 80042d0:	f7ff fbc2 	bl	8003a58 <despiselect>

	return res;
 80042d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3730      	adds	r7, #48	; 0x30
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000020 	.word	0x20000020
 80042e4:	20000430 	.word	0x20000430

080042e8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	4603      	mov	r3, r0
 80042f0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	4a08      	ldr	r2, [pc, #32]	; (8004318 <disk_status+0x30>)
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	79fa      	ldrb	r2, [r7, #7]
 8004300:	4905      	ldr	r1, [pc, #20]	; (8004318 <disk_status+0x30>)
 8004302:	440a      	add	r2, r1
 8004304:	7a12      	ldrb	r2, [r2, #8]
 8004306:	4610      	mov	r0, r2
 8004308:	4798      	blx	r3
 800430a:	4603      	mov	r3, r0
 800430c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800430e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004310:	4618      	mov	r0, r3
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}
 8004318:	20000464 	.word	0x20000464

0800431c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b084      	sub	sp, #16
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004326:	2300      	movs	r3, #0
 8004328:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800432a:	79fb      	ldrb	r3, [r7, #7]
 800432c:	4a0d      	ldr	r2, [pc, #52]	; (8004364 <disk_initialize+0x48>)
 800432e:	5cd3      	ldrb	r3, [r2, r3]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d111      	bne.n	8004358 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	4a0b      	ldr	r2, [pc, #44]	; (8004364 <disk_initialize+0x48>)
 8004338:	2101      	movs	r1, #1
 800433a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800433c:	79fb      	ldrb	r3, [r7, #7]
 800433e:	4a09      	ldr	r2, [pc, #36]	; (8004364 <disk_initialize+0x48>)
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	4413      	add	r3, r2
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	79fa      	ldrb	r2, [r7, #7]
 800434a:	4906      	ldr	r1, [pc, #24]	; (8004364 <disk_initialize+0x48>)
 800434c:	440a      	add	r2, r1
 800434e:	7a12      	ldrb	r2, [r2, #8]
 8004350:	4610      	mov	r0, r2
 8004352:	4798      	blx	r3
 8004354:	4603      	mov	r3, r0
 8004356:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004358:	7bfb      	ldrb	r3, [r7, #15]
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	20000464 	.word	0x20000464

08004368 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004368:	b590      	push	{r4, r7, lr}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60b9      	str	r1, [r7, #8]
 8004370:	607a      	str	r2, [r7, #4]
 8004372:	603b      	str	r3, [r7, #0]
 8004374:	4603      	mov	r3, r0
 8004376:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	4a0a      	ldr	r2, [pc, #40]	; (80043a4 <disk_read+0x3c>)
 800437c:	009b      	lsls	r3, r3, #2
 800437e:	4413      	add	r3, r2
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	689c      	ldr	r4, [r3, #8]
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	4a07      	ldr	r2, [pc, #28]	; (80043a4 <disk_read+0x3c>)
 8004388:	4413      	add	r3, r2
 800438a:	7a18      	ldrb	r0, [r3, #8]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	47a0      	blx	r4
 8004394:	4603      	mov	r3, r0
 8004396:	75fb      	strb	r3, [r7, #23]
  return res;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
}
 800439a:	4618      	mov	r0, r3
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd90      	pop	{r4, r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20000464 	.word	0x20000464

080043a8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80043a8:	b590      	push	{r4, r7, lr}
 80043aa:	b087      	sub	sp, #28
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	60b9      	str	r1, [r7, #8]
 80043b0:	607a      	str	r2, [r7, #4]
 80043b2:	603b      	str	r3, [r7, #0]
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	4a0a      	ldr	r2, [pc, #40]	; (80043e4 <disk_write+0x3c>)
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	68dc      	ldr	r4, [r3, #12]
 80043c4:	7bfb      	ldrb	r3, [r7, #15]
 80043c6:	4a07      	ldr	r2, [pc, #28]	; (80043e4 <disk_write+0x3c>)
 80043c8:	4413      	add	r3, r2
 80043ca:	7a18      	ldrb	r0, [r3, #8]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	68b9      	ldr	r1, [r7, #8]
 80043d2:	47a0      	blx	r4
 80043d4:	4603      	mov	r3, r0
 80043d6:	75fb      	strb	r3, [r7, #23]
  return res;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	371c      	adds	r7, #28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd90      	pop	{r4, r7, pc}
 80043e2:	bf00      	nop
 80043e4:	20000464 	.word	0x20000464

080043e8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	4603      	mov	r3, r0
 80043f0:	603a      	str	r2, [r7, #0]
 80043f2:	71fb      	strb	r3, [r7, #7]
 80043f4:	460b      	mov	r3, r1
 80043f6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80043f8:	79fb      	ldrb	r3, [r7, #7]
 80043fa:	4a09      	ldr	r2, [pc, #36]	; (8004420 <disk_ioctl+0x38>)
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	691b      	ldr	r3, [r3, #16]
 8004404:	79fa      	ldrb	r2, [r7, #7]
 8004406:	4906      	ldr	r1, [pc, #24]	; (8004420 <disk_ioctl+0x38>)
 8004408:	440a      	add	r2, r1
 800440a:	7a10      	ldrb	r0, [r2, #8]
 800440c:	79b9      	ldrb	r1, [r7, #6]
 800440e:	683a      	ldr	r2, [r7, #0]
 8004410:	4798      	blx	r3
 8004412:	4603      	mov	r3, r0
 8004414:	73fb      	strb	r3, [r7, #15]
  return res;
 8004416:	7bfb      	ldrb	r3, [r7, #15]
}
 8004418:	4618      	mov	r0, r3
 800441a:	3710      	adds	r7, #16
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	20000464 	.word	0x20000464

08004424 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3301      	adds	r3, #1
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004434:	89fb      	ldrh	r3, [r7, #14]
 8004436:	021b      	lsls	r3, r3, #8
 8004438:	b21a      	sxth	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	b21b      	sxth	r3, r3
 8004440:	4313      	orrs	r3, r2
 8004442:	b21b      	sxth	r3, r3
 8004444:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004446:	89fb      	ldrh	r3, [r7, #14]
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr

08004454 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004454:	b480      	push	{r7}
 8004456:	b085      	sub	sp, #20
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3303      	adds	r3, #3
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	021b      	lsls	r3, r3, #8
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	3202      	adds	r2, #2
 800446c:	7812      	ldrb	r2, [r2, #0]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	021b      	lsls	r3, r3, #8
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	3201      	adds	r2, #1
 800447a:	7812      	ldrb	r2, [r2, #0]
 800447c:	4313      	orrs	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	021b      	lsls	r3, r3, #8
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	7812      	ldrb	r2, [r2, #0]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
	return rv;
 800448c:	68fb      	ldr	r3, [r7, #12]
}
 800448e:	4618      	mov	r0, r3
 8004490:	3714      	adds	r7, #20
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	460b      	mov	r3, r1
 80044a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	887a      	ldrh	r2, [r7, #2]
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]
 80044b2:	887b      	ldrh	r3, [r7, #2]
 80044b4:	0a1b      	lsrs	r3, r3, #8
 80044b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	1c5a      	adds	r2, r3, #1
 80044bc:	607a      	str	r2, [r7, #4]
 80044be:	887a      	ldrh	r2, [r7, #2]
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	701a      	strb	r2, [r3, #0]
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
 80044d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	1c5a      	adds	r2, r3, #1
 80044de:	607a      	str	r2, [r7, #4]
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	b2d2      	uxtb	r2, r2
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	1c5a      	adds	r2, r3, #1
 80044f0:	607a      	str	r2, [r7, #4]
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	b2d2      	uxtb	r2, r2
 80044f6:	701a      	strb	r2, [r3, #0]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	1c5a      	adds	r2, r3, #1
 8004502:	607a      	str	r2, [r7, #4]
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	b2d2      	uxtb	r2, r2
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	0a1b      	lsrs	r3, r3, #8
 800450e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	1c5a      	adds	r2, r3, #1
 8004514:	607a      	str	r2, [r7, #4]
 8004516:	683a      	ldr	r2, [r7, #0]
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	701a      	strb	r2, [r3, #0]
}
 800451c:	bf00      	nop
 800451e:	370c      	adds	r7, #12
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00d      	beq.n	800455e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	1c53      	adds	r3, r2, #1
 8004546:	613b      	str	r3, [r7, #16]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1c59      	adds	r1, r3, #1
 800454c:	6179      	str	r1, [r7, #20]
 800454e:	7812      	ldrb	r2, [r2, #0]
 8004550:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3b01      	subs	r3, #1
 8004556:	607b      	str	r3, [r7, #4]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d1f1      	bne.n	8004542 <mem_cpy+0x1a>
	}
}
 800455e:	bf00      	nop
 8004560:	371c      	adds	r7, #28
 8004562:	46bd      	mov	sp, r7
 8004564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004568:	4770      	bx	lr

0800456a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800456a:	b480      	push	{r7}
 800456c:	b087      	sub	sp, #28
 800456e:	af00      	add	r7, sp, #0
 8004570:	60f8      	str	r0, [r7, #12]
 8004572:	60b9      	str	r1, [r7, #8]
 8004574:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	617a      	str	r2, [r7, #20]
 8004580:	68ba      	ldr	r2, [r7, #8]
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3b01      	subs	r3, #1
 800458a:	607b      	str	r3, [r7, #4]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1f3      	bne.n	800457a <mem_set+0x10>
}
 8004592:	bf00      	nop
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80045a0:	b480      	push	{r7}
 80045a2:	b089      	sub	sp, #36	; 0x24
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	61fb      	str	r3, [r7, #28]
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	1c5a      	adds	r2, r3, #1
 80045bc:	61fa      	str	r2, [r7, #28]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	4619      	mov	r1, r3
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	61ba      	str	r2, [r7, #24]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	1acb      	subs	r3, r1, r3
 80045cc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	607b      	str	r3, [r7, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d002      	beq.n	80045e0 <mem_cmp+0x40>
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0eb      	beq.n	80045b8 <mem_cmp+0x18>

	return r;
 80045e0:	697b      	ldr	r3, [r7, #20]
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3724      	adds	r7, #36	; 0x24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80045ee:	b480      	push	{r7}
 80045f0:	b083      	sub	sp, #12
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80045f8:	e002      	b.n	8004600 <chk_chr+0x12>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3301      	adds	r3, #1
 80045fe:	607b      	str	r3, [r7, #4]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	781b      	ldrb	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d005      	beq.n	8004614 <chk_chr+0x26>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	4293      	cmp	r3, r2
 8004612:	d1f2      	bne.n	80045fa <chk_chr+0xc>
	return *str;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	781b      	ldrb	r3, [r3, #0]
}
 8004618:	4618      	mov	r0, r3
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr

08004624 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004624:	b480      	push	{r7}
 8004626:	b085      	sub	sp, #20
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800462e:	2300      	movs	r3, #0
 8004630:	60bb      	str	r3, [r7, #8]
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	e029      	b.n	800468c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004638:	4a27      	ldr	r2, [pc, #156]	; (80046d8 <chk_lock+0xb4>)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	4413      	add	r3, r2
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d01d      	beq.n	8004682 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004646:	4a24      	ldr	r2, [pc, #144]	; (80046d8 <chk_lock+0xb4>)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	4413      	add	r3, r2
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	429a      	cmp	r2, r3
 8004656:	d116      	bne.n	8004686 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004658:	4a1f      	ldr	r2, [pc, #124]	; (80046d8 <chk_lock+0xb4>)
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	011b      	lsls	r3, r3, #4
 800465e:	4413      	add	r3, r2
 8004660:	3304      	adds	r3, #4
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004668:	429a      	cmp	r2, r3
 800466a:	d10c      	bne.n	8004686 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800466c:	4a1a      	ldr	r2, [pc, #104]	; (80046d8 <chk_lock+0xb4>)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	4413      	add	r3, r2
 8004674:	3308      	adds	r3, #8
 8004676:	681a      	ldr	r2, [r3, #0]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800467c:	429a      	cmp	r2, r3
 800467e:	d102      	bne.n	8004686 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004680:	e007      	b.n	8004692 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004682:	2301      	movs	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	3301      	adds	r3, #1
 800468a:	60fb      	str	r3, [r7, #12]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d9d2      	bls.n	8004638 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b02      	cmp	r3, #2
 8004696:	d109      	bne.n	80046ac <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <chk_lock+0x80>
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d101      	bne.n	80046a8 <chk_lock+0x84>
 80046a4:	2300      	movs	r3, #0
 80046a6:	e010      	b.n	80046ca <chk_lock+0xa6>
 80046a8:	2312      	movs	r3, #18
 80046aa:	e00e      	b.n	80046ca <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d108      	bne.n	80046c4 <chk_lock+0xa0>
 80046b2:	4a09      	ldr	r2, [pc, #36]	; (80046d8 <chk_lock+0xb4>)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	4413      	add	r3, r2
 80046ba:	330c      	adds	r3, #12
 80046bc:	881b      	ldrh	r3, [r3, #0]
 80046be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046c2:	d101      	bne.n	80046c8 <chk_lock+0xa4>
 80046c4:	2310      	movs	r3, #16
 80046c6:	e000      	b.n	80046ca <chk_lock+0xa6>
 80046c8:	2300      	movs	r3, #0
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	20000444 	.word	0x20000444

080046dc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80046e2:	2300      	movs	r3, #0
 80046e4:	607b      	str	r3, [r7, #4]
 80046e6:	e002      	b.n	80046ee <enq_lock+0x12>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3301      	adds	r3, #1
 80046ec:	607b      	str	r3, [r7, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d806      	bhi.n	8004702 <enq_lock+0x26>
 80046f4:	4a09      	ldr	r2, [pc, #36]	; (800471c <enq_lock+0x40>)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	4413      	add	r3, r2
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f2      	bne.n	80046e8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b02      	cmp	r3, #2
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
}
 800470e:	4618      	mov	r0, r3
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20000444 	.word	0x20000444

08004720 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004720:	b480      	push	{r7}
 8004722:	b085      	sub	sp, #20
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800472a:	2300      	movs	r3, #0
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	e01f      	b.n	8004770 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004730:	4a41      	ldr	r2, [pc, #260]	; (8004838 <inc_lock+0x118>)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	011b      	lsls	r3, r3, #4
 8004736:	4413      	add	r3, r2
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d113      	bne.n	800476a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004742:	4a3d      	ldr	r2, [pc, #244]	; (8004838 <inc_lock+0x118>)
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	4413      	add	r3, r2
 800474a:	3304      	adds	r3, #4
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004752:	429a      	cmp	r2, r3
 8004754:	d109      	bne.n	800476a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004756:	4a38      	ldr	r2, [pc, #224]	; (8004838 <inc_lock+0x118>)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	4413      	add	r3, r2
 800475e:	3308      	adds	r3, #8
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004766:	429a      	cmp	r2, r3
 8004768:	d006      	beq.n	8004778 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	3301      	adds	r3, #1
 800476e:	60fb      	str	r3, [r7, #12]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2b01      	cmp	r3, #1
 8004774:	d9dc      	bls.n	8004730 <inc_lock+0x10>
 8004776:	e000      	b.n	800477a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004778:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2b02      	cmp	r3, #2
 800477e:	d132      	bne.n	80047e6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	e002      	b.n	800478c <inc_lock+0x6c>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3301      	adds	r3, #1
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d806      	bhi.n	80047a0 <inc_lock+0x80>
 8004792:	4a29      	ldr	r2, [pc, #164]	; (8004838 <inc_lock+0x118>)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	4413      	add	r3, r2
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1f2      	bne.n	8004786 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d101      	bne.n	80047aa <inc_lock+0x8a>
 80047a6:	2300      	movs	r3, #0
 80047a8:	e040      	b.n	800482c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	4922      	ldr	r1, [pc, #136]	; (8004838 <inc_lock+0x118>)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	011b      	lsls	r3, r3, #4
 80047b4:	440b      	add	r3, r1
 80047b6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689a      	ldr	r2, [r3, #8]
 80047bc:	491e      	ldr	r1, [pc, #120]	; (8004838 <inc_lock+0x118>)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	011b      	lsls	r3, r3, #4
 80047c2:	440b      	add	r3, r1
 80047c4:	3304      	adds	r3, #4
 80047c6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	695a      	ldr	r2, [r3, #20]
 80047cc:	491a      	ldr	r1, [pc, #104]	; (8004838 <inc_lock+0x118>)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	011b      	lsls	r3, r3, #4
 80047d2:	440b      	add	r3, r1
 80047d4:	3308      	adds	r3, #8
 80047d6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80047d8:	4a17      	ldr	r2, [pc, #92]	; (8004838 <inc_lock+0x118>)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	011b      	lsls	r3, r3, #4
 80047de:	4413      	add	r3, r2
 80047e0:	330c      	adds	r3, #12
 80047e2:	2200      	movs	r2, #0
 80047e4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d009      	beq.n	8004800 <inc_lock+0xe0>
 80047ec:	4a12      	ldr	r2, [pc, #72]	; (8004838 <inc_lock+0x118>)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	4413      	add	r3, r2
 80047f4:	330c      	adds	r3, #12
 80047f6:	881b      	ldrh	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d001      	beq.n	8004800 <inc_lock+0xe0>
 80047fc:	2300      	movs	r3, #0
 80047fe:	e015      	b.n	800482c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d108      	bne.n	8004818 <inc_lock+0xf8>
 8004806:	4a0c      	ldr	r2, [pc, #48]	; (8004838 <inc_lock+0x118>)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	4413      	add	r3, r2
 800480e:	330c      	adds	r3, #12
 8004810:	881b      	ldrh	r3, [r3, #0]
 8004812:	3301      	adds	r3, #1
 8004814:	b29a      	uxth	r2, r3
 8004816:	e001      	b.n	800481c <inc_lock+0xfc>
 8004818:	f44f 7280 	mov.w	r2, #256	; 0x100
 800481c:	4906      	ldr	r1, [pc, #24]	; (8004838 <inc_lock+0x118>)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	440b      	add	r3, r1
 8004824:	330c      	adds	r3, #12
 8004826:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	3301      	adds	r3, #1
}
 800482c:	4618      	mov	r0, r3
 800482e:	3714      	adds	r7, #20
 8004830:	46bd      	mov	sp, r7
 8004832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004836:	4770      	bx	lr
 8004838:	20000444 	.word	0x20000444

0800483c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3b01      	subs	r3, #1
 8004848:	607b      	str	r3, [r7, #4]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2b01      	cmp	r3, #1
 800484e:	d825      	bhi.n	800489c <dec_lock+0x60>
		n = Files[i].ctr;
 8004850:	4a17      	ldr	r2, [pc, #92]	; (80048b0 <dec_lock+0x74>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	4413      	add	r3, r2
 8004858:	330c      	adds	r3, #12
 800485a:	881b      	ldrh	r3, [r3, #0]
 800485c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800485e:	89fb      	ldrh	r3, [r7, #14]
 8004860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004864:	d101      	bne.n	800486a <dec_lock+0x2e>
 8004866:	2300      	movs	r3, #0
 8004868:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800486a:	89fb      	ldrh	r3, [r7, #14]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d002      	beq.n	8004876 <dec_lock+0x3a>
 8004870:	89fb      	ldrh	r3, [r7, #14]
 8004872:	3b01      	subs	r3, #1
 8004874:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004876:	4a0e      	ldr	r2, [pc, #56]	; (80048b0 <dec_lock+0x74>)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	011b      	lsls	r3, r3, #4
 800487c:	4413      	add	r3, r2
 800487e:	330c      	adds	r3, #12
 8004880:	89fa      	ldrh	r2, [r7, #14]
 8004882:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004884:	89fb      	ldrh	r3, [r7, #14]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d105      	bne.n	8004896 <dec_lock+0x5a>
 800488a:	4a09      	ldr	r2, [pc, #36]	; (80048b0 <dec_lock+0x74>)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	4413      	add	r3, r2
 8004892:	2200      	movs	r2, #0
 8004894:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004896:	2300      	movs	r3, #0
 8004898:	737b      	strb	r3, [r7, #13]
 800489a:	e001      	b.n	80048a0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800489c:	2302      	movs	r3, #2
 800489e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80048a0:	7b7b      	ldrb	r3, [r7, #13]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	20000444 	.word	0x20000444

080048b4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80048bc:	2300      	movs	r3, #0
 80048be:	60fb      	str	r3, [r7, #12]
 80048c0:	e010      	b.n	80048e4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80048c2:	4a0d      	ldr	r2, [pc, #52]	; (80048f8 <clear_lock+0x44>)
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	011b      	lsls	r3, r3, #4
 80048c8:	4413      	add	r3, r2
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d105      	bne.n	80048de <clear_lock+0x2a>
 80048d2:	4a09      	ldr	r2, [pc, #36]	; (80048f8 <clear_lock+0x44>)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	011b      	lsls	r3, r3, #4
 80048d8:	4413      	add	r3, r2
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	3301      	adds	r3, #1
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d9eb      	bls.n	80048c2 <clear_lock+0xe>
	}
}
 80048ea:	bf00      	nop
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	20000444 	.word	0x20000444

080048fc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004904:	2300      	movs	r3, #0
 8004906:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	78db      	ldrb	r3, [r3, #3]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d034      	beq.n	800497a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004914:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	7858      	ldrb	r0, [r3, #1]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004920:	2301      	movs	r3, #1
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	f7ff fd40 	bl	80043a8 <disk_write>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d002      	beq.n	8004934 <sync_window+0x38>
			res = FR_DISK_ERR;
 800492e:	2301      	movs	r3, #1
 8004930:	73fb      	strb	r3, [r7, #15]
 8004932:	e022      	b.n	800497a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a1b      	ldr	r3, [r3, #32]
 800493e:	697a      	ldr	r2, [r7, #20]
 8004940:	1ad2      	subs	r2, r2, r3
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	699b      	ldr	r3, [r3, #24]
 8004946:	429a      	cmp	r2, r3
 8004948:	d217      	bcs.n	800497a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	789b      	ldrb	r3, [r3, #2]
 800494e:	613b      	str	r3, [r7, #16]
 8004950:	e010      	b.n	8004974 <sync_window+0x78>
					wsect += fs->fsize;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4413      	add	r3, r2
 800495a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	7858      	ldrb	r0, [r3, #1]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004966:	2301      	movs	r3, #1
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	f7ff fd1d 	bl	80043a8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	3b01      	subs	r3, #1
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d8eb      	bhi.n	8004952 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800497a:	7bfb      	ldrb	r3, [r7, #15]
}
 800497c:	4618      	mov	r0, r3
 800497e:	3718      	adds	r7, #24
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b084      	sub	sp, #16
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800498e:	2300      	movs	r3, #0
 8004990:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	429a      	cmp	r2, r3
 800499a:	d01b      	beq.n	80049d4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f7ff ffad 	bl	80048fc <sync_window>
 80049a2:	4603      	mov	r3, r0
 80049a4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d113      	bne.n	80049d4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	7858      	ldrb	r0, [r3, #1]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80049b6:	2301      	movs	r3, #1
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	f7ff fcd5 	bl	8004368 <disk_read>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d004      	beq.n	80049ce <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80049c4:	f04f 33ff 	mov.w	r3, #4294967295
 80049c8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	683a      	ldr	r2, [r7, #0]
 80049d2:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3710      	adds	r7, #16
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f7ff ff87 	bl	80048fc <sync_window>
 80049ee:	4603      	mov	r3, r0
 80049f0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80049f2:	7bfb      	ldrb	r3, [r7, #15]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d158      	bne.n	8004aaa <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b03      	cmp	r3, #3
 80049fe:	d148      	bne.n	8004a92 <sync_fs+0xb2>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	791b      	ldrb	r3, [r3, #4]
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d144      	bne.n	8004a92 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3330      	adds	r3, #48	; 0x30
 8004a0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004a10:	2100      	movs	r1, #0
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff fda9 	bl	800456a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	3330      	adds	r3, #48	; 0x30
 8004a1c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004a20:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fd38 	bl	800449a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	3330      	adds	r3, #48	; 0x30
 8004a2e:	4921      	ldr	r1, [pc, #132]	; (8004ab4 <sync_fs+0xd4>)
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7ff fd4d 	bl	80044d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3330      	adds	r3, #48	; 0x30
 8004a3a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004a3e:	491e      	ldr	r1, [pc, #120]	; (8004ab8 <sync_fs+0xd8>)
 8004a40:	4618      	mov	r0, r3
 8004a42:	f7ff fd45 	bl	80044d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3330      	adds	r3, #48	; 0x30
 8004a4a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	4619      	mov	r1, r3
 8004a54:	4610      	mov	r0, r2
 8004a56:	f7ff fd3b 	bl	80044d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3330      	adds	r3, #48	; 0x30
 8004a5e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	4619      	mov	r1, r3
 8004a68:	4610      	mov	r0, r2
 8004a6a:	f7ff fd31 	bl	80044d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	7858      	ldrb	r0, [r3, #1]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a86:	2301      	movs	r3, #1
 8004a88:	f7ff fc8e 	bl	80043a8 <disk_write>
			fs->fsi_flag = 0;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	785b      	ldrb	r3, [r3, #1]
 8004a96:	2200      	movs	r2, #0
 8004a98:	2100      	movs	r1, #0
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	f7ff fca4 	bl	80043e8 <disk_ioctl>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <sync_fs+0xca>
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	41615252 	.word	0x41615252
 8004ab8:	61417272 	.word	0x61417272

08004abc <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	3b02      	subs	r3, #2
 8004aca:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	3b02      	subs	r3, #2
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d301      	bcc.n	8004adc <clust2sect+0x20>
 8004ad8:	2300      	movs	r3, #0
 8004ada:	e008      	b.n	8004aee <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	895b      	ldrh	r3, [r3, #10]
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	fb03 f202 	mul.w	r2, r3, r2
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	4413      	add	r3, r2
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b086      	sub	sp, #24
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
 8004b02:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d904      	bls.n	8004b1a <get_fat+0x20>
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	695b      	ldr	r3, [r3, #20]
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d302      	bcc.n	8004b20 <get_fat+0x26>
		val = 1;	/* Internal error */
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	e08f      	b.n	8004c40 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004b20:	f04f 33ff 	mov.w	r3, #4294967295
 8004b24:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d062      	beq.n	8004bf4 <get_fat+0xfa>
 8004b2e:	2b03      	cmp	r3, #3
 8004b30:	dc7c      	bgt.n	8004c2c <get_fat+0x132>
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d002      	beq.n	8004b3c <get_fat+0x42>
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d042      	beq.n	8004bc0 <get_fat+0xc6>
 8004b3a:	e077      	b.n	8004c2c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	085b      	lsrs	r3, r3, #1
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	4413      	add	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	6a1a      	ldr	r2, [r3, #32]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	0a5b      	lsrs	r3, r3, #9
 8004b52:	4413      	add	r3, r2
 8004b54:	4619      	mov	r1, r3
 8004b56:	6938      	ldr	r0, [r7, #16]
 8004b58:	f7ff ff14 	bl	8004984 <move_window>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d167      	bne.n	8004c32 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	1c5a      	adds	r2, r3, #1
 8004b66:	60fa      	str	r2, [r7, #12]
 8004b68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b74:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	6a1a      	ldr	r2, [r3, #32]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	0a5b      	lsrs	r3, r3, #9
 8004b7e:	4413      	add	r3, r2
 8004b80:	4619      	mov	r1, r3
 8004b82:	6938      	ldr	r0, [r7, #16]
 8004b84:	f7ff fefe 	bl	8004984 <move_window>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d153      	bne.n	8004c36 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	4413      	add	r3, r2
 8004b98:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004b9c:	021b      	lsls	r3, r3, #8
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	f003 0301 	and.w	r3, r3, #1
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <get_fat+0xbc>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	e002      	b.n	8004bbc <get_fat+0xc2>
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bbc:	617b      	str	r3, [r7, #20]
			break;
 8004bbe:	e03f      	b.n	8004c40 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	6a1a      	ldr	r2, [r3, #32]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	0a1b      	lsrs	r3, r3, #8
 8004bc8:	4413      	add	r3, r2
 8004bca:	4619      	mov	r1, r3
 8004bcc:	6938      	ldr	r0, [r7, #16]
 8004bce:	f7ff fed9 	bl	8004984 <move_window>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d130      	bne.n	8004c3a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004be6:	4413      	add	r3, r2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff fc1b 	bl	8004424 <ld_word>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	617b      	str	r3, [r7, #20]
			break;
 8004bf2:	e025      	b.n	8004c40 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	6a1a      	ldr	r2, [r3, #32]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	09db      	lsrs	r3, r3, #7
 8004bfc:	4413      	add	r3, r2
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6938      	ldr	r0, [r7, #16]
 8004c02:	f7ff febf 	bl	8004984 <move_window>
 8004c06:	4603      	mov	r3, r0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d118      	bne.n	8004c3e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004c1a:	4413      	add	r3, r2
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7ff fc19 	bl	8004454 <ld_dword>
 8004c22:	4603      	mov	r3, r0
 8004c24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c28:	617b      	str	r3, [r7, #20]
			break;
 8004c2a:	e009      	b.n	8004c40 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	e006      	b.n	8004c40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c32:	bf00      	nop
 8004c34:	e004      	b.n	8004c40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004c36:	bf00      	nop
 8004c38:	e002      	b.n	8004c40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004c3a:	bf00      	nop
 8004c3c:	e000      	b.n	8004c40 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004c3e:	bf00      	nop
		}
	}

	return val;
 8004c40:	697b      	ldr	r3, [r7, #20]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3718      	adds	r7, #24
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}

08004c4a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004c4a:	b590      	push	{r4, r7, lr}
 8004c4c:	b089      	sub	sp, #36	; 0x24
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	60f8      	str	r0, [r7, #12]
 8004c52:	60b9      	str	r1, [r7, #8]
 8004c54:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004c56:	2302      	movs	r3, #2
 8004c58:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	f240 80d2 	bls.w	8004e06 <put_fat+0x1bc>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	f080 80cc 	bcs.w	8004e06 <put_fat+0x1bc>
		switch (fs->fs_type) {
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	2b03      	cmp	r3, #3
 8004c74:	f000 8096 	beq.w	8004da4 <put_fat+0x15a>
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	f300 80cd 	bgt.w	8004e18 <put_fat+0x1ce>
 8004c7e:	2b01      	cmp	r3, #1
 8004c80:	d002      	beq.n	8004c88 <put_fat+0x3e>
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d06e      	beq.n	8004d64 <put_fat+0x11a>
 8004c86:	e0c7      	b.n	8004e18 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	61bb      	str	r3, [r7, #24]
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	085b      	lsrs	r3, r3, #1
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4413      	add	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1a      	ldr	r2, [r3, #32]
 8004c9a:	69bb      	ldr	r3, [r7, #24]
 8004c9c:	0a5b      	lsrs	r3, r3, #9
 8004c9e:	4413      	add	r3, r2
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	68f8      	ldr	r0, [r7, #12]
 8004ca4:	f7ff fe6e 	bl	8004984 <move_window>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004cac:	7ffb      	ldrb	r3, [r7, #31]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f040 80ab 	bne.w	8004e0a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	1c59      	adds	r1, r3, #1
 8004cbe:	61b9      	str	r1, [r7, #24]
 8004cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc4:	4413      	add	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00d      	beq.n	8004cee <put_fat+0xa4>
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	b25b      	sxtb	r3, r3
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	b25a      	sxtb	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	b25b      	sxtb	r3, r3
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	b25b      	sxtb	r3, r3
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	e001      	b.n	8004cf2 <put_fat+0xa8>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	697a      	ldr	r2, [r7, #20]
 8004cf4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6a1a      	ldr	r2, [r3, #32]
 8004d00:	69bb      	ldr	r3, [r7, #24]
 8004d02:	0a5b      	lsrs	r3, r3, #9
 8004d04:	4413      	add	r3, r2
 8004d06:	4619      	mov	r1, r3
 8004d08:	68f8      	ldr	r0, [r7, #12]
 8004d0a:	f7ff fe3b 	bl	8004984 <move_window>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d12:	7ffb      	ldrb	r3, [r7, #31]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d17a      	bne.n	8004e0e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d24:	4413      	add	r3, r2
 8004d26:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d003      	beq.n	8004d3a <put_fat+0xf0>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	091b      	lsrs	r3, r3, #4
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	e00e      	b.n	8004d58 <put_fat+0x10e>
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	b25b      	sxtb	r3, r3
 8004d40:	f023 030f 	bic.w	r3, r3, #15
 8004d44:	b25a      	sxtb	r2, r3
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	0a1b      	lsrs	r3, r3, #8
 8004d4a:	b25b      	sxtb	r3, r3
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	b25b      	sxtb	r3, r3
 8004d52:	4313      	orrs	r3, r2
 8004d54:	b25b      	sxtb	r3, r3
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	697a      	ldr	r2, [r7, #20]
 8004d5a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	70da      	strb	r2, [r3, #3]
			break;
 8004d62:	e059      	b.n	8004e18 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a1a      	ldr	r2, [r3, #32]
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	0a1b      	lsrs	r3, r3, #8
 8004d6c:	4413      	add	r3, r2
 8004d6e:	4619      	mov	r1, r3
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff fe07 	bl	8004984 <move_window>
 8004d76:	4603      	mov	r3, r0
 8004d78:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004d7a:	7ffb      	ldrb	r3, [r7, #31]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d148      	bne.n	8004e12 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	005b      	lsls	r3, r3, #1
 8004d8a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004d8e:	4413      	add	r3, r2
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	b292      	uxth	r2, r2
 8004d94:	4611      	mov	r1, r2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f7ff fb7f 	bl	800449a <st_word>
			fs->wflag = 1;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	70da      	strb	r2, [r3, #3]
			break;
 8004da2:	e039      	b.n	8004e18 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	6a1a      	ldr	r2, [r3, #32]
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	09db      	lsrs	r3, r3, #7
 8004dac:	4413      	add	r3, r2
 8004dae:	4619      	mov	r1, r3
 8004db0:	68f8      	ldr	r0, [r7, #12]
 8004db2:	f7ff fde7 	bl	8004984 <move_window>
 8004db6:	4603      	mov	r3, r0
 8004db8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004dba:	7ffb      	ldrb	r3, [r7, #31]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d12a      	bne.n	8004e16 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	009b      	lsls	r3, r3, #2
 8004dd0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004dd4:	4413      	add	r3, r2
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7ff fb3c 	bl	8004454 <ld_dword>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8004de2:	4323      	orrs	r3, r4
 8004de4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004df4:	4413      	add	r3, r2
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff fb69 	bl	80044d0 <st_dword>
			fs->wflag = 1;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2201      	movs	r2, #1
 8004e02:	70da      	strb	r2, [r3, #3]
			break;
 8004e04:	e008      	b.n	8004e18 <put_fat+0x1ce>
		}
	}
 8004e06:	bf00      	nop
 8004e08:	e006      	b.n	8004e18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004e0a:	bf00      	nop
 8004e0c:	e004      	b.n	8004e18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004e0e:	bf00      	nop
 8004e10:	e002      	b.n	8004e18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004e12:	bf00      	nop
 8004e14:	e000      	b.n	8004e18 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8004e16:	bf00      	nop
	return res;
 8004e18:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3724      	adds	r7, #36	; 0x24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd90      	pop	{r4, r7, pc}

08004e22 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b088      	sub	sp, #32
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d904      	bls.n	8004e48 <remove_chain+0x26>
 8004e3e:	69bb      	ldr	r3, [r7, #24]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d301      	bcc.n	8004e4c <remove_chain+0x2a>
 8004e48:	2302      	movs	r3, #2
 8004e4a:	e04b      	b.n	8004ee4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00c      	beq.n	8004e6c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004e52:	f04f 32ff 	mov.w	r2, #4294967295
 8004e56:	6879      	ldr	r1, [r7, #4]
 8004e58:	69b8      	ldr	r0, [r7, #24]
 8004e5a:	f7ff fef6 	bl	8004c4a <put_fat>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004e62:	7ffb      	ldrb	r3, [r7, #31]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <remove_chain+0x4a>
 8004e68:	7ffb      	ldrb	r3, [r7, #31]
 8004e6a:	e03b      	b.n	8004ee4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f7ff fe43 	bl	8004afa <get_fat>
 8004e74:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d031      	beq.n	8004ee0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <remove_chain+0x64>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e02e      	b.n	8004ee4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8c:	d101      	bne.n	8004e92 <remove_chain+0x70>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e028      	b.n	8004ee4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004e92:	2200      	movs	r2, #0
 8004e94:	68b9      	ldr	r1, [r7, #8]
 8004e96:	69b8      	ldr	r0, [r7, #24]
 8004e98:	f7ff fed7 	bl	8004c4a <put_fat>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004ea0:	7ffb      	ldrb	r3, [r7, #31]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <remove_chain+0x88>
 8004ea6:	7ffb      	ldrb	r3, [r7, #31]
 8004ea8:	e01c      	b.n	8004ee4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004eaa:	69bb      	ldr	r3, [r7, #24]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	69bb      	ldr	r3, [r7, #24]
 8004eb0:	695b      	ldr	r3, [r3, #20]
 8004eb2:	3b02      	subs	r3, #2
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d20b      	bcs.n	8004ed0 <remove_chain+0xae>
			fs->free_clst++;
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	1c5a      	adds	r2, r3, #1
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004ec2:	69bb      	ldr	r3, [r7, #24]
 8004ec4:	791b      	ldrb	r3, [r3, #4]
 8004ec6:	f043 0301 	orr.w	r3, r3, #1
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	695b      	ldr	r3, [r3, #20]
 8004ed8:	68ba      	ldr	r2, [r7, #8]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d3c6      	bcc.n	8004e6c <remove_chain+0x4a>
 8004ede:	e000      	b.n	8004ee2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ee0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3720      	adds	r7, #32
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}

08004eec <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b088      	sub	sp, #32
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10d      	bne.n	8004f1e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d004      	beq.n	8004f18 <create_chain+0x2c>
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d31b      	bcc.n	8004f50 <create_chain+0x64>
 8004f18:	2301      	movs	r3, #1
 8004f1a:	61bb      	str	r3, [r7, #24]
 8004f1c:	e018      	b.n	8004f50 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004f1e:	6839      	ldr	r1, [r7, #0]
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f7ff fdea 	bl	8004afa <get_fat>
 8004f26:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d801      	bhi.n	8004f32 <create_chain+0x46>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e070      	b.n	8005014 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f38:	d101      	bne.n	8004f3e <create_chain+0x52>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	e06a      	b.n	8005014 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	429a      	cmp	r2, r3
 8004f46:	d201      	bcs.n	8004f4c <create_chain+0x60>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	e063      	b.n	8005014 <create_chain+0x128>
		scl = clst;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	3301      	adds	r3, #1
 8004f58:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004f5a:	693b      	ldr	r3, [r7, #16]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	69fa      	ldr	r2, [r7, #28]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d307      	bcc.n	8004f74 <create_chain+0x88>
				ncl = 2;
 8004f64:	2302      	movs	r3, #2
 8004f66:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	69bb      	ldr	r3, [r7, #24]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d901      	bls.n	8004f74 <create_chain+0x88>
 8004f70:	2300      	movs	r3, #0
 8004f72:	e04f      	b.n	8005014 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004f74:	69f9      	ldr	r1, [r7, #28]
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7ff fdbf 	bl	8004afa <get_fat>
 8004f7c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00e      	beq.n	8004fa2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d003      	beq.n	8004f92 <create_chain+0xa6>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d101      	bne.n	8004f96 <create_chain+0xaa>
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	e03e      	b.n	8005014 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004f96:	69fa      	ldr	r2, [r7, #28]
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d1da      	bne.n	8004f54 <create_chain+0x68>
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	e038      	b.n	8005014 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004fa2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa8:	69f9      	ldr	r1, [r7, #28]
 8004faa:	6938      	ldr	r0, [r7, #16]
 8004fac:	f7ff fe4d 	bl	8004c4a <put_fat>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004fb4:	7dfb      	ldrb	r3, [r7, #23]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <create_chain+0xe2>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d006      	beq.n	8004fce <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004fc0:	69fa      	ldr	r2, [r7, #28]
 8004fc2:	6839      	ldr	r1, [r7, #0]
 8004fc4:	6938      	ldr	r0, [r7, #16]
 8004fc6:	f7ff fe40 	bl	8004c4a <put_fat>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004fce:	7dfb      	ldrb	r3, [r7, #23]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d116      	bne.n	8005002 <create_chain+0x116>
		fs->last_clst = ncl;
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	3b02      	subs	r3, #2
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d804      	bhi.n	8004ff2 <create_chain+0x106>
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	691b      	ldr	r3, [r3, #16]
 8004fec:	1e5a      	subs	r2, r3, #1
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	791b      	ldrb	r3, [r3, #4]
 8004ff6:	f043 0301 	orr.w	r3, r3, #1
 8004ffa:	b2da      	uxtb	r2, r3
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	711a      	strb	r2, [r3, #4]
 8005000:	e007      	b.n	8005012 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d102      	bne.n	800500e <create_chain+0x122>
 8005008:	f04f 33ff 	mov.w	r3, #4294967295
 800500c:	e000      	b.n	8005010 <create_chain+0x124>
 800500e:	2301      	movs	r3, #1
 8005010:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005012:	69fb      	ldr	r3, [r7, #28]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3720      	adds	r7, #32
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800501c:	b480      	push	{r7}
 800501e:	b087      	sub	sp, #28
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005030:	3304      	adds	r3, #4
 8005032:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	0a5b      	lsrs	r3, r3, #9
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	8952      	ldrh	r2, [r2, #10]
 800503c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005040:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1d1a      	adds	r2, r3, #4
 8005046:	613a      	str	r2, [r7, #16]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d101      	bne.n	8005056 <clmt_clust+0x3a>
 8005052:	2300      	movs	r3, #0
 8005054:	e010      	b.n	8005078 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005056:	697a      	ldr	r2, [r7, #20]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	429a      	cmp	r2, r3
 800505c:	d307      	bcc.n	800506e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800505e:	697a      	ldr	r2, [r7, #20]
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	617b      	str	r3, [r7, #20]
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	3304      	adds	r3, #4
 800506a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800506c:	e7e9      	b.n	8005042 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800506e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	4413      	add	r3, r2
}
 8005078:	4618      	mov	r0, r3
 800507a:	371c      	adds	r7, #28
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800509a:	d204      	bcs.n	80050a6 <dir_sdi+0x22>
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	f003 031f 	and.w	r3, r3, #31
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <dir_sdi+0x26>
		return FR_INT_ERR;
 80050a6:	2302      	movs	r3, #2
 80050a8:	e063      	b.n	8005172 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d106      	bne.n	80050ca <dir_sdi+0x46>
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b02      	cmp	r3, #2
 80050c2:	d902      	bls.n	80050ca <dir_sdi+0x46>
		clst = fs->dirbase;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d10c      	bne.n	80050ea <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	095b      	lsrs	r3, r3, #5
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	8912      	ldrh	r2, [r2, #8]
 80050d8:	4293      	cmp	r3, r2
 80050da:	d301      	bcc.n	80050e0 <dir_sdi+0x5c>
 80050dc:	2302      	movs	r3, #2
 80050de:	e048      	b.n	8005172 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	61da      	str	r2, [r3, #28]
 80050e8:	e029      	b.n	800513e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	895b      	ldrh	r3, [r3, #10]
 80050ee:	025b      	lsls	r3, r3, #9
 80050f0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80050f2:	e019      	b.n	8005128 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6979      	ldr	r1, [r7, #20]
 80050f8:	4618      	mov	r0, r3
 80050fa:	f7ff fcfe 	bl	8004afa <get_fat>
 80050fe:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005106:	d101      	bne.n	800510c <dir_sdi+0x88>
 8005108:	2301      	movs	r3, #1
 800510a:	e032      	b.n	8005172 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	2b01      	cmp	r3, #1
 8005110:	d904      	bls.n	800511c <dir_sdi+0x98>
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	697a      	ldr	r2, [r7, #20]
 8005118:	429a      	cmp	r2, r3
 800511a:	d301      	bcc.n	8005120 <dir_sdi+0x9c>
 800511c:	2302      	movs	r3, #2
 800511e:	e028      	b.n	8005172 <dir_sdi+0xee>
			ofs -= csz;
 8005120:	683a      	ldr	r2, [r7, #0]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005128:	683a      	ldr	r2, [r7, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	429a      	cmp	r2, r3
 800512e:	d2e1      	bcs.n	80050f4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005130:	6979      	ldr	r1, [r7, #20]
 8005132:	6938      	ldr	r0, [r7, #16]
 8005134:	f7ff fcc2 	bl	8004abc <clust2sect>
 8005138:	4602      	mov	r2, r0
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	69db      	ldr	r3, [r3, #28]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d101      	bne.n	8005150 <dir_sdi+0xcc>
 800514c:	2302      	movs	r3, #2
 800514e:	e010      	b.n	8005172 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	69da      	ldr	r2, [r3, #28]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	0a5b      	lsrs	r3, r3, #9
 8005158:	441a      	add	r2, r3
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800516a:	441a      	add	r2, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3718      	adds	r7, #24
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}

0800517a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800517a:	b580      	push	{r7, lr}
 800517c:	b086      	sub	sp, #24
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	695b      	ldr	r3, [r3, #20]
 800518e:	3320      	adds	r3, #32
 8005190:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	69db      	ldr	r3, [r3, #28]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d003      	beq.n	80051a2 <dir_next+0x28>
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80051a0:	d301      	bcc.n	80051a6 <dir_next+0x2c>
 80051a2:	2304      	movs	r3, #4
 80051a4:	e0aa      	b.n	80052fc <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f040 8098 	bne.w	80052e2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	69db      	ldr	r3, [r3, #28]
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	699b      	ldr	r3, [r3, #24]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	68fa      	ldr	r2, [r7, #12]
 80051ca:	8912      	ldrh	r2, [r2, #8]
 80051cc:	4293      	cmp	r3, r2
 80051ce:	f0c0 8088 	bcc.w	80052e2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	61da      	str	r2, [r3, #28]
 80051d8:	2304      	movs	r3, #4
 80051da:	e08f      	b.n	80052fc <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	0a5b      	lsrs	r3, r3, #9
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	8952      	ldrh	r2, [r2, #10]
 80051e4:	3a01      	subs	r2, #1
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d17a      	bne.n	80052e2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	4619      	mov	r1, r3
 80051f4:	4610      	mov	r0, r2
 80051f6:	f7ff fc80 	bl	8004afa <get_fat>
 80051fa:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d801      	bhi.n	8005206 <dir_next+0x8c>
 8005202:	2302      	movs	r3, #2
 8005204:	e07a      	b.n	80052fc <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d101      	bne.n	8005212 <dir_next+0x98>
 800520e:	2301      	movs	r3, #1
 8005210:	e074      	b.n	80052fc <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	695b      	ldr	r3, [r3, #20]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	429a      	cmp	r2, r3
 800521a:	d358      	bcc.n	80052ce <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d104      	bne.n	800522c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	61da      	str	r2, [r3, #28]
 8005228:	2304      	movs	r3, #4
 800522a:	e067      	b.n	80052fc <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	699b      	ldr	r3, [r3, #24]
 8005232:	4619      	mov	r1, r3
 8005234:	4610      	mov	r0, r2
 8005236:	f7ff fe59 	bl	8004eec <create_chain>
 800523a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <dir_next+0xcc>
 8005242:	2307      	movs	r3, #7
 8005244:	e05a      	b.n	80052fc <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	2b01      	cmp	r3, #1
 800524a:	d101      	bne.n	8005250 <dir_next+0xd6>
 800524c:	2302      	movs	r3, #2
 800524e:	e055      	b.n	80052fc <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005256:	d101      	bne.n	800525c <dir_next+0xe2>
 8005258:	2301      	movs	r3, #1
 800525a:	e04f      	b.n	80052fc <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff fb4d 	bl	80048fc <sync_window>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d001      	beq.n	800526c <dir_next+0xf2>
 8005268:	2301      	movs	r3, #1
 800526a:	e047      	b.n	80052fc <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	3330      	adds	r3, #48	; 0x30
 8005270:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005274:	2100      	movs	r1, #0
 8005276:	4618      	mov	r0, r3
 8005278:	f7ff f977 	bl	800456a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800527c:	2300      	movs	r3, #0
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	6979      	ldr	r1, [r7, #20]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f7ff fc1a 	bl	8004abc <clust2sect>
 8005288:	4602      	mov	r2, r0
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	62da      	str	r2, [r3, #44]	; 0x2c
 800528e:	e012      	b.n	80052b6 <dir_next+0x13c>
						fs->wflag = 1;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	2201      	movs	r2, #1
 8005294:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f7ff fb30 	bl	80048fc <sync_window>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <dir_next+0x12c>
 80052a2:	2301      	movs	r3, #1
 80052a4:	e02a      	b.n	80052fc <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	3301      	adds	r3, #1
 80052aa:	613b      	str	r3, [r7, #16]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	62da      	str	r2, [r3, #44]	; 0x2c
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	895b      	ldrh	r3, [r3, #10]
 80052ba:	461a      	mov	r2, r3
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4293      	cmp	r3, r2
 80052c0:	d3e6      	bcc.n	8005290 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad2      	subs	r2, r2, r3
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	697a      	ldr	r2, [r7, #20]
 80052d2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80052d4:	6979      	ldr	r1, [r7, #20]
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f7ff fbf0 	bl	8004abc <clust2sect>
 80052dc:	4602      	mov	r2, r0
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052f4:	441a      	add	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005314:	2100      	movs	r1, #0
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f7ff feb4 	bl	8005084 <dir_sdi>
 800531c:	4603      	mov	r3, r0
 800531e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005320:	7dfb      	ldrb	r3, [r7, #23]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d12b      	bne.n	800537e <dir_alloc+0x7a>
		n = 0;
 8005326:	2300      	movs	r3, #0
 8005328:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	4619      	mov	r1, r3
 8005330:	68f8      	ldr	r0, [r7, #12]
 8005332:	f7ff fb27 	bl	8004984 <move_window>
 8005336:	4603      	mov	r3, r0
 8005338:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800533a:	7dfb      	ldrb	r3, [r7, #23]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d11d      	bne.n	800537c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	2be5      	cmp	r3, #229	; 0xe5
 8005348:	d004      	beq.n	8005354 <dir_alloc+0x50>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6a1b      	ldr	r3, [r3, #32]
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d107      	bne.n	8005364 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	3301      	adds	r3, #1
 8005358:	613b      	str	r3, [r7, #16]
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	429a      	cmp	r2, r3
 8005360:	d102      	bne.n	8005368 <dir_alloc+0x64>
 8005362:	e00c      	b.n	800537e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005364:	2300      	movs	r3, #0
 8005366:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005368:	2101      	movs	r1, #1
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7ff ff05 	bl	800517a <dir_next>
 8005370:	4603      	mov	r3, r0
 8005372:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005374:	7dfb      	ldrb	r3, [r7, #23]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d0d7      	beq.n	800532a <dir_alloc+0x26>
 800537a:	e000      	b.n	800537e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800537c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800537e:	7dfb      	ldrb	r3, [r7, #23]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d101      	bne.n	8005388 <dir_alloc+0x84>
 8005384:	2307      	movs	r3, #7
 8005386:	75fb      	strb	r3, [r7, #23]
	return res;
 8005388:	7dfb      	ldrb	r3, [r7, #23]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005392:	b580      	push	{r7, lr}
 8005394:	b084      	sub	sp, #16
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
 800539a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	331a      	adds	r3, #26
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7ff f83f 	bl	8004424 <ld_word>
 80053a6:	4603      	mov	r3, r0
 80053a8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d109      	bne.n	80053c6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	3314      	adds	r3, #20
 80053b6:	4618      	mov	r0, r3
 80053b8:	f7ff f834 	bl	8004424 <ld_word>
 80053bc:	4603      	mov	r3, r0
 80053be:	041b      	lsls	r3, r3, #16
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80053c6:	68fb      	ldr	r3, [r7, #12]
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	331a      	adds	r3, #26
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	b292      	uxth	r2, r2
 80053e4:	4611      	mov	r1, r2
 80053e6:	4618      	mov	r0, r3
 80053e8:	f7ff f857 	bl	800449a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d109      	bne.n	8005408 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	f103 0214 	add.w	r2, r3, #20
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	0c1b      	lsrs	r3, r3, #16
 80053fe:	b29b      	uxth	r3, r3
 8005400:	4619      	mov	r1, r3
 8005402:	4610      	mov	r0, r2
 8005404:	f7ff f849 	bl	800449a <st_word>
	}
}
 8005408:	bf00      	nop
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b086      	sub	sp, #24
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800541e:	2100      	movs	r1, #0
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	f7ff fe2f 	bl	8005084 <dir_sdi>
 8005426:	4603      	mov	r3, r0
 8005428:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800542a:	7dfb      	ldrb	r3, [r7, #23]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <dir_find+0x24>
 8005430:	7dfb      	ldrb	r3, [r7, #23]
 8005432:	e03e      	b.n	80054b2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	4619      	mov	r1, r3
 800543a:	6938      	ldr	r0, [r7, #16]
 800543c:	f7ff faa2 	bl	8004984 <move_window>
 8005440:	4603      	mov	r3, r0
 8005442:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005444:	7dfb      	ldrb	r3, [r7, #23]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d12f      	bne.n	80054aa <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005452:	7bfb      	ldrb	r3, [r7, #15]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d102      	bne.n	800545e <dir_find+0x4e>
 8005458:	2304      	movs	r3, #4
 800545a:	75fb      	strb	r3, [r7, #23]
 800545c:	e028      	b.n	80054b0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	330b      	adds	r3, #11
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800546a:	b2da      	uxtb	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	330b      	adds	r3, #11
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d10a      	bne.n	8005496 <dir_find+0x86>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a18      	ldr	r0, [r3, #32]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	3324      	adds	r3, #36	; 0x24
 8005488:	220b      	movs	r2, #11
 800548a:	4619      	mov	r1, r3
 800548c:	f7ff f888 	bl	80045a0 <mem_cmp>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00b      	beq.n	80054ae <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005496:	2100      	movs	r1, #0
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff fe6e 	bl	800517a <dir_next>
 800549e:	4603      	mov	r3, r0
 80054a0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80054a2:	7dfb      	ldrb	r3, [r7, #23]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d0c5      	beq.n	8005434 <dir_find+0x24>
 80054a8:	e002      	b.n	80054b0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80054aa:	bf00      	nop
 80054ac:	e000      	b.n	80054b0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80054ae:	bf00      	nop

	return res;
 80054b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80054c8:	2101      	movs	r1, #1
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f7ff ff1a 	bl	8005304 <dir_alloc>
 80054d0:	4603      	mov	r3, r0
 80054d2:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80054d4:	7bfb      	ldrb	r3, [r7, #15]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d11c      	bne.n	8005514 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
 80054de:	4619      	mov	r1, r3
 80054e0:	68b8      	ldr	r0, [r7, #8]
 80054e2:	f7ff fa4f 	bl	8004984 <move_window>
 80054e6:	4603      	mov	r3, r0
 80054e8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80054ea:	7bfb      	ldrb	r3, [r7, #15]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d111      	bne.n	8005514 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a1b      	ldr	r3, [r3, #32]
 80054f4:	2220      	movs	r2, #32
 80054f6:	2100      	movs	r1, #0
 80054f8:	4618      	mov	r0, r3
 80054fa:	f7ff f836 	bl	800456a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a18      	ldr	r0, [r3, #32]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	3324      	adds	r3, #36	; 0x24
 8005506:	220b      	movs	r2, #11
 8005508:	4619      	mov	r1, r3
 800550a:	f7ff f80d 	bl	8004528 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	2201      	movs	r2, #1
 8005512:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005514:	7bfb      	ldrb	r3, [r7, #15]
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	3324      	adds	r3, #36	; 0x24
 8005534:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8005536:	220b      	movs	r2, #11
 8005538:	2120      	movs	r1, #32
 800553a:	68b8      	ldr	r0, [r7, #8]
 800553c:	f7ff f815 	bl	800456a <mem_set>
	si = i = 0; ni = 8;
 8005540:	2300      	movs	r3, #0
 8005542:	613b      	str	r3, [r7, #16]
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	61fb      	str	r3, [r7, #28]
 8005548:	2308      	movs	r3, #8
 800554a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	61fa      	str	r2, [r7, #28]
 8005552:	68fa      	ldr	r2, [r7, #12]
 8005554:	4413      	add	r3, r2
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800555a:	7efb      	ldrb	r3, [r7, #27]
 800555c:	2b20      	cmp	r3, #32
 800555e:	d94e      	bls.n	80055fe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8005560:	7efb      	ldrb	r3, [r7, #27]
 8005562:	2b2f      	cmp	r3, #47	; 0x2f
 8005564:	d006      	beq.n	8005574 <create_name+0x54>
 8005566:	7efb      	ldrb	r3, [r7, #27]
 8005568:	2b5c      	cmp	r3, #92	; 0x5c
 800556a:	d110      	bne.n	800558e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800556c:	e002      	b.n	8005574 <create_name+0x54>
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3301      	adds	r3, #1
 8005572:	61fb      	str	r3, [r7, #28]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	4413      	add	r3, r2
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	2b2f      	cmp	r3, #47	; 0x2f
 800557e:	d0f6      	beq.n	800556e <create_name+0x4e>
 8005580:	68fa      	ldr	r2, [r7, #12]
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	4413      	add	r3, r2
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	2b5c      	cmp	r3, #92	; 0x5c
 800558a:	d0f0      	beq.n	800556e <create_name+0x4e>
			break;
 800558c:	e038      	b.n	8005600 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800558e:	7efb      	ldrb	r3, [r7, #27]
 8005590:	2b2e      	cmp	r3, #46	; 0x2e
 8005592:	d003      	beq.n	800559c <create_name+0x7c>
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	429a      	cmp	r2, r3
 800559a:	d30c      	bcc.n	80055b6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	2b0b      	cmp	r3, #11
 80055a0:	d002      	beq.n	80055a8 <create_name+0x88>
 80055a2:	7efb      	ldrb	r3, [r7, #27]
 80055a4:	2b2e      	cmp	r3, #46	; 0x2e
 80055a6:	d001      	beq.n	80055ac <create_name+0x8c>
 80055a8:	2306      	movs	r3, #6
 80055aa:	e044      	b.n	8005636 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80055ac:	2308      	movs	r3, #8
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	230b      	movs	r3, #11
 80055b2:	617b      	str	r3, [r7, #20]
			continue;
 80055b4:	e022      	b.n	80055fc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80055b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	da04      	bge.n	80055c8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80055be:	7efb      	ldrb	r3, [r7, #27]
 80055c0:	3b80      	subs	r3, #128	; 0x80
 80055c2:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <create_name+0x120>)
 80055c4:	5cd3      	ldrb	r3, [r2, r3]
 80055c6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80055c8:	7efb      	ldrb	r3, [r7, #27]
 80055ca:	4619      	mov	r1, r3
 80055cc:	481d      	ldr	r0, [pc, #116]	; (8005644 <create_name+0x124>)
 80055ce:	f7ff f80e 	bl	80045ee <chk_chr>
 80055d2:	4603      	mov	r3, r0
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <create_name+0xbc>
 80055d8:	2306      	movs	r3, #6
 80055da:	e02c      	b.n	8005636 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80055dc:	7efb      	ldrb	r3, [r7, #27]
 80055de:	2b60      	cmp	r3, #96	; 0x60
 80055e0:	d905      	bls.n	80055ee <create_name+0xce>
 80055e2:	7efb      	ldrb	r3, [r7, #27]
 80055e4:	2b7a      	cmp	r3, #122	; 0x7a
 80055e6:	d802      	bhi.n	80055ee <create_name+0xce>
 80055e8:	7efb      	ldrb	r3, [r7, #27]
 80055ea:	3b20      	subs	r3, #32
 80055ec:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	1c5a      	adds	r2, r3, #1
 80055f2:	613a      	str	r2, [r7, #16]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	4413      	add	r3, r2
 80055f8:	7efa      	ldrb	r2, [r7, #27]
 80055fa:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80055fc:	e7a6      	b.n	800554c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80055fe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	441a      	add	r2, r3
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d101      	bne.n	8005614 <create_name+0xf4>
 8005610:	2306      	movs	r3, #6
 8005612:	e010      	b.n	8005636 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2be5      	cmp	r3, #229	; 0xe5
 800561a:	d102      	bne.n	8005622 <create_name+0x102>
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2205      	movs	r2, #5
 8005620:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005622:	7efb      	ldrb	r3, [r7, #27]
 8005624:	2b20      	cmp	r3, #32
 8005626:	d801      	bhi.n	800562c <create_name+0x10c>
 8005628:	2204      	movs	r2, #4
 800562a:	e000      	b.n	800562e <create_name+0x10e>
 800562c:	2200      	movs	r2, #0
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	330b      	adds	r3, #11
 8005632:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8005634:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8005636:	4618      	mov	r0, r3
 8005638:	3720      	adds	r7, #32
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	08007d70 	.word	0x08007d70
 8005644:	08007ce4 	.word	0x08007ce4

08005648 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b086      	sub	sp, #24
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
 8005650:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800565c:	e002      	b.n	8005664 <follow_path+0x1c>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	3301      	adds	r3, #1
 8005662:	603b      	str	r3, [r7, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	2b2f      	cmp	r3, #47	; 0x2f
 800566a:	d0f8      	beq.n	800565e <follow_path+0x16>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	2b5c      	cmp	r3, #92	; 0x5c
 8005672:	d0f4      	beq.n	800565e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2200      	movs	r2, #0
 8005678:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	2b1f      	cmp	r3, #31
 8005680:	d80a      	bhi.n	8005698 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2280      	movs	r2, #128	; 0x80
 8005686:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800568a:	2100      	movs	r1, #0
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f7ff fcf9 	bl	8005084 <dir_sdi>
 8005692:	4603      	mov	r3, r0
 8005694:	75fb      	strb	r3, [r7, #23]
 8005696:	e043      	b.n	8005720 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005698:	463b      	mov	r3, r7
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f7ff ff3f 	bl	8005520 <create_name>
 80056a2:	4603      	mov	r3, r0
 80056a4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d134      	bne.n	8005716 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff feaf 	bl	8005410 <dir_find>
 80056b2:	4603      	mov	r3, r0
 80056b4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80056bc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80056be:	7dfb      	ldrb	r3, [r7, #23]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00a      	beq.n	80056da <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80056c4:	7dfb      	ldrb	r3, [r7, #23]
 80056c6:	2b04      	cmp	r3, #4
 80056c8:	d127      	bne.n	800571a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80056ca:	7afb      	ldrb	r3, [r7, #11]
 80056cc:	f003 0304 	and.w	r3, r3, #4
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d122      	bne.n	800571a <follow_path+0xd2>
 80056d4:	2305      	movs	r3, #5
 80056d6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80056d8:	e01f      	b.n	800571a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80056da:	7afb      	ldrb	r3, [r7, #11]
 80056dc:	f003 0304 	and.w	r3, r3, #4
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d11c      	bne.n	800571e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	799b      	ldrb	r3, [r3, #6]
 80056e8:	f003 0310 	and.w	r3, r3, #16
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80056f0:	2305      	movs	r3, #5
 80056f2:	75fb      	strb	r3, [r7, #23]
 80056f4:	e014      	b.n	8005720 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	695b      	ldr	r3, [r3, #20]
 8005700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005704:	4413      	add	r3, r2
 8005706:	4619      	mov	r1, r3
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff fe42 	bl	8005392 <ld_clust>
 800570e:	4602      	mov	r2, r0
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005714:	e7c0      	b.n	8005698 <follow_path+0x50>
			if (res != FR_OK) break;
 8005716:	bf00      	nop
 8005718:	e002      	b.n	8005720 <follow_path+0xd8>
				break;
 800571a:	bf00      	nop
 800571c:	e000      	b.n	8005720 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800571e:	bf00      	nop
			}
		}
	}

	return res;
 8005720:	7dfb      	ldrb	r3, [r7, #23]
}
 8005722:	4618      	mov	r0, r3
 8005724:	3718      	adds	r7, #24
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800572a:	b480      	push	{r7}
 800572c:	b087      	sub	sp, #28
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005732:	f04f 33ff 	mov.w	r3, #4294967295
 8005736:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d031      	beq.n	80057a4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	617b      	str	r3, [r7, #20]
 8005746:	e002      	b.n	800574e <get_ldnumber+0x24>
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	3301      	adds	r3, #1
 800574c:	617b      	str	r3, [r7, #20]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	2b20      	cmp	r3, #32
 8005754:	d903      	bls.n	800575e <get_ldnumber+0x34>
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	2b3a      	cmp	r3, #58	; 0x3a
 800575c:	d1f4      	bne.n	8005748 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	2b3a      	cmp	r3, #58	; 0x3a
 8005764:	d11c      	bne.n	80057a0 <get_ldnumber+0x76>
			tp = *path;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	60fa      	str	r2, [r7, #12]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	3b30      	subs	r3, #48	; 0x30
 8005776:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	2b09      	cmp	r3, #9
 800577c:	d80e      	bhi.n	800579c <get_ldnumber+0x72>
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	429a      	cmp	r2, r3
 8005784:	d10a      	bne.n	800579c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d107      	bne.n	800579c <get_ldnumber+0x72>
					vol = (int)i;
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	3301      	adds	r3, #1
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	697a      	ldr	r2, [r7, #20]
 800579a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	e002      	b.n	80057a6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80057a0:	2300      	movs	r3, #0
 80057a2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80057a4:	693b      	ldr	r3, [r7, #16]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	371c      	adds	r7, #28
 80057aa:	46bd      	mov	sp, r7
 80057ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b0:	4770      	bx	lr
	...

080057b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	70da      	strb	r2, [r3, #3]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f04f 32ff 	mov.w	r2, #4294967295
 80057ca:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f7ff f8d8 	bl	8004984 <move_window>
 80057d4:	4603      	mov	r3, r0
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <check_fs+0x2a>
 80057da:	2304      	movs	r3, #4
 80057dc:	e038      	b.n	8005850 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	3330      	adds	r3, #48	; 0x30
 80057e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe fe1c 	bl	8004424 <ld_word>
 80057ec:	4603      	mov	r3, r0
 80057ee:	461a      	mov	r2, r3
 80057f0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d001      	beq.n	80057fc <check_fs+0x48>
 80057f8:	2303      	movs	r3, #3
 80057fa:	e029      	b.n	8005850 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005802:	2be9      	cmp	r3, #233	; 0xe9
 8005804:	d009      	beq.n	800581a <check_fs+0x66>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800580c:	2beb      	cmp	r3, #235	; 0xeb
 800580e:	d11e      	bne.n	800584e <check_fs+0x9a>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005816:	2b90      	cmp	r3, #144	; 0x90
 8005818:	d119      	bne.n	800584e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3330      	adds	r3, #48	; 0x30
 800581e:	3336      	adds	r3, #54	; 0x36
 8005820:	4618      	mov	r0, r3
 8005822:	f7fe fe17 	bl	8004454 <ld_dword>
 8005826:	4603      	mov	r3, r0
 8005828:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800582c:	4a0a      	ldr	r2, [pc, #40]	; (8005858 <check_fs+0xa4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d101      	bne.n	8005836 <check_fs+0x82>
 8005832:	2300      	movs	r3, #0
 8005834:	e00c      	b.n	8005850 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	3330      	adds	r3, #48	; 0x30
 800583a:	3352      	adds	r3, #82	; 0x52
 800583c:	4618      	mov	r0, r3
 800583e:	f7fe fe09 	bl	8004454 <ld_dword>
 8005842:	4603      	mov	r3, r0
 8005844:	4a05      	ldr	r2, [pc, #20]	; (800585c <check_fs+0xa8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d101      	bne.n	800584e <check_fs+0x9a>
 800584a:	2300      	movs	r3, #0
 800584c:	e000      	b.n	8005850 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800584e:	2302      	movs	r3, #2
}
 8005850:	4618      	mov	r0, r3
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	00544146 	.word	0x00544146
 800585c:	33544146 	.word	0x33544146

08005860 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b096      	sub	sp, #88	; 0x58
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	4613      	mov	r3, r2
 800586c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2200      	movs	r2, #0
 8005872:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f7ff ff58 	bl	800572a <get_ldnumber>
 800587a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800587c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800587e:	2b00      	cmp	r3, #0
 8005880:	da01      	bge.n	8005886 <find_volume+0x26>
 8005882:	230b      	movs	r3, #11
 8005884:	e22d      	b.n	8005ce2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005886:	4aa1      	ldr	r2, [pc, #644]	; (8005b0c <find_volume+0x2ac>)
 8005888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800588e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <find_volume+0x3a>
 8005896:	230c      	movs	r3, #12
 8005898:	e223      	b.n	8005ce2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800589e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80058a0:	79fb      	ldrb	r3, [r7, #7]
 80058a2:	f023 0301 	bic.w	r3, r3, #1
 80058a6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80058a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01a      	beq.n	80058e6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80058b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7fe fd17 	bl	80042e8 <disk_status>
 80058ba:	4603      	mov	r3, r0
 80058bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80058c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058c4:	f003 0301 	and.w	r3, r3, #1
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10c      	bne.n	80058e6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80058cc:	79fb      	ldrb	r3, [r7, #7]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <find_volume+0x82>
 80058d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80058de:	230a      	movs	r3, #10
 80058e0:	e1ff      	b.n	8005ce2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80058e2:	2300      	movs	r3, #0
 80058e4:	e1fd      	b.n	8005ce2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80058e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058e8:	2200      	movs	r2, #0
 80058ea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80058ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ee:	b2da      	uxtb	r2, r3
 80058f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80058f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f6:	785b      	ldrb	r3, [r3, #1]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fe fd0f 	bl	800431c <disk_initialize>
 80058fe:	4603      	mov	r3, r0
 8005900:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005904:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005910:	2303      	movs	r3, #3
 8005912:	e1e6      	b.n	8005ce2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005914:	79fb      	ldrb	r3, [r7, #7]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d007      	beq.n	800592a <find_volume+0xca>
 800591a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800591e:	f003 0304 	and.w	r3, r3, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	d001      	beq.n	800592a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005926:	230a      	movs	r3, #10
 8005928:	e1db      	b.n	8005ce2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800592a:	2300      	movs	r3, #0
 800592c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800592e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005930:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005932:	f7ff ff3f 	bl	80057b4 <check_fs>
 8005936:	4603      	mov	r3, r0
 8005938:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800593c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005940:	2b02      	cmp	r3, #2
 8005942:	d149      	bne.n	80059d8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005944:	2300      	movs	r3, #0
 8005946:	643b      	str	r3, [r7, #64]	; 0x40
 8005948:	e01e      	b.n	8005988 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800594a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800594c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005950:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005958:	4413      	add	r3, r2
 800595a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800595c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595e:	3304      	adds	r3, #4
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d006      	beq.n	8005974 <find_volume+0x114>
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	3308      	adds	r3, #8
 800596a:	4618      	mov	r0, r3
 800596c:	f7fe fd72 	bl	8004454 <ld_dword>
 8005970:	4602      	mov	r2, r0
 8005972:	e000      	b.n	8005976 <find_volume+0x116>
 8005974:	2200      	movs	r2, #0
 8005976:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005978:	009b      	lsls	r3, r3, #2
 800597a:	3358      	adds	r3, #88	; 0x58
 800597c:	443b      	add	r3, r7
 800597e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005982:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005984:	3301      	adds	r3, #1
 8005986:	643b      	str	r3, [r7, #64]	; 0x40
 8005988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800598a:	2b03      	cmp	r3, #3
 800598c:	d9dd      	bls.n	800594a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800598e:	2300      	movs	r3, #0
 8005990:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8005992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <find_volume+0x13e>
 8005998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800599a:	3b01      	subs	r3, #1
 800599c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800599e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a0:	009b      	lsls	r3, r3, #2
 80059a2:	3358      	adds	r3, #88	; 0x58
 80059a4:	443b      	add	r3, r7
 80059a6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80059aa:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80059ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d005      	beq.n	80059be <find_volume+0x15e>
 80059b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80059b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059b6:	f7ff fefd 	bl	80057b4 <check_fs>
 80059ba:	4603      	mov	r3, r0
 80059bc:	e000      	b.n	80059c0 <find_volume+0x160>
 80059be:	2303      	movs	r3, #3
 80059c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80059c4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d905      	bls.n	80059d8 <find_volume+0x178>
 80059cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ce:	3301      	adds	r3, #1
 80059d0:	643b      	str	r3, [r7, #64]	; 0x40
 80059d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059d4:	2b03      	cmp	r3, #3
 80059d6:	d9e2      	bls.n	800599e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80059d8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059dc:	2b04      	cmp	r3, #4
 80059de:	d101      	bne.n	80059e4 <find_volume+0x184>
 80059e0:	2301      	movs	r3, #1
 80059e2:	e17e      	b.n	8005ce2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80059e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d901      	bls.n	80059f0 <find_volume+0x190>
 80059ec:	230d      	movs	r3, #13
 80059ee:	e178      	b.n	8005ce2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	3330      	adds	r3, #48	; 0x30
 80059f4:	330b      	adds	r3, #11
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7fe fd14 	bl	8004424 <ld_word>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a02:	d001      	beq.n	8005a08 <find_volume+0x1a8>
 8005a04:	230d      	movs	r3, #13
 8005a06:	e16c      	b.n	8005ce2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a0a:	3330      	adds	r3, #48	; 0x30
 8005a0c:	3316      	adds	r3, #22
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f7fe fd08 	bl	8004424 <ld_word>
 8005a14:	4603      	mov	r3, r0
 8005a16:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <find_volume+0x1cc>
 8005a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a20:	3330      	adds	r3, #48	; 0x30
 8005a22:	3324      	adds	r3, #36	; 0x24
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe fd15 	bl	8004454 <ld_dword>
 8005a2a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a30:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3e:	789b      	ldrb	r3, [r3, #2]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d005      	beq.n	8005a50 <find_volume+0x1f0>
 8005a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a46:	789b      	ldrb	r3, [r3, #2]
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d001      	beq.n	8005a50 <find_volume+0x1f0>
 8005a4c:	230d      	movs	r3, #13
 8005a4e:	e148      	b.n	8005ce2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a52:	789b      	ldrb	r3, [r3, #2]
 8005a54:	461a      	mov	r2, r3
 8005a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a58:	fb02 f303 	mul.w	r3, r2, r3
 8005a5c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a68:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6c:	895b      	ldrh	r3, [r3, #10]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d008      	beq.n	8005a84 <find_volume+0x224>
 8005a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a74:	895b      	ldrh	r3, [r3, #10]
 8005a76:	461a      	mov	r2, r3
 8005a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7a:	895b      	ldrh	r3, [r3, #10]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	4013      	ands	r3, r2
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <find_volume+0x228>
 8005a84:	230d      	movs	r3, #13
 8005a86:	e12c      	b.n	8005ce2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8a:	3330      	adds	r3, #48	; 0x30
 8005a8c:	3311      	adds	r3, #17
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fe fcc8 	bl	8004424 <ld_word>
 8005a94:	4603      	mov	r3, r0
 8005a96:	461a      	mov	r2, r3
 8005a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9e:	891b      	ldrh	r3, [r3, #8]
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <find_volume+0x24e>
 8005aaa:	230d      	movs	r3, #13
 8005aac:	e119      	b.n	8005ce2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ab0:	3330      	adds	r3, #48	; 0x30
 8005ab2:	3313      	adds	r3, #19
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f7fe fcb5 	bl	8004424 <ld_word>
 8005aba:	4603      	mov	r3, r0
 8005abc:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005abe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d106      	bne.n	8005ad2 <find_volume+0x272>
 8005ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac6:	3330      	adds	r3, #48	; 0x30
 8005ac8:	3320      	adds	r3, #32
 8005aca:	4618      	mov	r0, r3
 8005acc:	f7fe fcc2 	bl	8004454 <ld_dword>
 8005ad0:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad4:	3330      	adds	r3, #48	; 0x30
 8005ad6:	330e      	adds	r3, #14
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f7fe fca3 	bl	8004424 <ld_word>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005ae2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d101      	bne.n	8005aec <find_volume+0x28c>
 8005ae8:	230d      	movs	r3, #13
 8005aea:	e0fa      	b.n	8005ce2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005aec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005aee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005af0:	4413      	add	r3, r2
 8005af2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005af4:	8912      	ldrh	r2, [r2, #8]
 8005af6:	0912      	lsrs	r2, r2, #4
 8005af8:	b292      	uxth	r2, r2
 8005afa:	4413      	add	r3, r2
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005afe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d204      	bcs.n	8005b10 <find_volume+0x2b0>
 8005b06:	230d      	movs	r3, #13
 8005b08:	e0eb      	b.n	8005ce2 <find_volume+0x482>
 8005b0a:	bf00      	nop
 8005b0c:	2000043c 	.word	0x2000043c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005b10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b14:	1ad3      	subs	r3, r2, r3
 8005b16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b18:	8952      	ldrh	r2, [r2, #10]
 8005b1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d101      	bne.n	8005b2a <find_volume+0x2ca>
 8005b26:	230d      	movs	r3, #13
 8005b28:	e0db      	b.n	8005ce2 <find_volume+0x482>
		fmt = FS_FAT32;
 8005b2a:	2303      	movs	r3, #3
 8005b2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b32:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d802      	bhi.n	8005b40 <find_volume+0x2e0>
 8005b3a:	2302      	movs	r3, #2
 8005b3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b42:	f640 72f5 	movw	r2, #4085	; 0xff5
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d802      	bhi.n	8005b50 <find_volume+0x2f0>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	1c9a      	adds	r2, r3, #2
 8005b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b56:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b5c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005b5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b62:	441a      	add	r2, r3
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005b68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6c:	441a      	add	r2, r3
 8005b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b70:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8005b72:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005b76:	2b03      	cmp	r3, #3
 8005b78:	d11e      	bne.n	8005bb8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005b7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7c:	3330      	adds	r3, #48	; 0x30
 8005b7e:	332a      	adds	r3, #42	; 0x2a
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fe fc4f 	bl	8004424 <ld_word>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d001      	beq.n	8005b90 <find_volume+0x330>
 8005b8c:	230d      	movs	r3, #13
 8005b8e:	e0a8      	b.n	8005ce2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b92:	891b      	ldrh	r3, [r3, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <find_volume+0x33c>
 8005b98:	230d      	movs	r3, #13
 8005b9a:	e0a2      	b.n	8005ce2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9e:	3330      	adds	r3, #48	; 0x30
 8005ba0:	332c      	adds	r3, #44	; 0x2c
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7fe fc56 	bl	8004454 <ld_dword>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb0:	695b      	ldr	r3, [r3, #20]
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	647b      	str	r3, [r7, #68]	; 0x44
 8005bb6:	e01f      	b.n	8005bf8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	891b      	ldrh	r3, [r3, #8]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d101      	bne.n	8005bc4 <find_volume+0x364>
 8005bc0:	230d      	movs	r3, #13
 8005bc2:	e08e      	b.n	8005ce2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc6:	6a1a      	ldr	r2, [r3, #32]
 8005bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bca:	441a      	add	r2, r3
 8005bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bce:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005bd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005bd4:	2b02      	cmp	r3, #2
 8005bd6:	d103      	bne.n	8005be0 <find_volume+0x380>
 8005bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bda:	695b      	ldr	r3, [r3, #20]
 8005bdc:	005b      	lsls	r3, r3, #1
 8005bde:	e00a      	b.n	8005bf6 <find_volume+0x396>
 8005be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be2:	695a      	ldr	r2, [r3, #20]
 8005be4:	4613      	mov	r3, r2
 8005be6:	005b      	lsls	r3, r3, #1
 8005be8:	4413      	add	r3, r2
 8005bea:	085a      	lsrs	r2, r3, #1
 8005bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	f003 0301 	and.w	r3, r3, #1
 8005bf4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005bf6:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	699a      	ldr	r2, [r3, #24]
 8005bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bfe:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005c02:	0a5b      	lsrs	r3, r3, #9
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d201      	bcs.n	8005c0c <find_volume+0x3ac>
 8005c08:	230d      	movs	r3, #13
 8005c0a:	e06a      	b.n	8005ce2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c12:	611a      	str	r2, [r3, #16]
 8005c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c16:	691a      	ldr	r2, [r3, #16]
 8005c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c1e:	2280      	movs	r2, #128	; 0x80
 8005c20:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005c22:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d149      	bne.n	8005cbe <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2c:	3330      	adds	r3, #48	; 0x30
 8005c2e:	3330      	adds	r3, #48	; 0x30
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7fe fbf7 	bl	8004424 <ld_word>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d140      	bne.n	8005cbe <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c3e:	3301      	adds	r3, #1
 8005c40:	4619      	mov	r1, r3
 8005c42:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005c44:	f7fe fe9e 	bl	8004984 <move_window>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d137      	bne.n	8005cbe <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	2200      	movs	r2, #0
 8005c52:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	3330      	adds	r3, #48	; 0x30
 8005c58:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fe fbe1 	bl	8004424 <ld_word>
 8005c62:	4603      	mov	r3, r0
 8005c64:	461a      	mov	r2, r3
 8005c66:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d127      	bne.n	8005cbe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005c6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c70:	3330      	adds	r3, #48	; 0x30
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fe fbee 	bl	8004454 <ld_dword>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	4a1c      	ldr	r2, [pc, #112]	; (8005cec <find_volume+0x48c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d11e      	bne.n	8005cbe <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c82:	3330      	adds	r3, #48	; 0x30
 8005c84:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005c88:	4618      	mov	r0, r3
 8005c8a:	f7fe fbe3 	bl	8004454 <ld_dword>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	4a17      	ldr	r2, [pc, #92]	; (8005cf0 <find_volume+0x490>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d113      	bne.n	8005cbe <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c98:	3330      	adds	r3, #48	; 0x30
 8005c9a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7fe fbd8 	bl	8004454 <ld_dword>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca8:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	3330      	adds	r3, #48	; 0x30
 8005cae:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe fbce 	bl	8004454 <ld_dword>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbc:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8005cc4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005cc6:	4b0b      	ldr	r3, [pc, #44]	; (8005cf4 <find_volume+0x494>)
 8005cc8:	881b      	ldrh	r3, [r3, #0]
 8005cca:	3301      	adds	r3, #1
 8005ccc:	b29a      	uxth	r2, r3
 8005cce:	4b09      	ldr	r3, [pc, #36]	; (8005cf4 <find_volume+0x494>)
 8005cd0:	801a      	strh	r2, [r3, #0]
 8005cd2:	4b08      	ldr	r3, [pc, #32]	; (8005cf4 <find_volume+0x494>)
 8005cd4:	881a      	ldrh	r2, [r3, #0]
 8005cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005cda:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005cdc:	f7fe fdea 	bl	80048b4 <clear_lock>
#endif
	return FR_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3758      	adds	r7, #88	; 0x58
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	41615252 	.word	0x41615252
 8005cf0:	61417272 	.word	0x61417272
 8005cf4:	20000440 	.word	0x20000440

08005cf8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005d02:	2309      	movs	r3, #9
 8005d04:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d01c      	beq.n	8005d46 <validate+0x4e>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d018      	beq.n	8005d46 <validate+0x4e>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d013      	beq.n	8005d46 <validate+0x4e>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	889a      	ldrh	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	88db      	ldrh	r3, [r3, #6]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	d10c      	bne.n	8005d46 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	785b      	ldrb	r3, [r3, #1]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe fad8 	bl	80042e8 <disk_status>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <validate+0x4e>
			res = FR_OK;
 8005d42:	2300      	movs	r3, #0
 8005d44:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005d46:	7bfb      	ldrb	r3, [r7, #15]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d102      	bne.n	8005d52 <validate+0x5a>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	e000      	b.n	8005d54 <validate+0x5c>
 8005d52:	2300      	movs	r3, #0
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	6013      	str	r3, [r2, #0]
	return res;
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
	...

08005d64 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b088      	sub	sp, #32
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005d76:	f107 0310 	add.w	r3, r7, #16
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff fcd5 	bl	800572a <get_ldnumber>
 8005d80:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	da01      	bge.n	8005d8c <f_mount+0x28>
 8005d88:	230b      	movs	r3, #11
 8005d8a:	e02b      	b.n	8005de4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005d8c:	4a17      	ldr	r2, [pc, #92]	; (8005dec <f_mount+0x88>)
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d94:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005d9c:	69b8      	ldr	r0, [r7, #24]
 8005d9e:	f7fe fd89 	bl	80048b4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	2200      	movs	r2, #0
 8005da6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005db4:	68fa      	ldr	r2, [r7, #12]
 8005db6:	490d      	ldr	r1, [pc, #52]	; (8005dec <f_mount+0x88>)
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d002      	beq.n	8005dca <f_mount+0x66>
 8005dc4:	79fb      	ldrb	r3, [r7, #7]
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d001      	beq.n	8005dce <f_mount+0x6a>
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e00a      	b.n	8005de4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005dce:	f107 010c 	add.w	r1, r7, #12
 8005dd2:	f107 0308 	add.w	r3, r7, #8
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fd41 	bl	8005860 <find_volume>
 8005dde:	4603      	mov	r3, r0
 8005de0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005de2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3720      	adds	r7, #32
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}
 8005dec:	2000043c 	.word	0x2000043c

08005df0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b098      	sub	sp, #96	; 0x60
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <f_open+0x18>
 8005e04:	2309      	movs	r3, #9
 8005e06:	e1ad      	b.n	8006164 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005e08:	79fb      	ldrb	r3, [r7, #7]
 8005e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e0e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005e10:	79fa      	ldrb	r2, [r7, #7]
 8005e12:	f107 0110 	add.w	r1, r7, #16
 8005e16:	f107 0308 	add.w	r3, r7, #8
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	f7ff fd20 	bl	8005860 <find_volume>
 8005e20:	4603      	mov	r3, r0
 8005e22:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8005e26:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	f040 8191 	bne.w	8006152 <f_open+0x362>
		dj.obj.fs = fs;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005e34:	68ba      	ldr	r2, [r7, #8]
 8005e36:	f107 0314 	add.w	r3, r7, #20
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f7ff fc03 	bl	8005648 <follow_path>
 8005e42:	4603      	mov	r3, r0
 8005e44:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005e48:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d11a      	bne.n	8005e86 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005e50:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e54:	b25b      	sxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	da03      	bge.n	8005e62 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005e5a:	2306      	movs	r3, #6
 8005e5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005e60:	e011      	b.n	8005e86 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	bf14      	ite	ne
 8005e6c:	2301      	movne	r3, #1
 8005e6e:	2300      	moveq	r3, #0
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	f107 0314 	add.w	r3, r7, #20
 8005e78:	4611      	mov	r1, r2
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7fe fbd2 	bl	8004624 <chk_lock>
 8005e80:	4603      	mov	r3, r0
 8005e82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	f003 031c 	and.w	r3, r3, #28
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d07f      	beq.n	8005f90 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8005e90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d017      	beq.n	8005ec8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005e98:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d10e      	bne.n	8005ebe <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005ea0:	f7fe fc1c 	bl	80046dc <enq_lock>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d006      	beq.n	8005eb8 <f_open+0xc8>
 8005eaa:	f107 0314 	add.w	r3, r7, #20
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff fb03 	bl	80054ba <dir_register>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	e000      	b.n	8005eba <f_open+0xca>
 8005eb8:	2312      	movs	r3, #18
 8005eba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005ebe:	79fb      	ldrb	r3, [r7, #7]
 8005ec0:	f043 0308 	orr.w	r3, r3, #8
 8005ec4:	71fb      	strb	r3, [r7, #7]
 8005ec6:	e010      	b.n	8005eea <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005ec8:	7ebb      	ldrb	r3, [r7, #26]
 8005eca:	f003 0311 	and.w	r3, r3, #17
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d003      	beq.n	8005eda <f_open+0xea>
					res = FR_DENIED;
 8005ed2:	2307      	movs	r3, #7
 8005ed4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005ed8:	e007      	b.n	8005eea <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005eda:	79fb      	ldrb	r3, [r7, #7]
 8005edc:	f003 0304 	and.w	r3, r3, #4
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <f_open+0xfa>
 8005ee4:	2308      	movs	r3, #8
 8005ee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005eea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d168      	bne.n	8005fc4 <f_open+0x1d4>
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d063      	beq.n	8005fc4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8005efc:	f7fd fcb4 	bl	8003868 <get_fattime>
 8005f00:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005f02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f04:	330e      	adds	r3, #14
 8005f06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f7fe fae1 	bl	80044d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f10:	3316      	adds	r3, #22
 8005f12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f14:	4618      	mov	r0, r3
 8005f16:	f7fe fadb 	bl	80044d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f1c:	330b      	adds	r3, #11
 8005f1e:	2220      	movs	r2, #32
 8005f20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f26:	4611      	mov	r1, r2
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff fa32 	bl	8005392 <ld_clust>
 8005f2e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005f34:	2200      	movs	r2, #0
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7ff fa4a 	bl	80053d0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f3e:	331c      	adds	r3, #28
 8005f40:	2100      	movs	r1, #0
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe fac4 	bl	80044d0 <st_dword>
					fs->wflag = 1;
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d037      	beq.n	8005fc4 <f_open+0x1d4>
						dw = fs->winsect;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f58:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005f5a:	f107 0314 	add.w	r3, r7, #20
 8005f5e:	2200      	movs	r2, #0
 8005f60:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7fe ff5d 	bl	8004e22 <remove_chain>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8005f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d126      	bne.n	8005fc4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe fd02 	bl	8004984 <move_window>
 8005f80:	4603      	mov	r3, r0
 8005f82:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005f86:	693b      	ldr	r3, [r7, #16]
 8005f88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f8a:	3a01      	subs	r2, #1
 8005f8c:	60da      	str	r2, [r3, #12]
 8005f8e:	e019      	b.n	8005fc4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005f90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d115      	bne.n	8005fc4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005f98:	7ebb      	ldrb	r3, [r7, #26]
 8005f9a:	f003 0310 	and.w	r3, r3, #16
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <f_open+0x1ba>
					res = FR_NO_FILE;
 8005fa2:	2304      	movs	r3, #4
 8005fa4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8005fa8:	e00c      	b.n	8005fc4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005faa:	79fb      	ldrb	r3, [r7, #7]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d007      	beq.n	8005fc4 <f_open+0x1d4>
 8005fb4:	7ebb      	ldrb	r3, [r7, #26]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d002      	beq.n	8005fc4 <f_open+0x1d4>
						res = FR_DENIED;
 8005fbe:	2307      	movs	r3, #7
 8005fc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005fc4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d128      	bne.n	800601e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005fcc:	79fb      	ldrb	r3, [r7, #7]
 8005fce:	f003 0308 	and.w	r3, r3, #8
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8005fd6:	79fb      	ldrb	r3, [r7, #7]
 8005fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fdc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005fde:	693b      	ldr	r3, [r7, #16]
 8005fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8005fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005fec:	79fb      	ldrb	r3, [r7, #7]
 8005fee:	f023 0301 	bic.w	r3, r3, #1
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bf14      	ite	ne
 8005ff6:	2301      	movne	r3, #1
 8005ff8:	2300      	moveq	r3, #0
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	461a      	mov	r2, r3
 8005ffe:	f107 0314 	add.w	r3, r7, #20
 8006002:	4611      	mov	r1, r2
 8006004:	4618      	mov	r0, r3
 8006006:	f7fe fb8b 	bl	8004720 <inc_lock>
 800600a:	4602      	mov	r2, r0
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	691b      	ldr	r3, [r3, #16]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d102      	bne.n	800601e <f_open+0x22e>
 8006018:	2302      	movs	r3, #2
 800601a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800601e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006022:	2b00      	cmp	r3, #0
 8006024:	f040 8095 	bne.w	8006152 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800602c:	4611      	mov	r1, r2
 800602e:	4618      	mov	r0, r3
 8006030:	f7ff f9af 	bl	8005392 <ld_clust>
 8006034:	4602      	mov	r2, r0
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800603a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603c:	331c      	adds	r3, #28
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe fa08 	bl	8004454 <ld_dword>
 8006044:	4602      	mov	r2, r0
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006050:	693a      	ldr	r2, [r7, #16]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	88da      	ldrh	r2, [r3, #6]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	79fa      	ldrb	r2, [r7, #7]
 8006062:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2200      	movs	r2, #0
 8006068:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3330      	adds	r3, #48	; 0x30
 800607a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800607e:	2100      	movs	r1, #0
 8006080:	4618      	mov	r0, r3
 8006082:	f7fe fa72 	bl	800456a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006086:	79fb      	ldrb	r3, [r7, #7]
 8006088:	f003 0320 	and.w	r3, r3, #32
 800608c:	2b00      	cmp	r3, #0
 800608e:	d060      	beq.n	8006152 <f_open+0x362>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d05c      	beq.n	8006152 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	895b      	ldrh	r3, [r3, #10]
 80060a4:	025b      	lsls	r3, r3, #9
 80060a6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	657b      	str	r3, [r7, #84]	; 0x54
 80060b4:	e016      	b.n	80060e4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7fe fd1d 	bl	8004afa <get_fat>
 80060c0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80060c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d802      	bhi.n	80060ce <f_open+0x2de>
 80060c8:	2302      	movs	r3, #2
 80060ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80060ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d4:	d102      	bne.n	80060dc <f_open+0x2ec>
 80060d6:	2301      	movs	r3, #1
 80060d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80060dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	657b      	str	r3, [r7, #84]	; 0x54
 80060e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d103      	bne.n	80060f4 <f_open+0x304>
 80060ec:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80060ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d8e0      	bhi.n	80060b6 <f_open+0x2c6>
				}
				fp->clust = clst;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80060f8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80060fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d127      	bne.n	8006152 <f_open+0x362>
 8006102:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006108:	2b00      	cmp	r3, #0
 800610a:	d022      	beq.n	8006152 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006110:	4618      	mov	r0, r3
 8006112:	f7fe fcd3 	bl	8004abc <clust2sect>
 8006116:	6478      	str	r0, [r7, #68]	; 0x44
 8006118:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800611a:	2b00      	cmp	r3, #0
 800611c:	d103      	bne.n	8006126 <f_open+0x336>
						res = FR_INT_ERR;
 800611e:	2302      	movs	r3, #2
 8006120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006124:	e015      	b.n	8006152 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006128:	0a5a      	lsrs	r2, r3, #9
 800612a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800612c:	441a      	add	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	7858      	ldrb	r0, [r3, #1]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	6a1a      	ldr	r2, [r3, #32]
 8006140:	2301      	movs	r3, #1
 8006142:	f7fe f911 	bl	8004368 <disk_read>
 8006146:	4603      	mov	r3, r0
 8006148:	2b00      	cmp	r3, #0
 800614a:	d002      	beq.n	8006152 <f_open+0x362>
 800614c:	2301      	movs	r3, #1
 800614e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006152:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <f_open+0x370>
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006160:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006164:	4618      	mov	r0, r3
 8006166:	3760      	adds	r7, #96	; 0x60
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800616c:	b580      	push	{r7, lr}
 800616e:	b08e      	sub	sp, #56	; 0x38
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	607a      	str	r2, [r7, #4]
 8006178:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2200      	movs	r2, #0
 8006182:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f107 0214 	add.w	r2, r7, #20
 800618a:	4611      	mov	r1, r2
 800618c:	4618      	mov	r0, r3
 800618e:	f7ff fdb3 	bl	8005cf8 <validate>
 8006192:	4603      	mov	r3, r0
 8006194:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006198:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800619c:	2b00      	cmp	r3, #0
 800619e:	d107      	bne.n	80061b0 <f_read+0x44>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	7d5b      	ldrb	r3, [r3, #21]
 80061a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80061a8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <f_read+0x4a>
 80061b0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80061b4:	e115      	b.n	80063e2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	7d1b      	ldrb	r3, [r3, #20]
 80061ba:	f003 0301 	and.w	r3, r3, #1
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <f_read+0x5a>
 80061c2:	2307      	movs	r3, #7
 80061c4:	e10d      	b.n	80063e2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	1ad3      	subs	r3, r2, r3
 80061d0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	f240 80fe 	bls.w	80063d8 <f_read+0x26c>
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80061e0:	e0fa      	b.n	80063d8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f040 80c6 	bne.w	800637c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	699b      	ldr	r3, [r3, #24]
 80061f4:	0a5b      	lsrs	r3, r3, #9
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	8952      	ldrh	r2, [r2, #10]
 80061fa:	3a01      	subs	r2, #1
 80061fc:	4013      	ands	r3, r2
 80061fe:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d12f      	bne.n	8006266 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d103      	bne.n	8006216 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	633b      	str	r3, [r7, #48]	; 0x30
 8006214:	e013      	b.n	800623e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d007      	beq.n	800622e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	4619      	mov	r1, r3
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f7fe fef9 	bl	800501c <clmt_clust>
 800622a:	6338      	str	r0, [r7, #48]	; 0x30
 800622c:	e007      	b.n	800623e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	69db      	ldr	r3, [r3, #28]
 8006234:	4619      	mov	r1, r3
 8006236:	4610      	mov	r0, r2
 8006238:	f7fe fc5f 	bl	8004afa <get_fat>
 800623c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800623e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006240:	2b01      	cmp	r3, #1
 8006242:	d804      	bhi.n	800624e <f_read+0xe2>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2202      	movs	r2, #2
 8006248:	755a      	strb	r2, [r3, #21]
 800624a:	2302      	movs	r3, #2
 800624c:	e0c9      	b.n	80063e2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800624e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d104      	bne.n	8006260 <f_read+0xf4>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	755a      	strb	r2, [r3, #21]
 800625c:	2301      	movs	r3, #1
 800625e:	e0c0      	b.n	80063e2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006264:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	4619      	mov	r1, r3
 800626e:	4610      	mov	r0, r2
 8006270:	f7fe fc24 	bl	8004abc <clust2sect>
 8006274:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d104      	bne.n	8006286 <f_read+0x11a>
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2202      	movs	r2, #2
 8006280:	755a      	strb	r2, [r3, #21]
 8006282:	2302      	movs	r3, #2
 8006284:	e0ad      	b.n	80063e2 <f_read+0x276>
			sect += csect;
 8006286:	69ba      	ldr	r2, [r7, #24]
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	4413      	add	r3, r2
 800628c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	0a5b      	lsrs	r3, r3, #9
 8006292:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006296:	2b00      	cmp	r3, #0
 8006298:	d039      	beq.n	800630e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800629a:	69fa      	ldr	r2, [r7, #28]
 800629c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800629e:	4413      	add	r3, r2
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	8952      	ldrh	r2, [r2, #10]
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d905      	bls.n	80062b4 <f_read+0x148>
					cc = fs->csize - csect;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	895b      	ldrh	r3, [r3, #10]
 80062ac:	461a      	mov	r2, r3
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	7858      	ldrb	r0, [r3, #1]
 80062b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ba:	69ba      	ldr	r2, [r7, #24]
 80062bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062be:	f7fe f853 	bl	8004368 <disk_read>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <f_read+0x166>
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2201      	movs	r2, #1
 80062cc:	755a      	strb	r2, [r3, #21]
 80062ce:	2301      	movs	r3, #1
 80062d0:	e087      	b.n	80063e2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	7d1b      	ldrb	r3, [r3, #20]
 80062d6:	b25b      	sxtb	r3, r3
 80062d8:	2b00      	cmp	r3, #0
 80062da:	da14      	bge.n	8006306 <f_read+0x19a>
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a1a      	ldr	r2, [r3, #32]
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d90d      	bls.n	8006306 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	6a1a      	ldr	r2, [r3, #32]
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	025b      	lsls	r3, r3, #9
 80062f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80062f6:	18d0      	adds	r0, r2, r3
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	3330      	adds	r3, #48	; 0x30
 80062fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006300:	4619      	mov	r1, r3
 8006302:	f7fe f911 	bl	8004528 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006308:	025b      	lsls	r3, r3, #9
 800630a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800630c:	e050      	b.n	80063b0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6a1b      	ldr	r3, [r3, #32]
 8006312:	69ba      	ldr	r2, [r7, #24]
 8006314:	429a      	cmp	r2, r3
 8006316:	d02e      	beq.n	8006376 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	7d1b      	ldrb	r3, [r3, #20]
 800631c:	b25b      	sxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	da18      	bge.n	8006354 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	7858      	ldrb	r0, [r3, #1]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1a      	ldr	r2, [r3, #32]
 8006330:	2301      	movs	r3, #1
 8006332:	f7fe f839 	bl	80043a8 <disk_write>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d004      	beq.n	8006346 <f_read+0x1da>
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	2201      	movs	r2, #1
 8006340:	755a      	strb	r2, [r3, #21]
 8006342:	2301      	movs	r3, #1
 8006344:	e04d      	b.n	80063e2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	7d1b      	ldrb	r3, [r3, #20]
 800634a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800634e:	b2da      	uxtb	r2, r3
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006354:	697b      	ldr	r3, [r7, #20]
 8006356:	7858      	ldrb	r0, [r3, #1]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800635e:	2301      	movs	r3, #1
 8006360:	69ba      	ldr	r2, [r7, #24]
 8006362:	f7fe f801 	bl	8004368 <disk_read>
 8006366:	4603      	mov	r3, r0
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <f_read+0x20a>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2201      	movs	r2, #1
 8006370:	755a      	strb	r2, [r3, #21]
 8006372:	2301      	movs	r3, #1
 8006374:	e035      	b.n	80063e2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006384:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800638a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	429a      	cmp	r2, r3
 8006390:	d901      	bls.n	8006396 <f_read+0x22a>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063a4:	4413      	add	r3, r2
 80063a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a8:	4619      	mov	r1, r3
 80063aa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063ac:	f7fe f8bc 	bl	8004528 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80063b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80063b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063b4:	4413      	add	r3, r2
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	699a      	ldr	r2, [r3, #24]
 80063bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063be:	441a      	add	r2, r3
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	619a      	str	r2, [r3, #24]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063ca:	441a      	add	r2, r3
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	601a      	str	r2, [r3, #0]
 80063d0:	687a      	ldr	r2, [r7, #4]
 80063d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d4:	1ad3      	subs	r3, r2, r3
 80063d6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f47f af01 	bne.w	80061e2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3738      	adds	r7, #56	; 0x38
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b08c      	sub	sp, #48	; 0x30
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	60f8      	str	r0, [r7, #12]
 80063f2:	60b9      	str	r1, [r7, #8]
 80063f4:	607a      	str	r2, [r7, #4]
 80063f6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80063f8:	68bb      	ldr	r3, [r7, #8]
 80063fa:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f107 0210 	add.w	r2, r7, #16
 8006408:	4611      	mov	r1, r2
 800640a:	4618      	mov	r0, r3
 800640c:	f7ff fc74 	bl	8005cf8 <validate>
 8006410:	4603      	mov	r3, r0
 8006412:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006416:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800641a:	2b00      	cmp	r3, #0
 800641c:	d107      	bne.n	800642e <f_write+0x44>
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	7d5b      	ldrb	r3, [r3, #21]
 8006422:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006426:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800642a:	2b00      	cmp	r3, #0
 800642c:	d002      	beq.n	8006434 <f_write+0x4a>
 800642e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006432:	e14b      	b.n	80066cc <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	7d1b      	ldrb	r3, [r3, #20]
 8006438:	f003 0302 	and.w	r3, r3, #2
 800643c:	2b00      	cmp	r3, #0
 800643e:	d101      	bne.n	8006444 <f_write+0x5a>
 8006440:	2307      	movs	r3, #7
 8006442:	e143      	b.n	80066cc <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	699a      	ldr	r2, [r3, #24]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	441a      	add	r2, r3
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	429a      	cmp	r2, r3
 8006452:	f080 812d 	bcs.w	80066b0 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	699b      	ldr	r3, [r3, #24]
 800645a:	43db      	mvns	r3, r3
 800645c:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800645e:	e127      	b.n	80066b0 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006468:	2b00      	cmp	r3, #0
 800646a:	f040 80e3 	bne.w	8006634 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	699b      	ldr	r3, [r3, #24]
 8006472:	0a5b      	lsrs	r3, r3, #9
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	8952      	ldrh	r2, [r2, #10]
 8006478:	3a01      	subs	r2, #1
 800647a:	4013      	ands	r3, r2
 800647c:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d143      	bne.n	800650c <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d10c      	bne.n	80064a6 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	689b      	ldr	r3, [r3, #8]
 8006490:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006494:	2b00      	cmp	r3, #0
 8006496:	d11a      	bne.n	80064ce <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2100      	movs	r1, #0
 800649c:	4618      	mov	r0, r3
 800649e:	f7fe fd25 	bl	8004eec <create_chain>
 80064a2:	62b8      	str	r0, [r7, #40]	; 0x28
 80064a4:	e013      	b.n	80064ce <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d007      	beq.n	80064be <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	4619      	mov	r1, r3
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f7fe fdb1 	bl	800501c <clmt_clust>
 80064ba:	62b8      	str	r0, [r7, #40]	; 0x28
 80064bc:	e007      	b.n	80064ce <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	4619      	mov	r1, r3
 80064c6:	4610      	mov	r0, r2
 80064c8:	f7fe fd10 	bl	8004eec <create_chain>
 80064cc:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f000 80f2 	beq.w	80066ba <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80064d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d104      	bne.n	80064e6 <f_write+0xfc>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2202      	movs	r2, #2
 80064e0:	755a      	strb	r2, [r3, #21]
 80064e2:	2302      	movs	r3, #2
 80064e4:	e0f2      	b.n	80066cc <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d104      	bne.n	80064f8 <f_write+0x10e>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2201      	movs	r2, #1
 80064f2:	755a      	strb	r2, [r3, #21]
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0e9      	b.n	80066cc <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064fc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d102      	bne.n	800650c <f_write+0x122>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800650a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	7d1b      	ldrb	r3, [r3, #20]
 8006510:	b25b      	sxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	da18      	bge.n	8006548 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	7858      	ldrb	r0, [r3, #1]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6a1a      	ldr	r2, [r3, #32]
 8006524:	2301      	movs	r3, #1
 8006526:	f7fd ff3f 	bl	80043a8 <disk_write>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d004      	beq.n	800653a <f_write+0x150>
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2201      	movs	r2, #1
 8006534:	755a      	strb	r2, [r3, #21]
 8006536:	2301      	movs	r3, #1
 8006538:	e0c8      	b.n	80066cc <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	7d1b      	ldrb	r3, [r3, #20]
 800653e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006542:	b2da      	uxtb	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006548:	693a      	ldr	r2, [r7, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	4619      	mov	r1, r3
 8006550:	4610      	mov	r0, r2
 8006552:	f7fe fab3 	bl	8004abc <clust2sect>
 8006556:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d104      	bne.n	8006568 <f_write+0x17e>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2202      	movs	r2, #2
 8006562:	755a      	strb	r2, [r3, #21]
 8006564:	2302      	movs	r3, #2
 8006566:	e0b1      	b.n	80066cc <f_write+0x2e2>
			sect += csect;
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	4413      	add	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	0a5b      	lsrs	r3, r3, #9
 8006574:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d03c      	beq.n	80065f6 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	4413      	add	r3, r2
 8006582:	693a      	ldr	r2, [r7, #16]
 8006584:	8952      	ldrh	r2, [r2, #10]
 8006586:	4293      	cmp	r3, r2
 8006588:	d905      	bls.n	8006596 <f_write+0x1ac>
					cc = fs->csize - csect;
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	895b      	ldrh	r3, [r3, #10]
 800658e:	461a      	mov	r2, r3
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	7858      	ldrb	r0, [r3, #1]
 800659a:	6a3b      	ldr	r3, [r7, #32]
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	69f9      	ldr	r1, [r7, #28]
 80065a0:	f7fd ff02 	bl	80043a8 <disk_write>
 80065a4:	4603      	mov	r3, r0
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <f_write+0x1ca>
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2201      	movs	r2, #1
 80065ae:	755a      	strb	r2, [r3, #21]
 80065b0:	2301      	movs	r3, #1
 80065b2:	e08b      	b.n	80066cc <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	6a1a      	ldr	r2, [r3, #32]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	1ad3      	subs	r3, r2, r3
 80065bc:	6a3a      	ldr	r2, [r7, #32]
 80065be:	429a      	cmp	r2, r3
 80065c0:	d915      	bls.n	80065ee <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a1a      	ldr	r2, [r3, #32]
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	025b      	lsls	r3, r3, #9
 80065d2:	69fa      	ldr	r2, [r7, #28]
 80065d4:	4413      	add	r3, r2
 80065d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065da:	4619      	mov	r1, r3
 80065dc:	f7fd ffa4 	bl	8004528 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	7d1b      	ldrb	r3, [r3, #20]
 80065e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e8:	b2da      	uxtb	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	025b      	lsls	r3, r3, #9
 80065f2:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80065f4:	e03f      	b.n	8006676 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	6a1b      	ldr	r3, [r3, #32]
 80065fa:	697a      	ldr	r2, [r7, #20]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d016      	beq.n	800662e <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	699a      	ldr	r2, [r3, #24]
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006608:	429a      	cmp	r2, r3
 800660a:	d210      	bcs.n	800662e <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	7858      	ldrb	r0, [r3, #1]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006616:	2301      	movs	r3, #1
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	f7fd fea5 	bl	8004368 <disk_read>
 800661e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006620:	2b00      	cmp	r3, #0
 8006622:	d004      	beq.n	800662e <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2201      	movs	r2, #1
 8006628:	755a      	strb	r2, [r3, #21]
 800662a:	2301      	movs	r3, #1
 800662c:	e04e      	b.n	80066cc <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	697a      	ldr	r2, [r7, #20]
 8006632:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800663c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	429a      	cmp	r2, r3
 8006648:	d901      	bls.n	800664e <f_write+0x264>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	699b      	ldr	r3, [r3, #24]
 8006658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800665c:	4413      	add	r3, r2
 800665e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006660:	69f9      	ldr	r1, [r7, #28]
 8006662:	4618      	mov	r0, r3
 8006664:	f7fd ff60 	bl	8004528 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	7d1b      	ldrb	r3, [r3, #20]
 800666c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006670:	b2da      	uxtb	r2, r3
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006676:	69fa      	ldr	r2, [r7, #28]
 8006678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667a:	4413      	add	r3, r2
 800667c:	61fb      	str	r3, [r7, #28]
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006684:	441a      	add	r2, r3
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	619a      	str	r2, [r3, #24]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	68da      	ldr	r2, [r3, #12]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	699b      	ldr	r3, [r3, #24]
 8006692:	429a      	cmp	r2, r3
 8006694:	bf38      	it	cc
 8006696:	461a      	movcc	r2, r3
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	60da      	str	r2, [r3, #12]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	681a      	ldr	r2, [r3, #0]
 80066a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a2:	441a      	add	r2, r3
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	601a      	str	r2, [r3, #0]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f47f aed4 	bne.w	8006460 <f_write+0x76>
 80066b8:	e000      	b.n	80066bc <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80066ba:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	7d1b      	ldrb	r3, [r3, #20]
 80066c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80066ca:	2300      	movs	r3, #0
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3730      	adds	r7, #48	; 0x30
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f107 0208 	add.w	r2, r7, #8
 80066e2:	4611      	mov	r1, r2
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7ff fb07 	bl	8005cf8 <validate>
 80066ea:	4603      	mov	r3, r0
 80066ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80066ee:	7dfb      	ldrb	r3, [r7, #23]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d168      	bne.n	80067c6 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7d1b      	ldrb	r3, [r3, #20]
 80066f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d062      	beq.n	80067c6 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	7d1b      	ldrb	r3, [r3, #20]
 8006704:	b25b      	sxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	da15      	bge.n	8006736 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	7858      	ldrb	r0, [r3, #1]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a1a      	ldr	r2, [r3, #32]
 8006718:	2301      	movs	r3, #1
 800671a:	f7fd fe45 	bl	80043a8 <disk_write>
 800671e:	4603      	mov	r3, r0
 8006720:	2b00      	cmp	r3, #0
 8006722:	d001      	beq.n	8006728 <f_sync+0x54>
 8006724:	2301      	movs	r3, #1
 8006726:	e04f      	b.n	80067c8 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	7d1b      	ldrb	r3, [r3, #20]
 800672c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006730:	b2da      	uxtb	r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006736:	f7fd f897 	bl	8003868 <get_fattime>
 800673a:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006742:	4619      	mov	r1, r3
 8006744:	4610      	mov	r0, r2
 8006746:	f7fe f91d 	bl	8004984 <move_window>
 800674a:	4603      	mov	r3, r0
 800674c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800674e:	7dfb      	ldrb	r3, [r7, #23]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d138      	bne.n	80067c6 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006758:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	330b      	adds	r3, #11
 800675e:	781a      	ldrb	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	330b      	adds	r3, #11
 8006764:	f042 0220 	orr.w	r2, r2, #32
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6818      	ldr	r0, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	461a      	mov	r2, r3
 8006776:	68f9      	ldr	r1, [r7, #12]
 8006778:	f7fe fe2a 	bl	80053d0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f103 021c 	add.w	r2, r3, #28
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	4619      	mov	r1, r3
 8006788:	4610      	mov	r0, r2
 800678a:	f7fd fea1 	bl	80044d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3316      	adds	r3, #22
 8006792:	6939      	ldr	r1, [r7, #16]
 8006794:	4618      	mov	r0, r3
 8006796:	f7fd fe9b 	bl	80044d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3312      	adds	r3, #18
 800679e:	2100      	movs	r1, #0
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7fd fe7a 	bl	800449a <st_word>
					fs->wflag = 1;
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2201      	movs	r2, #1
 80067aa:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe f916 	bl	80049e0 <sync_fs>
 80067b4:	4603      	mov	r3, r0
 80067b6:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	7d1b      	ldrb	r3, [r3, #20]
 80067bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80067c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067c8:	4618      	mov	r0, r3
 80067ca:	3718      	adds	r7, #24
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f7ff ff7b 	bl	80066d4 <f_sync>
 80067de:	4603      	mov	r3, r0
 80067e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80067e2:	7bfb      	ldrb	r3, [r7, #15]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d118      	bne.n	800681a <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f107 0208 	add.w	r2, r7, #8
 80067ee:	4611      	mov	r1, r2
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7ff fa81 	bl	8005cf8 <validate>
 80067f6:	4603      	mov	r3, r0
 80067f8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80067fa:	7bfb      	ldrb	r3, [r7, #15]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d10c      	bne.n	800681a <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	4618      	mov	r0, r3
 8006806:	f7fe f819 	bl	800483c <dec_lock>
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800680e:	7bfb      	ldrb	r3, [r7, #15]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d102      	bne.n	800681a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800681a:	7bfb      	ldrb	r3, [r7, #15]
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b092      	sub	sp, #72	; 0x48
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006830:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8006834:	f107 030c 	add.w	r3, r7, #12
 8006838:	2200      	movs	r2, #0
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff f810 	bl	8005860 <find_volume>
 8006840:	4603      	mov	r3, r0
 8006842:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8006846:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800684a:	2b00      	cmp	r3, #0
 800684c:	f040 8099 	bne.w	8006982 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006858:	691a      	ldr	r2, [r3, #16]
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	695b      	ldr	r3, [r3, #20]
 800685e:	3b02      	subs	r3, #2
 8006860:	429a      	cmp	r2, r3
 8006862:	d804      	bhi.n	800686e <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006866:	691a      	ldr	r2, [r3, #16]
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	e089      	b.n	8006982 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800686e:	2300      	movs	r3, #0
 8006870:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d128      	bne.n	80068cc <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800687a:	2302      	movs	r3, #2
 800687c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006882:	f107 0314 	add.w	r3, r7, #20
 8006886:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006888:	4618      	mov	r0, r3
 800688a:	f7fe f936 	bl	8004afa <get_fat>
 800688e:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d103      	bne.n	80068a0 <f_getfree+0x7c>
 8006898:	2301      	movs	r3, #1
 800689a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800689e:	e063      	b.n	8006968 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80068a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d103      	bne.n	80068ae <f_getfree+0x8a>
 80068a6:	2302      	movs	r3, #2
 80068a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 80068ac:	e05c      	b.n	8006968 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80068ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <f_getfree+0x96>
 80068b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b6:	3301      	adds	r3, #1
 80068b8:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 80068ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068bc:	3301      	adds	r3, #1
 80068be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	695b      	ldr	r3, [r3, #20]
 80068c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80068c6:	429a      	cmp	r2, r3
 80068c8:	d3db      	bcc.n	8006882 <f_getfree+0x5e>
 80068ca:	e04d      	b.n	8006968 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80068cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ce:	695b      	ldr	r3, [r3, #20]
 80068d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80068d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	637b      	str	r3, [r7, #52]	; 0x34
 80068dc:	2300      	movs	r3, #0
 80068de:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80068e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d113      	bne.n	800690e <f_getfree+0xea>
							res = move_window(fs, sect++);
 80068e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	1c5a      	adds	r2, r3, #1
 80068ec:	63ba      	str	r2, [r7, #56]	; 0x38
 80068ee:	4619      	mov	r1, r3
 80068f0:	f7fe f848 	bl	8004984 <move_window>
 80068f4:	4603      	mov	r3, r0
 80068f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80068fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d131      	bne.n	8006966 <f_getfree+0x142>
							p = fs->win;
 8006902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006904:	3330      	adds	r3, #48	; 0x30
 8006906:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8006908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800690c:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800690e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006910:	781b      	ldrb	r3, [r3, #0]
 8006912:	2b02      	cmp	r3, #2
 8006914:	d10f      	bne.n	8006936 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006916:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006918:	f7fd fd84 	bl	8004424 <ld_word>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	d102      	bne.n	8006928 <f_getfree+0x104>
 8006922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006924:	3301      	adds	r3, #1
 8006926:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8006928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692a:	3302      	adds	r3, #2
 800692c:	633b      	str	r3, [r7, #48]	; 0x30
 800692e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006930:	3b02      	subs	r3, #2
 8006932:	637b      	str	r3, [r7, #52]	; 0x34
 8006934:	e010      	b.n	8006958 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006936:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006938:	f7fd fd8c 	bl	8004454 <ld_dword>
 800693c:	4603      	mov	r3, r0
 800693e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d102      	bne.n	800694c <f_getfree+0x128>
 8006946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006948:	3301      	adds	r3, #1
 800694a:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800694c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694e:	3304      	adds	r3, #4
 8006950:	633b      	str	r3, [r7, #48]	; 0x30
 8006952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006954:	3b04      	subs	r3, #4
 8006956:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8006958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800695a:	3b01      	subs	r3, #1
 800695c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800695e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1bd      	bne.n	80068e0 <f_getfree+0xbc>
 8006964:	e000      	b.n	8006968 <f_getfree+0x144>
							if (res != FR_OK) break;
 8006966:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800696c:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800696e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006970:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006972:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006976:	791a      	ldrb	r2, [r3, #4]
 8006978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697a:	f042 0201 	orr.w	r2, r2, #1
 800697e:	b2d2      	uxtb	r2, r2
 8006980:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006982:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006986:	4618      	mov	r0, r3
 8006988:	3748      	adds	r7, #72	; 0x48
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 800698e:	b580      	push	{r7, lr}
 8006990:	b088      	sub	sp, #32
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	607a      	str	r2, [r7, #4]
	int n = 0;
 800699a:	2300      	movs	r3, #0
 800699c:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80069a2:	e01b      	b.n	80069dc <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 80069a4:	f107 0310 	add.w	r3, r7, #16
 80069a8:	f107 0114 	add.w	r1, r7, #20
 80069ac:	2201      	movs	r2, #1
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff fbdc 	bl	800616c <f_read>
		if (rc != 1) break;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d116      	bne.n	80069e8 <f_gets+0x5a>
		c = s[0];
 80069ba:	7d3b      	ldrb	r3, [r7, #20]
 80069bc:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80069be:	7dfb      	ldrb	r3, [r7, #23]
 80069c0:	2b0d      	cmp	r3, #13
 80069c2:	d100      	bne.n	80069c6 <f_gets+0x38>
 80069c4:	e00a      	b.n	80069dc <f_gets+0x4e>
		*p++ = c;
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	1c5a      	adds	r2, r3, #1
 80069ca:	61ba      	str	r2, [r7, #24]
 80069cc:	7dfa      	ldrb	r2, [r7, #23]
 80069ce:	701a      	strb	r2, [r3, #0]
		n++;
 80069d0:	69fb      	ldr	r3, [r7, #28]
 80069d2:	3301      	adds	r3, #1
 80069d4:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80069d6:	7dfb      	ldrb	r3, [r7, #23]
 80069d8:	2b0a      	cmp	r3, #10
 80069da:	d007      	beq.n	80069ec <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	3b01      	subs	r3, #1
 80069e0:	69fa      	ldr	r2, [r7, #28]
 80069e2:	429a      	cmp	r2, r3
 80069e4:	dbde      	blt.n	80069a4 <f_gets+0x16>
 80069e6:	e002      	b.n	80069ee <f_gets+0x60>
		if (rc != 1) break;
 80069e8:	bf00      	nop
 80069ea:	e000      	b.n	80069ee <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 80069ec:	bf00      	nop
	}
	*p = 0;
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2200      	movs	r2, #0
 80069f2:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d001      	beq.n	80069fe <f_gets+0x70>
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	e000      	b.n	8006a00 <f_gets+0x72>
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3720      	adds	r7, #32
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	4613      	mov	r3, r2
 8006a14:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006a16:	2301      	movs	r3, #1
 8006a18:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006a1e:	4b1f      	ldr	r3, [pc, #124]	; (8006a9c <FATFS_LinkDriverEx+0x94>)
 8006a20:	7a5b      	ldrb	r3, [r3, #9]
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d131      	bne.n	8006a8c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006a28:	4b1c      	ldr	r3, [pc, #112]	; (8006a9c <FATFS_LinkDriverEx+0x94>)
 8006a2a:	7a5b      	ldrb	r3, [r3, #9]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	461a      	mov	r2, r3
 8006a30:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <FATFS_LinkDriverEx+0x94>)
 8006a32:	2100      	movs	r1, #0
 8006a34:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006a36:	4b19      	ldr	r3, [pc, #100]	; (8006a9c <FATFS_LinkDriverEx+0x94>)
 8006a38:	7a5b      	ldrb	r3, [r3, #9]
 8006a3a:	b2db      	uxtb	r3, r3
 8006a3c:	4a17      	ldr	r2, [pc, #92]	; (8006a9c <FATFS_LinkDriverEx+0x94>)
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006a46:	4b15      	ldr	r3, [pc, #84]	; (8006a9c <FATFS_LinkDriverEx+0x94>)
 8006a48:	7a5b      	ldrb	r3, [r3, #9]
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	4b13      	ldr	r3, [pc, #76]	; (8006a9c <FATFS_LinkDriverEx+0x94>)
 8006a50:	4413      	add	r3, r2
 8006a52:	79fa      	ldrb	r2, [r7, #7]
 8006a54:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006a56:	4b11      	ldr	r3, [pc, #68]	; (8006a9c <FATFS_LinkDriverEx+0x94>)
 8006a58:	7a5b      	ldrb	r3, [r3, #9]
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	b2d1      	uxtb	r1, r2
 8006a60:	4a0e      	ldr	r2, [pc, #56]	; (8006a9c <FATFS_LinkDriverEx+0x94>)
 8006a62:	7251      	strb	r1, [r2, #9]
 8006a64:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006a66:	7dbb      	ldrb	r3, [r7, #22]
 8006a68:	3330      	adds	r3, #48	; 0x30
 8006a6a:	b2da      	uxtb	r2, r3
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	3301      	adds	r3, #1
 8006a74:	223a      	movs	r2, #58	; 0x3a
 8006a76:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	3302      	adds	r3, #2
 8006a7c:	222f      	movs	r2, #47	; 0x2f
 8006a7e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	3303      	adds	r3, #3
 8006a84:	2200      	movs	r2, #0
 8006a86:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	20000464 	.word	0x20000464

08006aa0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006aaa:	2200      	movs	r2, #0
 8006aac:	6839      	ldr	r1, [r7, #0]
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f7ff ffaa 	bl	8006a08 <FATFS_LinkDriverEx>
 8006ab4:	4603      	mov	r3, r0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}
	...

08006ac0 <__errno>:
 8006ac0:	4b01      	ldr	r3, [pc, #4]	; (8006ac8 <__errno+0x8>)
 8006ac2:	6818      	ldr	r0, [r3, #0]
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop
 8006ac8:	20000024 	.word	0x20000024

08006acc <__libc_init_array>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	4d0d      	ldr	r5, [pc, #52]	; (8006b04 <__libc_init_array+0x38>)
 8006ad0:	4c0d      	ldr	r4, [pc, #52]	; (8006b08 <__libc_init_array+0x3c>)
 8006ad2:	1b64      	subs	r4, r4, r5
 8006ad4:	10a4      	asrs	r4, r4, #2
 8006ad6:	2600      	movs	r6, #0
 8006ad8:	42a6      	cmp	r6, r4
 8006ada:	d109      	bne.n	8006af0 <__libc_init_array+0x24>
 8006adc:	4d0b      	ldr	r5, [pc, #44]	; (8006b0c <__libc_init_array+0x40>)
 8006ade:	4c0c      	ldr	r4, [pc, #48]	; (8006b10 <__libc_init_array+0x44>)
 8006ae0:	f001 f824 	bl	8007b2c <_init>
 8006ae4:	1b64      	subs	r4, r4, r5
 8006ae6:	10a4      	asrs	r4, r4, #2
 8006ae8:	2600      	movs	r6, #0
 8006aea:	42a6      	cmp	r6, r4
 8006aec:	d105      	bne.n	8006afa <__libc_init_array+0x2e>
 8006aee:	bd70      	pop	{r4, r5, r6, pc}
 8006af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af4:	4798      	blx	r3
 8006af6:	3601      	adds	r6, #1
 8006af8:	e7ee      	b.n	8006ad8 <__libc_init_array+0xc>
 8006afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006afe:	4798      	blx	r3
 8006b00:	3601      	adds	r6, #1
 8006b02:	e7f2      	b.n	8006aea <__libc_init_array+0x1e>
 8006b04:	08007e90 	.word	0x08007e90
 8006b08:	08007e90 	.word	0x08007e90
 8006b0c:	08007e90 	.word	0x08007e90
 8006b10:	08007e94 	.word	0x08007e94

08006b14 <memset>:
 8006b14:	4402      	add	r2, r0
 8006b16:	4603      	mov	r3, r0
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d100      	bne.n	8006b1e <memset+0xa>
 8006b1c:	4770      	bx	lr
 8006b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8006b22:	e7f9      	b.n	8006b18 <memset+0x4>

08006b24 <iprintf>:
 8006b24:	b40f      	push	{r0, r1, r2, r3}
 8006b26:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <iprintf+0x2c>)
 8006b28:	b513      	push	{r0, r1, r4, lr}
 8006b2a:	681c      	ldr	r4, [r3, #0]
 8006b2c:	b124      	cbz	r4, 8006b38 <iprintf+0x14>
 8006b2e:	69a3      	ldr	r3, [r4, #24]
 8006b30:	b913      	cbnz	r3, 8006b38 <iprintf+0x14>
 8006b32:	4620      	mov	r0, r4
 8006b34:	f000 fa5e 	bl	8006ff4 <__sinit>
 8006b38:	ab05      	add	r3, sp, #20
 8006b3a:	9a04      	ldr	r2, [sp, #16]
 8006b3c:	68a1      	ldr	r1, [r4, #8]
 8006b3e:	9301      	str	r3, [sp, #4]
 8006b40:	4620      	mov	r0, r4
 8006b42:	f000 fc67 	bl	8007414 <_vfiprintf_r>
 8006b46:	b002      	add	sp, #8
 8006b48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b4c:	b004      	add	sp, #16
 8006b4e:	4770      	bx	lr
 8006b50:	20000024 	.word	0x20000024

08006b54 <_puts_r>:
 8006b54:	b570      	push	{r4, r5, r6, lr}
 8006b56:	460e      	mov	r6, r1
 8006b58:	4605      	mov	r5, r0
 8006b5a:	b118      	cbz	r0, 8006b64 <_puts_r+0x10>
 8006b5c:	6983      	ldr	r3, [r0, #24]
 8006b5e:	b90b      	cbnz	r3, 8006b64 <_puts_r+0x10>
 8006b60:	f000 fa48 	bl	8006ff4 <__sinit>
 8006b64:	69ab      	ldr	r3, [r5, #24]
 8006b66:	68ac      	ldr	r4, [r5, #8]
 8006b68:	b913      	cbnz	r3, 8006b70 <_puts_r+0x1c>
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	f000 fa42 	bl	8006ff4 <__sinit>
 8006b70:	4b2c      	ldr	r3, [pc, #176]	; (8006c24 <_puts_r+0xd0>)
 8006b72:	429c      	cmp	r4, r3
 8006b74:	d120      	bne.n	8006bb8 <_puts_r+0x64>
 8006b76:	686c      	ldr	r4, [r5, #4]
 8006b78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b7a:	07db      	lsls	r3, r3, #31
 8006b7c:	d405      	bmi.n	8006b8a <_puts_r+0x36>
 8006b7e:	89a3      	ldrh	r3, [r4, #12]
 8006b80:	0598      	lsls	r0, r3, #22
 8006b82:	d402      	bmi.n	8006b8a <_puts_r+0x36>
 8006b84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b86:	f000 fad3 	bl	8007130 <__retarget_lock_acquire_recursive>
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	0719      	lsls	r1, r3, #28
 8006b8e:	d51d      	bpl.n	8006bcc <_puts_r+0x78>
 8006b90:	6923      	ldr	r3, [r4, #16]
 8006b92:	b1db      	cbz	r3, 8006bcc <_puts_r+0x78>
 8006b94:	3e01      	subs	r6, #1
 8006b96:	68a3      	ldr	r3, [r4, #8]
 8006b98:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b9c:	3b01      	subs	r3, #1
 8006b9e:	60a3      	str	r3, [r4, #8]
 8006ba0:	bb39      	cbnz	r1, 8006bf2 <_puts_r+0x9e>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	da38      	bge.n	8006c18 <_puts_r+0xc4>
 8006ba6:	4622      	mov	r2, r4
 8006ba8:	210a      	movs	r1, #10
 8006baa:	4628      	mov	r0, r5
 8006bac:	f000 f848 	bl	8006c40 <__swbuf_r>
 8006bb0:	3001      	adds	r0, #1
 8006bb2:	d011      	beq.n	8006bd8 <_puts_r+0x84>
 8006bb4:	250a      	movs	r5, #10
 8006bb6:	e011      	b.n	8006bdc <_puts_r+0x88>
 8006bb8:	4b1b      	ldr	r3, [pc, #108]	; (8006c28 <_puts_r+0xd4>)
 8006bba:	429c      	cmp	r4, r3
 8006bbc:	d101      	bne.n	8006bc2 <_puts_r+0x6e>
 8006bbe:	68ac      	ldr	r4, [r5, #8]
 8006bc0:	e7da      	b.n	8006b78 <_puts_r+0x24>
 8006bc2:	4b1a      	ldr	r3, [pc, #104]	; (8006c2c <_puts_r+0xd8>)
 8006bc4:	429c      	cmp	r4, r3
 8006bc6:	bf08      	it	eq
 8006bc8:	68ec      	ldreq	r4, [r5, #12]
 8006bca:	e7d5      	b.n	8006b78 <_puts_r+0x24>
 8006bcc:	4621      	mov	r1, r4
 8006bce:	4628      	mov	r0, r5
 8006bd0:	f000 f888 	bl	8006ce4 <__swsetup_r>
 8006bd4:	2800      	cmp	r0, #0
 8006bd6:	d0dd      	beq.n	8006b94 <_puts_r+0x40>
 8006bd8:	f04f 35ff 	mov.w	r5, #4294967295
 8006bdc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bde:	07da      	lsls	r2, r3, #31
 8006be0:	d405      	bmi.n	8006bee <_puts_r+0x9a>
 8006be2:	89a3      	ldrh	r3, [r4, #12]
 8006be4:	059b      	lsls	r3, r3, #22
 8006be6:	d402      	bmi.n	8006bee <_puts_r+0x9a>
 8006be8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bea:	f000 faa2 	bl	8007132 <__retarget_lock_release_recursive>
 8006bee:	4628      	mov	r0, r5
 8006bf0:	bd70      	pop	{r4, r5, r6, pc}
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	da04      	bge.n	8006c00 <_puts_r+0xac>
 8006bf6:	69a2      	ldr	r2, [r4, #24]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	dc06      	bgt.n	8006c0a <_puts_r+0xb6>
 8006bfc:	290a      	cmp	r1, #10
 8006bfe:	d004      	beq.n	8006c0a <_puts_r+0xb6>
 8006c00:	6823      	ldr	r3, [r4, #0]
 8006c02:	1c5a      	adds	r2, r3, #1
 8006c04:	6022      	str	r2, [r4, #0]
 8006c06:	7019      	strb	r1, [r3, #0]
 8006c08:	e7c5      	b.n	8006b96 <_puts_r+0x42>
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	f000 f817 	bl	8006c40 <__swbuf_r>
 8006c12:	3001      	adds	r0, #1
 8006c14:	d1bf      	bne.n	8006b96 <_puts_r+0x42>
 8006c16:	e7df      	b.n	8006bd8 <_puts_r+0x84>
 8006c18:	6823      	ldr	r3, [r4, #0]
 8006c1a:	250a      	movs	r5, #10
 8006c1c:	1c5a      	adds	r2, r3, #1
 8006c1e:	6022      	str	r2, [r4, #0]
 8006c20:	701d      	strb	r5, [r3, #0]
 8006c22:	e7db      	b.n	8006bdc <_puts_r+0x88>
 8006c24:	08007e14 	.word	0x08007e14
 8006c28:	08007e34 	.word	0x08007e34
 8006c2c:	08007df4 	.word	0x08007df4

08006c30 <puts>:
 8006c30:	4b02      	ldr	r3, [pc, #8]	; (8006c3c <puts+0xc>)
 8006c32:	4601      	mov	r1, r0
 8006c34:	6818      	ldr	r0, [r3, #0]
 8006c36:	f7ff bf8d 	b.w	8006b54 <_puts_r>
 8006c3a:	bf00      	nop
 8006c3c:	20000024 	.word	0x20000024

08006c40 <__swbuf_r>:
 8006c40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c42:	460e      	mov	r6, r1
 8006c44:	4614      	mov	r4, r2
 8006c46:	4605      	mov	r5, r0
 8006c48:	b118      	cbz	r0, 8006c52 <__swbuf_r+0x12>
 8006c4a:	6983      	ldr	r3, [r0, #24]
 8006c4c:	b90b      	cbnz	r3, 8006c52 <__swbuf_r+0x12>
 8006c4e:	f000 f9d1 	bl	8006ff4 <__sinit>
 8006c52:	4b21      	ldr	r3, [pc, #132]	; (8006cd8 <__swbuf_r+0x98>)
 8006c54:	429c      	cmp	r4, r3
 8006c56:	d12b      	bne.n	8006cb0 <__swbuf_r+0x70>
 8006c58:	686c      	ldr	r4, [r5, #4]
 8006c5a:	69a3      	ldr	r3, [r4, #24]
 8006c5c:	60a3      	str	r3, [r4, #8]
 8006c5e:	89a3      	ldrh	r3, [r4, #12]
 8006c60:	071a      	lsls	r2, r3, #28
 8006c62:	d52f      	bpl.n	8006cc4 <__swbuf_r+0x84>
 8006c64:	6923      	ldr	r3, [r4, #16]
 8006c66:	b36b      	cbz	r3, 8006cc4 <__swbuf_r+0x84>
 8006c68:	6923      	ldr	r3, [r4, #16]
 8006c6a:	6820      	ldr	r0, [r4, #0]
 8006c6c:	1ac0      	subs	r0, r0, r3
 8006c6e:	6963      	ldr	r3, [r4, #20]
 8006c70:	b2f6      	uxtb	r6, r6
 8006c72:	4283      	cmp	r3, r0
 8006c74:	4637      	mov	r7, r6
 8006c76:	dc04      	bgt.n	8006c82 <__swbuf_r+0x42>
 8006c78:	4621      	mov	r1, r4
 8006c7a:	4628      	mov	r0, r5
 8006c7c:	f000 f926 	bl	8006ecc <_fflush_r>
 8006c80:	bb30      	cbnz	r0, 8006cd0 <__swbuf_r+0x90>
 8006c82:	68a3      	ldr	r3, [r4, #8]
 8006c84:	3b01      	subs	r3, #1
 8006c86:	60a3      	str	r3, [r4, #8]
 8006c88:	6823      	ldr	r3, [r4, #0]
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	6022      	str	r2, [r4, #0]
 8006c8e:	701e      	strb	r6, [r3, #0]
 8006c90:	6963      	ldr	r3, [r4, #20]
 8006c92:	3001      	adds	r0, #1
 8006c94:	4283      	cmp	r3, r0
 8006c96:	d004      	beq.n	8006ca2 <__swbuf_r+0x62>
 8006c98:	89a3      	ldrh	r3, [r4, #12]
 8006c9a:	07db      	lsls	r3, r3, #31
 8006c9c:	d506      	bpl.n	8006cac <__swbuf_r+0x6c>
 8006c9e:	2e0a      	cmp	r6, #10
 8006ca0:	d104      	bne.n	8006cac <__swbuf_r+0x6c>
 8006ca2:	4621      	mov	r1, r4
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	f000 f911 	bl	8006ecc <_fflush_r>
 8006caa:	b988      	cbnz	r0, 8006cd0 <__swbuf_r+0x90>
 8006cac:	4638      	mov	r0, r7
 8006cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cb0:	4b0a      	ldr	r3, [pc, #40]	; (8006cdc <__swbuf_r+0x9c>)
 8006cb2:	429c      	cmp	r4, r3
 8006cb4:	d101      	bne.n	8006cba <__swbuf_r+0x7a>
 8006cb6:	68ac      	ldr	r4, [r5, #8]
 8006cb8:	e7cf      	b.n	8006c5a <__swbuf_r+0x1a>
 8006cba:	4b09      	ldr	r3, [pc, #36]	; (8006ce0 <__swbuf_r+0xa0>)
 8006cbc:	429c      	cmp	r4, r3
 8006cbe:	bf08      	it	eq
 8006cc0:	68ec      	ldreq	r4, [r5, #12]
 8006cc2:	e7ca      	b.n	8006c5a <__swbuf_r+0x1a>
 8006cc4:	4621      	mov	r1, r4
 8006cc6:	4628      	mov	r0, r5
 8006cc8:	f000 f80c 	bl	8006ce4 <__swsetup_r>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d0cb      	beq.n	8006c68 <__swbuf_r+0x28>
 8006cd0:	f04f 37ff 	mov.w	r7, #4294967295
 8006cd4:	e7ea      	b.n	8006cac <__swbuf_r+0x6c>
 8006cd6:	bf00      	nop
 8006cd8:	08007e14 	.word	0x08007e14
 8006cdc:	08007e34 	.word	0x08007e34
 8006ce0:	08007df4 	.word	0x08007df4

08006ce4 <__swsetup_r>:
 8006ce4:	4b32      	ldr	r3, [pc, #200]	; (8006db0 <__swsetup_r+0xcc>)
 8006ce6:	b570      	push	{r4, r5, r6, lr}
 8006ce8:	681d      	ldr	r5, [r3, #0]
 8006cea:	4606      	mov	r6, r0
 8006cec:	460c      	mov	r4, r1
 8006cee:	b125      	cbz	r5, 8006cfa <__swsetup_r+0x16>
 8006cf0:	69ab      	ldr	r3, [r5, #24]
 8006cf2:	b913      	cbnz	r3, 8006cfa <__swsetup_r+0x16>
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	f000 f97d 	bl	8006ff4 <__sinit>
 8006cfa:	4b2e      	ldr	r3, [pc, #184]	; (8006db4 <__swsetup_r+0xd0>)
 8006cfc:	429c      	cmp	r4, r3
 8006cfe:	d10f      	bne.n	8006d20 <__swsetup_r+0x3c>
 8006d00:	686c      	ldr	r4, [r5, #4]
 8006d02:	89a3      	ldrh	r3, [r4, #12]
 8006d04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d08:	0719      	lsls	r1, r3, #28
 8006d0a:	d42c      	bmi.n	8006d66 <__swsetup_r+0x82>
 8006d0c:	06dd      	lsls	r5, r3, #27
 8006d0e:	d411      	bmi.n	8006d34 <__swsetup_r+0x50>
 8006d10:	2309      	movs	r3, #9
 8006d12:	6033      	str	r3, [r6, #0]
 8006d14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d18:	81a3      	strh	r3, [r4, #12]
 8006d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1e:	e03e      	b.n	8006d9e <__swsetup_r+0xba>
 8006d20:	4b25      	ldr	r3, [pc, #148]	; (8006db8 <__swsetup_r+0xd4>)
 8006d22:	429c      	cmp	r4, r3
 8006d24:	d101      	bne.n	8006d2a <__swsetup_r+0x46>
 8006d26:	68ac      	ldr	r4, [r5, #8]
 8006d28:	e7eb      	b.n	8006d02 <__swsetup_r+0x1e>
 8006d2a:	4b24      	ldr	r3, [pc, #144]	; (8006dbc <__swsetup_r+0xd8>)
 8006d2c:	429c      	cmp	r4, r3
 8006d2e:	bf08      	it	eq
 8006d30:	68ec      	ldreq	r4, [r5, #12]
 8006d32:	e7e6      	b.n	8006d02 <__swsetup_r+0x1e>
 8006d34:	0758      	lsls	r0, r3, #29
 8006d36:	d512      	bpl.n	8006d5e <__swsetup_r+0x7a>
 8006d38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d3a:	b141      	cbz	r1, 8006d4e <__swsetup_r+0x6a>
 8006d3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d40:	4299      	cmp	r1, r3
 8006d42:	d002      	beq.n	8006d4a <__swsetup_r+0x66>
 8006d44:	4630      	mov	r0, r6
 8006d46:	f000 fa5b 	bl	8007200 <_free_r>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	6363      	str	r3, [r4, #52]	; 0x34
 8006d4e:	89a3      	ldrh	r3, [r4, #12]
 8006d50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d54:	81a3      	strh	r3, [r4, #12]
 8006d56:	2300      	movs	r3, #0
 8006d58:	6063      	str	r3, [r4, #4]
 8006d5a:	6923      	ldr	r3, [r4, #16]
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	89a3      	ldrh	r3, [r4, #12]
 8006d60:	f043 0308 	orr.w	r3, r3, #8
 8006d64:	81a3      	strh	r3, [r4, #12]
 8006d66:	6923      	ldr	r3, [r4, #16]
 8006d68:	b94b      	cbnz	r3, 8006d7e <__swsetup_r+0x9a>
 8006d6a:	89a3      	ldrh	r3, [r4, #12]
 8006d6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d74:	d003      	beq.n	8006d7e <__swsetup_r+0x9a>
 8006d76:	4621      	mov	r1, r4
 8006d78:	4630      	mov	r0, r6
 8006d7a:	f000 fa01 	bl	8007180 <__smakebuf_r>
 8006d7e:	89a0      	ldrh	r0, [r4, #12]
 8006d80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d84:	f010 0301 	ands.w	r3, r0, #1
 8006d88:	d00a      	beq.n	8006da0 <__swsetup_r+0xbc>
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60a3      	str	r3, [r4, #8]
 8006d8e:	6963      	ldr	r3, [r4, #20]
 8006d90:	425b      	negs	r3, r3
 8006d92:	61a3      	str	r3, [r4, #24]
 8006d94:	6923      	ldr	r3, [r4, #16]
 8006d96:	b943      	cbnz	r3, 8006daa <__swsetup_r+0xc6>
 8006d98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d9c:	d1ba      	bne.n	8006d14 <__swsetup_r+0x30>
 8006d9e:	bd70      	pop	{r4, r5, r6, pc}
 8006da0:	0781      	lsls	r1, r0, #30
 8006da2:	bf58      	it	pl
 8006da4:	6963      	ldrpl	r3, [r4, #20]
 8006da6:	60a3      	str	r3, [r4, #8]
 8006da8:	e7f4      	b.n	8006d94 <__swsetup_r+0xb0>
 8006daa:	2000      	movs	r0, #0
 8006dac:	e7f7      	b.n	8006d9e <__swsetup_r+0xba>
 8006dae:	bf00      	nop
 8006db0:	20000024 	.word	0x20000024
 8006db4:	08007e14 	.word	0x08007e14
 8006db8:	08007e34 	.word	0x08007e34
 8006dbc:	08007df4 	.word	0x08007df4

08006dc0 <__sflush_r>:
 8006dc0:	898a      	ldrh	r2, [r1, #12]
 8006dc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dc6:	4605      	mov	r5, r0
 8006dc8:	0710      	lsls	r0, r2, #28
 8006dca:	460c      	mov	r4, r1
 8006dcc:	d458      	bmi.n	8006e80 <__sflush_r+0xc0>
 8006dce:	684b      	ldr	r3, [r1, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	dc05      	bgt.n	8006de0 <__sflush_r+0x20>
 8006dd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dc02      	bgt.n	8006de0 <__sflush_r+0x20>
 8006dda:	2000      	movs	r0, #0
 8006ddc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006de0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006de2:	2e00      	cmp	r6, #0
 8006de4:	d0f9      	beq.n	8006dda <__sflush_r+0x1a>
 8006de6:	2300      	movs	r3, #0
 8006de8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006dec:	682f      	ldr	r7, [r5, #0]
 8006dee:	602b      	str	r3, [r5, #0]
 8006df0:	d032      	beq.n	8006e58 <__sflush_r+0x98>
 8006df2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006df4:	89a3      	ldrh	r3, [r4, #12]
 8006df6:	075a      	lsls	r2, r3, #29
 8006df8:	d505      	bpl.n	8006e06 <__sflush_r+0x46>
 8006dfa:	6863      	ldr	r3, [r4, #4]
 8006dfc:	1ac0      	subs	r0, r0, r3
 8006dfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e00:	b10b      	cbz	r3, 8006e06 <__sflush_r+0x46>
 8006e02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e04:	1ac0      	subs	r0, r0, r3
 8006e06:	2300      	movs	r3, #0
 8006e08:	4602      	mov	r2, r0
 8006e0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e0c:	6a21      	ldr	r1, [r4, #32]
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b0      	blx	r6
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	d106      	bne.n	8006e26 <__sflush_r+0x66>
 8006e18:	6829      	ldr	r1, [r5, #0]
 8006e1a:	291d      	cmp	r1, #29
 8006e1c:	d82c      	bhi.n	8006e78 <__sflush_r+0xb8>
 8006e1e:	4a2a      	ldr	r2, [pc, #168]	; (8006ec8 <__sflush_r+0x108>)
 8006e20:	40ca      	lsrs	r2, r1
 8006e22:	07d6      	lsls	r6, r2, #31
 8006e24:	d528      	bpl.n	8006e78 <__sflush_r+0xb8>
 8006e26:	2200      	movs	r2, #0
 8006e28:	6062      	str	r2, [r4, #4]
 8006e2a:	04d9      	lsls	r1, r3, #19
 8006e2c:	6922      	ldr	r2, [r4, #16]
 8006e2e:	6022      	str	r2, [r4, #0]
 8006e30:	d504      	bpl.n	8006e3c <__sflush_r+0x7c>
 8006e32:	1c42      	adds	r2, r0, #1
 8006e34:	d101      	bne.n	8006e3a <__sflush_r+0x7a>
 8006e36:	682b      	ldr	r3, [r5, #0]
 8006e38:	b903      	cbnz	r3, 8006e3c <__sflush_r+0x7c>
 8006e3a:	6560      	str	r0, [r4, #84]	; 0x54
 8006e3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e3e:	602f      	str	r7, [r5, #0]
 8006e40:	2900      	cmp	r1, #0
 8006e42:	d0ca      	beq.n	8006dda <__sflush_r+0x1a>
 8006e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e48:	4299      	cmp	r1, r3
 8006e4a:	d002      	beq.n	8006e52 <__sflush_r+0x92>
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	f000 f9d7 	bl	8007200 <_free_r>
 8006e52:	2000      	movs	r0, #0
 8006e54:	6360      	str	r0, [r4, #52]	; 0x34
 8006e56:	e7c1      	b.n	8006ddc <__sflush_r+0x1c>
 8006e58:	6a21      	ldr	r1, [r4, #32]
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4628      	mov	r0, r5
 8006e5e:	47b0      	blx	r6
 8006e60:	1c41      	adds	r1, r0, #1
 8006e62:	d1c7      	bne.n	8006df4 <__sflush_r+0x34>
 8006e64:	682b      	ldr	r3, [r5, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d0c4      	beq.n	8006df4 <__sflush_r+0x34>
 8006e6a:	2b1d      	cmp	r3, #29
 8006e6c:	d001      	beq.n	8006e72 <__sflush_r+0xb2>
 8006e6e:	2b16      	cmp	r3, #22
 8006e70:	d101      	bne.n	8006e76 <__sflush_r+0xb6>
 8006e72:	602f      	str	r7, [r5, #0]
 8006e74:	e7b1      	b.n	8006dda <__sflush_r+0x1a>
 8006e76:	89a3      	ldrh	r3, [r4, #12]
 8006e78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e7c:	81a3      	strh	r3, [r4, #12]
 8006e7e:	e7ad      	b.n	8006ddc <__sflush_r+0x1c>
 8006e80:	690f      	ldr	r7, [r1, #16]
 8006e82:	2f00      	cmp	r7, #0
 8006e84:	d0a9      	beq.n	8006dda <__sflush_r+0x1a>
 8006e86:	0793      	lsls	r3, r2, #30
 8006e88:	680e      	ldr	r6, [r1, #0]
 8006e8a:	bf08      	it	eq
 8006e8c:	694b      	ldreq	r3, [r1, #20]
 8006e8e:	600f      	str	r7, [r1, #0]
 8006e90:	bf18      	it	ne
 8006e92:	2300      	movne	r3, #0
 8006e94:	eba6 0807 	sub.w	r8, r6, r7
 8006e98:	608b      	str	r3, [r1, #8]
 8006e9a:	f1b8 0f00 	cmp.w	r8, #0
 8006e9e:	dd9c      	ble.n	8006dda <__sflush_r+0x1a>
 8006ea0:	6a21      	ldr	r1, [r4, #32]
 8006ea2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ea4:	4643      	mov	r3, r8
 8006ea6:	463a      	mov	r2, r7
 8006ea8:	4628      	mov	r0, r5
 8006eaa:	47b0      	blx	r6
 8006eac:	2800      	cmp	r0, #0
 8006eae:	dc06      	bgt.n	8006ebe <__sflush_r+0xfe>
 8006eb0:	89a3      	ldrh	r3, [r4, #12]
 8006eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	e78e      	b.n	8006ddc <__sflush_r+0x1c>
 8006ebe:	4407      	add	r7, r0
 8006ec0:	eba8 0800 	sub.w	r8, r8, r0
 8006ec4:	e7e9      	b.n	8006e9a <__sflush_r+0xda>
 8006ec6:	bf00      	nop
 8006ec8:	20400001 	.word	0x20400001

08006ecc <_fflush_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	690b      	ldr	r3, [r1, #16]
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	b913      	cbnz	r3, 8006edc <_fflush_r+0x10>
 8006ed6:	2500      	movs	r5, #0
 8006ed8:	4628      	mov	r0, r5
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	b118      	cbz	r0, 8006ee6 <_fflush_r+0x1a>
 8006ede:	6983      	ldr	r3, [r0, #24]
 8006ee0:	b90b      	cbnz	r3, 8006ee6 <_fflush_r+0x1a>
 8006ee2:	f000 f887 	bl	8006ff4 <__sinit>
 8006ee6:	4b14      	ldr	r3, [pc, #80]	; (8006f38 <_fflush_r+0x6c>)
 8006ee8:	429c      	cmp	r4, r3
 8006eea:	d11b      	bne.n	8006f24 <_fflush_r+0x58>
 8006eec:	686c      	ldr	r4, [r5, #4]
 8006eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0ef      	beq.n	8006ed6 <_fflush_r+0xa>
 8006ef6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ef8:	07d0      	lsls	r0, r2, #31
 8006efa:	d404      	bmi.n	8006f06 <_fflush_r+0x3a>
 8006efc:	0599      	lsls	r1, r3, #22
 8006efe:	d402      	bmi.n	8006f06 <_fflush_r+0x3a>
 8006f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f02:	f000 f915 	bl	8007130 <__retarget_lock_acquire_recursive>
 8006f06:	4628      	mov	r0, r5
 8006f08:	4621      	mov	r1, r4
 8006f0a:	f7ff ff59 	bl	8006dc0 <__sflush_r>
 8006f0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f10:	07da      	lsls	r2, r3, #31
 8006f12:	4605      	mov	r5, r0
 8006f14:	d4e0      	bmi.n	8006ed8 <_fflush_r+0xc>
 8006f16:	89a3      	ldrh	r3, [r4, #12]
 8006f18:	059b      	lsls	r3, r3, #22
 8006f1a:	d4dd      	bmi.n	8006ed8 <_fflush_r+0xc>
 8006f1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f1e:	f000 f908 	bl	8007132 <__retarget_lock_release_recursive>
 8006f22:	e7d9      	b.n	8006ed8 <_fflush_r+0xc>
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <_fflush_r+0x70>)
 8006f26:	429c      	cmp	r4, r3
 8006f28:	d101      	bne.n	8006f2e <_fflush_r+0x62>
 8006f2a:	68ac      	ldr	r4, [r5, #8]
 8006f2c:	e7df      	b.n	8006eee <_fflush_r+0x22>
 8006f2e:	4b04      	ldr	r3, [pc, #16]	; (8006f40 <_fflush_r+0x74>)
 8006f30:	429c      	cmp	r4, r3
 8006f32:	bf08      	it	eq
 8006f34:	68ec      	ldreq	r4, [r5, #12]
 8006f36:	e7da      	b.n	8006eee <_fflush_r+0x22>
 8006f38:	08007e14 	.word	0x08007e14
 8006f3c:	08007e34 	.word	0x08007e34
 8006f40:	08007df4 	.word	0x08007df4

08006f44 <std>:
 8006f44:	2300      	movs	r3, #0
 8006f46:	b510      	push	{r4, lr}
 8006f48:	4604      	mov	r4, r0
 8006f4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f52:	6083      	str	r3, [r0, #8]
 8006f54:	8181      	strh	r1, [r0, #12]
 8006f56:	6643      	str	r3, [r0, #100]	; 0x64
 8006f58:	81c2      	strh	r2, [r0, #14]
 8006f5a:	6183      	str	r3, [r0, #24]
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	2208      	movs	r2, #8
 8006f60:	305c      	adds	r0, #92	; 0x5c
 8006f62:	f7ff fdd7 	bl	8006b14 <memset>
 8006f66:	4b05      	ldr	r3, [pc, #20]	; (8006f7c <std+0x38>)
 8006f68:	6263      	str	r3, [r4, #36]	; 0x24
 8006f6a:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <std+0x3c>)
 8006f6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f6e:	4b05      	ldr	r3, [pc, #20]	; (8006f84 <std+0x40>)
 8006f70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f72:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <std+0x44>)
 8006f74:	6224      	str	r4, [r4, #32]
 8006f76:	6323      	str	r3, [r4, #48]	; 0x30
 8006f78:	bd10      	pop	{r4, pc}
 8006f7a:	bf00      	nop
 8006f7c:	080079bd 	.word	0x080079bd
 8006f80:	080079df 	.word	0x080079df
 8006f84:	08007a17 	.word	0x08007a17
 8006f88:	08007a3b 	.word	0x08007a3b

08006f8c <_cleanup_r>:
 8006f8c:	4901      	ldr	r1, [pc, #4]	; (8006f94 <_cleanup_r+0x8>)
 8006f8e:	f000 b8af 	b.w	80070f0 <_fwalk_reent>
 8006f92:	bf00      	nop
 8006f94:	08006ecd 	.word	0x08006ecd

08006f98 <__sfmoreglue>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	2268      	movs	r2, #104	; 0x68
 8006f9c:	1e4d      	subs	r5, r1, #1
 8006f9e:	4355      	muls	r5, r2
 8006fa0:	460e      	mov	r6, r1
 8006fa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fa6:	f000 f997 	bl	80072d8 <_malloc_r>
 8006faa:	4604      	mov	r4, r0
 8006fac:	b140      	cbz	r0, 8006fc0 <__sfmoreglue+0x28>
 8006fae:	2100      	movs	r1, #0
 8006fb0:	e9c0 1600 	strd	r1, r6, [r0]
 8006fb4:	300c      	adds	r0, #12
 8006fb6:	60a0      	str	r0, [r4, #8]
 8006fb8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fbc:	f7ff fdaa 	bl	8006b14 <memset>
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	bd70      	pop	{r4, r5, r6, pc}

08006fc4 <__sfp_lock_acquire>:
 8006fc4:	4801      	ldr	r0, [pc, #4]	; (8006fcc <__sfp_lock_acquire+0x8>)
 8006fc6:	f000 b8b3 	b.w	8007130 <__retarget_lock_acquire_recursive>
 8006fca:	bf00      	nop
 8006fcc:	20000471 	.word	0x20000471

08006fd0 <__sfp_lock_release>:
 8006fd0:	4801      	ldr	r0, [pc, #4]	; (8006fd8 <__sfp_lock_release+0x8>)
 8006fd2:	f000 b8ae 	b.w	8007132 <__retarget_lock_release_recursive>
 8006fd6:	bf00      	nop
 8006fd8:	20000471 	.word	0x20000471

08006fdc <__sinit_lock_acquire>:
 8006fdc:	4801      	ldr	r0, [pc, #4]	; (8006fe4 <__sinit_lock_acquire+0x8>)
 8006fde:	f000 b8a7 	b.w	8007130 <__retarget_lock_acquire_recursive>
 8006fe2:	bf00      	nop
 8006fe4:	20000472 	.word	0x20000472

08006fe8 <__sinit_lock_release>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	; (8006ff0 <__sinit_lock_release+0x8>)
 8006fea:	f000 b8a2 	b.w	8007132 <__retarget_lock_release_recursive>
 8006fee:	bf00      	nop
 8006ff0:	20000472 	.word	0x20000472

08006ff4 <__sinit>:
 8006ff4:	b510      	push	{r4, lr}
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	f7ff fff0 	bl	8006fdc <__sinit_lock_acquire>
 8006ffc:	69a3      	ldr	r3, [r4, #24]
 8006ffe:	b11b      	cbz	r3, 8007008 <__sinit+0x14>
 8007000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007004:	f7ff bff0 	b.w	8006fe8 <__sinit_lock_release>
 8007008:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800700c:	6523      	str	r3, [r4, #80]	; 0x50
 800700e:	4b13      	ldr	r3, [pc, #76]	; (800705c <__sinit+0x68>)
 8007010:	4a13      	ldr	r2, [pc, #76]	; (8007060 <__sinit+0x6c>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	62a2      	str	r2, [r4, #40]	; 0x28
 8007016:	42a3      	cmp	r3, r4
 8007018:	bf04      	itt	eq
 800701a:	2301      	moveq	r3, #1
 800701c:	61a3      	streq	r3, [r4, #24]
 800701e:	4620      	mov	r0, r4
 8007020:	f000 f820 	bl	8007064 <__sfp>
 8007024:	6060      	str	r0, [r4, #4]
 8007026:	4620      	mov	r0, r4
 8007028:	f000 f81c 	bl	8007064 <__sfp>
 800702c:	60a0      	str	r0, [r4, #8]
 800702e:	4620      	mov	r0, r4
 8007030:	f000 f818 	bl	8007064 <__sfp>
 8007034:	2200      	movs	r2, #0
 8007036:	60e0      	str	r0, [r4, #12]
 8007038:	2104      	movs	r1, #4
 800703a:	6860      	ldr	r0, [r4, #4]
 800703c:	f7ff ff82 	bl	8006f44 <std>
 8007040:	68a0      	ldr	r0, [r4, #8]
 8007042:	2201      	movs	r2, #1
 8007044:	2109      	movs	r1, #9
 8007046:	f7ff ff7d 	bl	8006f44 <std>
 800704a:	68e0      	ldr	r0, [r4, #12]
 800704c:	2202      	movs	r2, #2
 800704e:	2112      	movs	r1, #18
 8007050:	f7ff ff78 	bl	8006f44 <std>
 8007054:	2301      	movs	r3, #1
 8007056:	61a3      	str	r3, [r4, #24]
 8007058:	e7d2      	b.n	8007000 <__sinit+0xc>
 800705a:	bf00      	nop
 800705c:	08007df0 	.word	0x08007df0
 8007060:	08006f8d 	.word	0x08006f8d

08007064 <__sfp>:
 8007064:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007066:	4607      	mov	r7, r0
 8007068:	f7ff ffac 	bl	8006fc4 <__sfp_lock_acquire>
 800706c:	4b1e      	ldr	r3, [pc, #120]	; (80070e8 <__sfp+0x84>)
 800706e:	681e      	ldr	r6, [r3, #0]
 8007070:	69b3      	ldr	r3, [r6, #24]
 8007072:	b913      	cbnz	r3, 800707a <__sfp+0x16>
 8007074:	4630      	mov	r0, r6
 8007076:	f7ff ffbd 	bl	8006ff4 <__sinit>
 800707a:	3648      	adds	r6, #72	; 0x48
 800707c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007080:	3b01      	subs	r3, #1
 8007082:	d503      	bpl.n	800708c <__sfp+0x28>
 8007084:	6833      	ldr	r3, [r6, #0]
 8007086:	b30b      	cbz	r3, 80070cc <__sfp+0x68>
 8007088:	6836      	ldr	r6, [r6, #0]
 800708a:	e7f7      	b.n	800707c <__sfp+0x18>
 800708c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007090:	b9d5      	cbnz	r5, 80070c8 <__sfp+0x64>
 8007092:	4b16      	ldr	r3, [pc, #88]	; (80070ec <__sfp+0x88>)
 8007094:	60e3      	str	r3, [r4, #12]
 8007096:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800709a:	6665      	str	r5, [r4, #100]	; 0x64
 800709c:	f000 f847 	bl	800712e <__retarget_lock_init_recursive>
 80070a0:	f7ff ff96 	bl	8006fd0 <__sfp_lock_release>
 80070a4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070a8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070ac:	6025      	str	r5, [r4, #0]
 80070ae:	61a5      	str	r5, [r4, #24]
 80070b0:	2208      	movs	r2, #8
 80070b2:	4629      	mov	r1, r5
 80070b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070b8:	f7ff fd2c 	bl	8006b14 <memset>
 80070bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070c4:	4620      	mov	r0, r4
 80070c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070c8:	3468      	adds	r4, #104	; 0x68
 80070ca:	e7d9      	b.n	8007080 <__sfp+0x1c>
 80070cc:	2104      	movs	r1, #4
 80070ce:	4638      	mov	r0, r7
 80070d0:	f7ff ff62 	bl	8006f98 <__sfmoreglue>
 80070d4:	4604      	mov	r4, r0
 80070d6:	6030      	str	r0, [r6, #0]
 80070d8:	2800      	cmp	r0, #0
 80070da:	d1d5      	bne.n	8007088 <__sfp+0x24>
 80070dc:	f7ff ff78 	bl	8006fd0 <__sfp_lock_release>
 80070e0:	230c      	movs	r3, #12
 80070e2:	603b      	str	r3, [r7, #0]
 80070e4:	e7ee      	b.n	80070c4 <__sfp+0x60>
 80070e6:	bf00      	nop
 80070e8:	08007df0 	.word	0x08007df0
 80070ec:	ffff0001 	.word	0xffff0001

080070f0 <_fwalk_reent>:
 80070f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f4:	4606      	mov	r6, r0
 80070f6:	4688      	mov	r8, r1
 80070f8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80070fc:	2700      	movs	r7, #0
 80070fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007102:	f1b9 0901 	subs.w	r9, r9, #1
 8007106:	d505      	bpl.n	8007114 <_fwalk_reent+0x24>
 8007108:	6824      	ldr	r4, [r4, #0]
 800710a:	2c00      	cmp	r4, #0
 800710c:	d1f7      	bne.n	80070fe <_fwalk_reent+0xe>
 800710e:	4638      	mov	r0, r7
 8007110:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007114:	89ab      	ldrh	r3, [r5, #12]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d907      	bls.n	800712a <_fwalk_reent+0x3a>
 800711a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800711e:	3301      	adds	r3, #1
 8007120:	d003      	beq.n	800712a <_fwalk_reent+0x3a>
 8007122:	4629      	mov	r1, r5
 8007124:	4630      	mov	r0, r6
 8007126:	47c0      	blx	r8
 8007128:	4307      	orrs	r7, r0
 800712a:	3568      	adds	r5, #104	; 0x68
 800712c:	e7e9      	b.n	8007102 <_fwalk_reent+0x12>

0800712e <__retarget_lock_init_recursive>:
 800712e:	4770      	bx	lr

08007130 <__retarget_lock_acquire_recursive>:
 8007130:	4770      	bx	lr

08007132 <__retarget_lock_release_recursive>:
 8007132:	4770      	bx	lr

08007134 <__swhatbuf_r>:
 8007134:	b570      	push	{r4, r5, r6, lr}
 8007136:	460e      	mov	r6, r1
 8007138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800713c:	2900      	cmp	r1, #0
 800713e:	b096      	sub	sp, #88	; 0x58
 8007140:	4614      	mov	r4, r2
 8007142:	461d      	mov	r5, r3
 8007144:	da08      	bge.n	8007158 <__swhatbuf_r+0x24>
 8007146:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800714a:	2200      	movs	r2, #0
 800714c:	602a      	str	r2, [r5, #0]
 800714e:	061a      	lsls	r2, r3, #24
 8007150:	d410      	bmi.n	8007174 <__swhatbuf_r+0x40>
 8007152:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007156:	e00e      	b.n	8007176 <__swhatbuf_r+0x42>
 8007158:	466a      	mov	r2, sp
 800715a:	f000 fc95 	bl	8007a88 <_fstat_r>
 800715e:	2800      	cmp	r0, #0
 8007160:	dbf1      	blt.n	8007146 <__swhatbuf_r+0x12>
 8007162:	9a01      	ldr	r2, [sp, #4]
 8007164:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007168:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800716c:	425a      	negs	r2, r3
 800716e:	415a      	adcs	r2, r3
 8007170:	602a      	str	r2, [r5, #0]
 8007172:	e7ee      	b.n	8007152 <__swhatbuf_r+0x1e>
 8007174:	2340      	movs	r3, #64	; 0x40
 8007176:	2000      	movs	r0, #0
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	b016      	add	sp, #88	; 0x58
 800717c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007180 <__smakebuf_r>:
 8007180:	898b      	ldrh	r3, [r1, #12]
 8007182:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007184:	079d      	lsls	r5, r3, #30
 8007186:	4606      	mov	r6, r0
 8007188:	460c      	mov	r4, r1
 800718a:	d507      	bpl.n	800719c <__smakebuf_r+0x1c>
 800718c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007190:	6023      	str	r3, [r4, #0]
 8007192:	6123      	str	r3, [r4, #16]
 8007194:	2301      	movs	r3, #1
 8007196:	6163      	str	r3, [r4, #20]
 8007198:	b002      	add	sp, #8
 800719a:	bd70      	pop	{r4, r5, r6, pc}
 800719c:	ab01      	add	r3, sp, #4
 800719e:	466a      	mov	r2, sp
 80071a0:	f7ff ffc8 	bl	8007134 <__swhatbuf_r>
 80071a4:	9900      	ldr	r1, [sp, #0]
 80071a6:	4605      	mov	r5, r0
 80071a8:	4630      	mov	r0, r6
 80071aa:	f000 f895 	bl	80072d8 <_malloc_r>
 80071ae:	b948      	cbnz	r0, 80071c4 <__smakebuf_r+0x44>
 80071b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071b4:	059a      	lsls	r2, r3, #22
 80071b6:	d4ef      	bmi.n	8007198 <__smakebuf_r+0x18>
 80071b8:	f023 0303 	bic.w	r3, r3, #3
 80071bc:	f043 0302 	orr.w	r3, r3, #2
 80071c0:	81a3      	strh	r3, [r4, #12]
 80071c2:	e7e3      	b.n	800718c <__smakebuf_r+0xc>
 80071c4:	4b0d      	ldr	r3, [pc, #52]	; (80071fc <__smakebuf_r+0x7c>)
 80071c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	6020      	str	r0, [r4, #0]
 80071cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071d0:	81a3      	strh	r3, [r4, #12]
 80071d2:	9b00      	ldr	r3, [sp, #0]
 80071d4:	6163      	str	r3, [r4, #20]
 80071d6:	9b01      	ldr	r3, [sp, #4]
 80071d8:	6120      	str	r0, [r4, #16]
 80071da:	b15b      	cbz	r3, 80071f4 <__smakebuf_r+0x74>
 80071dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071e0:	4630      	mov	r0, r6
 80071e2:	f000 fc63 	bl	8007aac <_isatty_r>
 80071e6:	b128      	cbz	r0, 80071f4 <__smakebuf_r+0x74>
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	f023 0303 	bic.w	r3, r3, #3
 80071ee:	f043 0301 	orr.w	r3, r3, #1
 80071f2:	81a3      	strh	r3, [r4, #12]
 80071f4:	89a0      	ldrh	r0, [r4, #12]
 80071f6:	4305      	orrs	r5, r0
 80071f8:	81a5      	strh	r5, [r4, #12]
 80071fa:	e7cd      	b.n	8007198 <__smakebuf_r+0x18>
 80071fc:	08006f8d 	.word	0x08006f8d

08007200 <_free_r>:
 8007200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007202:	2900      	cmp	r1, #0
 8007204:	d044      	beq.n	8007290 <_free_r+0x90>
 8007206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800720a:	9001      	str	r0, [sp, #4]
 800720c:	2b00      	cmp	r3, #0
 800720e:	f1a1 0404 	sub.w	r4, r1, #4
 8007212:	bfb8      	it	lt
 8007214:	18e4      	addlt	r4, r4, r3
 8007216:	f000 fc6b 	bl	8007af0 <__malloc_lock>
 800721a:	4a1e      	ldr	r2, [pc, #120]	; (8007294 <_free_r+0x94>)
 800721c:	9801      	ldr	r0, [sp, #4]
 800721e:	6813      	ldr	r3, [r2, #0]
 8007220:	b933      	cbnz	r3, 8007230 <_free_r+0x30>
 8007222:	6063      	str	r3, [r4, #4]
 8007224:	6014      	str	r4, [r2, #0]
 8007226:	b003      	add	sp, #12
 8007228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800722c:	f000 bc66 	b.w	8007afc <__malloc_unlock>
 8007230:	42a3      	cmp	r3, r4
 8007232:	d908      	bls.n	8007246 <_free_r+0x46>
 8007234:	6825      	ldr	r5, [r4, #0]
 8007236:	1961      	adds	r1, r4, r5
 8007238:	428b      	cmp	r3, r1
 800723a:	bf01      	itttt	eq
 800723c:	6819      	ldreq	r1, [r3, #0]
 800723e:	685b      	ldreq	r3, [r3, #4]
 8007240:	1949      	addeq	r1, r1, r5
 8007242:	6021      	streq	r1, [r4, #0]
 8007244:	e7ed      	b.n	8007222 <_free_r+0x22>
 8007246:	461a      	mov	r2, r3
 8007248:	685b      	ldr	r3, [r3, #4]
 800724a:	b10b      	cbz	r3, 8007250 <_free_r+0x50>
 800724c:	42a3      	cmp	r3, r4
 800724e:	d9fa      	bls.n	8007246 <_free_r+0x46>
 8007250:	6811      	ldr	r1, [r2, #0]
 8007252:	1855      	adds	r5, r2, r1
 8007254:	42a5      	cmp	r5, r4
 8007256:	d10b      	bne.n	8007270 <_free_r+0x70>
 8007258:	6824      	ldr	r4, [r4, #0]
 800725a:	4421      	add	r1, r4
 800725c:	1854      	adds	r4, r2, r1
 800725e:	42a3      	cmp	r3, r4
 8007260:	6011      	str	r1, [r2, #0]
 8007262:	d1e0      	bne.n	8007226 <_free_r+0x26>
 8007264:	681c      	ldr	r4, [r3, #0]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	6053      	str	r3, [r2, #4]
 800726a:	4421      	add	r1, r4
 800726c:	6011      	str	r1, [r2, #0]
 800726e:	e7da      	b.n	8007226 <_free_r+0x26>
 8007270:	d902      	bls.n	8007278 <_free_r+0x78>
 8007272:	230c      	movs	r3, #12
 8007274:	6003      	str	r3, [r0, #0]
 8007276:	e7d6      	b.n	8007226 <_free_r+0x26>
 8007278:	6825      	ldr	r5, [r4, #0]
 800727a:	1961      	adds	r1, r4, r5
 800727c:	428b      	cmp	r3, r1
 800727e:	bf04      	itt	eq
 8007280:	6819      	ldreq	r1, [r3, #0]
 8007282:	685b      	ldreq	r3, [r3, #4]
 8007284:	6063      	str	r3, [r4, #4]
 8007286:	bf04      	itt	eq
 8007288:	1949      	addeq	r1, r1, r5
 800728a:	6021      	streq	r1, [r4, #0]
 800728c:	6054      	str	r4, [r2, #4]
 800728e:	e7ca      	b.n	8007226 <_free_r+0x26>
 8007290:	b003      	add	sp, #12
 8007292:	bd30      	pop	{r4, r5, pc}
 8007294:	20000474 	.word	0x20000474

08007298 <sbrk_aligned>:
 8007298:	b570      	push	{r4, r5, r6, lr}
 800729a:	4e0e      	ldr	r6, [pc, #56]	; (80072d4 <sbrk_aligned+0x3c>)
 800729c:	460c      	mov	r4, r1
 800729e:	6831      	ldr	r1, [r6, #0]
 80072a0:	4605      	mov	r5, r0
 80072a2:	b911      	cbnz	r1, 80072aa <sbrk_aligned+0x12>
 80072a4:	f000 fb7a 	bl	800799c <_sbrk_r>
 80072a8:	6030      	str	r0, [r6, #0]
 80072aa:	4621      	mov	r1, r4
 80072ac:	4628      	mov	r0, r5
 80072ae:	f000 fb75 	bl	800799c <_sbrk_r>
 80072b2:	1c43      	adds	r3, r0, #1
 80072b4:	d00a      	beq.n	80072cc <sbrk_aligned+0x34>
 80072b6:	1cc4      	adds	r4, r0, #3
 80072b8:	f024 0403 	bic.w	r4, r4, #3
 80072bc:	42a0      	cmp	r0, r4
 80072be:	d007      	beq.n	80072d0 <sbrk_aligned+0x38>
 80072c0:	1a21      	subs	r1, r4, r0
 80072c2:	4628      	mov	r0, r5
 80072c4:	f000 fb6a 	bl	800799c <_sbrk_r>
 80072c8:	3001      	adds	r0, #1
 80072ca:	d101      	bne.n	80072d0 <sbrk_aligned+0x38>
 80072cc:	f04f 34ff 	mov.w	r4, #4294967295
 80072d0:	4620      	mov	r0, r4
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	20000478 	.word	0x20000478

080072d8 <_malloc_r>:
 80072d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072dc:	1ccd      	adds	r5, r1, #3
 80072de:	f025 0503 	bic.w	r5, r5, #3
 80072e2:	3508      	adds	r5, #8
 80072e4:	2d0c      	cmp	r5, #12
 80072e6:	bf38      	it	cc
 80072e8:	250c      	movcc	r5, #12
 80072ea:	2d00      	cmp	r5, #0
 80072ec:	4607      	mov	r7, r0
 80072ee:	db01      	blt.n	80072f4 <_malloc_r+0x1c>
 80072f0:	42a9      	cmp	r1, r5
 80072f2:	d905      	bls.n	8007300 <_malloc_r+0x28>
 80072f4:	230c      	movs	r3, #12
 80072f6:	603b      	str	r3, [r7, #0]
 80072f8:	2600      	movs	r6, #0
 80072fa:	4630      	mov	r0, r6
 80072fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007300:	4e2e      	ldr	r6, [pc, #184]	; (80073bc <_malloc_r+0xe4>)
 8007302:	f000 fbf5 	bl	8007af0 <__malloc_lock>
 8007306:	6833      	ldr	r3, [r6, #0]
 8007308:	461c      	mov	r4, r3
 800730a:	bb34      	cbnz	r4, 800735a <_malloc_r+0x82>
 800730c:	4629      	mov	r1, r5
 800730e:	4638      	mov	r0, r7
 8007310:	f7ff ffc2 	bl	8007298 <sbrk_aligned>
 8007314:	1c43      	adds	r3, r0, #1
 8007316:	4604      	mov	r4, r0
 8007318:	d14d      	bne.n	80073b6 <_malloc_r+0xde>
 800731a:	6834      	ldr	r4, [r6, #0]
 800731c:	4626      	mov	r6, r4
 800731e:	2e00      	cmp	r6, #0
 8007320:	d140      	bne.n	80073a4 <_malloc_r+0xcc>
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	4631      	mov	r1, r6
 8007326:	4638      	mov	r0, r7
 8007328:	eb04 0803 	add.w	r8, r4, r3
 800732c:	f000 fb36 	bl	800799c <_sbrk_r>
 8007330:	4580      	cmp	r8, r0
 8007332:	d13a      	bne.n	80073aa <_malloc_r+0xd2>
 8007334:	6821      	ldr	r1, [r4, #0]
 8007336:	3503      	adds	r5, #3
 8007338:	1a6d      	subs	r5, r5, r1
 800733a:	f025 0503 	bic.w	r5, r5, #3
 800733e:	3508      	adds	r5, #8
 8007340:	2d0c      	cmp	r5, #12
 8007342:	bf38      	it	cc
 8007344:	250c      	movcc	r5, #12
 8007346:	4629      	mov	r1, r5
 8007348:	4638      	mov	r0, r7
 800734a:	f7ff ffa5 	bl	8007298 <sbrk_aligned>
 800734e:	3001      	adds	r0, #1
 8007350:	d02b      	beq.n	80073aa <_malloc_r+0xd2>
 8007352:	6823      	ldr	r3, [r4, #0]
 8007354:	442b      	add	r3, r5
 8007356:	6023      	str	r3, [r4, #0]
 8007358:	e00e      	b.n	8007378 <_malloc_r+0xa0>
 800735a:	6822      	ldr	r2, [r4, #0]
 800735c:	1b52      	subs	r2, r2, r5
 800735e:	d41e      	bmi.n	800739e <_malloc_r+0xc6>
 8007360:	2a0b      	cmp	r2, #11
 8007362:	d916      	bls.n	8007392 <_malloc_r+0xba>
 8007364:	1961      	adds	r1, r4, r5
 8007366:	42a3      	cmp	r3, r4
 8007368:	6025      	str	r5, [r4, #0]
 800736a:	bf18      	it	ne
 800736c:	6059      	strne	r1, [r3, #4]
 800736e:	6863      	ldr	r3, [r4, #4]
 8007370:	bf08      	it	eq
 8007372:	6031      	streq	r1, [r6, #0]
 8007374:	5162      	str	r2, [r4, r5]
 8007376:	604b      	str	r3, [r1, #4]
 8007378:	4638      	mov	r0, r7
 800737a:	f104 060b 	add.w	r6, r4, #11
 800737e:	f000 fbbd 	bl	8007afc <__malloc_unlock>
 8007382:	f026 0607 	bic.w	r6, r6, #7
 8007386:	1d23      	adds	r3, r4, #4
 8007388:	1af2      	subs	r2, r6, r3
 800738a:	d0b6      	beq.n	80072fa <_malloc_r+0x22>
 800738c:	1b9b      	subs	r3, r3, r6
 800738e:	50a3      	str	r3, [r4, r2]
 8007390:	e7b3      	b.n	80072fa <_malloc_r+0x22>
 8007392:	6862      	ldr	r2, [r4, #4]
 8007394:	42a3      	cmp	r3, r4
 8007396:	bf0c      	ite	eq
 8007398:	6032      	streq	r2, [r6, #0]
 800739a:	605a      	strne	r2, [r3, #4]
 800739c:	e7ec      	b.n	8007378 <_malloc_r+0xa0>
 800739e:	4623      	mov	r3, r4
 80073a0:	6864      	ldr	r4, [r4, #4]
 80073a2:	e7b2      	b.n	800730a <_malloc_r+0x32>
 80073a4:	4634      	mov	r4, r6
 80073a6:	6876      	ldr	r6, [r6, #4]
 80073a8:	e7b9      	b.n	800731e <_malloc_r+0x46>
 80073aa:	230c      	movs	r3, #12
 80073ac:	603b      	str	r3, [r7, #0]
 80073ae:	4638      	mov	r0, r7
 80073b0:	f000 fba4 	bl	8007afc <__malloc_unlock>
 80073b4:	e7a1      	b.n	80072fa <_malloc_r+0x22>
 80073b6:	6025      	str	r5, [r4, #0]
 80073b8:	e7de      	b.n	8007378 <_malloc_r+0xa0>
 80073ba:	bf00      	nop
 80073bc:	20000474 	.word	0x20000474

080073c0 <__sfputc_r>:
 80073c0:	6893      	ldr	r3, [r2, #8]
 80073c2:	3b01      	subs	r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	b410      	push	{r4}
 80073c8:	6093      	str	r3, [r2, #8]
 80073ca:	da08      	bge.n	80073de <__sfputc_r+0x1e>
 80073cc:	6994      	ldr	r4, [r2, #24]
 80073ce:	42a3      	cmp	r3, r4
 80073d0:	db01      	blt.n	80073d6 <__sfputc_r+0x16>
 80073d2:	290a      	cmp	r1, #10
 80073d4:	d103      	bne.n	80073de <__sfputc_r+0x1e>
 80073d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073da:	f7ff bc31 	b.w	8006c40 <__swbuf_r>
 80073de:	6813      	ldr	r3, [r2, #0]
 80073e0:	1c58      	adds	r0, r3, #1
 80073e2:	6010      	str	r0, [r2, #0]
 80073e4:	7019      	strb	r1, [r3, #0]
 80073e6:	4608      	mov	r0, r1
 80073e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <__sfputs_r>:
 80073ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073f0:	4606      	mov	r6, r0
 80073f2:	460f      	mov	r7, r1
 80073f4:	4614      	mov	r4, r2
 80073f6:	18d5      	adds	r5, r2, r3
 80073f8:	42ac      	cmp	r4, r5
 80073fa:	d101      	bne.n	8007400 <__sfputs_r+0x12>
 80073fc:	2000      	movs	r0, #0
 80073fe:	e007      	b.n	8007410 <__sfputs_r+0x22>
 8007400:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007404:	463a      	mov	r2, r7
 8007406:	4630      	mov	r0, r6
 8007408:	f7ff ffda 	bl	80073c0 <__sfputc_r>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d1f3      	bne.n	80073f8 <__sfputs_r+0xa>
 8007410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007414 <_vfiprintf_r>:
 8007414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007418:	460d      	mov	r5, r1
 800741a:	b09d      	sub	sp, #116	; 0x74
 800741c:	4614      	mov	r4, r2
 800741e:	4698      	mov	r8, r3
 8007420:	4606      	mov	r6, r0
 8007422:	b118      	cbz	r0, 800742c <_vfiprintf_r+0x18>
 8007424:	6983      	ldr	r3, [r0, #24]
 8007426:	b90b      	cbnz	r3, 800742c <_vfiprintf_r+0x18>
 8007428:	f7ff fde4 	bl	8006ff4 <__sinit>
 800742c:	4b89      	ldr	r3, [pc, #548]	; (8007654 <_vfiprintf_r+0x240>)
 800742e:	429d      	cmp	r5, r3
 8007430:	d11b      	bne.n	800746a <_vfiprintf_r+0x56>
 8007432:	6875      	ldr	r5, [r6, #4]
 8007434:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007436:	07d9      	lsls	r1, r3, #31
 8007438:	d405      	bmi.n	8007446 <_vfiprintf_r+0x32>
 800743a:	89ab      	ldrh	r3, [r5, #12]
 800743c:	059a      	lsls	r2, r3, #22
 800743e:	d402      	bmi.n	8007446 <_vfiprintf_r+0x32>
 8007440:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007442:	f7ff fe75 	bl	8007130 <__retarget_lock_acquire_recursive>
 8007446:	89ab      	ldrh	r3, [r5, #12]
 8007448:	071b      	lsls	r3, r3, #28
 800744a:	d501      	bpl.n	8007450 <_vfiprintf_r+0x3c>
 800744c:	692b      	ldr	r3, [r5, #16]
 800744e:	b9eb      	cbnz	r3, 800748c <_vfiprintf_r+0x78>
 8007450:	4629      	mov	r1, r5
 8007452:	4630      	mov	r0, r6
 8007454:	f7ff fc46 	bl	8006ce4 <__swsetup_r>
 8007458:	b1c0      	cbz	r0, 800748c <_vfiprintf_r+0x78>
 800745a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800745c:	07dc      	lsls	r4, r3, #31
 800745e:	d50e      	bpl.n	800747e <_vfiprintf_r+0x6a>
 8007460:	f04f 30ff 	mov.w	r0, #4294967295
 8007464:	b01d      	add	sp, #116	; 0x74
 8007466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800746a:	4b7b      	ldr	r3, [pc, #492]	; (8007658 <_vfiprintf_r+0x244>)
 800746c:	429d      	cmp	r5, r3
 800746e:	d101      	bne.n	8007474 <_vfiprintf_r+0x60>
 8007470:	68b5      	ldr	r5, [r6, #8]
 8007472:	e7df      	b.n	8007434 <_vfiprintf_r+0x20>
 8007474:	4b79      	ldr	r3, [pc, #484]	; (800765c <_vfiprintf_r+0x248>)
 8007476:	429d      	cmp	r5, r3
 8007478:	bf08      	it	eq
 800747a:	68f5      	ldreq	r5, [r6, #12]
 800747c:	e7da      	b.n	8007434 <_vfiprintf_r+0x20>
 800747e:	89ab      	ldrh	r3, [r5, #12]
 8007480:	0598      	lsls	r0, r3, #22
 8007482:	d4ed      	bmi.n	8007460 <_vfiprintf_r+0x4c>
 8007484:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007486:	f7ff fe54 	bl	8007132 <__retarget_lock_release_recursive>
 800748a:	e7e9      	b.n	8007460 <_vfiprintf_r+0x4c>
 800748c:	2300      	movs	r3, #0
 800748e:	9309      	str	r3, [sp, #36]	; 0x24
 8007490:	2320      	movs	r3, #32
 8007492:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007496:	f8cd 800c 	str.w	r8, [sp, #12]
 800749a:	2330      	movs	r3, #48	; 0x30
 800749c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007660 <_vfiprintf_r+0x24c>
 80074a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80074a4:	f04f 0901 	mov.w	r9, #1
 80074a8:	4623      	mov	r3, r4
 80074aa:	469a      	mov	sl, r3
 80074ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b0:	b10a      	cbz	r2, 80074b6 <_vfiprintf_r+0xa2>
 80074b2:	2a25      	cmp	r2, #37	; 0x25
 80074b4:	d1f9      	bne.n	80074aa <_vfiprintf_r+0x96>
 80074b6:	ebba 0b04 	subs.w	fp, sl, r4
 80074ba:	d00b      	beq.n	80074d4 <_vfiprintf_r+0xc0>
 80074bc:	465b      	mov	r3, fp
 80074be:	4622      	mov	r2, r4
 80074c0:	4629      	mov	r1, r5
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7ff ff93 	bl	80073ee <__sfputs_r>
 80074c8:	3001      	adds	r0, #1
 80074ca:	f000 80aa 	beq.w	8007622 <_vfiprintf_r+0x20e>
 80074ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074d0:	445a      	add	r2, fp
 80074d2:	9209      	str	r2, [sp, #36]	; 0x24
 80074d4:	f89a 3000 	ldrb.w	r3, [sl]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 80a2 	beq.w	8007622 <_vfiprintf_r+0x20e>
 80074de:	2300      	movs	r3, #0
 80074e0:	f04f 32ff 	mov.w	r2, #4294967295
 80074e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074e8:	f10a 0a01 	add.w	sl, sl, #1
 80074ec:	9304      	str	r3, [sp, #16]
 80074ee:	9307      	str	r3, [sp, #28]
 80074f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80074f4:	931a      	str	r3, [sp, #104]	; 0x68
 80074f6:	4654      	mov	r4, sl
 80074f8:	2205      	movs	r2, #5
 80074fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fe:	4858      	ldr	r0, [pc, #352]	; (8007660 <_vfiprintf_r+0x24c>)
 8007500:	f7f8 fe66 	bl	80001d0 <memchr>
 8007504:	9a04      	ldr	r2, [sp, #16]
 8007506:	b9d8      	cbnz	r0, 8007540 <_vfiprintf_r+0x12c>
 8007508:	06d1      	lsls	r1, r2, #27
 800750a:	bf44      	itt	mi
 800750c:	2320      	movmi	r3, #32
 800750e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007512:	0713      	lsls	r3, r2, #28
 8007514:	bf44      	itt	mi
 8007516:	232b      	movmi	r3, #43	; 0x2b
 8007518:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800751c:	f89a 3000 	ldrb.w	r3, [sl]
 8007520:	2b2a      	cmp	r3, #42	; 0x2a
 8007522:	d015      	beq.n	8007550 <_vfiprintf_r+0x13c>
 8007524:	9a07      	ldr	r2, [sp, #28]
 8007526:	4654      	mov	r4, sl
 8007528:	2000      	movs	r0, #0
 800752a:	f04f 0c0a 	mov.w	ip, #10
 800752e:	4621      	mov	r1, r4
 8007530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007534:	3b30      	subs	r3, #48	; 0x30
 8007536:	2b09      	cmp	r3, #9
 8007538:	d94e      	bls.n	80075d8 <_vfiprintf_r+0x1c4>
 800753a:	b1b0      	cbz	r0, 800756a <_vfiprintf_r+0x156>
 800753c:	9207      	str	r2, [sp, #28]
 800753e:	e014      	b.n	800756a <_vfiprintf_r+0x156>
 8007540:	eba0 0308 	sub.w	r3, r0, r8
 8007544:	fa09 f303 	lsl.w	r3, r9, r3
 8007548:	4313      	orrs	r3, r2
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	46a2      	mov	sl, r4
 800754e:	e7d2      	b.n	80074f6 <_vfiprintf_r+0xe2>
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	1d19      	adds	r1, r3, #4
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	9103      	str	r1, [sp, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	bfbb      	ittet	lt
 800755c:	425b      	neglt	r3, r3
 800755e:	f042 0202 	orrlt.w	r2, r2, #2
 8007562:	9307      	strge	r3, [sp, #28]
 8007564:	9307      	strlt	r3, [sp, #28]
 8007566:	bfb8      	it	lt
 8007568:	9204      	strlt	r2, [sp, #16]
 800756a:	7823      	ldrb	r3, [r4, #0]
 800756c:	2b2e      	cmp	r3, #46	; 0x2e
 800756e:	d10c      	bne.n	800758a <_vfiprintf_r+0x176>
 8007570:	7863      	ldrb	r3, [r4, #1]
 8007572:	2b2a      	cmp	r3, #42	; 0x2a
 8007574:	d135      	bne.n	80075e2 <_vfiprintf_r+0x1ce>
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	1d1a      	adds	r2, r3, #4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	9203      	str	r2, [sp, #12]
 800757e:	2b00      	cmp	r3, #0
 8007580:	bfb8      	it	lt
 8007582:	f04f 33ff 	movlt.w	r3, #4294967295
 8007586:	3402      	adds	r4, #2
 8007588:	9305      	str	r3, [sp, #20]
 800758a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007670 <_vfiprintf_r+0x25c>
 800758e:	7821      	ldrb	r1, [r4, #0]
 8007590:	2203      	movs	r2, #3
 8007592:	4650      	mov	r0, sl
 8007594:	f7f8 fe1c 	bl	80001d0 <memchr>
 8007598:	b140      	cbz	r0, 80075ac <_vfiprintf_r+0x198>
 800759a:	2340      	movs	r3, #64	; 0x40
 800759c:	eba0 000a 	sub.w	r0, r0, sl
 80075a0:	fa03 f000 	lsl.w	r0, r3, r0
 80075a4:	9b04      	ldr	r3, [sp, #16]
 80075a6:	4303      	orrs	r3, r0
 80075a8:	3401      	adds	r4, #1
 80075aa:	9304      	str	r3, [sp, #16]
 80075ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075b0:	482c      	ldr	r0, [pc, #176]	; (8007664 <_vfiprintf_r+0x250>)
 80075b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80075b6:	2206      	movs	r2, #6
 80075b8:	f7f8 fe0a 	bl	80001d0 <memchr>
 80075bc:	2800      	cmp	r0, #0
 80075be:	d03f      	beq.n	8007640 <_vfiprintf_r+0x22c>
 80075c0:	4b29      	ldr	r3, [pc, #164]	; (8007668 <_vfiprintf_r+0x254>)
 80075c2:	bb1b      	cbnz	r3, 800760c <_vfiprintf_r+0x1f8>
 80075c4:	9b03      	ldr	r3, [sp, #12]
 80075c6:	3307      	adds	r3, #7
 80075c8:	f023 0307 	bic.w	r3, r3, #7
 80075cc:	3308      	adds	r3, #8
 80075ce:	9303      	str	r3, [sp, #12]
 80075d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d2:	443b      	add	r3, r7
 80075d4:	9309      	str	r3, [sp, #36]	; 0x24
 80075d6:	e767      	b.n	80074a8 <_vfiprintf_r+0x94>
 80075d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80075dc:	460c      	mov	r4, r1
 80075de:	2001      	movs	r0, #1
 80075e0:	e7a5      	b.n	800752e <_vfiprintf_r+0x11a>
 80075e2:	2300      	movs	r3, #0
 80075e4:	3401      	adds	r4, #1
 80075e6:	9305      	str	r3, [sp, #20]
 80075e8:	4619      	mov	r1, r3
 80075ea:	f04f 0c0a 	mov.w	ip, #10
 80075ee:	4620      	mov	r0, r4
 80075f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075f4:	3a30      	subs	r2, #48	; 0x30
 80075f6:	2a09      	cmp	r2, #9
 80075f8:	d903      	bls.n	8007602 <_vfiprintf_r+0x1ee>
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0c5      	beq.n	800758a <_vfiprintf_r+0x176>
 80075fe:	9105      	str	r1, [sp, #20]
 8007600:	e7c3      	b.n	800758a <_vfiprintf_r+0x176>
 8007602:	fb0c 2101 	mla	r1, ip, r1, r2
 8007606:	4604      	mov	r4, r0
 8007608:	2301      	movs	r3, #1
 800760a:	e7f0      	b.n	80075ee <_vfiprintf_r+0x1da>
 800760c:	ab03      	add	r3, sp, #12
 800760e:	9300      	str	r3, [sp, #0]
 8007610:	462a      	mov	r2, r5
 8007612:	4b16      	ldr	r3, [pc, #88]	; (800766c <_vfiprintf_r+0x258>)
 8007614:	a904      	add	r1, sp, #16
 8007616:	4630      	mov	r0, r6
 8007618:	f3af 8000 	nop.w
 800761c:	4607      	mov	r7, r0
 800761e:	1c78      	adds	r0, r7, #1
 8007620:	d1d6      	bne.n	80075d0 <_vfiprintf_r+0x1bc>
 8007622:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007624:	07d9      	lsls	r1, r3, #31
 8007626:	d405      	bmi.n	8007634 <_vfiprintf_r+0x220>
 8007628:	89ab      	ldrh	r3, [r5, #12]
 800762a:	059a      	lsls	r2, r3, #22
 800762c:	d402      	bmi.n	8007634 <_vfiprintf_r+0x220>
 800762e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007630:	f7ff fd7f 	bl	8007132 <__retarget_lock_release_recursive>
 8007634:	89ab      	ldrh	r3, [r5, #12]
 8007636:	065b      	lsls	r3, r3, #25
 8007638:	f53f af12 	bmi.w	8007460 <_vfiprintf_r+0x4c>
 800763c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800763e:	e711      	b.n	8007464 <_vfiprintf_r+0x50>
 8007640:	ab03      	add	r3, sp, #12
 8007642:	9300      	str	r3, [sp, #0]
 8007644:	462a      	mov	r2, r5
 8007646:	4b09      	ldr	r3, [pc, #36]	; (800766c <_vfiprintf_r+0x258>)
 8007648:	a904      	add	r1, sp, #16
 800764a:	4630      	mov	r0, r6
 800764c:	f000 f880 	bl	8007750 <_printf_i>
 8007650:	e7e4      	b.n	800761c <_vfiprintf_r+0x208>
 8007652:	bf00      	nop
 8007654:	08007e14 	.word	0x08007e14
 8007658:	08007e34 	.word	0x08007e34
 800765c:	08007df4 	.word	0x08007df4
 8007660:	08007e54 	.word	0x08007e54
 8007664:	08007e5e 	.word	0x08007e5e
 8007668:	00000000 	.word	0x00000000
 800766c:	080073ef 	.word	0x080073ef
 8007670:	08007e5a 	.word	0x08007e5a

08007674 <_printf_common>:
 8007674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007678:	4616      	mov	r6, r2
 800767a:	4699      	mov	r9, r3
 800767c:	688a      	ldr	r2, [r1, #8]
 800767e:	690b      	ldr	r3, [r1, #16]
 8007680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007684:	4293      	cmp	r3, r2
 8007686:	bfb8      	it	lt
 8007688:	4613      	movlt	r3, r2
 800768a:	6033      	str	r3, [r6, #0]
 800768c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007690:	4607      	mov	r7, r0
 8007692:	460c      	mov	r4, r1
 8007694:	b10a      	cbz	r2, 800769a <_printf_common+0x26>
 8007696:	3301      	adds	r3, #1
 8007698:	6033      	str	r3, [r6, #0]
 800769a:	6823      	ldr	r3, [r4, #0]
 800769c:	0699      	lsls	r1, r3, #26
 800769e:	bf42      	ittt	mi
 80076a0:	6833      	ldrmi	r3, [r6, #0]
 80076a2:	3302      	addmi	r3, #2
 80076a4:	6033      	strmi	r3, [r6, #0]
 80076a6:	6825      	ldr	r5, [r4, #0]
 80076a8:	f015 0506 	ands.w	r5, r5, #6
 80076ac:	d106      	bne.n	80076bc <_printf_common+0x48>
 80076ae:	f104 0a19 	add.w	sl, r4, #25
 80076b2:	68e3      	ldr	r3, [r4, #12]
 80076b4:	6832      	ldr	r2, [r6, #0]
 80076b6:	1a9b      	subs	r3, r3, r2
 80076b8:	42ab      	cmp	r3, r5
 80076ba:	dc26      	bgt.n	800770a <_printf_common+0x96>
 80076bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80076c0:	1e13      	subs	r3, r2, #0
 80076c2:	6822      	ldr	r2, [r4, #0]
 80076c4:	bf18      	it	ne
 80076c6:	2301      	movne	r3, #1
 80076c8:	0692      	lsls	r2, r2, #26
 80076ca:	d42b      	bmi.n	8007724 <_printf_common+0xb0>
 80076cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80076d0:	4649      	mov	r1, r9
 80076d2:	4638      	mov	r0, r7
 80076d4:	47c0      	blx	r8
 80076d6:	3001      	adds	r0, #1
 80076d8:	d01e      	beq.n	8007718 <_printf_common+0xa4>
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	68e5      	ldr	r5, [r4, #12]
 80076de:	6832      	ldr	r2, [r6, #0]
 80076e0:	f003 0306 	and.w	r3, r3, #6
 80076e4:	2b04      	cmp	r3, #4
 80076e6:	bf08      	it	eq
 80076e8:	1aad      	subeq	r5, r5, r2
 80076ea:	68a3      	ldr	r3, [r4, #8]
 80076ec:	6922      	ldr	r2, [r4, #16]
 80076ee:	bf0c      	ite	eq
 80076f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80076f4:	2500      	movne	r5, #0
 80076f6:	4293      	cmp	r3, r2
 80076f8:	bfc4      	itt	gt
 80076fa:	1a9b      	subgt	r3, r3, r2
 80076fc:	18ed      	addgt	r5, r5, r3
 80076fe:	2600      	movs	r6, #0
 8007700:	341a      	adds	r4, #26
 8007702:	42b5      	cmp	r5, r6
 8007704:	d11a      	bne.n	800773c <_printf_common+0xc8>
 8007706:	2000      	movs	r0, #0
 8007708:	e008      	b.n	800771c <_printf_common+0xa8>
 800770a:	2301      	movs	r3, #1
 800770c:	4652      	mov	r2, sl
 800770e:	4649      	mov	r1, r9
 8007710:	4638      	mov	r0, r7
 8007712:	47c0      	blx	r8
 8007714:	3001      	adds	r0, #1
 8007716:	d103      	bne.n	8007720 <_printf_common+0xac>
 8007718:	f04f 30ff 	mov.w	r0, #4294967295
 800771c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007720:	3501      	adds	r5, #1
 8007722:	e7c6      	b.n	80076b2 <_printf_common+0x3e>
 8007724:	18e1      	adds	r1, r4, r3
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	2030      	movs	r0, #48	; 0x30
 800772a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800772e:	4422      	add	r2, r4
 8007730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007738:	3302      	adds	r3, #2
 800773a:	e7c7      	b.n	80076cc <_printf_common+0x58>
 800773c:	2301      	movs	r3, #1
 800773e:	4622      	mov	r2, r4
 8007740:	4649      	mov	r1, r9
 8007742:	4638      	mov	r0, r7
 8007744:	47c0      	blx	r8
 8007746:	3001      	adds	r0, #1
 8007748:	d0e6      	beq.n	8007718 <_printf_common+0xa4>
 800774a:	3601      	adds	r6, #1
 800774c:	e7d9      	b.n	8007702 <_printf_common+0x8e>
	...

08007750 <_printf_i>:
 8007750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007754:	7e0f      	ldrb	r7, [r1, #24]
 8007756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007758:	2f78      	cmp	r7, #120	; 0x78
 800775a:	4691      	mov	r9, r2
 800775c:	4680      	mov	r8, r0
 800775e:	460c      	mov	r4, r1
 8007760:	469a      	mov	sl, r3
 8007762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007766:	d807      	bhi.n	8007778 <_printf_i+0x28>
 8007768:	2f62      	cmp	r7, #98	; 0x62
 800776a:	d80a      	bhi.n	8007782 <_printf_i+0x32>
 800776c:	2f00      	cmp	r7, #0
 800776e:	f000 80d8 	beq.w	8007922 <_printf_i+0x1d2>
 8007772:	2f58      	cmp	r7, #88	; 0x58
 8007774:	f000 80a3 	beq.w	80078be <_printf_i+0x16e>
 8007778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800777c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007780:	e03a      	b.n	80077f8 <_printf_i+0xa8>
 8007782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007786:	2b15      	cmp	r3, #21
 8007788:	d8f6      	bhi.n	8007778 <_printf_i+0x28>
 800778a:	a101      	add	r1, pc, #4	; (adr r1, 8007790 <_printf_i+0x40>)
 800778c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007790:	080077e9 	.word	0x080077e9
 8007794:	080077fd 	.word	0x080077fd
 8007798:	08007779 	.word	0x08007779
 800779c:	08007779 	.word	0x08007779
 80077a0:	08007779 	.word	0x08007779
 80077a4:	08007779 	.word	0x08007779
 80077a8:	080077fd 	.word	0x080077fd
 80077ac:	08007779 	.word	0x08007779
 80077b0:	08007779 	.word	0x08007779
 80077b4:	08007779 	.word	0x08007779
 80077b8:	08007779 	.word	0x08007779
 80077bc:	08007909 	.word	0x08007909
 80077c0:	0800782d 	.word	0x0800782d
 80077c4:	080078eb 	.word	0x080078eb
 80077c8:	08007779 	.word	0x08007779
 80077cc:	08007779 	.word	0x08007779
 80077d0:	0800792b 	.word	0x0800792b
 80077d4:	08007779 	.word	0x08007779
 80077d8:	0800782d 	.word	0x0800782d
 80077dc:	08007779 	.word	0x08007779
 80077e0:	08007779 	.word	0x08007779
 80077e4:	080078f3 	.word	0x080078f3
 80077e8:	682b      	ldr	r3, [r5, #0]
 80077ea:	1d1a      	adds	r2, r3, #4
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	602a      	str	r2, [r5, #0]
 80077f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80077f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80077f8:	2301      	movs	r3, #1
 80077fa:	e0a3      	b.n	8007944 <_printf_i+0x1f4>
 80077fc:	6820      	ldr	r0, [r4, #0]
 80077fe:	6829      	ldr	r1, [r5, #0]
 8007800:	0606      	lsls	r6, r0, #24
 8007802:	f101 0304 	add.w	r3, r1, #4
 8007806:	d50a      	bpl.n	800781e <_printf_i+0xce>
 8007808:	680e      	ldr	r6, [r1, #0]
 800780a:	602b      	str	r3, [r5, #0]
 800780c:	2e00      	cmp	r6, #0
 800780e:	da03      	bge.n	8007818 <_printf_i+0xc8>
 8007810:	232d      	movs	r3, #45	; 0x2d
 8007812:	4276      	negs	r6, r6
 8007814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007818:	485e      	ldr	r0, [pc, #376]	; (8007994 <_printf_i+0x244>)
 800781a:	230a      	movs	r3, #10
 800781c:	e019      	b.n	8007852 <_printf_i+0x102>
 800781e:	680e      	ldr	r6, [r1, #0]
 8007820:	602b      	str	r3, [r5, #0]
 8007822:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007826:	bf18      	it	ne
 8007828:	b236      	sxthne	r6, r6
 800782a:	e7ef      	b.n	800780c <_printf_i+0xbc>
 800782c:	682b      	ldr	r3, [r5, #0]
 800782e:	6820      	ldr	r0, [r4, #0]
 8007830:	1d19      	adds	r1, r3, #4
 8007832:	6029      	str	r1, [r5, #0]
 8007834:	0601      	lsls	r1, r0, #24
 8007836:	d501      	bpl.n	800783c <_printf_i+0xec>
 8007838:	681e      	ldr	r6, [r3, #0]
 800783a:	e002      	b.n	8007842 <_printf_i+0xf2>
 800783c:	0646      	lsls	r6, r0, #25
 800783e:	d5fb      	bpl.n	8007838 <_printf_i+0xe8>
 8007840:	881e      	ldrh	r6, [r3, #0]
 8007842:	4854      	ldr	r0, [pc, #336]	; (8007994 <_printf_i+0x244>)
 8007844:	2f6f      	cmp	r7, #111	; 0x6f
 8007846:	bf0c      	ite	eq
 8007848:	2308      	moveq	r3, #8
 800784a:	230a      	movne	r3, #10
 800784c:	2100      	movs	r1, #0
 800784e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007852:	6865      	ldr	r5, [r4, #4]
 8007854:	60a5      	str	r5, [r4, #8]
 8007856:	2d00      	cmp	r5, #0
 8007858:	bfa2      	ittt	ge
 800785a:	6821      	ldrge	r1, [r4, #0]
 800785c:	f021 0104 	bicge.w	r1, r1, #4
 8007860:	6021      	strge	r1, [r4, #0]
 8007862:	b90e      	cbnz	r6, 8007868 <_printf_i+0x118>
 8007864:	2d00      	cmp	r5, #0
 8007866:	d04d      	beq.n	8007904 <_printf_i+0x1b4>
 8007868:	4615      	mov	r5, r2
 800786a:	fbb6 f1f3 	udiv	r1, r6, r3
 800786e:	fb03 6711 	mls	r7, r3, r1, r6
 8007872:	5dc7      	ldrb	r7, [r0, r7]
 8007874:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007878:	4637      	mov	r7, r6
 800787a:	42bb      	cmp	r3, r7
 800787c:	460e      	mov	r6, r1
 800787e:	d9f4      	bls.n	800786a <_printf_i+0x11a>
 8007880:	2b08      	cmp	r3, #8
 8007882:	d10b      	bne.n	800789c <_printf_i+0x14c>
 8007884:	6823      	ldr	r3, [r4, #0]
 8007886:	07de      	lsls	r6, r3, #31
 8007888:	d508      	bpl.n	800789c <_printf_i+0x14c>
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	6861      	ldr	r1, [r4, #4]
 800788e:	4299      	cmp	r1, r3
 8007890:	bfde      	ittt	le
 8007892:	2330      	movle	r3, #48	; 0x30
 8007894:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007898:	f105 35ff 	addle.w	r5, r5, #4294967295
 800789c:	1b52      	subs	r2, r2, r5
 800789e:	6122      	str	r2, [r4, #16]
 80078a0:	f8cd a000 	str.w	sl, [sp]
 80078a4:	464b      	mov	r3, r9
 80078a6:	aa03      	add	r2, sp, #12
 80078a8:	4621      	mov	r1, r4
 80078aa:	4640      	mov	r0, r8
 80078ac:	f7ff fee2 	bl	8007674 <_printf_common>
 80078b0:	3001      	adds	r0, #1
 80078b2:	d14c      	bne.n	800794e <_printf_i+0x1fe>
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	b004      	add	sp, #16
 80078ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078be:	4835      	ldr	r0, [pc, #212]	; (8007994 <_printf_i+0x244>)
 80078c0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80078c4:	6829      	ldr	r1, [r5, #0]
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	f851 6b04 	ldr.w	r6, [r1], #4
 80078cc:	6029      	str	r1, [r5, #0]
 80078ce:	061d      	lsls	r5, r3, #24
 80078d0:	d514      	bpl.n	80078fc <_printf_i+0x1ac>
 80078d2:	07df      	lsls	r7, r3, #31
 80078d4:	bf44      	itt	mi
 80078d6:	f043 0320 	orrmi.w	r3, r3, #32
 80078da:	6023      	strmi	r3, [r4, #0]
 80078dc:	b91e      	cbnz	r6, 80078e6 <_printf_i+0x196>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	f023 0320 	bic.w	r3, r3, #32
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	2310      	movs	r3, #16
 80078e8:	e7b0      	b.n	800784c <_printf_i+0xfc>
 80078ea:	6823      	ldr	r3, [r4, #0]
 80078ec:	f043 0320 	orr.w	r3, r3, #32
 80078f0:	6023      	str	r3, [r4, #0]
 80078f2:	2378      	movs	r3, #120	; 0x78
 80078f4:	4828      	ldr	r0, [pc, #160]	; (8007998 <_printf_i+0x248>)
 80078f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80078fa:	e7e3      	b.n	80078c4 <_printf_i+0x174>
 80078fc:	0659      	lsls	r1, r3, #25
 80078fe:	bf48      	it	mi
 8007900:	b2b6      	uxthmi	r6, r6
 8007902:	e7e6      	b.n	80078d2 <_printf_i+0x182>
 8007904:	4615      	mov	r5, r2
 8007906:	e7bb      	b.n	8007880 <_printf_i+0x130>
 8007908:	682b      	ldr	r3, [r5, #0]
 800790a:	6826      	ldr	r6, [r4, #0]
 800790c:	6961      	ldr	r1, [r4, #20]
 800790e:	1d18      	adds	r0, r3, #4
 8007910:	6028      	str	r0, [r5, #0]
 8007912:	0635      	lsls	r5, r6, #24
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	d501      	bpl.n	800791c <_printf_i+0x1cc>
 8007918:	6019      	str	r1, [r3, #0]
 800791a:	e002      	b.n	8007922 <_printf_i+0x1d2>
 800791c:	0670      	lsls	r0, r6, #25
 800791e:	d5fb      	bpl.n	8007918 <_printf_i+0x1c8>
 8007920:	8019      	strh	r1, [r3, #0]
 8007922:	2300      	movs	r3, #0
 8007924:	6123      	str	r3, [r4, #16]
 8007926:	4615      	mov	r5, r2
 8007928:	e7ba      	b.n	80078a0 <_printf_i+0x150>
 800792a:	682b      	ldr	r3, [r5, #0]
 800792c:	1d1a      	adds	r2, r3, #4
 800792e:	602a      	str	r2, [r5, #0]
 8007930:	681d      	ldr	r5, [r3, #0]
 8007932:	6862      	ldr	r2, [r4, #4]
 8007934:	2100      	movs	r1, #0
 8007936:	4628      	mov	r0, r5
 8007938:	f7f8 fc4a 	bl	80001d0 <memchr>
 800793c:	b108      	cbz	r0, 8007942 <_printf_i+0x1f2>
 800793e:	1b40      	subs	r0, r0, r5
 8007940:	6060      	str	r0, [r4, #4]
 8007942:	6863      	ldr	r3, [r4, #4]
 8007944:	6123      	str	r3, [r4, #16]
 8007946:	2300      	movs	r3, #0
 8007948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800794c:	e7a8      	b.n	80078a0 <_printf_i+0x150>
 800794e:	6923      	ldr	r3, [r4, #16]
 8007950:	462a      	mov	r2, r5
 8007952:	4649      	mov	r1, r9
 8007954:	4640      	mov	r0, r8
 8007956:	47d0      	blx	sl
 8007958:	3001      	adds	r0, #1
 800795a:	d0ab      	beq.n	80078b4 <_printf_i+0x164>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	079b      	lsls	r3, r3, #30
 8007960:	d413      	bmi.n	800798a <_printf_i+0x23a>
 8007962:	68e0      	ldr	r0, [r4, #12]
 8007964:	9b03      	ldr	r3, [sp, #12]
 8007966:	4298      	cmp	r0, r3
 8007968:	bfb8      	it	lt
 800796a:	4618      	movlt	r0, r3
 800796c:	e7a4      	b.n	80078b8 <_printf_i+0x168>
 800796e:	2301      	movs	r3, #1
 8007970:	4632      	mov	r2, r6
 8007972:	4649      	mov	r1, r9
 8007974:	4640      	mov	r0, r8
 8007976:	47d0      	blx	sl
 8007978:	3001      	adds	r0, #1
 800797a:	d09b      	beq.n	80078b4 <_printf_i+0x164>
 800797c:	3501      	adds	r5, #1
 800797e:	68e3      	ldr	r3, [r4, #12]
 8007980:	9903      	ldr	r1, [sp, #12]
 8007982:	1a5b      	subs	r3, r3, r1
 8007984:	42ab      	cmp	r3, r5
 8007986:	dcf2      	bgt.n	800796e <_printf_i+0x21e>
 8007988:	e7eb      	b.n	8007962 <_printf_i+0x212>
 800798a:	2500      	movs	r5, #0
 800798c:	f104 0619 	add.w	r6, r4, #25
 8007990:	e7f5      	b.n	800797e <_printf_i+0x22e>
 8007992:	bf00      	nop
 8007994:	08007e65 	.word	0x08007e65
 8007998:	08007e76 	.word	0x08007e76

0800799c <_sbrk_r>:
 800799c:	b538      	push	{r3, r4, r5, lr}
 800799e:	4d06      	ldr	r5, [pc, #24]	; (80079b8 <_sbrk_r+0x1c>)
 80079a0:	2300      	movs	r3, #0
 80079a2:	4604      	mov	r4, r0
 80079a4:	4608      	mov	r0, r1
 80079a6:	602b      	str	r3, [r5, #0]
 80079a8:	f7f9 fa54 	bl	8000e54 <_sbrk>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d102      	bne.n	80079b6 <_sbrk_r+0x1a>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b103      	cbz	r3, 80079b6 <_sbrk_r+0x1a>
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	2000047c 	.word	0x2000047c

080079bc <__sread>:
 80079bc:	b510      	push	{r4, lr}
 80079be:	460c      	mov	r4, r1
 80079c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079c4:	f000 f8a0 	bl	8007b08 <_read_r>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	bfab      	itete	ge
 80079cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80079ce:	89a3      	ldrhlt	r3, [r4, #12]
 80079d0:	181b      	addge	r3, r3, r0
 80079d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80079d6:	bfac      	ite	ge
 80079d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80079da:	81a3      	strhlt	r3, [r4, #12]
 80079dc:	bd10      	pop	{r4, pc}

080079de <__swrite>:
 80079de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e2:	461f      	mov	r7, r3
 80079e4:	898b      	ldrh	r3, [r1, #12]
 80079e6:	05db      	lsls	r3, r3, #23
 80079e8:	4605      	mov	r5, r0
 80079ea:	460c      	mov	r4, r1
 80079ec:	4616      	mov	r6, r2
 80079ee:	d505      	bpl.n	80079fc <__swrite+0x1e>
 80079f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f4:	2302      	movs	r3, #2
 80079f6:	2200      	movs	r2, #0
 80079f8:	f000 f868 	bl	8007acc <_lseek_r>
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	4632      	mov	r2, r6
 8007a0a:	463b      	mov	r3, r7
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a12:	f000 b817 	b.w	8007a44 <_write_r>

08007a16 <__sseek>:
 8007a16:	b510      	push	{r4, lr}
 8007a18:	460c      	mov	r4, r1
 8007a1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a1e:	f000 f855 	bl	8007acc <_lseek_r>
 8007a22:	1c43      	adds	r3, r0, #1
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	bf15      	itete	ne
 8007a28:	6560      	strne	r0, [r4, #84]	; 0x54
 8007a2a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007a2e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007a32:	81a3      	strheq	r3, [r4, #12]
 8007a34:	bf18      	it	ne
 8007a36:	81a3      	strhne	r3, [r4, #12]
 8007a38:	bd10      	pop	{r4, pc}

08007a3a <__sclose>:
 8007a3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a3e:	f000 b813 	b.w	8007a68 <_close_r>
	...

08007a44 <_write_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4d07      	ldr	r5, [pc, #28]	; (8007a64 <_write_r+0x20>)
 8007a48:	4604      	mov	r4, r0
 8007a4a:	4608      	mov	r0, r1
 8007a4c:	4611      	mov	r1, r2
 8007a4e:	2200      	movs	r2, #0
 8007a50:	602a      	str	r2, [r5, #0]
 8007a52:	461a      	mov	r2, r3
 8007a54:	f7f9 f9ad 	bl	8000db2 <_write>
 8007a58:	1c43      	adds	r3, r0, #1
 8007a5a:	d102      	bne.n	8007a62 <_write_r+0x1e>
 8007a5c:	682b      	ldr	r3, [r5, #0]
 8007a5e:	b103      	cbz	r3, 8007a62 <_write_r+0x1e>
 8007a60:	6023      	str	r3, [r4, #0]
 8007a62:	bd38      	pop	{r3, r4, r5, pc}
 8007a64:	2000047c 	.word	0x2000047c

08007a68 <_close_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4d06      	ldr	r5, [pc, #24]	; (8007a84 <_close_r+0x1c>)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
 8007a72:	602b      	str	r3, [r5, #0]
 8007a74:	f7f9 f9b9 	bl	8000dea <_close>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d102      	bne.n	8007a82 <_close_r+0x1a>
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	b103      	cbz	r3, 8007a82 <_close_r+0x1a>
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	2000047c 	.word	0x2000047c

08007a88 <_fstat_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4d07      	ldr	r5, [pc, #28]	; (8007aa8 <_fstat_r+0x20>)
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	4604      	mov	r4, r0
 8007a90:	4608      	mov	r0, r1
 8007a92:	4611      	mov	r1, r2
 8007a94:	602b      	str	r3, [r5, #0]
 8007a96:	f7f9 f9b4 	bl	8000e02 <_fstat>
 8007a9a:	1c43      	adds	r3, r0, #1
 8007a9c:	d102      	bne.n	8007aa4 <_fstat_r+0x1c>
 8007a9e:	682b      	ldr	r3, [r5, #0]
 8007aa0:	b103      	cbz	r3, 8007aa4 <_fstat_r+0x1c>
 8007aa2:	6023      	str	r3, [r4, #0]
 8007aa4:	bd38      	pop	{r3, r4, r5, pc}
 8007aa6:	bf00      	nop
 8007aa8:	2000047c 	.word	0x2000047c

08007aac <_isatty_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4d06      	ldr	r5, [pc, #24]	; (8007ac8 <_isatty_r+0x1c>)
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	4604      	mov	r4, r0
 8007ab4:	4608      	mov	r0, r1
 8007ab6:	602b      	str	r3, [r5, #0]
 8007ab8:	f7f9 f9b3 	bl	8000e22 <_isatty>
 8007abc:	1c43      	adds	r3, r0, #1
 8007abe:	d102      	bne.n	8007ac6 <_isatty_r+0x1a>
 8007ac0:	682b      	ldr	r3, [r5, #0]
 8007ac2:	b103      	cbz	r3, 8007ac6 <_isatty_r+0x1a>
 8007ac4:	6023      	str	r3, [r4, #0]
 8007ac6:	bd38      	pop	{r3, r4, r5, pc}
 8007ac8:	2000047c 	.word	0x2000047c

08007acc <_lseek_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4d07      	ldr	r5, [pc, #28]	; (8007aec <_lseek_r+0x20>)
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	4608      	mov	r0, r1
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	602a      	str	r2, [r5, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	f7f9 f9ac 	bl	8000e38 <_lseek>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d102      	bne.n	8007aea <_lseek_r+0x1e>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	b103      	cbz	r3, 8007aea <_lseek_r+0x1e>
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	2000047c 	.word	0x2000047c

08007af0 <__malloc_lock>:
 8007af0:	4801      	ldr	r0, [pc, #4]	; (8007af8 <__malloc_lock+0x8>)
 8007af2:	f7ff bb1d 	b.w	8007130 <__retarget_lock_acquire_recursive>
 8007af6:	bf00      	nop
 8007af8:	20000470 	.word	0x20000470

08007afc <__malloc_unlock>:
 8007afc:	4801      	ldr	r0, [pc, #4]	; (8007b04 <__malloc_unlock+0x8>)
 8007afe:	f7ff bb18 	b.w	8007132 <__retarget_lock_release_recursive>
 8007b02:	bf00      	nop
 8007b04:	20000470 	.word	0x20000470

08007b08 <_read_r>:
 8007b08:	b538      	push	{r3, r4, r5, lr}
 8007b0a:	4d07      	ldr	r5, [pc, #28]	; (8007b28 <_read_r+0x20>)
 8007b0c:	4604      	mov	r4, r0
 8007b0e:	4608      	mov	r0, r1
 8007b10:	4611      	mov	r1, r2
 8007b12:	2200      	movs	r2, #0
 8007b14:	602a      	str	r2, [r5, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	f7f9 f92e 	bl	8000d78 <_read>
 8007b1c:	1c43      	adds	r3, r0, #1
 8007b1e:	d102      	bne.n	8007b26 <_read_r+0x1e>
 8007b20:	682b      	ldr	r3, [r5, #0]
 8007b22:	b103      	cbz	r3, 8007b26 <_read_r+0x1e>
 8007b24:	6023      	str	r3, [r4, #0]
 8007b26:	bd38      	pop	{r3, r4, r5, pc}
 8007b28:	2000047c 	.word	0x2000047c

08007b2c <_init>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	bf00      	nop
 8007b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b32:	bc08      	pop	{r3}
 8007b34:	469e      	mov	lr, r3
 8007b36:	4770      	bx	lr

08007b38 <_fini>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	bf00      	nop
 8007b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3e:	bc08      	pop	{r3}
 8007b40:	469e      	mov	lr, r3
 8007b42:	4770      	bx	lr
