
L4Initial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005034  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  080051c4  080051c4  000151c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c4  080059c4  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059cc  080059cc  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080059d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08005a44  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08005a44  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de2c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f7f  00000000  00000000  0002decc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002fe50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00030a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b305  00000000  00000000  00031598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e0d7  00000000  00000000  0004c89d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5954  00000000  00000000  0005a974  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001002c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003898  00000000  00000000  00100318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080051ac 	.word	0x080051ac

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080051ac 	.word	0x080051ac

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
#if(_DEBUG)
PUTCHAR_PROTOTYPE {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800057c:	1d39      	adds	r1, r7, #4
 800057e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000582:	2201      	movs	r2, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <__io_putchar+0x20>)
 8000586:	f003 f9a5 	bl	80038d4 <HAL_UART_Transmit>

	return ch;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000f0 	.word	0x200000f0

08000598 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059e:	f000 febb 	bl	8001318 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a2:	f000 f86d 	bl	8000680 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a6:	f000 f929 	bl	80007fc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005aa:	f000 f8f7 	bl	800079c <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80005ae:	f000 f8b7 	bl	8000720 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	int upTime = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
	uint8_t status = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71bb      	strb	r3, [r7, #6]

	uint8_t sil_rev_short = 0b0000000;
 80005be:	2300      	movs	r3, #0
 80005c0:	717b      	strb	r3, [r7, #5]

	printf("Checking Silicon Rev Bits\n\r");
 80005c2:	4824      	ldr	r0, [pc, #144]	; (8000654 <main+0xbc>)
 80005c4:	f003 fe64 	bl	8004290 <iprintf>
	AX_Radio_RW_Short_Address(&sil_rev_short, &status, &data, &hspi1, 0xff, 0);
 80005c8:	1dba      	adds	r2, r7, #6
 80005ca:	1df9      	adds	r1, r7, #7
 80005cc:	1d78      	adds	r0, r7, #5
 80005ce:	2300      	movs	r3, #0
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	23ff      	movs	r3, #255	; 0xff
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <main+0xc0>)
 80005d8:	f000 fb71 	bl	8000cbe <AX_Radio_RW_Short_Address>
	upTime++;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3301      	adds	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
	printf("Sys Uptime: %d\n\r", upTime);
 80005e2:	68f9      	ldr	r1, [r7, #12]
 80005e4:	481d      	ldr	r0, [pc, #116]	; (800065c <main+0xc4>)
 80005e6:	f003 fe53 	bl	8004290 <iprintf>
	printf("Status Bits: %x\n\r", status);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4619      	mov	r1, r3
 80005ee:	481c      	ldr	r0, [pc, #112]	; (8000660 <main+0xc8>)
 80005f0:	f003 fe4e 	bl	8004290 <iprintf>
	printf("Silicon Rev Bits: %x\n\n\r", data);
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	4619      	mov	r1, r3
 80005f8:	481a      	ldr	r0, [pc, #104]	; (8000664 <main+0xcc>)
 80005fa:	f003 fe49 	bl	8004290 <iprintf>
	HAL_Delay(3000);
 80005fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000602:	f000 ff05 	bl	8001410 <HAL_Delay>

	printf("Attempting to init radio in full transmit @ 433MHz\n\r");
 8000606:	4818      	ldr	r0, [pc, #96]	; (8000668 <main+0xd0>)
 8000608:	f003 fe42 	bl	8004290 <iprintf>
//	int init_status = AX_Radio_Init(&hspi1);
	int init_status = AX_Radio_Full_Init(&hspi1);
 800060c:	4812      	ldr	r0, [pc, #72]	; (8000658 <main+0xc0>)
 800060e:	f000 fe0f 	bl	8001230 <AX_Radio_Full_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	60bb      	str	r3, [r7, #8]
	printf("Result: %d\n\r", init_status);
 8000616:	68b9      	ldr	r1, [r7, #8]
 8000618:	4814      	ldr	r0, [pc, #80]	; (800066c <main+0xd4>)
 800061a:	f003 fe39 	bl	8004290 <iprintf>
	printf("Entering eternal loop\n\n\r");
 800061e:	4814      	ldr	r0, [pc, #80]	; (8000670 <main+0xd8>)
 8000620:	f003 fe36 	bl	8004290 <iprintf>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		printf("Switching to full TX\n\r");
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <main+0xdc>)
 8000626:	f003 fe33 	bl	8004290 <iprintf>
		AX_Radio_FIFO_Routine(&hspi1);
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <main+0xc0>)
 800062c:	f000 fd44 	bl	80010b8 <AX_Radio_FIFO_Routine>
		printf("AX Status %x\n\r", AX_Radio_Get_Status(&hspi1));
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <main+0xc0>)
 8000632:	f000 fe11 	bl	8001258 <AX_Radio_Get_Status>
 8000636:	4603      	mov	r3, r0
 8000638:	4619      	mov	r1, r3
 800063a:	480f      	ldr	r0, [pc, #60]	; (8000678 <main+0xe0>)
 800063c:	f003 fe28 	bl	8004290 <iprintf>
		printf("PLL Status %x\n\r", AX_Radio_Check_PLL(&hspi1));
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <main+0xc0>)
 8000642:	f000 fe2b 	bl	800129c <AX_Radio_Check_PLL>
 8000646:	4603      	mov	r3, r0
 8000648:	4619      	mov	r1, r3
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <main+0xe4>)
 800064c:	f003 fe20 	bl	8004290 <iprintf>
		printf("Switching to full TX\n\r");
 8000650:	e7e8      	b.n	8000624 <main+0x8c>
 8000652:	bf00      	nop
 8000654:	080051c4 	.word	0x080051c4
 8000658:	2000008c 	.word	0x2000008c
 800065c:	080051e0 	.word	0x080051e0
 8000660:	080051f4 	.word	0x080051f4
 8000664:	08005208 	.word	0x08005208
 8000668:	08005220 	.word	0x08005220
 800066c:	08005258 	.word	0x08005258
 8000670:	08005268 	.word	0x08005268
 8000674:	08005284 	.word	0x08005284
 8000678:	0800529c 	.word	0x0800529c
 800067c:	080052ac 	.word	0x080052ac

08000680 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b096      	sub	sp, #88	; 0x58
 8000684:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2244      	movs	r2, #68	; 0x44
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 fdf6 	bl	8004280 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80006a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a6:	f001 f955 	bl	8001954 <HAL_PWREx_ControlVoltageScaling>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80006b0:	f000 f936 	bl	8000920 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006b4:	2310      	movs	r3, #16
 80006b6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c0:	2360      	movs	r3, #96	; 0x60
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c8:	2301      	movs	r3, #1
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 80006d0:	2328      	movs	r3, #40	; 0x28
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 f98d 	bl	8001a00 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x70>
		Error_Handler();
 80006ec:	f000 f918 	bl	8000920 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2303      	movs	r3, #3
 80006f6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000704:	463b      	mov	r3, r7
 8000706:	2104      	movs	r1, #4
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fddb 	bl	80022c4 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x98>
		Error_Handler();
 8000714:	f000 f904 	bl	8000920 <Error_Handler>
	}
}
 8000718:	bf00      	nop
 800071a:	3758      	adds	r7, #88	; 0x58
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_SPI1_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <MX_SPI1_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_SPI1_Init+0x74>)
 800072c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000730:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_SPI1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_SPI1_Init+0x74>)
 800073a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800073e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_SPI1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_SPI1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_SPI1_Init+0x74>)
 800074e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000752:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_SPI1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_SPI1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_SPI1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_SPI1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_SPI1_Init+0x74>)
 800076e:	2207      	movs	r2, #7
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_SPI1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_SPI1_Init+0x74>)
 800077a:	2208      	movs	r2, #8
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_SPI1_Init+0x74>)
 8000780:	f002 f94a 	bl	8002a18 <HAL_SPI_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_SPI1_Init+0x6e>
		Error_Handler();
 800078a:	f000 f8c9 	bl	8000920 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000008c 	.word	0x2000008c
 8000798:	40013000 	.word	0x40013000

0800079c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a2:	4a15      	ldr	r2, [pc, #84]	; (80007f8 <MX_USART2_UART_Init+0x5c>)
 80007a4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007e0:	f003 f82a 	bl	8003838 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80007ea:	f000 f899 	bl	8000920 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000f0 	.word	0x200000f0
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b40      	ldr	r3, [pc, #256]	; (8000914 <MX_GPIO_Init+0x118>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a3f      	ldr	r2, [pc, #252]	; (8000914 <MX_GPIO_Init+0x118>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b3d      	ldr	r3, [pc, #244]	; (8000914 <MX_GPIO_Init+0x118>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	4b3a      	ldr	r3, [pc, #232]	; (8000914 <MX_GPIO_Init+0x118>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a39      	ldr	r2, [pc, #228]	; (8000914 <MX_GPIO_Init+0x118>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b37      	ldr	r3, [pc, #220]	; (8000914 <MX_GPIO_Init+0x118>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b34      	ldr	r3, [pc, #208]	; (8000914 <MX_GPIO_Init+0x118>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a33      	ldr	r2, [pc, #204]	; (8000914 <MX_GPIO_Init+0x118>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b31      	ldr	r3, [pc, #196]	; (8000914 <MX_GPIO_Init+0x118>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <MX_GPIO_Init+0x118>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a2d      	ldr	r2, [pc, #180]	; (8000914 <MX_GPIO_Init+0x118>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <MX_GPIO_Init+0x118>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin,
 8000872:	2200      	movs	r2, #0
 8000874:	21b0      	movs	r1, #176	; 0xb0
 8000876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087a:	f001 f845 	bl	8001908 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000884:	4824      	ldr	r0, [pc, #144]	; (8000918 <MX_GPIO_Init+0x11c>)
 8000886:	f001 f83f 	bl	8001908 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(AX_CS_GPIO_Port, AX_CS_Pin, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f001 f838 	bl	8001908 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	481b      	ldr	r0, [pc, #108]	; (800091c <MX_GPIO_Init+0x120>)
 80008b0:	f000 feb8 	bl	8001624 <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin AX_CS_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin | AX_CS_Pin;
 80008b4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80008b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d0:	f000 fea8 	bl	8001624 <HAL_GPIO_Init>

	/*Configure GPIO pin : SMPS_PG_Pin */
	GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80008d4:	2340      	movs	r3, #64	; 0x40
 80008d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ea:	f000 fe9b 	bl	8001624 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 80008ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_GPIO_Init+0x11c>)
 8000908:	f000 fe8c 	bl	8001624 <HAL_GPIO_Init>

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000
 8000918:	48000400 	.word	0x48000400
 800091c:	48000800 	.word	0x48000800

08000920 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <HAL_MspInit+0x44>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <HAL_MspInit+0x44>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6613      	str	r3, [r2, #96]	; 0x60
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <HAL_MspInit+0x44>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_MspInit+0x44>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_MspInit+0x44>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6593      	str	r3, [r2, #88]	; 0x58
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_MspInit+0x44>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <HAL_SPI_MspInit+0x80>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d129      	bne.n	80009ea <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_SPI_MspInit+0x84>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_SPI_MspInit+0x84>)
 800099c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a0:	6613      	str	r3, [r2, #96]	; 0x60
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_SPI_MspInit+0x84>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_SPI_MspInit+0x84>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <HAL_SPI_MspInit+0x84>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_SPI_MspInit+0x84>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80009c6:	f641 0302 	movw	r3, #6146	; 0x1802
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009d8:	2305      	movs	r3, #5
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 fe1d 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	; 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40013000 	.word	0x40013000
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b096      	sub	sp, #88	; 0x58
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	2234      	movs	r2, #52	; 0x34
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 fc2f 	bl	8004280 <memset>
  if(huart->Instance==USART2)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <HAL_UART_MspInit+0xa8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d136      	bne.n	8000a9a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 fe67 	bl	800270c <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a44:	f7ff ff6c 	bl	8000920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_UART_MspInit+0xac>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4c:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <HAL_UART_MspInit+0xac>)
 8000a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a52:	6593      	str	r3, [r2, #88]	; 0x58
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <HAL_UART_MspInit+0xac>)
 8000a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_UART_MspInit+0xac>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <HAL_UART_MspInit+0xac>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_UART_MspInit+0xac>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 fdc5 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3758      	adds	r7, #88	; 0x58
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	40021000 	.word	0x40021000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 fc6a 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00a      	b.n	8000b28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b12:	f3af 8000 	nop.w
 8000b16:	4601      	mov	r1, r0
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	60ba      	str	r2, [r7, #8]
 8000b1e:	b2ca      	uxtb	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf0      	blt.n	8000b12 <_read+0x12>
	}

return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e009      	b.n	8000b60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fd0d 	bl	8000574 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf1      	blt.n	8000b4c <_write+0x12>
	}
	return len;
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_close>:

int _close(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_isatty>:

int _isatty(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	return 1;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
	return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f003 fb00 	bl	8004210 <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000a000 	.word	0x2000a000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	20000174 	.word	0x20000174
 8000c44:	20000190 	.word	0x20000190

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c70:	f7ff ffea 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LoopForever+0xe>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <LoopForever+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f003 fabf 	bl	800421c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9e:	f7ff fc7b 	bl	8000598 <main>

08000ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cb0:	080059d4 	.word	0x080059d4
  ldr r2, =_sbss
 8000cb4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cb8:	2000018c 	.word	0x2000018c

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>

08000cbe <AX_Radio_RW_Short_Address>:
 */
#include "ax5243.h"

HAL_StatusTypeDef AX_Radio_RW_Short_Address(uint8_t * addr, uint8_t * status, uint8_t * data,
												SPI_HandleTypeDef * hspi, uint32_t timeout, uint8_t rw)
	{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b088      	sub	sp, #32
 8000cc2:	af02      	add	r7, sp, #8
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	603b      	str	r3, [r7, #0]
		  HAL_StatusTypeDef status1, status2;
		  //bring chip select low
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f000 fe17 	bl	8001908 <HAL_GPIO_WritePin>
		  //mask for read or write depending on flag
		  *addr = rw == 0 ? *addr & 0x7F : *addr | 0x80;
 8000cda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d105      	bne.n	8000cee <AX_Radio_RW_Short_Address+0x30>
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	e004      	b.n	8000cf8 <AX_Radio_RW_Short_Address+0x3a>
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	7013      	strb	r3, [r2, #0]
		  //send 7 bit address with MSB signifying rw, receive status bits
		  status1 = HAL_SPI_TransmitReceive(hspi, (uint8_t *)addr, (uint8_t *)status, 1, timeout);
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2301      	movs	r3, #1
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	68f9      	ldr	r1, [r7, #12]
 8000d06:	6838      	ldr	r0, [r7, #0]
 8000d08:	f002 f9c7 	bl	800309a <HAL_SPI_TransmitReceive>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	75fb      	strb	r3, [r7, #23]
		  //receive data bits back
		  status2 = rw == 0 ? HAL_SPI_Receive(hspi, data, 1, timeout) : HAL_SPI_Transmit(hspi, data, 1, timeout);
 8000d10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d107      	bne.n	8000d28 <AX_Radio_RW_Short_Address+0x6a>
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	6838      	ldr	r0, [r7, #0]
 8000d20:	f002 f88b 	bl	8002e3a <HAL_SPI_Receive>
 8000d24:	4603      	mov	r3, r0
 8000d26:	e006      	b.n	8000d36 <AX_Radio_RW_Short_Address+0x78>
 8000d28:	6a3b      	ldr	r3, [r7, #32]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	6838      	ldr	r0, [r7, #0]
 8000d30:	f001 ff15 	bl	8002b5e <HAL_SPI_Transmit>
 8000d34:	4603      	mov	r3, r0
 8000d36:	75bb      	strb	r3, [r7, #22]
		  //bring chip select high
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d42:	f000 fde1 	bl	8001908 <HAL_GPIO_WritePin>

		  return status1 | status2;
 8000d46:	7dfa      	ldrb	r2, [r7, #23]
 8000d48:	7dbb      	ldrb	r3, [r7, #22]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b2db      	uxtb	r3, r3
	}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <AX_Radio_RW_Long_Address>:



HAL_StatusTypeDef AX_Radio_RW_Long_Address(uint16_t * addr, uint16_t * status, uint8_t * data,
		SPI_HandleTypeDef * hspi, uint32_t timeout, uint8_t rw)
	{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b088      	sub	sp, #32
 8000d5a:	af02      	add	r7, sp, #8
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	603b      	str	r3, [r7, #0]
		  HAL_StatusTypeDef status1, status2, status3;
		  uint8_t addr_upper, addr_lower, status_upper, status_lower;
		  //bring chip select low
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6e:	f000 fdcb 	bl	8001908 <HAL_GPIO_WritePin>
		  //mask for read or write depending on flag
		  *addr = rw == 0 ? ((*addr & 0x7FFF) | 0x7000) : *addr | 0xF000;
 8000d72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10a      	bne.n	8000d90 <AX_Radio_RW_Long_Address+0x3a>
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	e006      	b.n	8000d9e <AX_Radio_RW_Long_Address+0x48>
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000d98:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	8013      	strh	r3, [r2, #0]
		  addr_upper = *addr >> 8;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	753b      	strb	r3, [r7, #20]
		  addr_lower = *addr & 0xFF;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	74fb      	strb	r3, [r7, #19]
		  //send four bit mask and upper nibble of addr
		  status1 = HAL_SPI_TransmitReceive(hspi, (uint8_t *)&addr_upper, (uint8_t *)&status_upper, 1, timeout);
 8000db6:	f107 0212 	add.w	r2, r7, #18
 8000dba:	f107 0114 	add.w	r1, r7, #20
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	6838      	ldr	r0, [r7, #0]
 8000dc6:	f002 f968 	bl	800309a <HAL_SPI_TransmitReceive>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	75fb      	strb	r3, [r7, #23]
		  //send lower byte of addr
		  status2 = HAL_SPI_TransmitReceive(hspi, (uint8_t *)&addr_lower, (uint8_t *)&status_lower, 1, timeout);
 8000dce:	f107 0211 	add.w	r2, r7, #17
 8000dd2:	f107 0113 	add.w	r1, r7, #19
 8000dd6:	6a3b      	ldr	r3, [r7, #32]
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	6838      	ldr	r0, [r7, #0]
 8000dde:	f002 f95c 	bl	800309a <HAL_SPI_TransmitReceive>
 8000de2:	4603      	mov	r3, r0
 8000de4:	75bb      	strb	r3, [r7, #22]
		  //receive data bits back
		  status3 = rw == 0 ? HAL_SPI_Receive(hspi, data, 1, timeout) : HAL_SPI_Transmit(hspi, data, 1, timeout);
 8000de6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d107      	bne.n	8000dfe <AX_Radio_RW_Long_Address+0xa8>
 8000dee:	6a3b      	ldr	r3, [r7, #32]
 8000df0:	2201      	movs	r2, #1
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	6838      	ldr	r0, [r7, #0]
 8000df6:	f002 f820 	bl	8002e3a <HAL_SPI_Receive>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	e006      	b.n	8000e0c <AX_Radio_RW_Long_Address+0xb6>
 8000dfe:	6a3b      	ldr	r3, [r7, #32]
 8000e00:	2201      	movs	r2, #1
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	6838      	ldr	r0, [r7, #0]
 8000e06:	f001 feaa 	bl	8002b5e <HAL_SPI_Transmit>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	757b      	strb	r3, [r7, #21]
		  //bring chip select high
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f000 fd76 	bl	8001908 <HAL_GPIO_WritePin>

		  *status = (status_upper << 8) | status_lower;
 8000e1c:	7cbb      	ldrb	r3, [r7, #18]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	7c7b      	ldrb	r3, [r7, #17]
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	801a      	strh	r2, [r3, #0]

		  return status1 | status2 | status3;
 8000e30:	7dfa      	ldrb	r2, [r7, #23]
 8000e32:	7dbb      	ldrb	r3, [r7, #22]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	7d7b      	ldrb	r3, [r7, #21]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b2db      	uxtb	r3, r3
	}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <radio_write8>:


uint8_t radio_write8(uint16_t reg, uint8_t data, SPI_HandleTypeDef * hspi)
	{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af02      	add	r7, sp, #8
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	603a      	str	r2, [r7, #0]
 8000e50:	80fb      	strh	r3, [r7, #6]
 8000e52:	460b      	mov	r3, r1
 8000e54:	717b      	strb	r3, [r7, #5]
		uint16_t reg_local, status_local;
		uint8_t data_local;
		reg_local = reg;
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	81fb      	strh	r3, [r7, #14]
		status_local = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	81bb      	strh	r3, [r7, #12]
		data_local = data;
 8000e5e:	797b      	ldrb	r3, [r7, #5]
 8000e60:	72fb      	strb	r3, [r7, #11]
		return AX_Radio_RW_Long_Address(&reg_local, &status_local, &data_local,
 8000e62:	f107 020b 	add.w	r2, r7, #11
 8000e66:	f107 010c 	add.w	r1, r7, #12
 8000e6a:	f107 000e 	add.w	r0, r7, #14
 8000e6e:	2301      	movs	r3, #1
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	23ff      	movs	r3, #255	; 0xff
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	f7ff ff6d 	bl	8000d56 <AX_Radio_RW_Long_Address>
 8000e7c:	4603      	mov	r3, r0
				hspi, 0xFF, 0x1);
	}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <radio_read8>:

uint8_t radio_read8(uint16_t reg, SPI_HandleTypeDef * hspi)
	{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af02      	add	r7, sp, #8
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	6039      	str	r1, [r7, #0]
 8000e90:	80fb      	strh	r3, [r7, #6]
		uint16_t reg_local, status_local;
		uint8_t data_local = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	72fb      	strb	r3, [r7, #11]
		reg_local = reg;
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	81fb      	strh	r3, [r7, #14]
		status_local = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	81bb      	strh	r3, [r7, #12]
		AX_Radio_RW_Long_Address(&reg_local, &status_local, &data_local,
 8000e9e:	f107 020b 	add.w	r2, r7, #11
 8000ea2:	f107 010c 	add.w	r1, r7, #12
 8000ea6:	f107 000e 	add.w	r0, r7, #14
 8000eaa:	2300      	movs	r3, #0
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	23ff      	movs	r3, #255	; 0xff
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	f7ff ff4f 	bl	8000d56 <AX_Radio_RW_Long_Address>
				hspi, 0xFF, 0x0);
		return data_local;
 8000eb8:	7afb      	ldrb	r3, [r7, #11]
	}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <AX_Radio_Data_Transmission_Setup>:

	return AXRADIO_ERR_NOERROR;
}

uint8_t AX_Radio_Data_Transmission_Setup(SPI_HandleTypeDef * hspi)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
	// Initially testing with 169 MHz
	uint32_t rate = 9600; //9600bps
 8000eca:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000ece:	60fb      	str	r3, [r7, #12]
	AX_Radio_169_MHz_Settings(hspi);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f84d 	bl	8000f70 <AX_Radio_169_MHz_Settings>
	AX_Radio_Set_Data_Rate(1, rate, hspi);
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68f9      	ldr	r1, [r7, #12]
 8000eda:	2001      	movs	r0, #1
 8000edc:	f000 f8a8 	bl	8001030 <AX_Radio_Set_Data_Rate>
	AX_Radio_Set_Frequency_Deviation(rate, hspi);
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f000 f87c 	bl	8000fe0 <AX_Radio_Set_Frequency_Deviation>
	radio_write8(AX5043_REG_MODULATION, 0x08, hspi);
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	2108      	movs	r1, #8
 8000eec:	2010      	movs	r0, #16
 8000eee:	f7ff ffaa 	bl	8000e46 <radio_write8>

	// General XTAL Settings
	radio_write8(AX5043_REG_XTALOSC, 0x03, hspi);
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	2103      	movs	r1, #3
 8000ef6:	f44f 6071 	mov.w	r0, #3856	; 0xf10
 8000efa:	f7ff ffa4 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_XTALAMPL, 0x07, hspi);
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	2107      	movs	r1, #7
 8000f02:	f640 7011 	movw	r0, #3857	; 0xf11
 8000f06:	f7ff ff9e 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_XTALCAP, 0x08, hspi); // C_L = 12pF
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	f44f 70c2 	mov.w	r0, #388	; 0x184
 8000f12:	f7ff ff98 	bl	8000e46 <radio_write8>

	// Full power @ 16 dBm
	radio_write8(AX5043_REG_TXPWRCOEFFB1, 0x0F, hspi);
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	210f      	movs	r1, #15
 8000f1a:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8000f1e:	f7ff ff92 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_TXPWRCOEFFB0, 0xFF, hspi);
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	21ff      	movs	r1, #255	; 0xff
 8000f26:	f240 106b 	movw	r0, #363	; 0x16b
 8000f2a:	f7ff ff8c 	bl	8000e46 <radio_write8>

	// G3RUH encoding, HDLC framing, CCITT-16 CRC
	radio_write8(AX5043_REG_ENCODING, 0x07, hspi); // differential encoding, bit inversion, scrambler
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	2107      	movs	r1, #7
 8000f32:	2011      	movs	r0, #17
 8000f34:	f7ff ff87 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FRAMING, 0x14, hspi); // HDLC, CRC check in CCITT 16-bit
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	2114      	movs	r1, #20
 8000f3c:	2012      	movs	r0, #18
 8000f3e:	f7ff ff82 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_PKTLENCFG, 0xF0, hspi);
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	21f0      	movs	r1, #240	; 0xf0
 8000f46:	f240 2001 	movw	r0, #513	; 0x201
 8000f4a:	f7ff ff7c 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_PKTMAXLEN, 0xFF, hspi);
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	21ff      	movs	r1, #255	; 0xff
 8000f52:	f240 2003 	movw	r0, #515	; 0x203
 8000f56:	f7ff ff76 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_PKTACCEPTFLAGS, 0x20, hspi);
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	f240 2033 	movw	r0, #563	; 0x233
 8000f62:	f7ff ff70 	bl	8000e46 <radio_write8>

	// FIFOOOOOOOOOO but lets do it in main, kay?

}
 8000f66:	bf00      	nop
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <AX_Radio_169_MHz_Settings>:
	uint8_t AX_Radio_Set_Center_Frequency(fc, hspi);
	return AXRADIO_ERR_NOERROR;
}

uint8_t AX_Radio_169_MHz_Settings(SPI_HandleTypeDef * hspi)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	radio_write8(AX5043_REG_PLLVCODIV, PLLVCODIV_EXTERNAL_INDUCTOR |
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	2130      	movs	r1, #48	; 0x30
 8000f7c:	2032      	movs	r0, #50	; 0x32
 8000f7e:	f7ff ff62 	bl	8000e46 <radio_write8>
			PLLVCODIV_RFDIV_OFF, hspi);
	radio_write8(AX5043_REG_0xF34, F34_RFDIV_OFF, hspi);
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	2108      	movs	r1, #8
 8000f86:	f640 7034 	movw	r0, #3892	; 0xf34
 8000f8a:	f7ff ff5c 	bl	8000e46 <radio_write8>

	// 169 MHz, BW = idk
	// I cannot find the laws on legality on this for the fucking life of me, yolo ig
	uint32_t freq = 0x063b47bf; // freq=fc/fxtal*(2^24) | since fxtal=16MHz, freq=fc*(2^20)
 8000f8e:	4b13      	ldr	r3, [pc, #76]	; (8000fdc <AX_Radio_169_MHz_Settings+0x6c>)
 8000f90:	60fb      	str	r3, [r7, #12]
	radio_write8(AX5043_REG_FREQA0, freq, hspi);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	b2db      	uxtb	r3, r3
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	4619      	mov	r1, r3
 8000f9a:	2037      	movs	r0, #55	; 0x37
 8000f9c:	f7ff ff53 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FREQA1, (freq >> 8), hspi);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	0a1b      	lsrs	r3, r3, #8
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	4619      	mov	r1, r3
 8000faa:	2036      	movs	r0, #54	; 0x36
 8000fac:	f7ff ff4b 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FREQA2, (freq >> 16), hspi);
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	0c1b      	lsrs	r3, r3, #16
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	4619      	mov	r1, r3
 8000fba:	2035      	movs	r0, #53	; 0x35
 8000fbc:	f7ff ff43 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FREQA3, (freq >> 24), hspi);
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	0e1b      	lsrs	r3, r3, #24
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	687a      	ldr	r2, [r7, #4]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2034      	movs	r0, #52	; 0x34
 8000fcc:	f7ff ff3b 	bl	8000e46 <radio_write8>
	return AXRADIO_ERR_NOERROR;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	063b47bf 	.word	0x063b47bf

08000fe0 <AX_Radio_Set_Frequency_Deviation>:
	}
	return AXRADIO_ERR_NOERROR;
}

uint8_t AX_Radio_Set_Frequency_Deviation(uint32_t rate, SPI_HandleTypeDef * hspi)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
	uint32_t dev = (rate>>2)*(1<<20); // FSKDEV = m * 0.5 * BITRATE / fxtal * (2^24), m(odulation index)=0.5, fxtal = 16 MHz
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	089b      	lsrs	r3, r3, #2
 8000fee:	051b      	lsls	r3, r3, #20
 8000ff0:	60fb      	str	r3, [r7, #12]
	radio_write8(AX5043_REG_FSKDEV0, dev, hspi);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	683a      	ldr	r2, [r7, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f240 1063 	movw	r0, #355	; 0x163
 8000ffe:	f7ff ff22 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FSKDEV1, (dev >> 8), hspi);
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	b2db      	uxtb	r3, r3
 8001008:	683a      	ldr	r2, [r7, #0]
 800100a:	4619      	mov	r1, r3
 800100c:	f44f 70b1 	mov.w	r0, #354	; 0x162
 8001010:	f7ff ff19 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FSKDEV2, (dev >> 16), hspi);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	0c1b      	lsrs	r3, r3, #16
 8001018:	b2db      	uxtb	r3, r3
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f240 1061 	movw	r0, #353	; 0x161
 8001022:	f7ff ff10 	bl	8000e46 <radio_write8>
	return AXRADIO_ERR_NOERROR;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <AX_Radio_Set_Data_Rate>:

uint8_t AX_Radio_Set_Data_Rate(uint8_t rw, uint32_t rate, SPI_HandleTypeDef * hspi)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
 800103c:	73fb      	strb	r3, [r7, #15]
	if (rw)
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d01a      	beq.n	800107a <AX_Radio_Set_Data_Rate+0x4a>
	{
		radio_write8(AX5043_REG_TXRATE0, rate, hspi);
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	b2db      	uxtb	r3, r3
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	4619      	mov	r1, r3
 800104c:	f240 1067 	movw	r0, #359	; 0x167
 8001050:	f7ff fef9 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_TXRATE1, (rate >> 8), hspi);
 8001054:	68bb      	ldr	r3, [r7, #8]
 8001056:	0a1b      	lsrs	r3, r3, #8
 8001058:	b2db      	uxtb	r3, r3
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	4619      	mov	r1, r3
 800105e:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8001062:	f7ff fef0 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_TXRATE2, (rate >> 16), hspi);
 8001066:	68bb      	ldr	r3, [r7, #8]
 8001068:	0c1b      	lsrs	r3, r3, #16
 800106a:	b2db      	uxtb	r3, r3
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	4619      	mov	r1, r3
 8001070:	f240 1065 	movw	r0, #357	; 0x165
 8001074:	f7ff fee7 	bl	8000e46 <radio_write8>
 8001078:	e019      	b.n	80010ae <AX_Radio_Set_Data_Rate+0x7e>
	}
	else
	{
		// TODO: properly implement the receive data rate
		// NOTE: dependent on fxtal, fxtaldiv, data rate, and decimation...
		radio_write8(AX5043_REG_RXDATARATE0, rate, hspi);
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	4619      	mov	r1, r3
 8001082:	f240 1005 	movw	r0, #261	; 0x105
 8001086:	f7ff fede 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_RXDATARATE1, (rate >> 8), hspi);
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	0a1b      	lsrs	r3, r3, #8
 800108e:	b2db      	uxtb	r3, r3
 8001090:	687a      	ldr	r2, [r7, #4]
 8001092:	4619      	mov	r1, r3
 8001094:	f44f 7082 	mov.w	r0, #260	; 0x104
 8001098:	f7ff fed5 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_RXDATARATE2, (rate >> 16), hspi);
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	0c1b      	lsrs	r3, r3, #16
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4619      	mov	r1, r3
 80010a6:	f240 1003 	movw	r0, #259	; 0x103
 80010aa:	f7ff fecc 	bl	8000e46 <radio_write8>
	}
	return AXRADIO_ERR_NOERROR;
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <AX_Radio_FIFO_Routine>:

uint8_t AX_Radio_FIFO_Routine(SPI_HandleTypeDef * hspi)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	f5ad 6dc7 	sub.w	sp, sp, #1592	; 0x638
 80010be:	af00      	add	r7, sp, #0
 80010c0:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80010c4:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80010c8:	6018      	str	r0, [r3, #0]
	uint8_t preamble = 0x55;
 80010ca:	2355      	movs	r3, #85	; 0x55
 80010cc:	f887 3636 	strb.w	r3, [r7, #1590]	; 0x636
	uint8_t numBytesToSend = 100;
 80010d0:	2364      	movs	r3, #100	; 0x64
 80010d2:	f887 3635 	strb.w	r3, [r7, #1589]	; 0x635
	char beeData[] = "According to all known laws of aviation, there is no way a bee should be able to fly. Its wings are too small to get its fat little body off the ground. The bee, of course, flies anyway because bees don't care what humans think is impossible. Yellow, black. Yellow, black. Yellow, black. Yellow, black. Ooh, black and yellow! Let's shake it up a little. Barry! Breakfast is ready! Coming! Hang on a second. Hello? Barry? Adam? Can you believe this is happening? I can't. I'll pick you up. Looking sharp. Use the stairs, Your father paid good money for those. Sorry. I'm excited. Here's the graduate. We're very proud of you, son. A perfect report card, all B's. Very proud. Ma! I got a thing going here. You got lint on your fuzz. Ow! That's me! Wave to us! We'll be in row 118,000. Bye! Barry, I told you, stop flying in the house! Hey, Adam. Hey, Barry. Is that fuzz gel? A little. Special day, graduation. Never thought I'd make it. Three days grade school, three days high school. Those were awkward. Three days college. I'm glad I took a day and hitchhiked around The Hive. You did come back different. Hi, Barry. Artie, growing a mustache? Looks good. Hear about Frankie? Yeah. You going to the funeral? No, I'm not going. Everybody knows, sting someone, you die. Don't waste it on a squirrel. Such a hothead. I guess he could have just gotten out of the way. I love this incorporating an amusement park into our day. That's why we don't need vacations. Boy, quite a bit of pomp under the circumstances. Well, Adam, today we are men. We are! Bee-men. Amen! Hallelujah!";
 80010d6:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80010da:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 80010de:	4a53      	ldr	r2, [pc, #332]	; (800122c <AX_Radio_FIFO_Routine+0x174>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	4611      	mov	r1, r2
 80010e4:	f240 6327 	movw	r3, #1575	; 0x627
 80010e8:	461a      	mov	r2, r3
 80010ea:	f003 f8bb 	bl	8004264 <memcpy>
	/* Radio Control for Sending Packets*/
//	radio_write8(AX5043_REG_PWRMODE, 0x67, hspi); // Enable FIFO
	while ((radio_read8(AX5043_REG_POWSTAT, hspi) & (1 << 3)) == 0); // wait for pwrmode change to settle
 80010ee:	bf00      	nop
 80010f0:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80010f4:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80010f8:	6819      	ldr	r1, [r3, #0]
 80010fa:	2003      	movs	r0, #3
 80010fc:	f7ff fec3 	bl	8000e86 <radio_read8>
 8001100:	4603      	mov	r3, r0
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	2b00      	cmp	r3, #0
 8001108:	d0f2      	beq.n	80010f0 <AX_Radio_FIFO_Routine+0x38>
	radio_write8(AX5043_REG_FIFOSTAT, 0x03, hspi); // clear FIFO
 800110a:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800110e:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	2103      	movs	r1, #3
 8001116:	2028      	movs	r0, #40	; 0x28
 8001118:	f7ff fe95 	bl	8000e46 <radio_write8>

	// preamble
	radio_write8(AX5043_REG_FIFODATA, 0x62, hspi); // REPEATDATA command
 800111c:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001120:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	2162      	movs	r1, #98	; 0x62
 8001128:	2029      	movs	r0, #41	; 0x29
 800112a:	f7ff fe8c 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, 0x18, hspi); // bypass framing & encoding, suppress CRC, no pkt start/end
 800112e:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001132:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	2118      	movs	r1, #24
 800113a:	2029      	movs	r0, #41	; 0x29
 800113c:	f7ff fe83 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, 0x14, hspi); // repeat byte given in next command 20 times
 8001140:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001144:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	2114      	movs	r1, #20
 800114c:	2029      	movs	r0, #41	; 0x29
 800114e:	f7ff fe7a 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, preamble, hspi); // byte to be sent 10 times
 8001152:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001156:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800115a:	f897 1636 	ldrb.w	r1, [r7, #1590]	; 0x636
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	2029      	movs	r0, #41	; 0x29
 8001162:	f7ff fe70 	bl	8000e46 <radio_write8>

	// frame
	radio_write8(AX5043_REG_FIFODATA, 0xE1, hspi); // TX Data command
 8001166:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800116a:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	21e1      	movs	r1, #225	; 0xe1
 8001172:	2029      	movs	r0, #41	; 0x29
 8001174:	f7ff fe67 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, (numBytesToSend+1), hspi); // 100 bytes +1 for control field byte
 8001178:	f897 3635 	ldrb.w	r3, [r7, #1589]	; 0x635
 800117c:	3301      	adds	r3, #1
 800117e:	b2d9      	uxtb	r1, r3
 8001180:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001184:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	2029      	movs	r0, #41	; 0x29
 800118c:	f7ff fe5b 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, 0x03, hspi); // pkt start/end used here
 8001190:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001194:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	2103      	movs	r1, #3
 800119c:	2029      	movs	r0, #41	; 0x29
 800119e:	f7ff fe52 	bl	8000e46 <radio_write8>
	for (uint8_t i = 0; i < numBytesToSend; i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	f887 3637 	strb.w	r3, [r7, #1591]	; 0x637
 80011a8:	e013      	b.n	80011d2 <AX_Radio_FIFO_Routine+0x11a>
		radio_write8(AX5043_REG_FIFODATA, beeData[i], hspi);
 80011aa:	f897 3637 	ldrb.w	r3, [r7, #1591]	; 0x637
 80011ae:	f507 62c7 	add.w	r2, r7, #1592	; 0x638
 80011b2:	f2a2 622c 	subw	r2, r2, #1580	; 0x62c
 80011b6:	5cd1      	ldrb	r1, [r2, r3]
 80011b8:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80011bc:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	2029      	movs	r0, #41	; 0x29
 80011c4:	f7ff fe3f 	bl	8000e46 <radio_write8>
	for (uint8_t i = 0; i < numBytesToSend; i++)
 80011c8:	f897 3637 	ldrb.w	r3, [r7, #1591]	; 0x637
 80011cc:	3301      	adds	r3, #1
 80011ce:	f887 3637 	strb.w	r3, [r7, #1591]	; 0x637
 80011d2:	f897 2637 	ldrb.w	r2, [r7, #1591]	; 0x637
 80011d6:	f897 3635 	ldrb.w	r3, [r7, #1589]	; 0x635
 80011da:	429a      	cmp	r2, r3
 80011dc:	d3e5      	bcc.n	80011aa <AX_Radio_FIFO_Routine+0xf2>

	// commit
	radio_write8(AX5043_REG_FIFOSTAT, 0x04, hspi);
 80011de:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80011e2:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	2104      	movs	r1, #4
 80011ea:	2028      	movs	r0, #40	; 0x28
 80011ec:	f7ff fe2b 	bl	8000e46 <radio_write8>

	// set to full tx
	radio_write8(AX5043_REG_PWRMODE,0x6D,hspi);
 80011f0:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80011f4:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	216d      	movs	r1, #109	; 0x6d
 80011fc:	2002      	movs	r0, #2
 80011fe:	f7ff fe22 	bl	8000e46 <radio_write8>
	while ((radio_read8(AX5043_REG_POWSTAT, hspi) & (1 << 3)) == 0)
 8001202:	bf00      	nop
 8001204:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001208:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800120c:	6819      	ldr	r1, [r3, #0]
 800120e:	2003      	movs	r0, #3
 8001210:	f7ff fe39 	bl	8000e86 <radio_read8>
 8001214:	4603      	mov	r3, r0
 8001216:	f003 0308 	and.w	r3, r3, #8
 800121a:	2b00      	cmp	r3, #0
 800121c:	d101      	bne.n	8001222 <AX_Radio_FIFO_Routine+0x16a>
	return AXRADIO_ERR_NOERROR;
 800121e:	2300      	movs	r3, #0
 8001220:	e7ff      	b.n	8001222 <AX_Radio_FIFO_Routine+0x16a>
}
 8001222:	4618      	mov	r0, r3
 8001224:	f507 67c7 	add.w	r7, r7, #1592	; 0x638
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	080052bc 	.word	0x080052bc

08001230 <AX_Radio_Full_Init>:
	HAL_Delay(3000);
	return 0;
}

uint8_t AX_Radio_Full_Init(SPI_HandleTypeDef * hspi)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	AX_Radio_Data_Transmission_Setup(hspi);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff fe42 	bl	8000ec2 <AX_Radio_Data_Transmission_Setup>
	if (AX_Radio_Range_PLL(hspi)) {
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f000 f839 	bl	80012b6 <AX_Radio_Range_PLL>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <AX_Radio_Full_Init+0x1e>
			return AXRADIO_ERR_RANGING;
 800124a:	2306      	movs	r3, #6
 800124c:	e000      	b.n	8001250 <AX_Radio_Full_Init+0x20>
	}
	return 0;
 800124e:	2300      	movs	r3, #0
}
 8001250:	4618      	mov	r0, r3
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <AX_Radio_Get_Status>:


uint16_t AX_Radio_Get_Status(SPI_HandleTypeDef * hspi)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af02      	add	r7, sp, #8
 800125e:	6078      	str	r0, [r7, #4]
	uint16_t addr, status;
	uint8_t data;
	addr = status = data = 0x00;
 8001260:	2300      	movs	r3, #0
 8001262:	72fb      	strb	r3, [r7, #11]
 8001264:	2300      	movs	r3, #0
 8001266:	81bb      	strh	r3, [r7, #12]
 8001268:	89bb      	ldrh	r3, [r7, #12]
 800126a:	81fb      	strh	r3, [r7, #14]

	return (AX_Radio_RW_Long_Address(&addr, &status, &data, hspi, 0xff, 0x0)) ? 0xffff : status;
 800126c:	f107 020b 	add.w	r2, r7, #11
 8001270:	f107 010c 	add.w	r1, r7, #12
 8001274:	f107 000e 	add.w	r0, r7, #14
 8001278:	2300      	movs	r3, #0
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	23ff      	movs	r3, #255	; 0xff
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f7ff fd68 	bl	8000d56 <AX_Radio_RW_Long_Address>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d101      	bne.n	8001290 <AX_Radio_Get_Status+0x38>
 800128c:	89bb      	ldrh	r3, [r7, #12]
 800128e:	e001      	b.n	8001294 <AX_Radio_Get_Status+0x3c>
 8001290:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001294:	4618      	mov	r0, r3
 8001296:	3710      	adds	r7, #16
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <AX_Radio_Check_PLL>:

uint8_t AX_Radio_Check_PLL(SPI_HandleTypeDef * hspi)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	return radio_read8(AX5043_REG_PLLRANGINGA, hspi);
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	2033      	movs	r0, #51	; 0x33
 80012a8:	f7ff fded 	bl	8000e86 <radio_read8>
 80012ac:	4603      	mov	r3, r0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <AX_Radio_Range_PLL>:
{
	return AX_Radio_Check_PLL(hspi) & 0x40;
}

uint8_t AX_Radio_Range_PLL(SPI_HandleTypeDef * hspi)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	b084      	sub	sp, #16
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
	uint8_t pll_contents;
	radio_write8(AX5043_REG_PLLRANGINGA, 0x18, hspi);
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	2118      	movs	r1, #24
 80012c2:	2033      	movs	r0, #51	; 0x33
 80012c4:	f7ff fdbf 	bl	8000e46 <radio_write8>
	do
	{
		pll_contents = radio_read8(AX5043_REG_PLLRANGINGA, hspi);
 80012c8:	6879      	ldr	r1, [r7, #4]
 80012ca:	2033      	movs	r0, #51	; 0x33
 80012cc:	f7ff fddb 	bl	8000e86 <radio_read8>
 80012d0:	4603      	mov	r3, r0
 80012d2:	73fb      	strb	r3, [r7, #15]
		if(pll_contents & 0x20) {
 80012d4:	7bfb      	ldrb	r3, [r7, #15]
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <AX_Radio_Range_PLL+0x2c>
			return pll_contents;	//Range error
 80012de:	7bfb      	ldrb	r3, [r7, #15]
 80012e0:	e016      	b.n	8001310 <AX_Radio_Range_PLL+0x5a>
		}
	}
	while (pll_contents & 0x10);
 80012e2:	7bfb      	ldrb	r3, [r7, #15]
 80012e4:	f003 0310 	and.w	r3, r3, #16
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d1ed      	bne.n	80012c8 <AX_Radio_Range_PLL+0x12>
	HAL_Delay(100);
 80012ec:	2064      	movs	r0, #100	; 0x64
 80012ee:	f000 f88f 	bl	8001410 <HAL_Delay>
	if(pll_contents & 0x40) {
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <AX_Radio_Range_PLL+0x4a>
		return 0;				//Range lock
 80012fc:	2300      	movs	r3, #0
 80012fe:	e007      	b.n	8001310 <AX_Radio_Range_PLL+0x5a>
	} else if (pll_contents & 0x20) {
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	f003 0320 	and.w	r3, r3, #32
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <AX_Radio_Range_PLL+0x58>
		return pll_contents;	//Range error
 800130a:	7bfb      	ldrb	r3, [r7, #15]
 800130c:	e000      	b.n	8001310 <AX_Radio_Range_PLL+0x5a>
	}
	else return 0; //Ideally this should be dead code... Make error?
 800130e:	2300      	movs	r3, #0
}
 8001310:	4618      	mov	r0, r3
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}

08001318 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <HAL_Init+0x3c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <HAL_Init+0x3c>)
 8001328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132e:	2003      	movs	r0, #3
 8001330:	f000 f944 	bl	80015bc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001334:	2000      	movs	r0, #0
 8001336:	f000 f80f 	bl	8001358 <HAL_InitTick>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d002      	beq.n	8001346 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	71fb      	strb	r3, [r7, #7]
 8001344:	e001      	b.n	800134a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001346:	f7ff faf1 	bl	800092c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800134a:	79fb      	ldrb	r3, [r7, #7]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	40022000 	.word	0x40022000

08001358 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001360:	2300      	movs	r3, #0
 8001362:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001364:	4b17      	ldr	r3, [pc, #92]	; (80013c4 <HAL_InitTick+0x6c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d023      	beq.n	80013b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800136c:	4b16      	ldr	r3, [pc, #88]	; (80013c8 <HAL_InitTick+0x70>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <HAL_InitTick+0x6c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f941 	bl	800160a <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d10f      	bne.n	80013ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2b0f      	cmp	r3, #15
 8001392:	d809      	bhi.n	80013a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001394:	2200      	movs	r2, #0
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	f04f 30ff 	mov.w	r0, #4294967295
 800139c:	f000 f919 	bl	80015d2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013a0:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <HAL_InitTick+0x74>)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6013      	str	r3, [r2, #0]
 80013a6:	e007      	b.n	80013b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	73fb      	strb	r3, [r7, #15]
 80013ac:	e004      	b.n	80013b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	73fb      	strb	r3, [r7, #15]
 80013b2:	e001      	b.n	80013b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013b4:	2301      	movs	r3, #1
 80013b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d4:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <HAL_IncTick+0x24>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008
 80013f4:	20000178 	.word	0x20000178

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b03      	ldr	r3, [pc, #12]	; (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000178 	.word	0x20000178

08001410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff ffee 	bl	80013f8 <HAL_GetTick>
 800141c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d005      	beq.n	8001436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <HAL_Delay+0x44>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001436:	bf00      	nop
 8001438:	f7ff ffde 	bl	80013f8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d8f7      	bhi.n	8001438 <HAL_Delay+0x28>
  {
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008

08001458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001468:	4b0c      	ldr	r3, [pc, #48]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001474:	4013      	ands	r3, r2
 8001476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800148a:	4a04      	ldr	r2, [pc, #16]	; (800149c <__NVIC_SetPriorityGrouping+0x44>)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	60d3      	str	r3, [r2, #12]
}
 8001490:	bf00      	nop
 8001492:	3714      	adds	r7, #20
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	e000ed00 	.word	0xe000ed00

080014a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <__NVIC_GetPriorityGrouping+0x18>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	0a1b      	lsrs	r3, r3, #8
 80014aa:	f003 0307 	and.w	r3, r3, #7
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	db0a      	blt.n	80014e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	b2da      	uxtb	r2, r3
 80014d4:	490c      	ldr	r1, [pc, #48]	; (8001508 <__NVIC_SetPriority+0x4c>)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	0112      	lsls	r2, r2, #4
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	440b      	add	r3, r1
 80014e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014e4:	e00a      	b.n	80014fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	4908      	ldr	r1, [pc, #32]	; (800150c <__NVIC_SetPriority+0x50>)
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	3b04      	subs	r3, #4
 80014f4:	0112      	lsls	r2, r2, #4
 80014f6:	b2d2      	uxtb	r2, r2
 80014f8:	440b      	add	r3, r1
 80014fa:	761a      	strb	r2, [r3, #24]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000e100 	.word	0xe000e100
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001510:	b480      	push	{r7}
 8001512:	b089      	sub	sp, #36	; 0x24
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	f1c3 0307 	rsb	r3, r3, #7
 800152a:	2b04      	cmp	r3, #4
 800152c:	bf28      	it	cs
 800152e:	2304      	movcs	r3, #4
 8001530:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	3304      	adds	r3, #4
 8001536:	2b06      	cmp	r3, #6
 8001538:	d902      	bls.n	8001540 <NVIC_EncodePriority+0x30>
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3b03      	subs	r3, #3
 800153e:	e000      	b.n	8001542 <NVIC_EncodePriority+0x32>
 8001540:	2300      	movs	r3, #0
 8001542:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	f04f 32ff 	mov.w	r2, #4294967295
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43da      	mvns	r2, r3
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	401a      	ands	r2, r3
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001558:	f04f 31ff 	mov.w	r1, #4294967295
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa01 f303 	lsl.w	r3, r1, r3
 8001562:	43d9      	mvns	r1, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001568:	4313      	orrs	r3, r2
         );
}
 800156a:	4618      	mov	r0, r3
 800156c:	3724      	adds	r7, #36	; 0x24
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
	...

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001588:	d301      	bcc.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e00f      	b.n	80015ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <SysTick_Config+0x40>)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	3b01      	subs	r3, #1
 8001594:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	210f      	movs	r1, #15
 8001598:	f04f 30ff 	mov.w	r0, #4294967295
 800159c:	f7ff ff8e 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <SysTick_Config+0x40>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a6:	4b04      	ldr	r3, [pc, #16]	; (80015b8 <SysTick_Config+0x40>)
 80015a8:	2207      	movs	r2, #7
 80015aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	e000e010 	.word	0xe000e010

080015bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f7ff ff47 	bl	8001458 <__NVIC_SetPriorityGrouping>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
 80015de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015e0:	2300      	movs	r3, #0
 80015e2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015e4:	f7ff ff5c 	bl	80014a0 <__NVIC_GetPriorityGrouping>
 80015e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	68b9      	ldr	r1, [r7, #8]
 80015ee:	6978      	ldr	r0, [r7, #20]
 80015f0:	f7ff ff8e 	bl	8001510 <NVIC_EncodePriority>
 80015f4:	4602      	mov	r2, r0
 80015f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015fa:	4611      	mov	r1, r2
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff ff5d 	bl	80014bc <__NVIC_SetPriority>
}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f7ff ffb0 	bl	8001578 <SysTick_Config>
 8001618:	4603      	mov	r3, r0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001624:	b480      	push	{r7}
 8001626:	b087      	sub	sp, #28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001632:	e14e      	b.n	80018d2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	2101      	movs	r1, #1
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	fa01 f303 	lsl.w	r3, r1, r3
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	f000 8140 	beq.w	80018cc <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f003 0303 	and.w	r3, r3, #3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d005      	beq.n	8001664 <HAL_GPIO_Init+0x40>
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f003 0303 	and.w	r3, r3, #3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d130      	bne.n	80016c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	2203      	movs	r2, #3
 8001670:	fa02 f303 	lsl.w	r3, r2, r3
 8001674:	43db      	mvns	r3, r3
 8001676:	693a      	ldr	r2, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	005b      	lsls	r3, r3, #1
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800169a:	2201      	movs	r2, #1
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	43db      	mvns	r3, r3
 80016a4:	693a      	ldr	r2, [r7, #16]
 80016a6:	4013      	ands	r3, r2
 80016a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	091b      	lsrs	r3, r3, #4
 80016b0:	f003 0201 	and.w	r2, r3, #1
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4313      	orrs	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d017      	beq.n	8001702 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	68db      	ldr	r3, [r3, #12]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	2203      	movs	r2, #3
 80016de:	fa02 f303 	lsl.w	r3, r2, r3
 80016e2:	43db      	mvns	r3, r3
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	005b      	lsls	r3, r3, #1
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	4313      	orrs	r3, r2
 80016fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f003 0303 	and.w	r3, r3, #3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d123      	bne.n	8001756 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	08da      	lsrs	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3208      	adds	r2, #8
 8001716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f003 0307 	and.w	r3, r3, #7
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	220f      	movs	r2, #15
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	43db      	mvns	r3, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4013      	ands	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	691a      	ldr	r2, [r3, #16]
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	4313      	orrs	r3, r2
 8001746:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	08da      	lsrs	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3208      	adds	r2, #8
 8001750:	6939      	ldr	r1, [r7, #16]
 8001752:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	2203      	movs	r2, #3
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	693a      	ldr	r2, [r7, #16]
 800176a:	4013      	ands	r3, r2
 800176c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 0203 	and.w	r2, r3, #3
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 809a 	beq.w	80018cc <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001798:	4b55      	ldr	r3, [pc, #340]	; (80018f0 <HAL_GPIO_Init+0x2cc>)
 800179a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800179c:	4a54      	ldr	r2, [pc, #336]	; (80018f0 <HAL_GPIO_Init+0x2cc>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	6613      	str	r3, [r2, #96]	; 0x60
 80017a4:	4b52      	ldr	r3, [pc, #328]	; (80018f0 <HAL_GPIO_Init+0x2cc>)
 80017a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a8:	f003 0301 	and.w	r3, r3, #1
 80017ac:	60bb      	str	r3, [r7, #8]
 80017ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017b0:	4a50      	ldr	r2, [pc, #320]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	089b      	lsrs	r3, r3, #2
 80017b6:	3302      	adds	r3, #2
 80017b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	009b      	lsls	r3, r3, #2
 80017c6:	220f      	movs	r2, #15
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017da:	d013      	beq.n	8001804 <HAL_GPIO_Init+0x1e0>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a46      	ldr	r2, [pc, #280]	; (80018f8 <HAL_GPIO_Init+0x2d4>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d00d      	beq.n	8001800 <HAL_GPIO_Init+0x1dc>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a45      	ldr	r2, [pc, #276]	; (80018fc <HAL_GPIO_Init+0x2d8>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d007      	beq.n	80017fc <HAL_GPIO_Init+0x1d8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a44      	ldr	r2, [pc, #272]	; (8001900 <HAL_GPIO_Init+0x2dc>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d101      	bne.n	80017f8 <HAL_GPIO_Init+0x1d4>
 80017f4:	2303      	movs	r3, #3
 80017f6:	e006      	b.n	8001806 <HAL_GPIO_Init+0x1e2>
 80017f8:	2307      	movs	r3, #7
 80017fa:	e004      	b.n	8001806 <HAL_GPIO_Init+0x1e2>
 80017fc:	2302      	movs	r3, #2
 80017fe:	e002      	b.n	8001806 <HAL_GPIO_Init+0x1e2>
 8001800:	2301      	movs	r3, #1
 8001802:	e000      	b.n	8001806 <HAL_GPIO_Init+0x1e2>
 8001804:	2300      	movs	r3, #0
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	f002 0203 	and.w	r2, r2, #3
 800180c:	0092      	lsls	r2, r2, #2
 800180e:	4093      	lsls	r3, r2
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001816:	4937      	ldr	r1, [pc, #220]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	089b      	lsrs	r3, r3, #2
 800181c:	3302      	adds	r3, #2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001824:	4b37      	ldr	r3, [pc, #220]	; (8001904 <HAL_GPIO_Init+0x2e0>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001848:	4a2e      	ldr	r2, [pc, #184]	; (8001904 <HAL_GPIO_Init+0x2e0>)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800184e:	4b2d      	ldr	r3, [pc, #180]	; (8001904 <HAL_GPIO_Init+0x2e0>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001872:	4a24      	ldr	r2, [pc, #144]	; (8001904 <HAL_GPIO_Init+0x2e0>)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001878:	4b22      	ldr	r3, [pc, #136]	; (8001904 <HAL_GPIO_Init+0x2e0>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	43db      	mvns	r3, r3
 8001882:	693a      	ldr	r2, [r7, #16]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001894:	693a      	ldr	r2, [r7, #16]
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800189c:	4a19      	ldr	r2, [pc, #100]	; (8001904 <HAL_GPIO_Init+0x2e0>)
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <HAL_GPIO_Init+0x2e0>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	4013      	ands	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018c6:	4a0f      	ldr	r2, [pc, #60]	; (8001904 <HAL_GPIO_Init+0x2e0>)
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018cc:	697b      	ldr	r3, [r7, #20]
 80018ce:	3301      	adds	r3, #1
 80018d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa22 f303 	lsr.w	r3, r2, r3
 80018dc:	2b00      	cmp	r3, #0
 80018de:	f47f aea9 	bne.w	8001634 <HAL_GPIO_Init+0x10>
  }
}
 80018e2:	bf00      	nop
 80018e4:	bf00      	nop
 80018e6:	371c      	adds	r7, #28
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010000 	.word	0x40010000
 80018f8:	48000400 	.word	0x48000400
 80018fc:	48000800 	.word	0x48000800
 8001900:	48000c00 	.word	0x48000c00
 8001904:	40010400 	.word	0x40010400

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001924:	e002      	b.n	800192c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <HAL_PWREx_GetVoltageRange+0x18>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40007000 	.word	0x40007000

08001954 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001962:	d130      	bne.n	80019c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800196c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001970:	d038      	beq.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800197a:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001980:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2232      	movs	r2, #50	; 0x32
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	0c9b      	lsrs	r3, r3, #18
 8001994:	3301      	adds	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001998:	e002      	b.n	80019a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3b01      	subs	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ac:	d102      	bne.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f2      	bne.n	800199a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c0:	d110      	bne.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e00f      	b.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d2:	d007      	beq.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019dc:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40007000 	.word	0x40007000
 80019f8:	20000000 	.word	0x20000000
 80019fc:	431bde83 	.word	0x431bde83

08001a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	; 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d102      	bne.n	8001a14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	f000 bc4f 	b.w	80022b2 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a14:	4b97      	ldr	r3, [pc, #604]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 030c 	and.w	r3, r3, #12
 8001a1c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a1e:	4b95      	ldr	r3, [pc, #596]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	f003 0303 	and.w	r3, r3, #3
 8001a26:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f003 0310 	and.w	r3, r3, #16
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 80e6 	beq.w	8001c02 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d007      	beq.n	8001a4c <HAL_RCC_OscConfig+0x4c>
 8001a3c:	6a3b      	ldr	r3, [r7, #32]
 8001a3e:	2b0c      	cmp	r3, #12
 8001a40:	f040 808d 	bne.w	8001b5e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	f040 8089 	bne.w	8001b5e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a4c:	4b89      	ldr	r3, [pc, #548]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <HAL_RCC_OscConfig+0x66>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	69db      	ldr	r3, [r3, #28]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	f000 bc26 	b.w	80022b2 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a6a:	4b82      	ldr	r3, [pc, #520]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f003 0308 	and.w	r3, r3, #8
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d004      	beq.n	8001a80 <HAL_RCC_OscConfig+0x80>
 8001a76:	4b7f      	ldr	r3, [pc, #508]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a7e:	e005      	b.n	8001a8c <HAL_RCC_OscConfig+0x8c>
 8001a80:	4b7c      	ldr	r3, [pc, #496]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001a82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a86:	091b      	lsrs	r3, r3, #4
 8001a88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d224      	bcs.n	8001ada <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 fdd9 	bl	800264c <RCC_SetFlashLatencyFromMSIRange>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d002      	beq.n	8001aa6 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	f000 bc06 	b.w	80022b2 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa6:	4b73      	ldr	r3, [pc, #460]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a72      	ldr	r2, [pc, #456]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6013      	str	r3, [r2, #0]
 8001ab2:	4b70      	ldr	r3, [pc, #448]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	496d      	ldr	r1, [pc, #436]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ac4:	4b6b      	ldr	r3, [pc, #428]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6a1b      	ldr	r3, [r3, #32]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	4968      	ldr	r1, [pc, #416]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	604b      	str	r3, [r1, #4]
 8001ad8:	e025      	b.n	8001b26 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ada:	4b66      	ldr	r3, [pc, #408]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a65      	ldr	r2, [pc, #404]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6013      	str	r3, [r2, #0]
 8001ae6:	4b63      	ldr	r3, [pc, #396]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af2:	4960      	ldr	r1, [pc, #384]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001af4:	4313      	orrs	r3, r2
 8001af6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af8:	4b5e      	ldr	r3, [pc, #376]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a1b      	ldr	r3, [r3, #32]
 8001b04:	021b      	lsls	r3, r3, #8
 8001b06:	495b      	ldr	r1, [pc, #364]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b0c:	6a3b      	ldr	r3, [r7, #32]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d109      	bne.n	8001b26 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b16:	4618      	mov	r0, r3
 8001b18:	f000 fd98 	bl	800264c <RCC_SetFlashLatencyFromMSIRange>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e3c5      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b26:	f000 fccd 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	4b51      	ldr	r3, [pc, #324]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	4950      	ldr	r1, [pc, #320]	; (8001c78 <HAL_RCC_OscConfig+0x278>)
 8001b38:	5ccb      	ldrb	r3, [r1, r3]
 8001b3a:	f003 031f 	and.w	r3, r3, #31
 8001b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b42:	4a4e      	ldr	r2, [pc, #312]	; (8001c7c <HAL_RCC_OscConfig+0x27c>)
 8001b44:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b46:	4b4e      	ldr	r3, [pc, #312]	; (8001c80 <HAL_RCC_OscConfig+0x280>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fc04 	bl	8001358 <HAL_InitTick>
 8001b50:	4603      	mov	r3, r0
 8001b52:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001b54:	7dfb      	ldrb	r3, [r7, #23]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d052      	beq.n	8001c00 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
 8001b5c:	e3a9      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69db      	ldr	r3, [r3, #28]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d032      	beq.n	8001bcc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b66:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a42      	ldr	r2, [pc, #264]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b72:	f7ff fc41 	bl	80013f8 <HAL_GetTick>
 8001b76:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fc3d 	bl	80013f8 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e392      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b8c:	4b39      	ldr	r3, [pc, #228]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a35      	ldr	r2, [pc, #212]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001b9e:	f043 0308 	orr.w	r3, r3, #8
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b33      	ldr	r3, [pc, #204]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	4930      	ldr	r1, [pc, #192]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	492b      	ldr	r1, [pc, #172]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]
 8001bca:	e01a      	b.n	8001c02 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bcc:	4b29      	ldr	r3, [pc, #164]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a28      	ldr	r2, [pc, #160]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001bd2:	f023 0301 	bic.w	r3, r3, #1
 8001bd6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fc0e 	bl	80013f8 <HAL_GetTick>
 8001bdc:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001be0:	f7ff fc0a 	bl	80013f8 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e35f      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bf2:	4b20      	ldr	r3, [pc, #128]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x1e0>
 8001bfe:	e000      	b.n	8001c02 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c00:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d073      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c0e:	6a3b      	ldr	r3, [r7, #32]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_OscConfig+0x220>
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d10e      	bne.n	8001c38 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	2b03      	cmp	r3, #3
 8001c1e:	d10b      	bne.n	8001c38 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d063      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x2f4>
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d15f      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e33c      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c40:	d106      	bne.n	8001c50 <HAL_RCC_OscConfig+0x250>
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c4c:	6013      	str	r3, [r2, #0]
 8001c4e:	e025      	b.n	8001c9c <HAL_RCC_OscConfig+0x29c>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c58:	d114      	bne.n	8001c84 <HAL_RCC_OscConfig+0x284>
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a05      	ldr	r2, [pc, #20]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a02      	ldr	r2, [pc, #8]	; (8001c74 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	e013      	b.n	8001c9c <HAL_RCC_OscConfig+0x29c>
 8001c74:	40021000 	.word	0x40021000
 8001c78:	080058e4 	.word	0x080058e4
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004
 8001c84:	4b8f      	ldr	r3, [pc, #572]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a8e      	ldr	r2, [pc, #568]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a8b      	ldr	r2, [pc, #556]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001c96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d013      	beq.n	8001ccc <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca4:	f7ff fba8 	bl	80013f8 <HAL_GetTick>
 8001ca8:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001caa:	e008      	b.n	8001cbe <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cac:	f7ff fba4 	bl	80013f8 <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	2b64      	cmp	r3, #100	; 0x64
 8001cb8:	d901      	bls.n	8001cbe <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e2f9      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cbe:	4b81      	ldr	r3, [pc, #516]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f0      	beq.n	8001cac <HAL_RCC_OscConfig+0x2ac>
 8001cca:	e014      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ccc:	f7ff fb94 	bl	80013f8 <HAL_GetTick>
 8001cd0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd2:	e008      	b.n	8001ce6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd4:	f7ff fb90 	bl	80013f8 <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b64      	cmp	r3, #100	; 0x64
 8001ce0:	d901      	bls.n	8001ce6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001ce2:	2303      	movs	r3, #3
 8001ce4:	e2e5      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce6:	4b77      	ldr	r3, [pc, #476]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d1f0      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x2d4>
 8001cf2:	e000      	b.n	8001cf6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d060      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d02:	6a3b      	ldr	r3, [r7, #32]
 8001d04:	2b04      	cmp	r3, #4
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_OscConfig+0x314>
 8001d08:	6a3b      	ldr	r3, [r7, #32]
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d119      	bne.n	8001d42 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d116      	bne.n	8001d42 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d14:	4b6b      	ldr	r3, [pc, #428]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d005      	beq.n	8001d2c <HAL_RCC_OscConfig+0x32c>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d101      	bne.n	8001d2c <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e2c2      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	061b      	lsls	r3, r3, #24
 8001d3a:	4962      	ldr	r1, [pc, #392]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d40:	e040      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d023      	beq.n	8001d92 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d4a:	4b5e      	ldr	r3, [pc, #376]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a5d      	ldr	r2, [pc, #372]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d56:	f7ff fb4f 	bl	80013f8 <HAL_GetTick>
 8001d5a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fb4b 	bl	80013f8 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e2a0      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d70:	4b54      	ldr	r3, [pc, #336]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b51      	ldr	r3, [pc, #324]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	061b      	lsls	r3, r3, #24
 8001d8a:	494e      	ldr	r1, [pc, #312]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
 8001d90:	e018      	b.n	8001dc4 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	4b4c      	ldr	r3, [pc, #304]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a4b      	ldr	r2, [pc, #300]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001d98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9e:	f7ff fb2b 	bl	80013f8 <HAL_GetTick>
 8001da2:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da4:	e008      	b.n	8001db8 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da6:	f7ff fb27 	bl	80013f8 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e27c      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db8:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d1f0      	bne.n	8001da6 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0308 	and.w	r3, r3, #8
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	f000 8082 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d05f      	beq.n	8001e9a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001dda:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001ddc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001de0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	699a      	ldr	r2, [r3, #24]
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d037      	beq.n	8001e60 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d006      	beq.n	8001e08 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e254      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d01b      	beq.n	8001e4a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001e12:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e18:	4a2a      	ldr	r2, [pc, #168]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	f023 0301 	bic.w	r3, r3, #1
 8001e1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e22:	f7ff fae9 	bl	80013f8 <HAL_GetTick>
 8001e26:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e2a:	f7ff fae5 	bl	80013f8 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b11      	cmp	r3, #17
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e23a      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e3c:	4b21      	ldr	r3, [pc, #132]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1ef      	bne.n	8001e2a <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e50:	f023 0210 	bic.w	r2, r3, #16
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	699b      	ldr	r3, [r3, #24]
 8001e58:	491a      	ldr	r1, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e60:	4b18      	ldr	r3, [pc, #96]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e66:	4a17      	ldr	r2, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e70:	f7ff fac2 	bl	80013f8 <HAL_GetTick>
 8001e74:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e78:	f7ff fabe 	bl	80013f8 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b11      	cmp	r3, #17
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e213      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0ef      	beq.n	8001e78 <HAL_RCC_OscConfig+0x478>
 8001e98:	e01d      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea0:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x4c4>)
 8001ea2:	f023 0301 	bic.w	r3, r3, #1
 8001ea6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eaa:	f7ff faa5 	bl	80013f8 <HAL_GetTick>
 8001eae:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb2:	f7ff faa1 	bl	80013f8 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b11      	cmp	r3, #17
 8001ebe:	d903      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e1f6      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
 8001ec4:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ec8:	4ba9      	ldr	r3, [pc, #676]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001eca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d1ed      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0304 	and.w	r3, r3, #4
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 80bd 	beq.w	800205e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001eea:	4ba1      	ldr	r3, [pc, #644]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d10e      	bne.n	8001f14 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef6:	4b9e      	ldr	r3, [pc, #632]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efa:	4a9d      	ldr	r2, [pc, #628]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6593      	str	r3, [r2, #88]	; 0x58
 8001f02:	4b9b      	ldr	r3, [pc, #620]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	60fb      	str	r3, [r7, #12]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f14:	4b97      	ldr	r3, [pc, #604]	; (8002174 <HAL_RCC_OscConfig+0x774>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d118      	bne.n	8001f52 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f20:	4b94      	ldr	r3, [pc, #592]	; (8002174 <HAL_RCC_OscConfig+0x774>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a93      	ldr	r2, [pc, #588]	; (8002174 <HAL_RCC_OscConfig+0x774>)
 8001f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2c:	f7ff fa64 	bl	80013f8 <HAL_GetTick>
 8001f30:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f32:	e008      	b.n	8001f46 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f34:	f7ff fa60 	bl	80013f8 <HAL_GetTick>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	1ad3      	subs	r3, r2, r3
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e1b5      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f46:	4b8b      	ldr	r3, [pc, #556]	; (8002174 <HAL_RCC_OscConfig+0x774>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0f0      	beq.n	8001f34 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d02c      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001f5e:	4b84      	ldr	r3, [pc, #528]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f70:	497f      	ldr	r1, [pc, #508]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	f003 0304 	and.w	r3, r3, #4
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d010      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f84:	4b7a      	ldr	r3, [pc, #488]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	4a79      	ldr	r2, [pc, #484]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001f8c:	f043 0304 	orr.w	r3, r3, #4
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f94:	4b76      	ldr	r3, [pc, #472]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9a:	4a75      	ldr	r2, [pc, #468]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001f9c:	f043 0301 	orr.w	r3, r3, #1
 8001fa0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fa4:	e018      	b.n	8001fd8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fa6:	4b72      	ldr	r3, [pc, #456]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	4a70      	ldr	r2, [pc, #448]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001fae:	f043 0301 	orr.w	r3, r3, #1
 8001fb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb6:	e00f      	b.n	8001fd8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fb8:	4b6d      	ldr	r3, [pc, #436]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fbe:	4a6c      	ldr	r2, [pc, #432]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fc8:	4b69      	ldr	r3, [pc, #420]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	4a68      	ldr	r2, [pc, #416]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8001fd0:	f023 0304 	bic.w	r3, r3, #4
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d016      	beq.n	800200e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff fa0a 	bl	80013f8 <HAL_GetTick>
 8001fe4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fe8:	f7ff fa06 	bl	80013f8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e159      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ffe:	4b5c      	ldr	r3, [pc, #368]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0ed      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x5e8>
 800200c:	e01d      	b.n	800204a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800200e:	f7ff f9f3 	bl	80013f8 <HAL_GetTick>
 8002012:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002014:	e00a      	b.n	800202c <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002016:	f7ff f9ef 	bl	80013f8 <HAL_GetTick>
 800201a:	4602      	mov	r2, r0
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	f241 3288 	movw	r2, #5000	; 0x1388
 8002024:	4293      	cmp	r3, r2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e142      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800202c:	4b50      	ldr	r3, [pc, #320]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1ed      	bne.n	8002016 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 800203a:	4b4d      	ldr	r3, [pc, #308]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 800203c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002040:	4a4b      	ldr	r2, [pc, #300]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8002042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002046:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800204a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800204e:	2b01      	cmp	r3, #1
 8002050:	d105      	bne.n	800205e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002052:	4b47      	ldr	r3, [pc, #284]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8002054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002056:	4a46      	ldr	r2, [pc, #280]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8002058:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0320 	and.w	r3, r3, #32
 8002066:	2b00      	cmp	r3, #0
 8002068:	d03c      	beq.n	80020e4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206e:	2b00      	cmp	r3, #0
 8002070:	d01c      	beq.n	80020ac <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002072:	4b3f      	ldr	r3, [pc, #252]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8002074:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002078:	4a3d      	ldr	r2, [pc, #244]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002082:	f7ff f9b9 	bl	80013f8 <HAL_GetTick>
 8002086:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800208a:	f7ff f9b5 	bl	80013f8 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e10a      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800209c:	4b34      	ldr	r3, [pc, #208]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 800209e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d0ef      	beq.n	800208a <HAL_RCC_OscConfig+0x68a>
 80020aa:	e01b      	b.n	80020e4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020ac:	4b30      	ldr	r3, [pc, #192]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 80020ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b2:	4a2f      	ldr	r2, [pc, #188]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 80020b4:	f023 0301 	bic.w	r3, r3, #1
 80020b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020bc:	f7ff f99c 	bl	80013f8 <HAL_GetTick>
 80020c0:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c4:	f7ff f998 	bl	80013f8 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e0ed      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020d6:	4b26      	ldr	r3, [pc, #152]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 80020d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d1ef      	bne.n	80020c4 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80e1 	beq.w	80022b0 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	f040 80b5 	bne.w	8002262 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020f8:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002108:	429a      	cmp	r2, r3
 800210a:	d124      	bne.n	8002156 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002116:	3b01      	subs	r3, #1
 8002118:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d11b      	bne.n	8002156 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002128:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800212a:	429a      	cmp	r2, r3
 800212c:	d113      	bne.n	8002156 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002138:	085b      	lsrs	r3, r3, #1
 800213a:	3b01      	subs	r3, #1
 800213c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d109      	bne.n	8002156 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	085b      	lsrs	r3, r3, #1
 800214e:	3b01      	subs	r3, #1
 8002150:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d05f      	beq.n	8002216 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	2b0c      	cmp	r3, #12
 800215a:	d05a      	beq.n	8002212 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800215c:	4b04      	ldr	r3, [pc, #16]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a03      	ldr	r2, [pc, #12]	; (8002170 <HAL_RCC_OscConfig+0x770>)
 8002162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002166:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002168:	f7ff f946 	bl	80013f8 <HAL_GetTick>
 800216c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216e:	e00c      	b.n	800218a <HAL_RCC_OscConfig+0x78a>
 8002170:	40021000 	.word	0x40021000
 8002174:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002178:	f7ff f93e 	bl	80013f8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b02      	cmp	r3, #2
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e093      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218a:	4b4c      	ldr	r3, [pc, #304]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d1f0      	bne.n	8002178 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002196:	4b49      	ldr	r3, [pc, #292]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 8002198:	68da      	ldr	r2, [r3, #12]
 800219a:	4b49      	ldr	r3, [pc, #292]	; (80022c0 <HAL_RCC_OscConfig+0x8c0>)
 800219c:	4013      	ands	r3, r2
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021a6:	3a01      	subs	r2, #1
 80021a8:	0112      	lsls	r2, r2, #4
 80021aa:	4311      	orrs	r1, r2
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021b0:	0212      	lsls	r2, r2, #8
 80021b2:	4311      	orrs	r1, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021b8:	0852      	lsrs	r2, r2, #1
 80021ba:	3a01      	subs	r2, #1
 80021bc:	0552      	lsls	r2, r2, #21
 80021be:	4311      	orrs	r1, r2
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021c4:	0852      	lsrs	r2, r2, #1
 80021c6:	3a01      	subs	r2, #1
 80021c8:	0652      	lsls	r2, r2, #25
 80021ca:	430a      	orrs	r2, r1
 80021cc:	493b      	ldr	r1, [pc, #236]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021d2:	4b3a      	ldr	r3, [pc, #232]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a39      	ldr	r2, [pc, #228]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 80021d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021dc:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021de:	4b37      	ldr	r3, [pc, #220]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 80021e0:	68db      	ldr	r3, [r3, #12]
 80021e2:	4a36      	ldr	r2, [pc, #216]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 80021e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021ea:	f7ff f905 	bl	80013f8 <HAL_GetTick>
 80021ee:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f2:	f7ff f901 	bl	80013f8 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b02      	cmp	r3, #2
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e056      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002204:	4b2d      	ldr	r3, [pc, #180]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002210:	e04e      	b.n	80022b0 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e04d      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002216:	4b29      	ldr	r3, [pc, #164]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d146      	bne.n	80022b0 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002222:	4b26      	ldr	r3, [pc, #152]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a25      	ldr	r2, [pc, #148]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 8002228:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800222c:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800222e:	4b23      	ldr	r3, [pc, #140]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	4a22      	ldr	r2, [pc, #136]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 8002234:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002238:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800223a:	f7ff f8dd 	bl	80013f8 <HAL_GetTick>
 800223e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002240:	e008      	b.n	8002254 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002242:	f7ff f8d9 	bl	80013f8 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d901      	bls.n	8002254 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e02e      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d0f0      	beq.n	8002242 <HAL_RCC_OscConfig+0x842>
 8002260:	e026      	b.n	80022b0 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002262:	6a3b      	ldr	r3, [r7, #32]
 8002264:	2b0c      	cmp	r3, #12
 8002266:	d021      	beq.n	80022ac <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002268:	4b14      	ldr	r3, [pc, #80]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a13      	ldr	r2, [pc, #76]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 800226e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002272:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002274:	f7ff f8c0 	bl	80013f8 <HAL_GetTick>
 8002278:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227c:	f7ff f8bc 	bl	80013f8 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e011      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228e:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800229a:	4b08      	ldr	r3, [pc, #32]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4a07      	ldr	r2, [pc, #28]	; (80022bc <HAL_RCC_OscConfig+0x8bc>)
 80022a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022a4:	f023 0303 	bic.w	r3, r3, #3
 80022a8:	60d3      	str	r3, [r2, #12]
 80022aa:	e001      	b.n	80022b0 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3728      	adds	r7, #40	; 0x28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40021000 	.word	0x40021000
 80022c0:	f99f808c 	.word	0xf99f808c

080022c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d101      	bne.n	80022d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e0e7      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022d8:	4b75      	ldr	r3, [pc, #468]	; (80024b0 <HAL_RCC_ClockConfig+0x1ec>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d910      	bls.n	8002308 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b72      	ldr	r3, [pc, #456]	; (80024b0 <HAL_RCC_ClockConfig+0x1ec>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f023 0207 	bic.w	r2, r3, #7
 80022ee:	4970      	ldr	r1, [pc, #448]	; (80024b0 <HAL_RCC_ClockConfig+0x1ec>)
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f6:	4b6e      	ldr	r3, [pc, #440]	; (80024b0 <HAL_RCC_ClockConfig+0x1ec>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	429a      	cmp	r2, r3
 8002302:	d001      	beq.n	8002308 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e0cf      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d010      	beq.n	8002336 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	4b66      	ldr	r3, [pc, #408]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002320:	429a      	cmp	r2, r3
 8002322:	d908      	bls.n	8002336 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002324:	4b63      	ldr	r3, [pc, #396]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	689b      	ldr	r3, [r3, #8]
 8002330:	4960      	ldr	r1, [pc, #384]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002332:	4313      	orrs	r3, r2
 8002334:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d04c      	beq.n	80023dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b03      	cmp	r3, #3
 8002348:	d107      	bne.n	800235a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234a:	4b5a      	ldr	r3, [pc, #360]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d121      	bne.n	800239a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e0a6      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d107      	bne.n	8002372 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002362:	4b54      	ldr	r3, [pc, #336]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d115      	bne.n	800239a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e09a      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d107      	bne.n	800238a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800237a:	4b4e      	ldr	r3, [pc, #312]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d109      	bne.n	800239a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002386:	2301      	movs	r3, #1
 8002388:	e08e      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800238a:	4b4a      	ldr	r3, [pc, #296]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e086      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800239a:	4b46      	ldr	r3, [pc, #280]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	f023 0203 	bic.w	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	4943      	ldr	r1, [pc, #268]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ac:	f7ff f824 	bl	80013f8 <HAL_GetTick>
 80023b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b2:	e00a      	b.n	80023ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b4:	f7ff f820 	bl	80013f8 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d901      	bls.n	80023ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e06e      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ca:	4b3a      	ldr	r3, [pc, #232]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 020c 	and.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1eb      	bne.n	80023b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d010      	beq.n	800240a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	4b31      	ldr	r3, [pc, #196]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d208      	bcs.n	800240a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023f8:	4b2e      	ldr	r3, [pc, #184]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	492b      	ldr	r1, [pc, #172]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002406:	4313      	orrs	r3, r2
 8002408:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800240a:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_RCC_ClockConfig+0x1ec>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d210      	bcs.n	800243a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002418:	4b25      	ldr	r3, [pc, #148]	; (80024b0 <HAL_RCC_ClockConfig+0x1ec>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f023 0207 	bic.w	r2, r3, #7
 8002420:	4923      	ldr	r1, [pc, #140]	; (80024b0 <HAL_RCC_ClockConfig+0x1ec>)
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	4313      	orrs	r3, r2
 8002426:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_RCC_ClockConfig+0x1ec>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0307 	and.w	r3, r3, #7
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d001      	beq.n	800243a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e036      	b.n	80024a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d008      	beq.n	8002458 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002446:	4b1b      	ldr	r3, [pc, #108]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	4918      	ldr	r1, [pc, #96]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	4313      	orrs	r3, r2
 8002456:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d009      	beq.n	8002478 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002464:	4b13      	ldr	r3, [pc, #76]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	00db      	lsls	r3, r3, #3
 8002472:	4910      	ldr	r1, [pc, #64]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002478:	f000 f824 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 800247c:	4602      	mov	r2, r0
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	091b      	lsrs	r3, r3, #4
 8002484:	f003 030f 	and.w	r3, r3, #15
 8002488:	490b      	ldr	r1, [pc, #44]	; (80024b8 <HAL_RCC_ClockConfig+0x1f4>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	fa22 f303 	lsr.w	r3, r2, r3
 8002494:	4a09      	ldr	r2, [pc, #36]	; (80024bc <HAL_RCC_ClockConfig+0x1f8>)
 8002496:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <HAL_RCC_ClockConfig+0x1fc>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe ff5b 	bl	8001358 <HAL_InitTick>
 80024a2:	4603      	mov	r3, r0
 80024a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80024a6:	7afb      	ldrb	r3, [r7, #11]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3710      	adds	r7, #16
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40022000 	.word	0x40022000
 80024b4:	40021000 	.word	0x40021000
 80024b8:	080058e4 	.word	0x080058e4
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b089      	sub	sp, #36	; 0x24
 80024c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	61fb      	str	r3, [r7, #28]
 80024ce:	2300      	movs	r3, #0
 80024d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024d2:	4b3e      	ldr	r3, [pc, #248]	; (80025cc <HAL_RCC_GetSysClockFreq+0x108>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024dc:	4b3b      	ldr	r3, [pc, #236]	; (80025cc <HAL_RCC_GetSysClockFreq+0x108>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f003 0303 	and.w	r3, r3, #3
 80024e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d005      	beq.n	80024f8 <HAL_RCC_GetSysClockFreq+0x34>
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	2b0c      	cmp	r3, #12
 80024f0:	d121      	bne.n	8002536 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2b01      	cmp	r3, #1
 80024f6:	d11e      	bne.n	8002536 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024f8:	4b34      	ldr	r3, [pc, #208]	; (80025cc <HAL_RCC_GetSysClockFreq+0x108>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0308 	and.w	r3, r3, #8
 8002500:	2b00      	cmp	r3, #0
 8002502:	d107      	bne.n	8002514 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002504:	4b31      	ldr	r3, [pc, #196]	; (80025cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002506:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800250a:	0a1b      	lsrs	r3, r3, #8
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	e005      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002514:	4b2d      	ldr	r3, [pc, #180]	; (80025cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 030f 	and.w	r3, r3, #15
 800251e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002520:	4a2b      	ldr	r2, [pc, #172]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002528:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10d      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002534:	e00a      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	2b04      	cmp	r3, #4
 800253a:	d102      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800253e:	61bb      	str	r3, [r7, #24]
 8002540:	e004      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b08      	cmp	r3, #8
 8002546:	d101      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002548:	4b23      	ldr	r3, [pc, #140]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800254a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	2b0c      	cmp	r3, #12
 8002550:	d134      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002552:	4b1e      	ldr	r3, [pc, #120]	; (80025cc <HAL_RCC_GetSysClockFreq+0x108>)
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d003      	beq.n	800256a <HAL_RCC_GetSysClockFreq+0xa6>
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d003      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0xac>
 8002568:	e005      	b.n	8002576 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800256a:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800256c:	617b      	str	r3, [r7, #20]
      break;
 800256e:	e005      	b.n	800257c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002570:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002572:	617b      	str	r3, [r7, #20]
      break;
 8002574:	e002      	b.n	800257c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	617b      	str	r3, [r7, #20]
      break;
 800257a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800257c:	4b13      	ldr	r3, [pc, #76]	; (80025cc <HAL_RCC_GetSysClockFreq+0x108>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	3301      	adds	r3, #1
 8002588:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <HAL_RCC_GetSysClockFreq+0x108>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	0a1b      	lsrs	r3, r3, #8
 8002590:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	fb03 f202 	mul.w	r2, r3, r2
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_RCC_GetSysClockFreq+0x108>)
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	0e5b      	lsrs	r3, r3, #25
 80025a8:	f003 0303 	and.w	r3, r3, #3
 80025ac:	3301      	adds	r3, #1
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025bc:	69bb      	ldr	r3, [r7, #24]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3724      	adds	r7, #36	; 0x24
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40021000 	.word	0x40021000
 80025d0:	080058fc 	.word	0x080058fc
 80025d4:	00f42400 	.word	0x00f42400
 80025d8:	007a1200 	.word	0x007a1200

080025dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	20000000 	.word	0x20000000

080025f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025f8:	f7ff fff0 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 80025fc:	4602      	mov	r2, r0
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	0a1b      	lsrs	r3, r3, #8
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	4904      	ldr	r1, [pc, #16]	; (800261c <HAL_RCC_GetPCLK1Freq+0x28>)
 800260a:	5ccb      	ldrb	r3, [r1, r3]
 800260c:	f003 031f 	and.w	r3, r3, #31
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40021000 	.word	0x40021000
 800261c:	080058f4 	.word	0x080058f4

08002620 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002624:	f7ff ffda 	bl	80025dc <HAL_RCC_GetHCLKFreq>
 8002628:	4602      	mov	r2, r0
 800262a:	4b06      	ldr	r3, [pc, #24]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x24>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	0adb      	lsrs	r3, r3, #11
 8002630:	f003 0307 	and.w	r3, r3, #7
 8002634:	4904      	ldr	r1, [pc, #16]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002636:	5ccb      	ldrb	r3, [r1, r3]
 8002638:	f003 031f 	and.w	r3, r3, #31
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	080058f4 	.word	0x080058f4

0800264c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b086      	sub	sp, #24
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002654:	2300      	movs	r3, #0
 8002656:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002658:	4b2a      	ldr	r3, [pc, #168]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002664:	f7ff f968 	bl	8001938 <HAL_PWREx_GetVoltageRange>
 8002668:	6178      	str	r0, [r7, #20]
 800266a:	e014      	b.n	8002696 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800266c:	4b25      	ldr	r3, [pc, #148]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	4a24      	ldr	r2, [pc, #144]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002676:	6593      	str	r3, [r2, #88]	; 0x58
 8002678:	4b22      	ldr	r3, [pc, #136]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002680:	60fb      	str	r3, [r7, #12]
 8002682:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002684:	f7ff f958 	bl	8001938 <HAL_PWREx_GetVoltageRange>
 8002688:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800268a:	4b1e      	ldr	r3, [pc, #120]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	4a1d      	ldr	r2, [pc, #116]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002694:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800269c:	d10b      	bne.n	80026b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2b80      	cmp	r3, #128	; 0x80
 80026a2:	d919      	bls.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2ba0      	cmp	r3, #160	; 0xa0
 80026a8:	d902      	bls.n	80026b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026aa:	2302      	movs	r3, #2
 80026ac:	613b      	str	r3, [r7, #16]
 80026ae:	e013      	b.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026b0:	2301      	movs	r3, #1
 80026b2:	613b      	str	r3, [r7, #16]
 80026b4:	e010      	b.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b80      	cmp	r3, #128	; 0x80
 80026ba:	d902      	bls.n	80026c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026bc:	2303      	movs	r3, #3
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	e00a      	b.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b80      	cmp	r3, #128	; 0x80
 80026c6:	d102      	bne.n	80026ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026c8:	2302      	movs	r3, #2
 80026ca:	613b      	str	r3, [r7, #16]
 80026cc:	e004      	b.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b70      	cmp	r3, #112	; 0x70
 80026d2:	d101      	bne.n	80026d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026d4:	2301      	movs	r3, #1
 80026d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026d8:	4b0b      	ldr	r3, [pc, #44]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f023 0207 	bic.w	r2, r3, #7
 80026e0:	4909      	ldr	r1, [pc, #36]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d001      	beq.n	80026fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e000      	b.n	80026fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	40021000 	.word	0x40021000
 8002708:	40022000 	.word	0x40022000

0800270c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002714:	2300      	movs	r3, #0
 8002716:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002718:	2300      	movs	r3, #0
 800271a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002724:	2b00      	cmp	r3, #0
 8002726:	f000 809e 	beq.w	8002866 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800272e:	4b46      	ldr	r3, [pc, #280]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d101      	bne.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800273e:	2300      	movs	r3, #0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00d      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002744:	4b40      	ldr	r3, [pc, #256]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	4a3f      	ldr	r2, [pc, #252]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800274a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800274e:	6593      	str	r3, [r2, #88]	; 0x58
 8002750:	4b3d      	ldr	r3, [pc, #244]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	60bb      	str	r3, [r7, #8]
 800275a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800275c:	2301      	movs	r3, #1
 800275e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002760:	4b3a      	ldr	r3, [pc, #232]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a39      	ldr	r2, [pc, #228]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002766:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800276a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800276c:	f7fe fe44 	bl	80013f8 <HAL_GetTick>
 8002770:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002772:	e009      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002774:	f7fe fe40 	bl	80013f8 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d902      	bls.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	74fb      	strb	r3, [r7, #19]
        break;
 8002786:	e005      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002788:	4b30      	ldr	r3, [pc, #192]	; (800284c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002790:	2b00      	cmp	r3, #0
 8002792:	d0ef      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d15a      	bne.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800279a:	4b2b      	ldr	r3, [pc, #172]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800279c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d01e      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0xde>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d019      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027c0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027c2:	4b21      	ldr	r3, [pc, #132]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	4a1f      	ldr	r2, [pc, #124]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027d2:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027d8:	4a1b      	ldr	r2, [pc, #108]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027e2:	4a19      	ldr	r2, [pc, #100]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d016      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f4:	f7fe fe00 	bl	80013f8 <HAL_GetTick>
 80027f8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027fa:	e00b      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027fc:	f7fe fdfc 	bl	80013f8 <HAL_GetTick>
 8002800:	4602      	mov	r2, r0
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	f241 3288 	movw	r2, #5000	; 0x1388
 800280a:	4293      	cmp	r3, r2
 800280c:	d902      	bls.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	74fb      	strb	r3, [r7, #19]
            break;
 8002812:	e006      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002814:	4b0c      	ldr	r3, [pc, #48]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d0ec      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 8002822:	7cfb      	ldrb	r3, [r7, #19]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10b      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800282a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800282e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	4904      	ldr	r1, [pc, #16]	; (8002848 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800283e:	e009      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
 8002844:	e006      	b.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002846:	bf00      	nop
 8002848:	40021000 	.word	0x40021000
 800284c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002850:	7cfb      	ldrb	r3, [r7, #19]
 8002852:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002854:	7c7b      	ldrb	r3, [r7, #17]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d105      	bne.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800285a:	4b6e      	ldr	r3, [pc, #440]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800285c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800285e:	4a6d      	ldr	r2, [pc, #436]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002860:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002864:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002872:	4b68      	ldr	r3, [pc, #416]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002878:	f023 0203 	bic.w	r2, r3, #3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4964      	ldr	r1, [pc, #400]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002894:	4b5f      	ldr	r3, [pc, #380]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	f023 020c 	bic.w	r2, r3, #12
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	495c      	ldr	r1, [pc, #368]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028b6:	4b57      	ldr	r3, [pc, #348]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	4953      	ldr	r1, [pc, #332]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028d8:	4b4e      	ldr	r3, [pc, #312]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	494b      	ldr	r1, [pc, #300]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028fa:	4b46      	ldr	r3, [pc, #280]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	4942      	ldr	r1, [pc, #264]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00a      	beq.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800291c:	4b3d      	ldr	r3, [pc, #244]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	493a      	ldr	r1, [pc, #232]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800293e:	4b35      	ldr	r3, [pc, #212]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002944:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	4931      	ldr	r1, [pc, #196]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800294e:	4313      	orrs	r3, r2
 8002950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002960:	4b2c      	ldr	r3, [pc, #176]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	4929      	ldr	r1, [pc, #164]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002982:	4b24      	ldr	r3, [pc, #144]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002988:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4920      	ldr	r1, [pc, #128]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029a4:	4b1b      	ldr	r3, [pc, #108]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	4918      	ldr	r1, [pc, #96]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029c2:	d105      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029c4:	4b13      	ldr	r3, [pc, #76]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029c6:	68db      	ldr	r3, [r3, #12]
 80029c8:	4a12      	ldr	r2, [pc, #72]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ce:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d015      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029dc:	4b0d      	ldr	r3, [pc, #52]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	490a      	ldr	r1, [pc, #40]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029fa:	d105      	bne.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029fc:	4b05      	ldr	r3, [pc, #20]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a02:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a06:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a08:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000

08002a18 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b084      	sub	sp, #16
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e095      	b.n	8002b56 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d108      	bne.n	8002a44 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002a3a:	d009      	beq.n	8002a50 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	61da      	str	r2, [r3, #28]
 8002a42:	e005      	b.n	8002a50 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fd ff82 	bl	8000974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2202      	movs	r2, #2
 8002a74:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a86:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002a90:	d902      	bls.n	8002a98 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	e002      	b.n	8002a9e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002a98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a9c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002aa6:	d007      	beq.n	8002ab8 <HAL_SPI_Init+0xa0>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ab0:	d002      	beq.n	8002ab8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	431a      	orrs	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	695b      	ldr	r3, [r3, #20]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	431a      	orrs	r2, r3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ae6:	431a      	orrs	r2, r3
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69db      	ldr	r3, [r3, #28]
 8002aec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002af0:	431a      	orrs	r2, r3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002afa:	ea42 0103 	orr.w	r1, r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	0c1b      	lsrs	r3, r3, #16
 8002b14:	f003 0204 	and.w	r2, r3, #4
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	431a      	orrs	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002b34:	ea42 0103 	orr.w	r1, r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	430a      	orrs	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3710      	adds	r7, #16
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b088      	sub	sp, #32
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	60f8      	str	r0, [r7, #12]
 8002b66:	60b9      	str	r1, [r7, #8]
 8002b68:	603b      	str	r3, [r7, #0]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_SPI_Transmit+0x22>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e158      	b.n	8002e32 <HAL_SPI_Transmit+0x2d4>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002b88:	f7fe fc36 	bl	80013f8 <HAL_GetTick>
 8002b8c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002b8e:	88fb      	ldrh	r3, [r7, #6]
 8002b90:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d002      	beq.n	8002ba4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ba2:	e13d      	b.n	8002e20 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <HAL_SPI_Transmit+0x52>
 8002baa:	88fb      	ldrh	r3, [r7, #6]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d102      	bne.n	8002bb6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002bb4:	e134      	b.n	8002e20 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2203      	movs	r2, #3
 8002bba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	88fa      	ldrh	r2, [r7, #6]
 8002bce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	88fa      	ldrh	r2, [r7, #6]
 8002bd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c00:	d10f      	bne.n	8002c22 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c20:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2c:	2b40      	cmp	r3, #64	; 0x40
 8002c2e:	d007      	beq.n	8002c40 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c3e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c48:	d94b      	bls.n	8002ce2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d002      	beq.n	8002c58 <HAL_SPI_Transmit+0xfa>
 8002c52:	8afb      	ldrh	r3, [r7, #22]
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d13e      	bne.n	8002cd6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	881a      	ldrh	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	1c9a      	adds	r2, r3, #2
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002c7c:	e02b      	b.n	8002cd6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d112      	bne.n	8002cb2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	881a      	ldrh	r2, [r3, #0]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9c:	1c9a      	adds	r2, r3, #2
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b29a      	uxth	r2, r3
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002cb0:	e011      	b.n	8002cd6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002cb2:	f7fe fba1 	bl	80013f8 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	683a      	ldr	r2, [r7, #0]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d803      	bhi.n	8002cca <HAL_SPI_Transmit+0x16c>
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc8:	d102      	bne.n	8002cd0 <HAL_SPI_Transmit+0x172>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d102      	bne.n	8002cd6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002cd4:	e0a4      	b.n	8002e20 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1ce      	bne.n	8002c7e <HAL_SPI_Transmit+0x120>
 8002ce0:	e07c      	b.n	8002ddc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d002      	beq.n	8002cf0 <HAL_SPI_Transmit+0x192>
 8002cea:	8afb      	ldrh	r3, [r7, #22]
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d170      	bne.n	8002dd2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002cf4:	b29b      	uxth	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d912      	bls.n	8002d20 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfe:	881a      	ldrh	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	1c9a      	adds	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d14:	b29b      	uxth	r3, r3
 8002d16:	3b02      	subs	r3, #2
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d1e:	e058      	b.n	8002dd2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	330c      	adds	r3, #12
 8002d2a:	7812      	ldrb	r2, [r2, #0]
 8002d2c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	b29a      	uxth	r2, r3
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002d46:	e044      	b.n	8002dd2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d12b      	bne.n	8002dae <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d912      	bls.n	8002d86 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d64:	881a      	ldrh	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d70:	1c9a      	adds	r2, r3, #2
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b02      	subs	r3, #2
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d84:	e025      	b.n	8002dd2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	330c      	adds	r3, #12
 8002d90:	7812      	ldrb	r2, [r2, #0]
 8002d92:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	1c5a      	adds	r2, r3, #1
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002dac:	e011      	b.n	8002dd2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002dae:	f7fe fb23 	bl	80013f8 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d803      	bhi.n	8002dc6 <HAL_SPI_Transmit+0x268>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dc4:	d102      	bne.n	8002dcc <HAL_SPI_Transmit+0x26e>
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d102      	bne.n	8002dd2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dd0:	e026      	b.n	8002e20 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d1b5      	bne.n	8002d48 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	6839      	ldr	r1, [r7, #0]
 8002de0:	68f8      	ldr	r0, [r7, #12]
 8002de2:	f000 fce3 	bl	80037ac <SPI_EndRxTxTransaction>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2220      	movs	r2, #32
 8002df0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	613b      	str	r3, [r7, #16]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	77fb      	strb	r3, [r7, #31]
 8002e1c:	e000      	b.n	8002e20 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002e1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002e30:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3720      	adds	r7, #32
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b088      	sub	sp, #32
 8002e3e:	af02      	add	r7, sp, #8
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e56:	d112      	bne.n	8002e7e <HAL_SPI_Receive+0x44>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d10e      	bne.n	8002e7e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2204      	movs	r2, #4
 8002e64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002e68:	88fa      	ldrh	r2, [r7, #6]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	9300      	str	r3, [sp, #0]
 8002e6e:	4613      	mov	r3, r2
 8002e70:	68ba      	ldr	r2, [r7, #8]
 8002e72:	68b9      	ldr	r1, [r7, #8]
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 f910 	bl	800309a <HAL_SPI_TransmitReceive>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	e109      	b.n	8003092 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d101      	bne.n	8002e8c <HAL_SPI_Receive+0x52>
 8002e88:	2302      	movs	r3, #2
 8002e8a:	e102      	b.n	8003092 <HAL_SPI_Receive+0x258>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e94:	f7fe fab0 	bl	80013f8 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d002      	beq.n	8002eac <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002eaa:	e0e9      	b.n	8003080 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d002      	beq.n	8002eb8 <HAL_SPI_Receive+0x7e>
 8002eb2:	88fb      	ldrh	r3, [r7, #6]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ebc:	e0e0      	b.n	8003080 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2204      	movs	r2, #4
 8002ec2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	88fa      	ldrh	r2, [r7, #6]
 8002ed6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	88fa      	ldrh	r2, [r7, #6]
 8002ede:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f08:	d908      	bls.n	8002f1c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	685a      	ldr	r2, [r3, #4]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f18:	605a      	str	r2, [r3, #4]
 8002f1a:	e007      	b.n	8002f2c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f2a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f34:	d10f      	bne.n	8002f56 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f54:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f60:	2b40      	cmp	r3, #64	; 0x40
 8002f62:	d007      	beq.n	8002f74 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f72:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f7c:	d867      	bhi.n	800304e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002f7e:	e030      	b.n	8002fe2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d117      	bne.n	8002fbe <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f103 020c 	add.w	r2, r3, #12
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	7812      	ldrb	r2, [r2, #0]
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	3b01      	subs	r3, #1
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002fbc:	e011      	b.n	8002fe2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fbe:	f7fe fa1b 	bl	80013f8 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	683a      	ldr	r2, [r7, #0]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d803      	bhi.n	8002fd6 <HAL_SPI_Receive+0x19c>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd4:	d102      	bne.n	8002fdc <HAL_SPI_Receive+0x1a2>
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002fe0:	e04e      	b.n	8003080 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1c8      	bne.n	8002f80 <HAL_SPI_Receive+0x146>
 8002fee:	e034      	b.n	800305a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	f003 0301 	and.w	r3, r3, #1
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d115      	bne.n	800302a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003008:	b292      	uxth	r2, r2
 800300a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003010:	1c9a      	adds	r2, r3, #2
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800301c:	b29b      	uxth	r3, r3
 800301e:	3b01      	subs	r3, #1
 8003020:	b29a      	uxth	r2, r3
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003028:	e011      	b.n	800304e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800302a:	f7fe f9e5 	bl	80013f8 <HAL_GetTick>
 800302e:	4602      	mov	r2, r0
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	1ad3      	subs	r3, r2, r3
 8003034:	683a      	ldr	r2, [r7, #0]
 8003036:	429a      	cmp	r2, r3
 8003038:	d803      	bhi.n	8003042 <HAL_SPI_Receive+0x208>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003040:	d102      	bne.n	8003048 <HAL_SPI_Receive+0x20e>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800304c:	e018      	b.n	8003080 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003054:	b29b      	uxth	r3, r3
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1ca      	bne.n	8002ff0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800305a:	693a      	ldr	r2, [r7, #16]
 800305c:	6839      	ldr	r1, [r7, #0]
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 fb4c 	bl	80036fc <SPI_EndRxTransaction>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d002      	beq.n	8003070 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2220      	movs	r2, #32
 800306e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003074:	2b00      	cmp	r3, #0
 8003076:	d002      	beq.n	800307e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	75fb      	strb	r3, [r7, #23]
 800307c:	e000      	b.n	8003080 <HAL_SPI_Receive+0x246>
  }

error :
 800307e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2201      	movs	r2, #1
 8003084:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2200      	movs	r2, #0
 800308c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003090:	7dfb      	ldrb	r3, [r7, #23]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b08a      	sub	sp, #40	; 0x28
 800309e:	af00      	add	r7, sp, #0
 80030a0:	60f8      	str	r0, [r7, #12]
 80030a2:	60b9      	str	r1, [r7, #8]
 80030a4:	607a      	str	r2, [r7, #4]
 80030a6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030a8:	2301      	movs	r3, #1
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_SPI_TransmitReceive+0x26>
 80030bc:	2302      	movs	r3, #2
 80030be:	e1fb      	b.n	80034b8 <HAL_SPI_TransmitReceive+0x41e>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030c8:	f7fe f996 	bl	80013f8 <HAL_GetTick>
 80030cc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030d4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80030dc:	887b      	ldrh	r3, [r7, #2]
 80030de:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80030e0:	887b      	ldrh	r3, [r7, #2]
 80030e2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030e4:	7efb      	ldrb	r3, [r7, #27]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d00e      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x6e>
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030f0:	d106      	bne.n	8003100 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_SPI_TransmitReceive+0x66>
 80030fa:	7efb      	ldrb	r3, [r7, #27]
 80030fc:	2b04      	cmp	r3, #4
 80030fe:	d003      	beq.n	8003108 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003100:	2302      	movs	r3, #2
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003106:	e1cd      	b.n	80034a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <HAL_SPI_TransmitReceive+0x80>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_SPI_TransmitReceive+0x80>
 8003114:	887b      	ldrh	r3, [r7, #2]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003120:	e1c0      	b.n	80034a4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b04      	cmp	r3, #4
 800312c:	d003      	beq.n	8003136 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2205      	movs	r2, #5
 8003132:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2200      	movs	r2, #0
 800313a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	887a      	ldrh	r2, [r7, #2]
 8003146:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	887a      	ldrh	r2, [r7, #2]
 800314e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	887a      	ldrh	r2, [r7, #2]
 8003162:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003178:	d802      	bhi.n	8003180 <HAL_SPI_TransmitReceive+0xe6>
 800317a:	8a3b      	ldrh	r3, [r7, #16]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d908      	bls.n	8003192 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	685a      	ldr	r2, [r3, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800318e:	605a      	str	r2, [r3, #4]
 8003190:	e007      	b.n	80031a2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685a      	ldr	r2, [r3, #4]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031a0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	d007      	beq.n	80031c0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031c8:	d97c      	bls.n	80032c4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_SPI_TransmitReceive+0x13e>
 80031d2:	8a7b      	ldrh	r3, [r7, #18]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d169      	bne.n	80032ac <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031dc:	881a      	ldrh	r2, [r3, #0]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e8:	1c9a      	adds	r2, r3, #2
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	3b01      	subs	r3, #1
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031fc:	e056      	b.n	80032ac <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b02      	cmp	r3, #2
 800320a:	d11b      	bne.n	8003244 <HAL_SPI_TransmitReceive+0x1aa>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003210:	b29b      	uxth	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d016      	beq.n	8003244 <HAL_SPI_TransmitReceive+0x1aa>
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	2b01      	cmp	r3, #1
 800321a:	d113      	bne.n	8003244 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	881a      	ldrh	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	1c9a      	adds	r2, r3, #2
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003236:	b29b      	uxth	r3, r3
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b01      	cmp	r3, #1
 8003250:	d11c      	bne.n	800328c <HAL_SPI_TransmitReceive+0x1f2>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68da      	ldr	r2, [r3, #12]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003268:	b292      	uxth	r2, r2
 800326a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	1c9a      	adds	r2, r3, #2
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800327c:	b29b      	uxth	r3, r3
 800327e:	3b01      	subs	r3, #1
 8003280:	b29a      	uxth	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003288:	2301      	movs	r3, #1
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800328c:	f7fe f8b4 	bl	80013f8 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003298:	429a      	cmp	r2, r3
 800329a:	d807      	bhi.n	80032ac <HAL_SPI_TransmitReceive+0x212>
 800329c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800329e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a2:	d003      	beq.n	80032ac <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80032aa:	e0fb      	b.n	80034a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1a3      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x164>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032bc:	b29b      	uxth	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d19d      	bne.n	80031fe <HAL_SPI_TransmitReceive+0x164>
 80032c2:	e0df      	b.n	8003484 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d003      	beq.n	80032d4 <HAL_SPI_TransmitReceive+0x23a>
 80032cc:	8a7b      	ldrh	r3, [r7, #18]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	f040 80cb 	bne.w	800346a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032d8:	b29b      	uxth	r3, r3
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d912      	bls.n	8003304 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032e2:	881a      	ldrh	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ee:	1c9a      	adds	r2, r3, #2
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032f8:	b29b      	uxth	r3, r3
 80032fa:	3b02      	subs	r3, #2
 80032fc:	b29a      	uxth	r2, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003302:	e0b2      	b.n	800346a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	330c      	adds	r3, #12
 800330e:	7812      	ldrb	r2, [r2, #0]
 8003310:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003316:	1c5a      	adds	r2, r3, #1
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003320:	b29b      	uxth	r3, r3
 8003322:	3b01      	subs	r3, #1
 8003324:	b29a      	uxth	r2, r3
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800332a:	e09e      	b.n	800346a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b02      	cmp	r3, #2
 8003338:	d134      	bne.n	80033a4 <HAL_SPI_TransmitReceive+0x30a>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	d02f      	beq.n	80033a4 <HAL_SPI_TransmitReceive+0x30a>
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	2b01      	cmp	r3, #1
 8003348:	d12c      	bne.n	80033a4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d912      	bls.n	800337a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	1c9a      	adds	r2, r3, #2
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b02      	subs	r3, #2
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003378:	e012      	b.n	80033a0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	330c      	adds	r3, #12
 8003384:	7812      	ldrb	r2, [r2, #0]
 8003386:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800338c:	1c5a      	adds	r2, r3, #1
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003396:	b29b      	uxth	r3, r3
 8003398:	3b01      	subs	r3, #1
 800339a:	b29a      	uxth	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0301 	and.w	r3, r3, #1
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d148      	bne.n	8003444 <HAL_SPI_TransmitReceive+0x3aa>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d042      	beq.n	8003444 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d923      	bls.n	8003412 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d4:	b292      	uxth	r2, r2
 80033d6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	1c9a      	adds	r2, r3, #2
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	3b02      	subs	r3, #2
 80033ec:	b29a      	uxth	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d81f      	bhi.n	8003440 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800340e:	605a      	str	r2, [r3, #4]
 8003410:	e016      	b.n	8003440 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f103 020c 	add.w	r2, r3, #12
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	7812      	ldrb	r2, [r2, #0]
 8003420:	b2d2      	uxtb	r2, r2
 8003422:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	1c5a      	adds	r2, r3, #1
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003434:	b29b      	uxth	r3, r3
 8003436:	3b01      	subs	r3, #1
 8003438:	b29a      	uxth	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003440:	2301      	movs	r3, #1
 8003442:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003444:	f7fd ffd8 	bl	80013f8 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003450:	429a      	cmp	r2, r3
 8003452:	d803      	bhi.n	800345c <HAL_SPI_TransmitReceive+0x3c2>
 8003454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003456:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345a:	d102      	bne.n	8003462 <HAL_SPI_TransmitReceive+0x3c8>
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	2b00      	cmp	r3, #0
 8003460:	d103      	bne.n	800346a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003468:	e01c      	b.n	80034a4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	f47f af5b 	bne.w	800332c <HAL_SPI_TransmitReceive+0x292>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	f47f af54 	bne.w	800332c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003484:	69fa      	ldr	r2, [r7, #28]
 8003486:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 f98f 	bl	80037ac <SPI_EndRxTxTransaction>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d006      	beq.n	80034a2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2220      	movs	r2, #32
 800349e:	661a      	str	r2, [r3, #96]	; 0x60
 80034a0:	e000      	b.n	80034a4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80034a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80034b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3728      	adds	r7, #40	; 0x28
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b088      	sub	sp, #32
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	603b      	str	r3, [r7, #0]
 80034cc:	4613      	mov	r3, r2
 80034ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034d0:	f7fd ff92 	bl	80013f8 <HAL_GetTick>
 80034d4:	4602      	mov	r2, r0
 80034d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	683a      	ldr	r2, [r7, #0]
 80034dc:	4413      	add	r3, r2
 80034de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034e0:	f7fd ff8a 	bl	80013f8 <HAL_GetTick>
 80034e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034e6:	4b39      	ldr	r3, [pc, #228]	; (80035cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	015b      	lsls	r3, r3, #5
 80034ec:	0d1b      	lsrs	r3, r3, #20
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	fb02 f303 	mul.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034f6:	e054      	b.n	80035a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fe:	d050      	beq.n	80035a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003500:	f7fd ff7a 	bl	80013f8 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	69fa      	ldr	r2, [r7, #28]
 800350c:	429a      	cmp	r2, r3
 800350e:	d902      	bls.n	8003516 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d13d      	bne.n	8003592 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003524:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800352e:	d111      	bne.n	8003554 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003538:	d004      	beq.n	8003544 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003542:	d107      	bne.n	8003554 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681a      	ldr	r2, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003552:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800355c:	d10f      	bne.n	800357e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800357c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e017      	b.n	80035c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d101      	bne.n	800359c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003598:	2300      	movs	r3, #0
 800359a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	3b01      	subs	r3, #1
 80035a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	689a      	ldr	r2, [r3, #8]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4013      	ands	r3, r2
 80035ac:	68ba      	ldr	r2, [r7, #8]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	bf0c      	ite	eq
 80035b2:	2301      	moveq	r3, #1
 80035b4:	2300      	movne	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	461a      	mov	r2, r3
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d19b      	bne.n	80034f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3720      	adds	r7, #32
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000000 	.word	0x20000000

080035d0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80035e2:	f7fd ff09 	bl	80013f8 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	683a      	ldr	r2, [r7, #0]
 80035ee:	4413      	add	r3, r2
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80035f2:	f7fd ff01 	bl	80013f8 <HAL_GetTick>
 80035f6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	330c      	adds	r3, #12
 80035fe:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003600:	4b3d      	ldr	r3, [pc, #244]	; (80036f8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	4613      	mov	r3, r2
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	00da      	lsls	r2, r3, #3
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	0d1b      	lsrs	r3, r3, #20
 8003610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003612:	fb02 f303 	mul.w	r3, r2, r3
 8003616:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003618:	e060      	b.n	80036dc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003620:	d107      	bne.n	8003632 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d104      	bne.n	8003632 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	b2db      	uxtb	r3, r3
 800362e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003630:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003638:	d050      	beq.n	80036dc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800363a:	f7fd fedd 	bl	80013f8 <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003646:	429a      	cmp	r2, r3
 8003648:	d902      	bls.n	8003650 <SPI_WaitFifoStateUntilTimeout+0x80>
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	2b00      	cmp	r3, #0
 800364e:	d13d      	bne.n	80036cc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	685a      	ldr	r2, [r3, #4]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800365e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003668:	d111      	bne.n	800368e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003672:	d004      	beq.n	800367e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800367c:	d107      	bne.n	800368e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003692:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003696:	d10f      	bne.n	80036b8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036a6:	601a      	str	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036b6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80036c8:	2303      	movs	r3, #3
 80036ca:	e010      	b.n	80036ee <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	3b01      	subs	r3, #1
 80036da:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	68bb      	ldr	r3, [r7, #8]
 80036e4:	4013      	ands	r3, r2
 80036e6:	687a      	ldr	r2, [r7, #4]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d196      	bne.n	800361a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3728      	adds	r7, #40	; 0x28
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	20000000 	.word	0x20000000

080036fc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af02      	add	r7, sp, #8
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003710:	d111      	bne.n	8003736 <SPI_EndRxTransaction+0x3a>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800371a:	d004      	beq.n	8003726 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003724:	d107      	bne.n	8003736 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681a      	ldr	r2, [r3, #0]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003734:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	9300      	str	r3, [sp, #0]
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2200      	movs	r2, #0
 800373e:	2180      	movs	r1, #128	; 0x80
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7ff febd 	bl	80034c0 <SPI_WaitFlagStateUntilTimeout>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003750:	f043 0220 	orr.w	r2, r3, #32
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e023      	b.n	80037a4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003764:	d11d      	bne.n	80037a2 <SPI_EndRxTransaction+0xa6>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800376e:	d004      	beq.n	800377a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003778:	d113      	bne.n	80037a2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	9300      	str	r3, [sp, #0]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	2200      	movs	r2, #0
 8003782:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f7ff ff22 	bl	80035d0 <SPI_WaitFifoStateUntilTimeout>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d007      	beq.n	80037a2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003796:	f043 0220 	orr.w	r2, r3, #32
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e000      	b.n	80037a4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3710      	adds	r7, #16
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	2200      	movs	r2, #0
 80037c0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f7ff ff03 	bl	80035d0 <SPI_WaitFifoStateUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d007      	beq.n	80037e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e027      	b.n	8003830 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2200      	movs	r2, #0
 80037e8:	2180      	movs	r1, #128	; 0x80
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff fe68 	bl	80034c0 <SPI_WaitFlagStateUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e014      	b.n	8003830 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	9300      	str	r3, [sp, #0]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	2200      	movs	r2, #0
 800380e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f7ff fedc 	bl	80035d0 <SPI_WaitFifoStateUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d007      	beq.n	800382e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003822:	f043 0220 	orr.w	r2, r3, #32
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800382a:	2303      	movs	r3, #3
 800382c:	e000      	b.n	8003830 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3710      	adds	r7, #16
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}

08003838 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e040      	b.n	80038cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800384e:	2b00      	cmp	r3, #0
 8003850:	d106      	bne.n	8003860 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7fd f8ce 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2224      	movs	r2, #36	; 0x24
 8003864:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 f8c0 	bl	80039fc <UART_SetConfig>
 800387c:	4603      	mov	r3, r0
 800387e:	2b01      	cmp	r3, #1
 8003880:	d101      	bne.n	8003886 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e022      	b.n	80038cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388a:	2b00      	cmp	r3, #0
 800388c:	d002      	beq.n	8003894 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fb0e 	bl	8003eb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	685a      	ldr	r2, [r3, #4]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	689a      	ldr	r2, [r3, #8]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0201 	orr.w	r2, r2, #1
 80038c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fb95 	bl	8003ff4 <UART_CheckIdleState>
 80038ca:	4603      	mov	r3, r0
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3708      	adds	r7, #8
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b08a      	sub	sp, #40	; 0x28
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	603b      	str	r3, [r7, #0]
 80038e0:	4613      	mov	r3, r2
 80038e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	f040 8082 	bne.w	80039f2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <HAL_UART_Transmit+0x26>
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d101      	bne.n	80038fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e07a      	b.n	80039f4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003904:	2b01      	cmp	r3, #1
 8003906:	d101      	bne.n	800390c <HAL_UART_Transmit+0x38>
 8003908:	2302      	movs	r3, #2
 800390a:	e073      	b.n	80039f4 <HAL_UART_Transmit+0x120>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2221      	movs	r2, #33	; 0x21
 8003920:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003922:	f7fd fd69 	bl	80013f8 <HAL_GetTick>
 8003926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	88fa      	ldrh	r2, [r7, #6]
 800392c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	88fa      	ldrh	r2, [r7, #6]
 8003934:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003940:	d108      	bne.n	8003954 <HAL_UART_Transmit+0x80>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	691b      	ldr	r3, [r3, #16]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d104      	bne.n	8003954 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800394a:	2300      	movs	r3, #0
 800394c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	61bb      	str	r3, [r7, #24]
 8003952:	e003      	b.n	800395c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003958:	2300      	movs	r3, #0
 800395a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003964:	e02d      	b.n	80039c2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	2200      	movs	r2, #0
 800396e:	2180      	movs	r1, #128	; 0x80
 8003970:	68f8      	ldr	r0, [r7, #12]
 8003972:	f000 fb88 	bl	8004086 <UART_WaitOnFlagUntilTimeout>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d001      	beq.n	8003980 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800397c:	2303      	movs	r3, #3
 800397e:	e039      	b.n	80039f4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10b      	bne.n	800399e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	881a      	ldrh	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003992:	b292      	uxth	r2, r2
 8003994:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	3302      	adds	r3, #2
 800399a:	61bb      	str	r3, [r7, #24]
 800399c:	e008      	b.n	80039b0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	781a      	ldrb	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	b292      	uxth	r2, r2
 80039a8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3301      	adds	r3, #1
 80039ae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1cb      	bne.n	8003966 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2200      	movs	r2, #0
 80039d6:	2140      	movs	r1, #64	; 0x40
 80039d8:	68f8      	ldr	r0, [r7, #12]
 80039da:	f000 fb54 	bl	8004086 <UART_WaitOnFlagUntilTimeout>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d001      	beq.n	80039e8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e005      	b.n	80039f4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2220      	movs	r2, #32
 80039ec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80039ee:	2300      	movs	r3, #0
 80039f0:	e000      	b.n	80039f4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80039f2:	2302      	movs	r3, #2
  }
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	3720      	adds	r7, #32
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a00:	b08a      	sub	sp, #40	; 0x28
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a06:	2300      	movs	r3, #0
 8003a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4b9e      	ldr	r3, [pc, #632]	; (8003ca4 <UART_SetConfig+0x2a8>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	6812      	ldr	r2, [r2, #0]
 8003a32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a34:	430b      	orrs	r3, r1
 8003a36:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	430a      	orrs	r2, r1
 8003a4c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a93      	ldr	r2, [pc, #588]	; (8003ca8 <UART_SetConfig+0x2ac>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d004      	beq.n	8003a68 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a1b      	ldr	r3, [r3, #32]
 8003a62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a64:	4313      	orrs	r3, r2
 8003a66:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a8a      	ldr	r2, [pc, #552]	; (8003cac <UART_SetConfig+0x2b0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d126      	bne.n	8003ad4 <UART_SetConfig+0xd8>
 8003a86:	4b8a      	ldr	r3, [pc, #552]	; (8003cb0 <UART_SetConfig+0x2b4>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	f003 0303 	and.w	r3, r3, #3
 8003a90:	2b03      	cmp	r3, #3
 8003a92:	d81b      	bhi.n	8003acc <UART_SetConfig+0xd0>
 8003a94:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <UART_SetConfig+0xa0>)
 8003a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9a:	bf00      	nop
 8003a9c:	08003aad 	.word	0x08003aad
 8003aa0:	08003abd 	.word	0x08003abd
 8003aa4:	08003ab5 	.word	0x08003ab5
 8003aa8:	08003ac5 	.word	0x08003ac5
 8003aac:	2301      	movs	r3, #1
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab2:	e0ab      	b.n	8003c0c <UART_SetConfig+0x210>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aba:	e0a7      	b.n	8003c0c <UART_SetConfig+0x210>
 8003abc:	2304      	movs	r3, #4
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac2:	e0a3      	b.n	8003c0c <UART_SetConfig+0x210>
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aca:	e09f      	b.n	8003c0c <UART_SetConfig+0x210>
 8003acc:	2310      	movs	r3, #16
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad2:	e09b      	b.n	8003c0c <UART_SetConfig+0x210>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a76      	ldr	r2, [pc, #472]	; (8003cb4 <UART_SetConfig+0x2b8>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d138      	bne.n	8003b50 <UART_SetConfig+0x154>
 8003ade:	4b74      	ldr	r3, [pc, #464]	; (8003cb0 <UART_SetConfig+0x2b4>)
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae4:	f003 030c 	and.w	r3, r3, #12
 8003ae8:	2b0c      	cmp	r3, #12
 8003aea:	d82d      	bhi.n	8003b48 <UART_SetConfig+0x14c>
 8003aec:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <UART_SetConfig+0xf8>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b29 	.word	0x08003b29
 8003af8:	08003b49 	.word	0x08003b49
 8003afc:	08003b49 	.word	0x08003b49
 8003b00:	08003b49 	.word	0x08003b49
 8003b04:	08003b39 	.word	0x08003b39
 8003b08:	08003b49 	.word	0x08003b49
 8003b0c:	08003b49 	.word	0x08003b49
 8003b10:	08003b49 	.word	0x08003b49
 8003b14:	08003b31 	.word	0x08003b31
 8003b18:	08003b49 	.word	0x08003b49
 8003b1c:	08003b49 	.word	0x08003b49
 8003b20:	08003b49 	.word	0x08003b49
 8003b24:	08003b41 	.word	0x08003b41
 8003b28:	2300      	movs	r3, #0
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2e:	e06d      	b.n	8003c0c <UART_SetConfig+0x210>
 8003b30:	2302      	movs	r3, #2
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b36:	e069      	b.n	8003c0c <UART_SetConfig+0x210>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3e:	e065      	b.n	8003c0c <UART_SetConfig+0x210>
 8003b40:	2308      	movs	r3, #8
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b46:	e061      	b.n	8003c0c <UART_SetConfig+0x210>
 8003b48:	2310      	movs	r3, #16
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4e:	e05d      	b.n	8003c0c <UART_SetConfig+0x210>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a58      	ldr	r2, [pc, #352]	; (8003cb8 <UART_SetConfig+0x2bc>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d125      	bne.n	8003ba6 <UART_SetConfig+0x1aa>
 8003b5a:	4b55      	ldr	r3, [pc, #340]	; (8003cb0 <UART_SetConfig+0x2b4>)
 8003b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b60:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b64:	2b30      	cmp	r3, #48	; 0x30
 8003b66:	d016      	beq.n	8003b96 <UART_SetConfig+0x19a>
 8003b68:	2b30      	cmp	r3, #48	; 0x30
 8003b6a:	d818      	bhi.n	8003b9e <UART_SetConfig+0x1a2>
 8003b6c:	2b20      	cmp	r3, #32
 8003b6e:	d00a      	beq.n	8003b86 <UART_SetConfig+0x18a>
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d814      	bhi.n	8003b9e <UART_SetConfig+0x1a2>
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <UART_SetConfig+0x182>
 8003b78:	2b10      	cmp	r3, #16
 8003b7a:	d008      	beq.n	8003b8e <UART_SetConfig+0x192>
 8003b7c:	e00f      	b.n	8003b9e <UART_SetConfig+0x1a2>
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b84:	e042      	b.n	8003c0c <UART_SetConfig+0x210>
 8003b86:	2302      	movs	r3, #2
 8003b88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8c:	e03e      	b.n	8003c0c <UART_SetConfig+0x210>
 8003b8e:	2304      	movs	r3, #4
 8003b90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b94:	e03a      	b.n	8003c0c <UART_SetConfig+0x210>
 8003b96:	2308      	movs	r3, #8
 8003b98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9c:	e036      	b.n	8003c0c <UART_SetConfig+0x210>
 8003b9e:	2310      	movs	r3, #16
 8003ba0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ba4:	e032      	b.n	8003c0c <UART_SetConfig+0x210>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a3f      	ldr	r2, [pc, #252]	; (8003ca8 <UART_SetConfig+0x2ac>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d12a      	bne.n	8003c06 <UART_SetConfig+0x20a>
 8003bb0:	4b3f      	ldr	r3, [pc, #252]	; (8003cb0 <UART_SetConfig+0x2b4>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bbe:	d01a      	beq.n	8003bf6 <UART_SetConfig+0x1fa>
 8003bc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003bc4:	d81b      	bhi.n	8003bfe <UART_SetConfig+0x202>
 8003bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bca:	d00c      	beq.n	8003be6 <UART_SetConfig+0x1ea>
 8003bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bd0:	d815      	bhi.n	8003bfe <UART_SetConfig+0x202>
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d003      	beq.n	8003bde <UART_SetConfig+0x1e2>
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d008      	beq.n	8003bee <UART_SetConfig+0x1f2>
 8003bdc:	e00f      	b.n	8003bfe <UART_SetConfig+0x202>
 8003bde:	2300      	movs	r3, #0
 8003be0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003be4:	e012      	b.n	8003c0c <UART_SetConfig+0x210>
 8003be6:	2302      	movs	r3, #2
 8003be8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bec:	e00e      	b.n	8003c0c <UART_SetConfig+0x210>
 8003bee:	2304      	movs	r3, #4
 8003bf0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bf4:	e00a      	b.n	8003c0c <UART_SetConfig+0x210>
 8003bf6:	2308      	movs	r3, #8
 8003bf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bfc:	e006      	b.n	8003c0c <UART_SetConfig+0x210>
 8003bfe:	2310      	movs	r3, #16
 8003c00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c04:	e002      	b.n	8003c0c <UART_SetConfig+0x210>
 8003c06:	2310      	movs	r3, #16
 8003c08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <UART_SetConfig+0x2ac>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	f040 808a 	bne.w	8003d2c <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c18:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c1c:	2b08      	cmp	r3, #8
 8003c1e:	d824      	bhi.n	8003c6a <UART_SetConfig+0x26e>
 8003c20:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <UART_SetConfig+0x22c>)
 8003c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c26:	bf00      	nop
 8003c28:	08003c4d 	.word	0x08003c4d
 8003c2c:	08003c6b 	.word	0x08003c6b
 8003c30:	08003c55 	.word	0x08003c55
 8003c34:	08003c6b 	.word	0x08003c6b
 8003c38:	08003c5b 	.word	0x08003c5b
 8003c3c:	08003c6b 	.word	0x08003c6b
 8003c40:	08003c6b 	.word	0x08003c6b
 8003c44:	08003c6b 	.word	0x08003c6b
 8003c48:	08003c63 	.word	0x08003c63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c4c:	f7fe fcd2 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8003c50:	61f8      	str	r0, [r7, #28]
        break;
 8003c52:	e010      	b.n	8003c76 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <UART_SetConfig+0x2c0>)
 8003c56:	61fb      	str	r3, [r7, #28]
        break;
 8003c58:	e00d      	b.n	8003c76 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c5a:	f7fe fc33 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8003c5e:	61f8      	str	r0, [r7, #28]
        break;
 8003c60:	e009      	b.n	8003c76 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c66:	61fb      	str	r3, [r7, #28]
        break;
 8003c68:	e005      	b.n	8003c76 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8109 	beq.w	8003e90 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	69fa      	ldr	r2, [r7, #28]
 8003c8a:	429a      	cmp	r2, r3
 8003c8c:	d305      	bcc.n	8003c9a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d912      	bls.n	8003cc0 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003ca0:	e0f6      	b.n	8003e90 <UART_SetConfig+0x494>
 8003ca2:	bf00      	nop
 8003ca4:	efff69f3 	.word	0xefff69f3
 8003ca8:	40008000 	.word	0x40008000
 8003cac:	40013800 	.word	0x40013800
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40004400 	.word	0x40004400
 8003cb8:	40004800 	.word	0x40004800
 8003cbc:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	461c      	mov	r4, r3
 8003cc6:	4615      	mov	r5, r2
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	f04f 0300 	mov.w	r3, #0
 8003cd0:	022b      	lsls	r3, r5, #8
 8003cd2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003cd6:	0222      	lsls	r2, r4, #8
 8003cd8:	68f9      	ldr	r1, [r7, #12]
 8003cda:	6849      	ldr	r1, [r1, #4]
 8003cdc:	0849      	lsrs	r1, r1, #1
 8003cde:	2000      	movs	r0, #0
 8003ce0:	4688      	mov	r8, r1
 8003ce2:	4681      	mov	r9, r0
 8003ce4:	eb12 0a08 	adds.w	sl, r2, r8
 8003ce8:	eb43 0b09 	adc.w	fp, r3, r9
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	603b      	str	r3, [r7, #0]
 8003cf4:	607a      	str	r2, [r7, #4]
 8003cf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cfa:	4650      	mov	r0, sl
 8003cfc:	4659      	mov	r1, fp
 8003cfe:	f7fc fab7 	bl	8000270 <__aeabi_uldivmod>
 8003d02:	4602      	mov	r2, r0
 8003d04:	460b      	mov	r3, r1
 8003d06:	4613      	mov	r3, r2
 8003d08:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d10:	d308      	bcc.n	8003d24 <UART_SetConfig+0x328>
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d18:	d204      	bcs.n	8003d24 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	60da      	str	r2, [r3, #12]
 8003d22:	e0b5      	b.n	8003e90 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d2a:	e0b1      	b.n	8003e90 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d34:	d15d      	bne.n	8003df2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003d36:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d827      	bhi.n	8003d8e <UART_SetConfig+0x392>
 8003d3e:	a201      	add	r2, pc, #4	; (adr r2, 8003d44 <UART_SetConfig+0x348>)
 8003d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d44:	08003d69 	.word	0x08003d69
 8003d48:	08003d71 	.word	0x08003d71
 8003d4c:	08003d79 	.word	0x08003d79
 8003d50:	08003d8f 	.word	0x08003d8f
 8003d54:	08003d7f 	.word	0x08003d7f
 8003d58:	08003d8f 	.word	0x08003d8f
 8003d5c:	08003d8f 	.word	0x08003d8f
 8003d60:	08003d8f 	.word	0x08003d8f
 8003d64:	08003d87 	.word	0x08003d87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d68:	f7fe fc44 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8003d6c:	61f8      	str	r0, [r7, #28]
        break;
 8003d6e:	e014      	b.n	8003d9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d70:	f7fe fc56 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8003d74:	61f8      	str	r0, [r7, #28]
        break;
 8003d76:	e010      	b.n	8003d9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d78:	4b4c      	ldr	r3, [pc, #304]	; (8003eac <UART_SetConfig+0x4b0>)
 8003d7a:	61fb      	str	r3, [r7, #28]
        break;
 8003d7c:	e00d      	b.n	8003d9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d7e:	f7fe fba1 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8003d82:	61f8      	str	r0, [r7, #28]
        break;
 8003d84:	e009      	b.n	8003d9a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d8a:	61fb      	str	r3, [r7, #28]
        break;
 8003d8c:	e005      	b.n	8003d9a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d077      	beq.n	8003e90 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	005a      	lsls	r2, r3, #1
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	441a      	add	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003db4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	2b0f      	cmp	r3, #15
 8003dba:	d916      	bls.n	8003dea <UART_SetConfig+0x3ee>
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc2:	d212      	bcs.n	8003dea <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	f023 030f 	bic.w	r3, r3, #15
 8003dcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003dce:	69bb      	ldr	r3, [r7, #24]
 8003dd0:	085b      	lsrs	r3, r3, #1
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	8afb      	ldrh	r3, [r7, #22]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	8afa      	ldrh	r2, [r7, #22]
 8003de6:	60da      	str	r2, [r3, #12]
 8003de8:	e052      	b.n	8003e90 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003df0:	e04e      	b.n	8003e90 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003df2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d827      	bhi.n	8003e4a <UART_SetConfig+0x44e>
 8003dfa:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <UART_SetConfig+0x404>)
 8003dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e2d 	.word	0x08003e2d
 8003e08:	08003e35 	.word	0x08003e35
 8003e0c:	08003e4b 	.word	0x08003e4b
 8003e10:	08003e3b 	.word	0x08003e3b
 8003e14:	08003e4b 	.word	0x08003e4b
 8003e18:	08003e4b 	.word	0x08003e4b
 8003e1c:	08003e4b 	.word	0x08003e4b
 8003e20:	08003e43 	.word	0x08003e43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e24:	f7fe fbe6 	bl	80025f4 <HAL_RCC_GetPCLK1Freq>
 8003e28:	61f8      	str	r0, [r7, #28]
        break;
 8003e2a:	e014      	b.n	8003e56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e2c:	f7fe fbf8 	bl	8002620 <HAL_RCC_GetPCLK2Freq>
 8003e30:	61f8      	str	r0, [r7, #28]
        break;
 8003e32:	e010      	b.n	8003e56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e34:	4b1d      	ldr	r3, [pc, #116]	; (8003eac <UART_SetConfig+0x4b0>)
 8003e36:	61fb      	str	r3, [r7, #28]
        break;
 8003e38:	e00d      	b.n	8003e56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e3a:	f7fe fb43 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8003e3e:	61f8      	str	r0, [r7, #28]
        break;
 8003e40:	e009      	b.n	8003e56 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e46:	61fb      	str	r3, [r7, #28]
        break;
 8003e48:	e005      	b.n	8003e56 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e54:	bf00      	nop
    }

    if (pclk != 0U)
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d019      	beq.n	8003e90 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	085a      	lsrs	r2, r3, #1
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	441a      	add	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b0f      	cmp	r3, #15
 8003e74:	d909      	bls.n	8003e8a <UART_SetConfig+0x48e>
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e7c:	d205      	bcs.n	8003e8a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60da      	str	r2, [r3, #12]
 8003e88:	e002      	b.n	8003e90 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003e9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3728      	adds	r7, #40	; 0x28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003eaa:	bf00      	nop
 8003eac:	00f42400 	.word	0x00f42400

08003eb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	f003 0301 	and.w	r3, r3, #1
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d00a      	beq.n	8003efc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d00a      	beq.n	8003f1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	430a      	orrs	r2, r1
 8003f1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	f003 0308 	and.w	r3, r3, #8
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00a      	beq.n	8003f40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	f003 0310 	and.w	r3, r3, #16
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	f003 0320 	and.w	r3, r3, #32
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	689b      	ldr	r3, [r3, #8]
 8003f74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01a      	beq.n	8003fc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fae:	d10a      	bne.n	8003fc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	430a      	orrs	r2, r1
 8003fe6:	605a      	str	r2, [r3, #4]
  }
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af02      	add	r7, sp, #8
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004004:	f7fd f9f8 	bl	80013f8 <HAL_GetTick>
 8004008:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0308 	and.w	r3, r3, #8
 8004014:	2b08      	cmp	r3, #8
 8004016:	d10e      	bne.n	8004036 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2200      	movs	r2, #0
 8004022:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f82d 	bl	8004086 <UART_WaitOnFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004032:	2303      	movs	r3, #3
 8004034:	e023      	b.n	800407e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 0304 	and.w	r3, r3, #4
 8004040:	2b04      	cmp	r3, #4
 8004042:	d10e      	bne.n	8004062 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004044:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f817 	bl	8004086 <UART_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e00d      	b.n	800407e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2220      	movs	r2, #32
 8004066:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}

08004086 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b09c      	sub	sp, #112	; 0x70
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	603b      	str	r3, [r7, #0]
 8004092:	4613      	mov	r3, r2
 8004094:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004096:	e0a5      	b.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004098:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800409a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409e:	f000 80a1 	beq.w	80041e4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040a2:	f7fd f9a9 	bl	80013f8 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d302      	bcc.n	80040b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80040b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d13e      	bne.n	8004136 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c0:	e853 3f00 	ldrex	r3, [r3]
 80040c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80040c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040cc:	667b      	str	r3, [r7, #100]	; 0x64
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040d8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040de:	e841 2300 	strex	r3, r2, [r1]
 80040e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1e6      	bne.n	80040b8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3308      	adds	r3, #8
 80040f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040f4:	e853 3f00 	ldrex	r3, [r3]
 80040f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	663b      	str	r3, [r7, #96]	; 0x60
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	3308      	adds	r3, #8
 8004108:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800410a:	64ba      	str	r2, [r7, #72]	; 0x48
 800410c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004110:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004112:	e841 2300 	strex	r3, r2, [r1]
 8004116:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1e5      	bne.n	80040ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2220      	movs	r2, #32
 8004122:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2220      	movs	r2, #32
 8004128:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e067      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0304 	and.w	r3, r3, #4
 8004140:	2b00      	cmp	r3, #0
 8004142:	d04f      	beq.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	69db      	ldr	r3, [r3, #28]
 800414a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800414e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004152:	d147      	bne.n	80041e4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800415c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800416c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004172:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	461a      	mov	r2, r3
 800417a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800417c:	637b      	str	r3, [r7, #52]	; 0x34
 800417e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800418a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e6      	bne.n	800415e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	3308      	adds	r3, #8
 8004196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	e853 3f00 	ldrex	r3, [r3]
 800419e:	613b      	str	r3, [r7, #16]
   return(result);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f023 0301 	bic.w	r3, r3, #1
 80041a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	3308      	adds	r3, #8
 80041ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80041b0:	623a      	str	r2, [r7, #32]
 80041b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	69f9      	ldr	r1, [r7, #28]
 80041b6:	6a3a      	ldr	r2, [r7, #32]
 80041b8:	e841 2300 	strex	r3, r2, [r1]
 80041bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d1e5      	bne.n	8004190 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e010      	b.n	8004206 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69da      	ldr	r2, [r3, #28]
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	4013      	ands	r3, r2
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	bf0c      	ite	eq
 80041f4:	2301      	moveq	r3, #1
 80041f6:	2300      	movne	r3, #0
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	461a      	mov	r2, r3
 80041fc:	79fb      	ldrb	r3, [r7, #7]
 80041fe:	429a      	cmp	r2, r3
 8004200:	f43f af4a 	beq.w	8004098 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3770      	adds	r7, #112	; 0x70
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <__errno>:
 8004210:	4b01      	ldr	r3, [pc, #4]	; (8004218 <__errno+0x8>)
 8004212:	6818      	ldr	r0, [r3, #0]
 8004214:	4770      	bx	lr
 8004216:	bf00      	nop
 8004218:	2000000c 	.word	0x2000000c

0800421c <__libc_init_array>:
 800421c:	b570      	push	{r4, r5, r6, lr}
 800421e:	4d0d      	ldr	r5, [pc, #52]	; (8004254 <__libc_init_array+0x38>)
 8004220:	4c0d      	ldr	r4, [pc, #52]	; (8004258 <__libc_init_array+0x3c>)
 8004222:	1b64      	subs	r4, r4, r5
 8004224:	10a4      	asrs	r4, r4, #2
 8004226:	2600      	movs	r6, #0
 8004228:	42a6      	cmp	r6, r4
 800422a:	d109      	bne.n	8004240 <__libc_init_array+0x24>
 800422c:	4d0b      	ldr	r5, [pc, #44]	; (800425c <__libc_init_array+0x40>)
 800422e:	4c0c      	ldr	r4, [pc, #48]	; (8004260 <__libc_init_array+0x44>)
 8004230:	f000 ffbc 	bl	80051ac <_init>
 8004234:	1b64      	subs	r4, r4, r5
 8004236:	10a4      	asrs	r4, r4, #2
 8004238:	2600      	movs	r6, #0
 800423a:	42a6      	cmp	r6, r4
 800423c:	d105      	bne.n	800424a <__libc_init_array+0x2e>
 800423e:	bd70      	pop	{r4, r5, r6, pc}
 8004240:	f855 3b04 	ldr.w	r3, [r5], #4
 8004244:	4798      	blx	r3
 8004246:	3601      	adds	r6, #1
 8004248:	e7ee      	b.n	8004228 <__libc_init_array+0xc>
 800424a:	f855 3b04 	ldr.w	r3, [r5], #4
 800424e:	4798      	blx	r3
 8004250:	3601      	adds	r6, #1
 8004252:	e7f2      	b.n	800423a <__libc_init_array+0x1e>
 8004254:	080059cc 	.word	0x080059cc
 8004258:	080059cc 	.word	0x080059cc
 800425c:	080059cc 	.word	0x080059cc
 8004260:	080059d0 	.word	0x080059d0

08004264 <memcpy>:
 8004264:	440a      	add	r2, r1
 8004266:	4291      	cmp	r1, r2
 8004268:	f100 33ff 	add.w	r3, r0, #4294967295
 800426c:	d100      	bne.n	8004270 <memcpy+0xc>
 800426e:	4770      	bx	lr
 8004270:	b510      	push	{r4, lr}
 8004272:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004276:	f803 4f01 	strb.w	r4, [r3, #1]!
 800427a:	4291      	cmp	r1, r2
 800427c:	d1f9      	bne.n	8004272 <memcpy+0xe>
 800427e:	bd10      	pop	{r4, pc}

08004280 <memset>:
 8004280:	4402      	add	r2, r0
 8004282:	4603      	mov	r3, r0
 8004284:	4293      	cmp	r3, r2
 8004286:	d100      	bne.n	800428a <memset+0xa>
 8004288:	4770      	bx	lr
 800428a:	f803 1b01 	strb.w	r1, [r3], #1
 800428e:	e7f9      	b.n	8004284 <memset+0x4>

08004290 <iprintf>:
 8004290:	b40f      	push	{r0, r1, r2, r3}
 8004292:	4b0a      	ldr	r3, [pc, #40]	; (80042bc <iprintf+0x2c>)
 8004294:	b513      	push	{r0, r1, r4, lr}
 8004296:	681c      	ldr	r4, [r3, #0]
 8004298:	b124      	cbz	r4, 80042a4 <iprintf+0x14>
 800429a:	69a3      	ldr	r3, [r4, #24]
 800429c:	b913      	cbnz	r3, 80042a4 <iprintf+0x14>
 800429e:	4620      	mov	r0, r4
 80042a0:	f000 f866 	bl	8004370 <__sinit>
 80042a4:	ab05      	add	r3, sp, #20
 80042a6:	9a04      	ldr	r2, [sp, #16]
 80042a8:	68a1      	ldr	r1, [r4, #8]
 80042aa:	9301      	str	r3, [sp, #4]
 80042ac:	4620      	mov	r0, r4
 80042ae:	f000 f9bd 	bl	800462c <_vfiprintf_r>
 80042b2:	b002      	add	sp, #8
 80042b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042b8:	b004      	add	sp, #16
 80042ba:	4770      	bx	lr
 80042bc:	2000000c 	.word	0x2000000c

080042c0 <std>:
 80042c0:	2300      	movs	r3, #0
 80042c2:	b510      	push	{r4, lr}
 80042c4:	4604      	mov	r4, r0
 80042c6:	e9c0 3300 	strd	r3, r3, [r0]
 80042ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042ce:	6083      	str	r3, [r0, #8]
 80042d0:	8181      	strh	r1, [r0, #12]
 80042d2:	6643      	str	r3, [r0, #100]	; 0x64
 80042d4:	81c2      	strh	r2, [r0, #14]
 80042d6:	6183      	str	r3, [r0, #24]
 80042d8:	4619      	mov	r1, r3
 80042da:	2208      	movs	r2, #8
 80042dc:	305c      	adds	r0, #92	; 0x5c
 80042de:	f7ff ffcf 	bl	8004280 <memset>
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <std+0x38>)
 80042e4:	6263      	str	r3, [r4, #36]	; 0x24
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <std+0x3c>)
 80042e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80042ea:	4b05      	ldr	r3, [pc, #20]	; (8004300 <std+0x40>)
 80042ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <std+0x44>)
 80042f0:	6224      	str	r4, [r4, #32]
 80042f2:	6323      	str	r3, [r4, #48]	; 0x30
 80042f4:	bd10      	pop	{r4, pc}
 80042f6:	bf00      	nop
 80042f8:	08004bd5 	.word	0x08004bd5
 80042fc:	08004bf7 	.word	0x08004bf7
 8004300:	08004c2f 	.word	0x08004c2f
 8004304:	08004c53 	.word	0x08004c53

08004308 <_cleanup_r>:
 8004308:	4901      	ldr	r1, [pc, #4]	; (8004310 <_cleanup_r+0x8>)
 800430a:	f000 b8af 	b.w	800446c <_fwalk_reent>
 800430e:	bf00      	nop
 8004310:	08004f2d 	.word	0x08004f2d

08004314 <__sfmoreglue>:
 8004314:	b570      	push	{r4, r5, r6, lr}
 8004316:	2268      	movs	r2, #104	; 0x68
 8004318:	1e4d      	subs	r5, r1, #1
 800431a:	4355      	muls	r5, r2
 800431c:	460e      	mov	r6, r1
 800431e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004322:	f000 f8e5 	bl	80044f0 <_malloc_r>
 8004326:	4604      	mov	r4, r0
 8004328:	b140      	cbz	r0, 800433c <__sfmoreglue+0x28>
 800432a:	2100      	movs	r1, #0
 800432c:	e9c0 1600 	strd	r1, r6, [r0]
 8004330:	300c      	adds	r0, #12
 8004332:	60a0      	str	r0, [r4, #8]
 8004334:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004338:	f7ff ffa2 	bl	8004280 <memset>
 800433c:	4620      	mov	r0, r4
 800433e:	bd70      	pop	{r4, r5, r6, pc}

08004340 <__sfp_lock_acquire>:
 8004340:	4801      	ldr	r0, [pc, #4]	; (8004348 <__sfp_lock_acquire+0x8>)
 8004342:	f000 b8b3 	b.w	80044ac <__retarget_lock_acquire_recursive>
 8004346:	bf00      	nop
 8004348:	2000017d 	.word	0x2000017d

0800434c <__sfp_lock_release>:
 800434c:	4801      	ldr	r0, [pc, #4]	; (8004354 <__sfp_lock_release+0x8>)
 800434e:	f000 b8ae 	b.w	80044ae <__retarget_lock_release_recursive>
 8004352:	bf00      	nop
 8004354:	2000017d 	.word	0x2000017d

08004358 <__sinit_lock_acquire>:
 8004358:	4801      	ldr	r0, [pc, #4]	; (8004360 <__sinit_lock_acquire+0x8>)
 800435a:	f000 b8a7 	b.w	80044ac <__retarget_lock_acquire_recursive>
 800435e:	bf00      	nop
 8004360:	2000017e 	.word	0x2000017e

08004364 <__sinit_lock_release>:
 8004364:	4801      	ldr	r0, [pc, #4]	; (800436c <__sinit_lock_release+0x8>)
 8004366:	f000 b8a2 	b.w	80044ae <__retarget_lock_release_recursive>
 800436a:	bf00      	nop
 800436c:	2000017e 	.word	0x2000017e

08004370 <__sinit>:
 8004370:	b510      	push	{r4, lr}
 8004372:	4604      	mov	r4, r0
 8004374:	f7ff fff0 	bl	8004358 <__sinit_lock_acquire>
 8004378:	69a3      	ldr	r3, [r4, #24]
 800437a:	b11b      	cbz	r3, 8004384 <__sinit+0x14>
 800437c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004380:	f7ff bff0 	b.w	8004364 <__sinit_lock_release>
 8004384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004388:	6523      	str	r3, [r4, #80]	; 0x50
 800438a:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <__sinit+0x68>)
 800438c:	4a13      	ldr	r2, [pc, #76]	; (80043dc <__sinit+0x6c>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	62a2      	str	r2, [r4, #40]	; 0x28
 8004392:	42a3      	cmp	r3, r4
 8004394:	bf04      	itt	eq
 8004396:	2301      	moveq	r3, #1
 8004398:	61a3      	streq	r3, [r4, #24]
 800439a:	4620      	mov	r0, r4
 800439c:	f000 f820 	bl	80043e0 <__sfp>
 80043a0:	6060      	str	r0, [r4, #4]
 80043a2:	4620      	mov	r0, r4
 80043a4:	f000 f81c 	bl	80043e0 <__sfp>
 80043a8:	60a0      	str	r0, [r4, #8]
 80043aa:	4620      	mov	r0, r4
 80043ac:	f000 f818 	bl	80043e0 <__sfp>
 80043b0:	2200      	movs	r2, #0
 80043b2:	60e0      	str	r0, [r4, #12]
 80043b4:	2104      	movs	r1, #4
 80043b6:	6860      	ldr	r0, [r4, #4]
 80043b8:	f7ff ff82 	bl	80042c0 <std>
 80043bc:	68a0      	ldr	r0, [r4, #8]
 80043be:	2201      	movs	r2, #1
 80043c0:	2109      	movs	r1, #9
 80043c2:	f7ff ff7d 	bl	80042c0 <std>
 80043c6:	68e0      	ldr	r0, [r4, #12]
 80043c8:	2202      	movs	r2, #2
 80043ca:	2112      	movs	r1, #18
 80043cc:	f7ff ff78 	bl	80042c0 <std>
 80043d0:	2301      	movs	r3, #1
 80043d2:	61a3      	str	r3, [r4, #24]
 80043d4:	e7d2      	b.n	800437c <__sinit+0xc>
 80043d6:	bf00      	nop
 80043d8:	0800592c 	.word	0x0800592c
 80043dc:	08004309 	.word	0x08004309

080043e0 <__sfp>:
 80043e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043e2:	4607      	mov	r7, r0
 80043e4:	f7ff ffac 	bl	8004340 <__sfp_lock_acquire>
 80043e8:	4b1e      	ldr	r3, [pc, #120]	; (8004464 <__sfp+0x84>)
 80043ea:	681e      	ldr	r6, [r3, #0]
 80043ec:	69b3      	ldr	r3, [r6, #24]
 80043ee:	b913      	cbnz	r3, 80043f6 <__sfp+0x16>
 80043f0:	4630      	mov	r0, r6
 80043f2:	f7ff ffbd 	bl	8004370 <__sinit>
 80043f6:	3648      	adds	r6, #72	; 0x48
 80043f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	d503      	bpl.n	8004408 <__sfp+0x28>
 8004400:	6833      	ldr	r3, [r6, #0]
 8004402:	b30b      	cbz	r3, 8004448 <__sfp+0x68>
 8004404:	6836      	ldr	r6, [r6, #0]
 8004406:	e7f7      	b.n	80043f8 <__sfp+0x18>
 8004408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800440c:	b9d5      	cbnz	r5, 8004444 <__sfp+0x64>
 800440e:	4b16      	ldr	r3, [pc, #88]	; (8004468 <__sfp+0x88>)
 8004410:	60e3      	str	r3, [r4, #12]
 8004412:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004416:	6665      	str	r5, [r4, #100]	; 0x64
 8004418:	f000 f847 	bl	80044aa <__retarget_lock_init_recursive>
 800441c:	f7ff ff96 	bl	800434c <__sfp_lock_release>
 8004420:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004424:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004428:	6025      	str	r5, [r4, #0]
 800442a:	61a5      	str	r5, [r4, #24]
 800442c:	2208      	movs	r2, #8
 800442e:	4629      	mov	r1, r5
 8004430:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004434:	f7ff ff24 	bl	8004280 <memset>
 8004438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800443c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004440:	4620      	mov	r0, r4
 8004442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004444:	3468      	adds	r4, #104	; 0x68
 8004446:	e7d9      	b.n	80043fc <__sfp+0x1c>
 8004448:	2104      	movs	r1, #4
 800444a:	4638      	mov	r0, r7
 800444c:	f7ff ff62 	bl	8004314 <__sfmoreglue>
 8004450:	4604      	mov	r4, r0
 8004452:	6030      	str	r0, [r6, #0]
 8004454:	2800      	cmp	r0, #0
 8004456:	d1d5      	bne.n	8004404 <__sfp+0x24>
 8004458:	f7ff ff78 	bl	800434c <__sfp_lock_release>
 800445c:	230c      	movs	r3, #12
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	e7ee      	b.n	8004440 <__sfp+0x60>
 8004462:	bf00      	nop
 8004464:	0800592c 	.word	0x0800592c
 8004468:	ffff0001 	.word	0xffff0001

0800446c <_fwalk_reent>:
 800446c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004470:	4606      	mov	r6, r0
 8004472:	4688      	mov	r8, r1
 8004474:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004478:	2700      	movs	r7, #0
 800447a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800447e:	f1b9 0901 	subs.w	r9, r9, #1
 8004482:	d505      	bpl.n	8004490 <_fwalk_reent+0x24>
 8004484:	6824      	ldr	r4, [r4, #0]
 8004486:	2c00      	cmp	r4, #0
 8004488:	d1f7      	bne.n	800447a <_fwalk_reent+0xe>
 800448a:	4638      	mov	r0, r7
 800448c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004490:	89ab      	ldrh	r3, [r5, #12]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d907      	bls.n	80044a6 <_fwalk_reent+0x3a>
 8004496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800449a:	3301      	adds	r3, #1
 800449c:	d003      	beq.n	80044a6 <_fwalk_reent+0x3a>
 800449e:	4629      	mov	r1, r5
 80044a0:	4630      	mov	r0, r6
 80044a2:	47c0      	blx	r8
 80044a4:	4307      	orrs	r7, r0
 80044a6:	3568      	adds	r5, #104	; 0x68
 80044a8:	e7e9      	b.n	800447e <_fwalk_reent+0x12>

080044aa <__retarget_lock_init_recursive>:
 80044aa:	4770      	bx	lr

080044ac <__retarget_lock_acquire_recursive>:
 80044ac:	4770      	bx	lr

080044ae <__retarget_lock_release_recursive>:
 80044ae:	4770      	bx	lr

080044b0 <sbrk_aligned>:
 80044b0:	b570      	push	{r4, r5, r6, lr}
 80044b2:	4e0e      	ldr	r6, [pc, #56]	; (80044ec <sbrk_aligned+0x3c>)
 80044b4:	460c      	mov	r4, r1
 80044b6:	6831      	ldr	r1, [r6, #0]
 80044b8:	4605      	mov	r5, r0
 80044ba:	b911      	cbnz	r1, 80044c2 <sbrk_aligned+0x12>
 80044bc:	f000 fb7a 	bl	8004bb4 <_sbrk_r>
 80044c0:	6030      	str	r0, [r6, #0]
 80044c2:	4621      	mov	r1, r4
 80044c4:	4628      	mov	r0, r5
 80044c6:	f000 fb75 	bl	8004bb4 <_sbrk_r>
 80044ca:	1c43      	adds	r3, r0, #1
 80044cc:	d00a      	beq.n	80044e4 <sbrk_aligned+0x34>
 80044ce:	1cc4      	adds	r4, r0, #3
 80044d0:	f024 0403 	bic.w	r4, r4, #3
 80044d4:	42a0      	cmp	r0, r4
 80044d6:	d007      	beq.n	80044e8 <sbrk_aligned+0x38>
 80044d8:	1a21      	subs	r1, r4, r0
 80044da:	4628      	mov	r0, r5
 80044dc:	f000 fb6a 	bl	8004bb4 <_sbrk_r>
 80044e0:	3001      	adds	r0, #1
 80044e2:	d101      	bne.n	80044e8 <sbrk_aligned+0x38>
 80044e4:	f04f 34ff 	mov.w	r4, #4294967295
 80044e8:	4620      	mov	r0, r4
 80044ea:	bd70      	pop	{r4, r5, r6, pc}
 80044ec:	20000184 	.word	0x20000184

080044f0 <_malloc_r>:
 80044f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044f4:	1ccd      	adds	r5, r1, #3
 80044f6:	f025 0503 	bic.w	r5, r5, #3
 80044fa:	3508      	adds	r5, #8
 80044fc:	2d0c      	cmp	r5, #12
 80044fe:	bf38      	it	cc
 8004500:	250c      	movcc	r5, #12
 8004502:	2d00      	cmp	r5, #0
 8004504:	4607      	mov	r7, r0
 8004506:	db01      	blt.n	800450c <_malloc_r+0x1c>
 8004508:	42a9      	cmp	r1, r5
 800450a:	d905      	bls.n	8004518 <_malloc_r+0x28>
 800450c:	230c      	movs	r3, #12
 800450e:	603b      	str	r3, [r7, #0]
 8004510:	2600      	movs	r6, #0
 8004512:	4630      	mov	r0, r6
 8004514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004518:	4e2e      	ldr	r6, [pc, #184]	; (80045d4 <_malloc_r+0xe4>)
 800451a:	f000 fdbb 	bl	8005094 <__malloc_lock>
 800451e:	6833      	ldr	r3, [r6, #0]
 8004520:	461c      	mov	r4, r3
 8004522:	bb34      	cbnz	r4, 8004572 <_malloc_r+0x82>
 8004524:	4629      	mov	r1, r5
 8004526:	4638      	mov	r0, r7
 8004528:	f7ff ffc2 	bl	80044b0 <sbrk_aligned>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	4604      	mov	r4, r0
 8004530:	d14d      	bne.n	80045ce <_malloc_r+0xde>
 8004532:	6834      	ldr	r4, [r6, #0]
 8004534:	4626      	mov	r6, r4
 8004536:	2e00      	cmp	r6, #0
 8004538:	d140      	bne.n	80045bc <_malloc_r+0xcc>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	4631      	mov	r1, r6
 800453e:	4638      	mov	r0, r7
 8004540:	eb04 0803 	add.w	r8, r4, r3
 8004544:	f000 fb36 	bl	8004bb4 <_sbrk_r>
 8004548:	4580      	cmp	r8, r0
 800454a:	d13a      	bne.n	80045c2 <_malloc_r+0xd2>
 800454c:	6821      	ldr	r1, [r4, #0]
 800454e:	3503      	adds	r5, #3
 8004550:	1a6d      	subs	r5, r5, r1
 8004552:	f025 0503 	bic.w	r5, r5, #3
 8004556:	3508      	adds	r5, #8
 8004558:	2d0c      	cmp	r5, #12
 800455a:	bf38      	it	cc
 800455c:	250c      	movcc	r5, #12
 800455e:	4629      	mov	r1, r5
 8004560:	4638      	mov	r0, r7
 8004562:	f7ff ffa5 	bl	80044b0 <sbrk_aligned>
 8004566:	3001      	adds	r0, #1
 8004568:	d02b      	beq.n	80045c2 <_malloc_r+0xd2>
 800456a:	6823      	ldr	r3, [r4, #0]
 800456c:	442b      	add	r3, r5
 800456e:	6023      	str	r3, [r4, #0]
 8004570:	e00e      	b.n	8004590 <_malloc_r+0xa0>
 8004572:	6822      	ldr	r2, [r4, #0]
 8004574:	1b52      	subs	r2, r2, r5
 8004576:	d41e      	bmi.n	80045b6 <_malloc_r+0xc6>
 8004578:	2a0b      	cmp	r2, #11
 800457a:	d916      	bls.n	80045aa <_malloc_r+0xba>
 800457c:	1961      	adds	r1, r4, r5
 800457e:	42a3      	cmp	r3, r4
 8004580:	6025      	str	r5, [r4, #0]
 8004582:	bf18      	it	ne
 8004584:	6059      	strne	r1, [r3, #4]
 8004586:	6863      	ldr	r3, [r4, #4]
 8004588:	bf08      	it	eq
 800458a:	6031      	streq	r1, [r6, #0]
 800458c:	5162      	str	r2, [r4, r5]
 800458e:	604b      	str	r3, [r1, #4]
 8004590:	4638      	mov	r0, r7
 8004592:	f104 060b 	add.w	r6, r4, #11
 8004596:	f000 fd83 	bl	80050a0 <__malloc_unlock>
 800459a:	f026 0607 	bic.w	r6, r6, #7
 800459e:	1d23      	adds	r3, r4, #4
 80045a0:	1af2      	subs	r2, r6, r3
 80045a2:	d0b6      	beq.n	8004512 <_malloc_r+0x22>
 80045a4:	1b9b      	subs	r3, r3, r6
 80045a6:	50a3      	str	r3, [r4, r2]
 80045a8:	e7b3      	b.n	8004512 <_malloc_r+0x22>
 80045aa:	6862      	ldr	r2, [r4, #4]
 80045ac:	42a3      	cmp	r3, r4
 80045ae:	bf0c      	ite	eq
 80045b0:	6032      	streq	r2, [r6, #0]
 80045b2:	605a      	strne	r2, [r3, #4]
 80045b4:	e7ec      	b.n	8004590 <_malloc_r+0xa0>
 80045b6:	4623      	mov	r3, r4
 80045b8:	6864      	ldr	r4, [r4, #4]
 80045ba:	e7b2      	b.n	8004522 <_malloc_r+0x32>
 80045bc:	4634      	mov	r4, r6
 80045be:	6876      	ldr	r6, [r6, #4]
 80045c0:	e7b9      	b.n	8004536 <_malloc_r+0x46>
 80045c2:	230c      	movs	r3, #12
 80045c4:	603b      	str	r3, [r7, #0]
 80045c6:	4638      	mov	r0, r7
 80045c8:	f000 fd6a 	bl	80050a0 <__malloc_unlock>
 80045cc:	e7a1      	b.n	8004512 <_malloc_r+0x22>
 80045ce:	6025      	str	r5, [r4, #0]
 80045d0:	e7de      	b.n	8004590 <_malloc_r+0xa0>
 80045d2:	bf00      	nop
 80045d4:	20000180 	.word	0x20000180

080045d8 <__sfputc_r>:
 80045d8:	6893      	ldr	r3, [r2, #8]
 80045da:	3b01      	subs	r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	b410      	push	{r4}
 80045e0:	6093      	str	r3, [r2, #8]
 80045e2:	da08      	bge.n	80045f6 <__sfputc_r+0x1e>
 80045e4:	6994      	ldr	r4, [r2, #24]
 80045e6:	42a3      	cmp	r3, r4
 80045e8:	db01      	blt.n	80045ee <__sfputc_r+0x16>
 80045ea:	290a      	cmp	r1, #10
 80045ec:	d103      	bne.n	80045f6 <__sfputc_r+0x1e>
 80045ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045f2:	f000 bb33 	b.w	8004c5c <__swbuf_r>
 80045f6:	6813      	ldr	r3, [r2, #0]
 80045f8:	1c58      	adds	r0, r3, #1
 80045fa:	6010      	str	r0, [r2, #0]
 80045fc:	7019      	strb	r1, [r3, #0]
 80045fe:	4608      	mov	r0, r1
 8004600:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004604:	4770      	bx	lr

08004606 <__sfputs_r>:
 8004606:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004608:	4606      	mov	r6, r0
 800460a:	460f      	mov	r7, r1
 800460c:	4614      	mov	r4, r2
 800460e:	18d5      	adds	r5, r2, r3
 8004610:	42ac      	cmp	r4, r5
 8004612:	d101      	bne.n	8004618 <__sfputs_r+0x12>
 8004614:	2000      	movs	r0, #0
 8004616:	e007      	b.n	8004628 <__sfputs_r+0x22>
 8004618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800461c:	463a      	mov	r2, r7
 800461e:	4630      	mov	r0, r6
 8004620:	f7ff ffda 	bl	80045d8 <__sfputc_r>
 8004624:	1c43      	adds	r3, r0, #1
 8004626:	d1f3      	bne.n	8004610 <__sfputs_r+0xa>
 8004628:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800462c <_vfiprintf_r>:
 800462c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004630:	460d      	mov	r5, r1
 8004632:	b09d      	sub	sp, #116	; 0x74
 8004634:	4614      	mov	r4, r2
 8004636:	4698      	mov	r8, r3
 8004638:	4606      	mov	r6, r0
 800463a:	b118      	cbz	r0, 8004644 <_vfiprintf_r+0x18>
 800463c:	6983      	ldr	r3, [r0, #24]
 800463e:	b90b      	cbnz	r3, 8004644 <_vfiprintf_r+0x18>
 8004640:	f7ff fe96 	bl	8004370 <__sinit>
 8004644:	4b89      	ldr	r3, [pc, #548]	; (800486c <_vfiprintf_r+0x240>)
 8004646:	429d      	cmp	r5, r3
 8004648:	d11b      	bne.n	8004682 <_vfiprintf_r+0x56>
 800464a:	6875      	ldr	r5, [r6, #4]
 800464c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800464e:	07d9      	lsls	r1, r3, #31
 8004650:	d405      	bmi.n	800465e <_vfiprintf_r+0x32>
 8004652:	89ab      	ldrh	r3, [r5, #12]
 8004654:	059a      	lsls	r2, r3, #22
 8004656:	d402      	bmi.n	800465e <_vfiprintf_r+0x32>
 8004658:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800465a:	f7ff ff27 	bl	80044ac <__retarget_lock_acquire_recursive>
 800465e:	89ab      	ldrh	r3, [r5, #12]
 8004660:	071b      	lsls	r3, r3, #28
 8004662:	d501      	bpl.n	8004668 <_vfiprintf_r+0x3c>
 8004664:	692b      	ldr	r3, [r5, #16]
 8004666:	b9eb      	cbnz	r3, 80046a4 <_vfiprintf_r+0x78>
 8004668:	4629      	mov	r1, r5
 800466a:	4630      	mov	r0, r6
 800466c:	f000 fb5a 	bl	8004d24 <__swsetup_r>
 8004670:	b1c0      	cbz	r0, 80046a4 <_vfiprintf_r+0x78>
 8004672:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004674:	07dc      	lsls	r4, r3, #31
 8004676:	d50e      	bpl.n	8004696 <_vfiprintf_r+0x6a>
 8004678:	f04f 30ff 	mov.w	r0, #4294967295
 800467c:	b01d      	add	sp, #116	; 0x74
 800467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004682:	4b7b      	ldr	r3, [pc, #492]	; (8004870 <_vfiprintf_r+0x244>)
 8004684:	429d      	cmp	r5, r3
 8004686:	d101      	bne.n	800468c <_vfiprintf_r+0x60>
 8004688:	68b5      	ldr	r5, [r6, #8]
 800468a:	e7df      	b.n	800464c <_vfiprintf_r+0x20>
 800468c:	4b79      	ldr	r3, [pc, #484]	; (8004874 <_vfiprintf_r+0x248>)
 800468e:	429d      	cmp	r5, r3
 8004690:	bf08      	it	eq
 8004692:	68f5      	ldreq	r5, [r6, #12]
 8004694:	e7da      	b.n	800464c <_vfiprintf_r+0x20>
 8004696:	89ab      	ldrh	r3, [r5, #12]
 8004698:	0598      	lsls	r0, r3, #22
 800469a:	d4ed      	bmi.n	8004678 <_vfiprintf_r+0x4c>
 800469c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800469e:	f7ff ff06 	bl	80044ae <__retarget_lock_release_recursive>
 80046a2:	e7e9      	b.n	8004678 <_vfiprintf_r+0x4c>
 80046a4:	2300      	movs	r3, #0
 80046a6:	9309      	str	r3, [sp, #36]	; 0x24
 80046a8:	2320      	movs	r3, #32
 80046aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80046b2:	2330      	movs	r3, #48	; 0x30
 80046b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004878 <_vfiprintf_r+0x24c>
 80046b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046bc:	f04f 0901 	mov.w	r9, #1
 80046c0:	4623      	mov	r3, r4
 80046c2:	469a      	mov	sl, r3
 80046c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046c8:	b10a      	cbz	r2, 80046ce <_vfiprintf_r+0xa2>
 80046ca:	2a25      	cmp	r2, #37	; 0x25
 80046cc:	d1f9      	bne.n	80046c2 <_vfiprintf_r+0x96>
 80046ce:	ebba 0b04 	subs.w	fp, sl, r4
 80046d2:	d00b      	beq.n	80046ec <_vfiprintf_r+0xc0>
 80046d4:	465b      	mov	r3, fp
 80046d6:	4622      	mov	r2, r4
 80046d8:	4629      	mov	r1, r5
 80046da:	4630      	mov	r0, r6
 80046dc:	f7ff ff93 	bl	8004606 <__sfputs_r>
 80046e0:	3001      	adds	r0, #1
 80046e2:	f000 80aa 	beq.w	800483a <_vfiprintf_r+0x20e>
 80046e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046e8:	445a      	add	r2, fp
 80046ea:	9209      	str	r2, [sp, #36]	; 0x24
 80046ec:	f89a 3000 	ldrb.w	r3, [sl]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 80a2 	beq.w	800483a <_vfiprintf_r+0x20e>
 80046f6:	2300      	movs	r3, #0
 80046f8:	f04f 32ff 	mov.w	r2, #4294967295
 80046fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004700:	f10a 0a01 	add.w	sl, sl, #1
 8004704:	9304      	str	r3, [sp, #16]
 8004706:	9307      	str	r3, [sp, #28]
 8004708:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800470c:	931a      	str	r3, [sp, #104]	; 0x68
 800470e:	4654      	mov	r4, sl
 8004710:	2205      	movs	r2, #5
 8004712:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004716:	4858      	ldr	r0, [pc, #352]	; (8004878 <_vfiprintf_r+0x24c>)
 8004718:	f7fb fd5a 	bl	80001d0 <memchr>
 800471c:	9a04      	ldr	r2, [sp, #16]
 800471e:	b9d8      	cbnz	r0, 8004758 <_vfiprintf_r+0x12c>
 8004720:	06d1      	lsls	r1, r2, #27
 8004722:	bf44      	itt	mi
 8004724:	2320      	movmi	r3, #32
 8004726:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800472a:	0713      	lsls	r3, r2, #28
 800472c:	bf44      	itt	mi
 800472e:	232b      	movmi	r3, #43	; 0x2b
 8004730:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004734:	f89a 3000 	ldrb.w	r3, [sl]
 8004738:	2b2a      	cmp	r3, #42	; 0x2a
 800473a:	d015      	beq.n	8004768 <_vfiprintf_r+0x13c>
 800473c:	9a07      	ldr	r2, [sp, #28]
 800473e:	4654      	mov	r4, sl
 8004740:	2000      	movs	r0, #0
 8004742:	f04f 0c0a 	mov.w	ip, #10
 8004746:	4621      	mov	r1, r4
 8004748:	f811 3b01 	ldrb.w	r3, [r1], #1
 800474c:	3b30      	subs	r3, #48	; 0x30
 800474e:	2b09      	cmp	r3, #9
 8004750:	d94e      	bls.n	80047f0 <_vfiprintf_r+0x1c4>
 8004752:	b1b0      	cbz	r0, 8004782 <_vfiprintf_r+0x156>
 8004754:	9207      	str	r2, [sp, #28]
 8004756:	e014      	b.n	8004782 <_vfiprintf_r+0x156>
 8004758:	eba0 0308 	sub.w	r3, r0, r8
 800475c:	fa09 f303 	lsl.w	r3, r9, r3
 8004760:	4313      	orrs	r3, r2
 8004762:	9304      	str	r3, [sp, #16]
 8004764:	46a2      	mov	sl, r4
 8004766:	e7d2      	b.n	800470e <_vfiprintf_r+0xe2>
 8004768:	9b03      	ldr	r3, [sp, #12]
 800476a:	1d19      	adds	r1, r3, #4
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	9103      	str	r1, [sp, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	bfbb      	ittet	lt
 8004774:	425b      	neglt	r3, r3
 8004776:	f042 0202 	orrlt.w	r2, r2, #2
 800477a:	9307      	strge	r3, [sp, #28]
 800477c:	9307      	strlt	r3, [sp, #28]
 800477e:	bfb8      	it	lt
 8004780:	9204      	strlt	r2, [sp, #16]
 8004782:	7823      	ldrb	r3, [r4, #0]
 8004784:	2b2e      	cmp	r3, #46	; 0x2e
 8004786:	d10c      	bne.n	80047a2 <_vfiprintf_r+0x176>
 8004788:	7863      	ldrb	r3, [r4, #1]
 800478a:	2b2a      	cmp	r3, #42	; 0x2a
 800478c:	d135      	bne.n	80047fa <_vfiprintf_r+0x1ce>
 800478e:	9b03      	ldr	r3, [sp, #12]
 8004790:	1d1a      	adds	r2, r3, #4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	9203      	str	r2, [sp, #12]
 8004796:	2b00      	cmp	r3, #0
 8004798:	bfb8      	it	lt
 800479a:	f04f 33ff 	movlt.w	r3, #4294967295
 800479e:	3402      	adds	r4, #2
 80047a0:	9305      	str	r3, [sp, #20]
 80047a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004888 <_vfiprintf_r+0x25c>
 80047a6:	7821      	ldrb	r1, [r4, #0]
 80047a8:	2203      	movs	r2, #3
 80047aa:	4650      	mov	r0, sl
 80047ac:	f7fb fd10 	bl	80001d0 <memchr>
 80047b0:	b140      	cbz	r0, 80047c4 <_vfiprintf_r+0x198>
 80047b2:	2340      	movs	r3, #64	; 0x40
 80047b4:	eba0 000a 	sub.w	r0, r0, sl
 80047b8:	fa03 f000 	lsl.w	r0, r3, r0
 80047bc:	9b04      	ldr	r3, [sp, #16]
 80047be:	4303      	orrs	r3, r0
 80047c0:	3401      	adds	r4, #1
 80047c2:	9304      	str	r3, [sp, #16]
 80047c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047c8:	482c      	ldr	r0, [pc, #176]	; (800487c <_vfiprintf_r+0x250>)
 80047ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80047ce:	2206      	movs	r2, #6
 80047d0:	f7fb fcfe 	bl	80001d0 <memchr>
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d03f      	beq.n	8004858 <_vfiprintf_r+0x22c>
 80047d8:	4b29      	ldr	r3, [pc, #164]	; (8004880 <_vfiprintf_r+0x254>)
 80047da:	bb1b      	cbnz	r3, 8004824 <_vfiprintf_r+0x1f8>
 80047dc:	9b03      	ldr	r3, [sp, #12]
 80047de:	3307      	adds	r3, #7
 80047e0:	f023 0307 	bic.w	r3, r3, #7
 80047e4:	3308      	adds	r3, #8
 80047e6:	9303      	str	r3, [sp, #12]
 80047e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047ea:	443b      	add	r3, r7
 80047ec:	9309      	str	r3, [sp, #36]	; 0x24
 80047ee:	e767      	b.n	80046c0 <_vfiprintf_r+0x94>
 80047f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80047f4:	460c      	mov	r4, r1
 80047f6:	2001      	movs	r0, #1
 80047f8:	e7a5      	b.n	8004746 <_vfiprintf_r+0x11a>
 80047fa:	2300      	movs	r3, #0
 80047fc:	3401      	adds	r4, #1
 80047fe:	9305      	str	r3, [sp, #20]
 8004800:	4619      	mov	r1, r3
 8004802:	f04f 0c0a 	mov.w	ip, #10
 8004806:	4620      	mov	r0, r4
 8004808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800480c:	3a30      	subs	r2, #48	; 0x30
 800480e:	2a09      	cmp	r2, #9
 8004810:	d903      	bls.n	800481a <_vfiprintf_r+0x1ee>
 8004812:	2b00      	cmp	r3, #0
 8004814:	d0c5      	beq.n	80047a2 <_vfiprintf_r+0x176>
 8004816:	9105      	str	r1, [sp, #20]
 8004818:	e7c3      	b.n	80047a2 <_vfiprintf_r+0x176>
 800481a:	fb0c 2101 	mla	r1, ip, r1, r2
 800481e:	4604      	mov	r4, r0
 8004820:	2301      	movs	r3, #1
 8004822:	e7f0      	b.n	8004806 <_vfiprintf_r+0x1da>
 8004824:	ab03      	add	r3, sp, #12
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	462a      	mov	r2, r5
 800482a:	4b16      	ldr	r3, [pc, #88]	; (8004884 <_vfiprintf_r+0x258>)
 800482c:	a904      	add	r1, sp, #16
 800482e:	4630      	mov	r0, r6
 8004830:	f3af 8000 	nop.w
 8004834:	4607      	mov	r7, r0
 8004836:	1c78      	adds	r0, r7, #1
 8004838:	d1d6      	bne.n	80047e8 <_vfiprintf_r+0x1bc>
 800483a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800483c:	07d9      	lsls	r1, r3, #31
 800483e:	d405      	bmi.n	800484c <_vfiprintf_r+0x220>
 8004840:	89ab      	ldrh	r3, [r5, #12]
 8004842:	059a      	lsls	r2, r3, #22
 8004844:	d402      	bmi.n	800484c <_vfiprintf_r+0x220>
 8004846:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004848:	f7ff fe31 	bl	80044ae <__retarget_lock_release_recursive>
 800484c:	89ab      	ldrh	r3, [r5, #12]
 800484e:	065b      	lsls	r3, r3, #25
 8004850:	f53f af12 	bmi.w	8004678 <_vfiprintf_r+0x4c>
 8004854:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004856:	e711      	b.n	800467c <_vfiprintf_r+0x50>
 8004858:	ab03      	add	r3, sp, #12
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	462a      	mov	r2, r5
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <_vfiprintf_r+0x258>)
 8004860:	a904      	add	r1, sp, #16
 8004862:	4630      	mov	r0, r6
 8004864:	f000 f880 	bl	8004968 <_printf_i>
 8004868:	e7e4      	b.n	8004834 <_vfiprintf_r+0x208>
 800486a:	bf00      	nop
 800486c:	08005950 	.word	0x08005950
 8004870:	08005970 	.word	0x08005970
 8004874:	08005930 	.word	0x08005930
 8004878:	08005990 	.word	0x08005990
 800487c:	0800599a 	.word	0x0800599a
 8004880:	00000000 	.word	0x00000000
 8004884:	08004607 	.word	0x08004607
 8004888:	08005996 	.word	0x08005996

0800488c <_printf_common>:
 800488c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004890:	4616      	mov	r6, r2
 8004892:	4699      	mov	r9, r3
 8004894:	688a      	ldr	r2, [r1, #8]
 8004896:	690b      	ldr	r3, [r1, #16]
 8004898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800489c:	4293      	cmp	r3, r2
 800489e:	bfb8      	it	lt
 80048a0:	4613      	movlt	r3, r2
 80048a2:	6033      	str	r3, [r6, #0]
 80048a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048a8:	4607      	mov	r7, r0
 80048aa:	460c      	mov	r4, r1
 80048ac:	b10a      	cbz	r2, 80048b2 <_printf_common+0x26>
 80048ae:	3301      	adds	r3, #1
 80048b0:	6033      	str	r3, [r6, #0]
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	0699      	lsls	r1, r3, #26
 80048b6:	bf42      	ittt	mi
 80048b8:	6833      	ldrmi	r3, [r6, #0]
 80048ba:	3302      	addmi	r3, #2
 80048bc:	6033      	strmi	r3, [r6, #0]
 80048be:	6825      	ldr	r5, [r4, #0]
 80048c0:	f015 0506 	ands.w	r5, r5, #6
 80048c4:	d106      	bne.n	80048d4 <_printf_common+0x48>
 80048c6:	f104 0a19 	add.w	sl, r4, #25
 80048ca:	68e3      	ldr	r3, [r4, #12]
 80048cc:	6832      	ldr	r2, [r6, #0]
 80048ce:	1a9b      	subs	r3, r3, r2
 80048d0:	42ab      	cmp	r3, r5
 80048d2:	dc26      	bgt.n	8004922 <_printf_common+0x96>
 80048d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048d8:	1e13      	subs	r3, r2, #0
 80048da:	6822      	ldr	r2, [r4, #0]
 80048dc:	bf18      	it	ne
 80048de:	2301      	movne	r3, #1
 80048e0:	0692      	lsls	r2, r2, #26
 80048e2:	d42b      	bmi.n	800493c <_printf_common+0xb0>
 80048e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048e8:	4649      	mov	r1, r9
 80048ea:	4638      	mov	r0, r7
 80048ec:	47c0      	blx	r8
 80048ee:	3001      	adds	r0, #1
 80048f0:	d01e      	beq.n	8004930 <_printf_common+0xa4>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	68e5      	ldr	r5, [r4, #12]
 80048f6:	6832      	ldr	r2, [r6, #0]
 80048f8:	f003 0306 	and.w	r3, r3, #6
 80048fc:	2b04      	cmp	r3, #4
 80048fe:	bf08      	it	eq
 8004900:	1aad      	subeq	r5, r5, r2
 8004902:	68a3      	ldr	r3, [r4, #8]
 8004904:	6922      	ldr	r2, [r4, #16]
 8004906:	bf0c      	ite	eq
 8004908:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800490c:	2500      	movne	r5, #0
 800490e:	4293      	cmp	r3, r2
 8004910:	bfc4      	itt	gt
 8004912:	1a9b      	subgt	r3, r3, r2
 8004914:	18ed      	addgt	r5, r5, r3
 8004916:	2600      	movs	r6, #0
 8004918:	341a      	adds	r4, #26
 800491a:	42b5      	cmp	r5, r6
 800491c:	d11a      	bne.n	8004954 <_printf_common+0xc8>
 800491e:	2000      	movs	r0, #0
 8004920:	e008      	b.n	8004934 <_printf_common+0xa8>
 8004922:	2301      	movs	r3, #1
 8004924:	4652      	mov	r2, sl
 8004926:	4649      	mov	r1, r9
 8004928:	4638      	mov	r0, r7
 800492a:	47c0      	blx	r8
 800492c:	3001      	adds	r0, #1
 800492e:	d103      	bne.n	8004938 <_printf_common+0xac>
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004938:	3501      	adds	r5, #1
 800493a:	e7c6      	b.n	80048ca <_printf_common+0x3e>
 800493c:	18e1      	adds	r1, r4, r3
 800493e:	1c5a      	adds	r2, r3, #1
 8004940:	2030      	movs	r0, #48	; 0x30
 8004942:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004946:	4422      	add	r2, r4
 8004948:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800494c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004950:	3302      	adds	r3, #2
 8004952:	e7c7      	b.n	80048e4 <_printf_common+0x58>
 8004954:	2301      	movs	r3, #1
 8004956:	4622      	mov	r2, r4
 8004958:	4649      	mov	r1, r9
 800495a:	4638      	mov	r0, r7
 800495c:	47c0      	blx	r8
 800495e:	3001      	adds	r0, #1
 8004960:	d0e6      	beq.n	8004930 <_printf_common+0xa4>
 8004962:	3601      	adds	r6, #1
 8004964:	e7d9      	b.n	800491a <_printf_common+0x8e>
	...

08004968 <_printf_i>:
 8004968:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800496c:	7e0f      	ldrb	r7, [r1, #24]
 800496e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004970:	2f78      	cmp	r7, #120	; 0x78
 8004972:	4691      	mov	r9, r2
 8004974:	4680      	mov	r8, r0
 8004976:	460c      	mov	r4, r1
 8004978:	469a      	mov	sl, r3
 800497a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800497e:	d807      	bhi.n	8004990 <_printf_i+0x28>
 8004980:	2f62      	cmp	r7, #98	; 0x62
 8004982:	d80a      	bhi.n	800499a <_printf_i+0x32>
 8004984:	2f00      	cmp	r7, #0
 8004986:	f000 80d8 	beq.w	8004b3a <_printf_i+0x1d2>
 800498a:	2f58      	cmp	r7, #88	; 0x58
 800498c:	f000 80a3 	beq.w	8004ad6 <_printf_i+0x16e>
 8004990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004994:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004998:	e03a      	b.n	8004a10 <_printf_i+0xa8>
 800499a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800499e:	2b15      	cmp	r3, #21
 80049a0:	d8f6      	bhi.n	8004990 <_printf_i+0x28>
 80049a2:	a101      	add	r1, pc, #4	; (adr r1, 80049a8 <_printf_i+0x40>)
 80049a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049a8:	08004a01 	.word	0x08004a01
 80049ac:	08004a15 	.word	0x08004a15
 80049b0:	08004991 	.word	0x08004991
 80049b4:	08004991 	.word	0x08004991
 80049b8:	08004991 	.word	0x08004991
 80049bc:	08004991 	.word	0x08004991
 80049c0:	08004a15 	.word	0x08004a15
 80049c4:	08004991 	.word	0x08004991
 80049c8:	08004991 	.word	0x08004991
 80049cc:	08004991 	.word	0x08004991
 80049d0:	08004991 	.word	0x08004991
 80049d4:	08004b21 	.word	0x08004b21
 80049d8:	08004a45 	.word	0x08004a45
 80049dc:	08004b03 	.word	0x08004b03
 80049e0:	08004991 	.word	0x08004991
 80049e4:	08004991 	.word	0x08004991
 80049e8:	08004b43 	.word	0x08004b43
 80049ec:	08004991 	.word	0x08004991
 80049f0:	08004a45 	.word	0x08004a45
 80049f4:	08004991 	.word	0x08004991
 80049f8:	08004991 	.word	0x08004991
 80049fc:	08004b0b 	.word	0x08004b0b
 8004a00:	682b      	ldr	r3, [r5, #0]
 8004a02:	1d1a      	adds	r2, r3, #4
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	602a      	str	r2, [r5, #0]
 8004a08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a0c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a10:	2301      	movs	r3, #1
 8004a12:	e0a3      	b.n	8004b5c <_printf_i+0x1f4>
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	6829      	ldr	r1, [r5, #0]
 8004a18:	0606      	lsls	r6, r0, #24
 8004a1a:	f101 0304 	add.w	r3, r1, #4
 8004a1e:	d50a      	bpl.n	8004a36 <_printf_i+0xce>
 8004a20:	680e      	ldr	r6, [r1, #0]
 8004a22:	602b      	str	r3, [r5, #0]
 8004a24:	2e00      	cmp	r6, #0
 8004a26:	da03      	bge.n	8004a30 <_printf_i+0xc8>
 8004a28:	232d      	movs	r3, #45	; 0x2d
 8004a2a:	4276      	negs	r6, r6
 8004a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a30:	485e      	ldr	r0, [pc, #376]	; (8004bac <_printf_i+0x244>)
 8004a32:	230a      	movs	r3, #10
 8004a34:	e019      	b.n	8004a6a <_printf_i+0x102>
 8004a36:	680e      	ldr	r6, [r1, #0]
 8004a38:	602b      	str	r3, [r5, #0]
 8004a3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a3e:	bf18      	it	ne
 8004a40:	b236      	sxthne	r6, r6
 8004a42:	e7ef      	b.n	8004a24 <_printf_i+0xbc>
 8004a44:	682b      	ldr	r3, [r5, #0]
 8004a46:	6820      	ldr	r0, [r4, #0]
 8004a48:	1d19      	adds	r1, r3, #4
 8004a4a:	6029      	str	r1, [r5, #0]
 8004a4c:	0601      	lsls	r1, r0, #24
 8004a4e:	d501      	bpl.n	8004a54 <_printf_i+0xec>
 8004a50:	681e      	ldr	r6, [r3, #0]
 8004a52:	e002      	b.n	8004a5a <_printf_i+0xf2>
 8004a54:	0646      	lsls	r6, r0, #25
 8004a56:	d5fb      	bpl.n	8004a50 <_printf_i+0xe8>
 8004a58:	881e      	ldrh	r6, [r3, #0]
 8004a5a:	4854      	ldr	r0, [pc, #336]	; (8004bac <_printf_i+0x244>)
 8004a5c:	2f6f      	cmp	r7, #111	; 0x6f
 8004a5e:	bf0c      	ite	eq
 8004a60:	2308      	moveq	r3, #8
 8004a62:	230a      	movne	r3, #10
 8004a64:	2100      	movs	r1, #0
 8004a66:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a6a:	6865      	ldr	r5, [r4, #4]
 8004a6c:	60a5      	str	r5, [r4, #8]
 8004a6e:	2d00      	cmp	r5, #0
 8004a70:	bfa2      	ittt	ge
 8004a72:	6821      	ldrge	r1, [r4, #0]
 8004a74:	f021 0104 	bicge.w	r1, r1, #4
 8004a78:	6021      	strge	r1, [r4, #0]
 8004a7a:	b90e      	cbnz	r6, 8004a80 <_printf_i+0x118>
 8004a7c:	2d00      	cmp	r5, #0
 8004a7e:	d04d      	beq.n	8004b1c <_printf_i+0x1b4>
 8004a80:	4615      	mov	r5, r2
 8004a82:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a86:	fb03 6711 	mls	r7, r3, r1, r6
 8004a8a:	5dc7      	ldrb	r7, [r0, r7]
 8004a8c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a90:	4637      	mov	r7, r6
 8004a92:	42bb      	cmp	r3, r7
 8004a94:	460e      	mov	r6, r1
 8004a96:	d9f4      	bls.n	8004a82 <_printf_i+0x11a>
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d10b      	bne.n	8004ab4 <_printf_i+0x14c>
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	07de      	lsls	r6, r3, #31
 8004aa0:	d508      	bpl.n	8004ab4 <_printf_i+0x14c>
 8004aa2:	6923      	ldr	r3, [r4, #16]
 8004aa4:	6861      	ldr	r1, [r4, #4]
 8004aa6:	4299      	cmp	r1, r3
 8004aa8:	bfde      	ittt	le
 8004aaa:	2330      	movle	r3, #48	; 0x30
 8004aac:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ab0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ab4:	1b52      	subs	r2, r2, r5
 8004ab6:	6122      	str	r2, [r4, #16]
 8004ab8:	f8cd a000 	str.w	sl, [sp]
 8004abc:	464b      	mov	r3, r9
 8004abe:	aa03      	add	r2, sp, #12
 8004ac0:	4621      	mov	r1, r4
 8004ac2:	4640      	mov	r0, r8
 8004ac4:	f7ff fee2 	bl	800488c <_printf_common>
 8004ac8:	3001      	adds	r0, #1
 8004aca:	d14c      	bne.n	8004b66 <_printf_i+0x1fe>
 8004acc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ad0:	b004      	add	sp, #16
 8004ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ad6:	4835      	ldr	r0, [pc, #212]	; (8004bac <_printf_i+0x244>)
 8004ad8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004adc:	6829      	ldr	r1, [r5, #0]
 8004ade:	6823      	ldr	r3, [r4, #0]
 8004ae0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ae4:	6029      	str	r1, [r5, #0]
 8004ae6:	061d      	lsls	r5, r3, #24
 8004ae8:	d514      	bpl.n	8004b14 <_printf_i+0x1ac>
 8004aea:	07df      	lsls	r7, r3, #31
 8004aec:	bf44      	itt	mi
 8004aee:	f043 0320 	orrmi.w	r3, r3, #32
 8004af2:	6023      	strmi	r3, [r4, #0]
 8004af4:	b91e      	cbnz	r6, 8004afe <_printf_i+0x196>
 8004af6:	6823      	ldr	r3, [r4, #0]
 8004af8:	f023 0320 	bic.w	r3, r3, #32
 8004afc:	6023      	str	r3, [r4, #0]
 8004afe:	2310      	movs	r3, #16
 8004b00:	e7b0      	b.n	8004a64 <_printf_i+0xfc>
 8004b02:	6823      	ldr	r3, [r4, #0]
 8004b04:	f043 0320 	orr.w	r3, r3, #32
 8004b08:	6023      	str	r3, [r4, #0]
 8004b0a:	2378      	movs	r3, #120	; 0x78
 8004b0c:	4828      	ldr	r0, [pc, #160]	; (8004bb0 <_printf_i+0x248>)
 8004b0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b12:	e7e3      	b.n	8004adc <_printf_i+0x174>
 8004b14:	0659      	lsls	r1, r3, #25
 8004b16:	bf48      	it	mi
 8004b18:	b2b6      	uxthmi	r6, r6
 8004b1a:	e7e6      	b.n	8004aea <_printf_i+0x182>
 8004b1c:	4615      	mov	r5, r2
 8004b1e:	e7bb      	b.n	8004a98 <_printf_i+0x130>
 8004b20:	682b      	ldr	r3, [r5, #0]
 8004b22:	6826      	ldr	r6, [r4, #0]
 8004b24:	6961      	ldr	r1, [r4, #20]
 8004b26:	1d18      	adds	r0, r3, #4
 8004b28:	6028      	str	r0, [r5, #0]
 8004b2a:	0635      	lsls	r5, r6, #24
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	d501      	bpl.n	8004b34 <_printf_i+0x1cc>
 8004b30:	6019      	str	r1, [r3, #0]
 8004b32:	e002      	b.n	8004b3a <_printf_i+0x1d2>
 8004b34:	0670      	lsls	r0, r6, #25
 8004b36:	d5fb      	bpl.n	8004b30 <_printf_i+0x1c8>
 8004b38:	8019      	strh	r1, [r3, #0]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	6123      	str	r3, [r4, #16]
 8004b3e:	4615      	mov	r5, r2
 8004b40:	e7ba      	b.n	8004ab8 <_printf_i+0x150>
 8004b42:	682b      	ldr	r3, [r5, #0]
 8004b44:	1d1a      	adds	r2, r3, #4
 8004b46:	602a      	str	r2, [r5, #0]
 8004b48:	681d      	ldr	r5, [r3, #0]
 8004b4a:	6862      	ldr	r2, [r4, #4]
 8004b4c:	2100      	movs	r1, #0
 8004b4e:	4628      	mov	r0, r5
 8004b50:	f7fb fb3e 	bl	80001d0 <memchr>
 8004b54:	b108      	cbz	r0, 8004b5a <_printf_i+0x1f2>
 8004b56:	1b40      	subs	r0, r0, r5
 8004b58:	6060      	str	r0, [r4, #4]
 8004b5a:	6863      	ldr	r3, [r4, #4]
 8004b5c:	6123      	str	r3, [r4, #16]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b64:	e7a8      	b.n	8004ab8 <_printf_i+0x150>
 8004b66:	6923      	ldr	r3, [r4, #16]
 8004b68:	462a      	mov	r2, r5
 8004b6a:	4649      	mov	r1, r9
 8004b6c:	4640      	mov	r0, r8
 8004b6e:	47d0      	blx	sl
 8004b70:	3001      	adds	r0, #1
 8004b72:	d0ab      	beq.n	8004acc <_printf_i+0x164>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	079b      	lsls	r3, r3, #30
 8004b78:	d413      	bmi.n	8004ba2 <_printf_i+0x23a>
 8004b7a:	68e0      	ldr	r0, [r4, #12]
 8004b7c:	9b03      	ldr	r3, [sp, #12]
 8004b7e:	4298      	cmp	r0, r3
 8004b80:	bfb8      	it	lt
 8004b82:	4618      	movlt	r0, r3
 8004b84:	e7a4      	b.n	8004ad0 <_printf_i+0x168>
 8004b86:	2301      	movs	r3, #1
 8004b88:	4632      	mov	r2, r6
 8004b8a:	4649      	mov	r1, r9
 8004b8c:	4640      	mov	r0, r8
 8004b8e:	47d0      	blx	sl
 8004b90:	3001      	adds	r0, #1
 8004b92:	d09b      	beq.n	8004acc <_printf_i+0x164>
 8004b94:	3501      	adds	r5, #1
 8004b96:	68e3      	ldr	r3, [r4, #12]
 8004b98:	9903      	ldr	r1, [sp, #12]
 8004b9a:	1a5b      	subs	r3, r3, r1
 8004b9c:	42ab      	cmp	r3, r5
 8004b9e:	dcf2      	bgt.n	8004b86 <_printf_i+0x21e>
 8004ba0:	e7eb      	b.n	8004b7a <_printf_i+0x212>
 8004ba2:	2500      	movs	r5, #0
 8004ba4:	f104 0619 	add.w	r6, r4, #25
 8004ba8:	e7f5      	b.n	8004b96 <_printf_i+0x22e>
 8004baa:	bf00      	nop
 8004bac:	080059a1 	.word	0x080059a1
 8004bb0:	080059b2 	.word	0x080059b2

08004bb4 <_sbrk_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4d06      	ldr	r5, [pc, #24]	; (8004bd0 <_sbrk_r+0x1c>)
 8004bb8:	2300      	movs	r3, #0
 8004bba:	4604      	mov	r4, r0
 8004bbc:	4608      	mov	r0, r1
 8004bbe:	602b      	str	r3, [r5, #0]
 8004bc0:	f7fc f80c 	bl	8000bdc <_sbrk>
 8004bc4:	1c43      	adds	r3, r0, #1
 8004bc6:	d102      	bne.n	8004bce <_sbrk_r+0x1a>
 8004bc8:	682b      	ldr	r3, [r5, #0]
 8004bca:	b103      	cbz	r3, 8004bce <_sbrk_r+0x1a>
 8004bcc:	6023      	str	r3, [r4, #0]
 8004bce:	bd38      	pop	{r3, r4, r5, pc}
 8004bd0:	20000188 	.word	0x20000188

08004bd4 <__sread>:
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	460c      	mov	r4, r1
 8004bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bdc:	f000 fab2 	bl	8005144 <_read_r>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	bfab      	itete	ge
 8004be4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004be6:	89a3      	ldrhlt	r3, [r4, #12]
 8004be8:	181b      	addge	r3, r3, r0
 8004bea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004bee:	bfac      	ite	ge
 8004bf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8004bf2:	81a3      	strhlt	r3, [r4, #12]
 8004bf4:	bd10      	pop	{r4, pc}

08004bf6 <__swrite>:
 8004bf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bfa:	461f      	mov	r7, r3
 8004bfc:	898b      	ldrh	r3, [r1, #12]
 8004bfe:	05db      	lsls	r3, r3, #23
 8004c00:	4605      	mov	r5, r0
 8004c02:	460c      	mov	r4, r1
 8004c04:	4616      	mov	r6, r2
 8004c06:	d505      	bpl.n	8004c14 <__swrite+0x1e>
 8004c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f000 f9c8 	bl	8004fa4 <_lseek_r>
 8004c14:	89a3      	ldrh	r3, [r4, #12]
 8004c16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c1e:	81a3      	strh	r3, [r4, #12]
 8004c20:	4632      	mov	r2, r6
 8004c22:	463b      	mov	r3, r7
 8004c24:	4628      	mov	r0, r5
 8004c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c2a:	f000 b869 	b.w	8004d00 <_write_r>

08004c2e <__sseek>:
 8004c2e:	b510      	push	{r4, lr}
 8004c30:	460c      	mov	r4, r1
 8004c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c36:	f000 f9b5 	bl	8004fa4 <_lseek_r>
 8004c3a:	1c43      	adds	r3, r0, #1
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	bf15      	itete	ne
 8004c40:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c4a:	81a3      	strheq	r3, [r4, #12]
 8004c4c:	bf18      	it	ne
 8004c4e:	81a3      	strhne	r3, [r4, #12]
 8004c50:	bd10      	pop	{r4, pc}

08004c52 <__sclose>:
 8004c52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c56:	f000 b8d3 	b.w	8004e00 <_close_r>
	...

08004c5c <__swbuf_r>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	460e      	mov	r6, r1
 8004c60:	4614      	mov	r4, r2
 8004c62:	4605      	mov	r5, r0
 8004c64:	b118      	cbz	r0, 8004c6e <__swbuf_r+0x12>
 8004c66:	6983      	ldr	r3, [r0, #24]
 8004c68:	b90b      	cbnz	r3, 8004c6e <__swbuf_r+0x12>
 8004c6a:	f7ff fb81 	bl	8004370 <__sinit>
 8004c6e:	4b21      	ldr	r3, [pc, #132]	; (8004cf4 <__swbuf_r+0x98>)
 8004c70:	429c      	cmp	r4, r3
 8004c72:	d12b      	bne.n	8004ccc <__swbuf_r+0x70>
 8004c74:	686c      	ldr	r4, [r5, #4]
 8004c76:	69a3      	ldr	r3, [r4, #24]
 8004c78:	60a3      	str	r3, [r4, #8]
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	071a      	lsls	r2, r3, #28
 8004c7e:	d52f      	bpl.n	8004ce0 <__swbuf_r+0x84>
 8004c80:	6923      	ldr	r3, [r4, #16]
 8004c82:	b36b      	cbz	r3, 8004ce0 <__swbuf_r+0x84>
 8004c84:	6923      	ldr	r3, [r4, #16]
 8004c86:	6820      	ldr	r0, [r4, #0]
 8004c88:	1ac0      	subs	r0, r0, r3
 8004c8a:	6963      	ldr	r3, [r4, #20]
 8004c8c:	b2f6      	uxtb	r6, r6
 8004c8e:	4283      	cmp	r3, r0
 8004c90:	4637      	mov	r7, r6
 8004c92:	dc04      	bgt.n	8004c9e <__swbuf_r+0x42>
 8004c94:	4621      	mov	r1, r4
 8004c96:	4628      	mov	r0, r5
 8004c98:	f000 f948 	bl	8004f2c <_fflush_r>
 8004c9c:	bb30      	cbnz	r0, 8004cec <__swbuf_r+0x90>
 8004c9e:	68a3      	ldr	r3, [r4, #8]
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	60a3      	str	r3, [r4, #8]
 8004ca4:	6823      	ldr	r3, [r4, #0]
 8004ca6:	1c5a      	adds	r2, r3, #1
 8004ca8:	6022      	str	r2, [r4, #0]
 8004caa:	701e      	strb	r6, [r3, #0]
 8004cac:	6963      	ldr	r3, [r4, #20]
 8004cae:	3001      	adds	r0, #1
 8004cb0:	4283      	cmp	r3, r0
 8004cb2:	d004      	beq.n	8004cbe <__swbuf_r+0x62>
 8004cb4:	89a3      	ldrh	r3, [r4, #12]
 8004cb6:	07db      	lsls	r3, r3, #31
 8004cb8:	d506      	bpl.n	8004cc8 <__swbuf_r+0x6c>
 8004cba:	2e0a      	cmp	r6, #10
 8004cbc:	d104      	bne.n	8004cc8 <__swbuf_r+0x6c>
 8004cbe:	4621      	mov	r1, r4
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	f000 f933 	bl	8004f2c <_fflush_r>
 8004cc6:	b988      	cbnz	r0, 8004cec <__swbuf_r+0x90>
 8004cc8:	4638      	mov	r0, r7
 8004cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	; (8004cf8 <__swbuf_r+0x9c>)
 8004cce:	429c      	cmp	r4, r3
 8004cd0:	d101      	bne.n	8004cd6 <__swbuf_r+0x7a>
 8004cd2:	68ac      	ldr	r4, [r5, #8]
 8004cd4:	e7cf      	b.n	8004c76 <__swbuf_r+0x1a>
 8004cd6:	4b09      	ldr	r3, [pc, #36]	; (8004cfc <__swbuf_r+0xa0>)
 8004cd8:	429c      	cmp	r4, r3
 8004cda:	bf08      	it	eq
 8004cdc:	68ec      	ldreq	r4, [r5, #12]
 8004cde:	e7ca      	b.n	8004c76 <__swbuf_r+0x1a>
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f000 f81e 	bl	8004d24 <__swsetup_r>
 8004ce8:	2800      	cmp	r0, #0
 8004cea:	d0cb      	beq.n	8004c84 <__swbuf_r+0x28>
 8004cec:	f04f 37ff 	mov.w	r7, #4294967295
 8004cf0:	e7ea      	b.n	8004cc8 <__swbuf_r+0x6c>
 8004cf2:	bf00      	nop
 8004cf4:	08005950 	.word	0x08005950
 8004cf8:	08005970 	.word	0x08005970
 8004cfc:	08005930 	.word	0x08005930

08004d00 <_write_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4d07      	ldr	r5, [pc, #28]	; (8004d20 <_write_r+0x20>)
 8004d04:	4604      	mov	r4, r0
 8004d06:	4608      	mov	r0, r1
 8004d08:	4611      	mov	r1, r2
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	602a      	str	r2, [r5, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f7fb ff13 	bl	8000b3a <_write>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_write_r+0x1e>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_write_r+0x1e>
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	20000188 	.word	0x20000188

08004d24 <__swsetup_r>:
 8004d24:	4b32      	ldr	r3, [pc, #200]	; (8004df0 <__swsetup_r+0xcc>)
 8004d26:	b570      	push	{r4, r5, r6, lr}
 8004d28:	681d      	ldr	r5, [r3, #0]
 8004d2a:	4606      	mov	r6, r0
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	b125      	cbz	r5, 8004d3a <__swsetup_r+0x16>
 8004d30:	69ab      	ldr	r3, [r5, #24]
 8004d32:	b913      	cbnz	r3, 8004d3a <__swsetup_r+0x16>
 8004d34:	4628      	mov	r0, r5
 8004d36:	f7ff fb1b 	bl	8004370 <__sinit>
 8004d3a:	4b2e      	ldr	r3, [pc, #184]	; (8004df4 <__swsetup_r+0xd0>)
 8004d3c:	429c      	cmp	r4, r3
 8004d3e:	d10f      	bne.n	8004d60 <__swsetup_r+0x3c>
 8004d40:	686c      	ldr	r4, [r5, #4]
 8004d42:	89a3      	ldrh	r3, [r4, #12]
 8004d44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004d48:	0719      	lsls	r1, r3, #28
 8004d4a:	d42c      	bmi.n	8004da6 <__swsetup_r+0x82>
 8004d4c:	06dd      	lsls	r5, r3, #27
 8004d4e:	d411      	bmi.n	8004d74 <__swsetup_r+0x50>
 8004d50:	2309      	movs	r3, #9
 8004d52:	6033      	str	r3, [r6, #0]
 8004d54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004d58:	81a3      	strh	r3, [r4, #12]
 8004d5a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d5e:	e03e      	b.n	8004dde <__swsetup_r+0xba>
 8004d60:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <__swsetup_r+0xd4>)
 8004d62:	429c      	cmp	r4, r3
 8004d64:	d101      	bne.n	8004d6a <__swsetup_r+0x46>
 8004d66:	68ac      	ldr	r4, [r5, #8]
 8004d68:	e7eb      	b.n	8004d42 <__swsetup_r+0x1e>
 8004d6a:	4b24      	ldr	r3, [pc, #144]	; (8004dfc <__swsetup_r+0xd8>)
 8004d6c:	429c      	cmp	r4, r3
 8004d6e:	bf08      	it	eq
 8004d70:	68ec      	ldreq	r4, [r5, #12]
 8004d72:	e7e6      	b.n	8004d42 <__swsetup_r+0x1e>
 8004d74:	0758      	lsls	r0, r3, #29
 8004d76:	d512      	bpl.n	8004d9e <__swsetup_r+0x7a>
 8004d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d7a:	b141      	cbz	r1, 8004d8e <__swsetup_r+0x6a>
 8004d7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d80:	4299      	cmp	r1, r3
 8004d82:	d002      	beq.n	8004d8a <__swsetup_r+0x66>
 8004d84:	4630      	mov	r0, r6
 8004d86:	f000 f991 	bl	80050ac <_free_r>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	6363      	str	r3, [r4, #52]	; 0x34
 8004d8e:	89a3      	ldrh	r3, [r4, #12]
 8004d90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004d94:	81a3      	strh	r3, [r4, #12]
 8004d96:	2300      	movs	r3, #0
 8004d98:	6063      	str	r3, [r4, #4]
 8004d9a:	6923      	ldr	r3, [r4, #16]
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	89a3      	ldrh	r3, [r4, #12]
 8004da0:	f043 0308 	orr.w	r3, r3, #8
 8004da4:	81a3      	strh	r3, [r4, #12]
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	b94b      	cbnz	r3, 8004dbe <__swsetup_r+0x9a>
 8004daa:	89a3      	ldrh	r3, [r4, #12]
 8004dac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004db0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004db4:	d003      	beq.n	8004dbe <__swsetup_r+0x9a>
 8004db6:	4621      	mov	r1, r4
 8004db8:	4630      	mov	r0, r6
 8004dba:	f000 f92b 	bl	8005014 <__smakebuf_r>
 8004dbe:	89a0      	ldrh	r0, [r4, #12]
 8004dc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004dc4:	f010 0301 	ands.w	r3, r0, #1
 8004dc8:	d00a      	beq.n	8004de0 <__swsetup_r+0xbc>
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60a3      	str	r3, [r4, #8]
 8004dce:	6963      	ldr	r3, [r4, #20]
 8004dd0:	425b      	negs	r3, r3
 8004dd2:	61a3      	str	r3, [r4, #24]
 8004dd4:	6923      	ldr	r3, [r4, #16]
 8004dd6:	b943      	cbnz	r3, 8004dea <__swsetup_r+0xc6>
 8004dd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ddc:	d1ba      	bne.n	8004d54 <__swsetup_r+0x30>
 8004dde:	bd70      	pop	{r4, r5, r6, pc}
 8004de0:	0781      	lsls	r1, r0, #30
 8004de2:	bf58      	it	pl
 8004de4:	6963      	ldrpl	r3, [r4, #20]
 8004de6:	60a3      	str	r3, [r4, #8]
 8004de8:	e7f4      	b.n	8004dd4 <__swsetup_r+0xb0>
 8004dea:	2000      	movs	r0, #0
 8004dec:	e7f7      	b.n	8004dde <__swsetup_r+0xba>
 8004dee:	bf00      	nop
 8004df0:	2000000c 	.word	0x2000000c
 8004df4:	08005950 	.word	0x08005950
 8004df8:	08005970 	.word	0x08005970
 8004dfc:	08005930 	.word	0x08005930

08004e00 <_close_r>:
 8004e00:	b538      	push	{r3, r4, r5, lr}
 8004e02:	4d06      	ldr	r5, [pc, #24]	; (8004e1c <_close_r+0x1c>)
 8004e04:	2300      	movs	r3, #0
 8004e06:	4604      	mov	r4, r0
 8004e08:	4608      	mov	r0, r1
 8004e0a:	602b      	str	r3, [r5, #0]
 8004e0c:	f7fb feb1 	bl	8000b72 <_close>
 8004e10:	1c43      	adds	r3, r0, #1
 8004e12:	d102      	bne.n	8004e1a <_close_r+0x1a>
 8004e14:	682b      	ldr	r3, [r5, #0]
 8004e16:	b103      	cbz	r3, 8004e1a <_close_r+0x1a>
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	bd38      	pop	{r3, r4, r5, pc}
 8004e1c:	20000188 	.word	0x20000188

08004e20 <__sflush_r>:
 8004e20:	898a      	ldrh	r2, [r1, #12]
 8004e22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e26:	4605      	mov	r5, r0
 8004e28:	0710      	lsls	r0, r2, #28
 8004e2a:	460c      	mov	r4, r1
 8004e2c:	d458      	bmi.n	8004ee0 <__sflush_r+0xc0>
 8004e2e:	684b      	ldr	r3, [r1, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	dc05      	bgt.n	8004e40 <__sflush_r+0x20>
 8004e34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	dc02      	bgt.n	8004e40 <__sflush_r+0x20>
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e42:	2e00      	cmp	r6, #0
 8004e44:	d0f9      	beq.n	8004e3a <__sflush_r+0x1a>
 8004e46:	2300      	movs	r3, #0
 8004e48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004e4c:	682f      	ldr	r7, [r5, #0]
 8004e4e:	602b      	str	r3, [r5, #0]
 8004e50:	d032      	beq.n	8004eb8 <__sflush_r+0x98>
 8004e52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004e54:	89a3      	ldrh	r3, [r4, #12]
 8004e56:	075a      	lsls	r2, r3, #29
 8004e58:	d505      	bpl.n	8004e66 <__sflush_r+0x46>
 8004e5a:	6863      	ldr	r3, [r4, #4]
 8004e5c:	1ac0      	subs	r0, r0, r3
 8004e5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004e60:	b10b      	cbz	r3, 8004e66 <__sflush_r+0x46>
 8004e62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004e64:	1ac0      	subs	r0, r0, r3
 8004e66:	2300      	movs	r3, #0
 8004e68:	4602      	mov	r2, r0
 8004e6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e6c:	6a21      	ldr	r1, [r4, #32]
 8004e6e:	4628      	mov	r0, r5
 8004e70:	47b0      	blx	r6
 8004e72:	1c43      	adds	r3, r0, #1
 8004e74:	89a3      	ldrh	r3, [r4, #12]
 8004e76:	d106      	bne.n	8004e86 <__sflush_r+0x66>
 8004e78:	6829      	ldr	r1, [r5, #0]
 8004e7a:	291d      	cmp	r1, #29
 8004e7c:	d82c      	bhi.n	8004ed8 <__sflush_r+0xb8>
 8004e7e:	4a2a      	ldr	r2, [pc, #168]	; (8004f28 <__sflush_r+0x108>)
 8004e80:	40ca      	lsrs	r2, r1
 8004e82:	07d6      	lsls	r6, r2, #31
 8004e84:	d528      	bpl.n	8004ed8 <__sflush_r+0xb8>
 8004e86:	2200      	movs	r2, #0
 8004e88:	6062      	str	r2, [r4, #4]
 8004e8a:	04d9      	lsls	r1, r3, #19
 8004e8c:	6922      	ldr	r2, [r4, #16]
 8004e8e:	6022      	str	r2, [r4, #0]
 8004e90:	d504      	bpl.n	8004e9c <__sflush_r+0x7c>
 8004e92:	1c42      	adds	r2, r0, #1
 8004e94:	d101      	bne.n	8004e9a <__sflush_r+0x7a>
 8004e96:	682b      	ldr	r3, [r5, #0]
 8004e98:	b903      	cbnz	r3, 8004e9c <__sflush_r+0x7c>
 8004e9a:	6560      	str	r0, [r4, #84]	; 0x54
 8004e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e9e:	602f      	str	r7, [r5, #0]
 8004ea0:	2900      	cmp	r1, #0
 8004ea2:	d0ca      	beq.n	8004e3a <__sflush_r+0x1a>
 8004ea4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ea8:	4299      	cmp	r1, r3
 8004eaa:	d002      	beq.n	8004eb2 <__sflush_r+0x92>
 8004eac:	4628      	mov	r0, r5
 8004eae:	f000 f8fd 	bl	80050ac <_free_r>
 8004eb2:	2000      	movs	r0, #0
 8004eb4:	6360      	str	r0, [r4, #52]	; 0x34
 8004eb6:	e7c1      	b.n	8004e3c <__sflush_r+0x1c>
 8004eb8:	6a21      	ldr	r1, [r4, #32]
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b0      	blx	r6
 8004ec0:	1c41      	adds	r1, r0, #1
 8004ec2:	d1c7      	bne.n	8004e54 <__sflush_r+0x34>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0c4      	beq.n	8004e54 <__sflush_r+0x34>
 8004eca:	2b1d      	cmp	r3, #29
 8004ecc:	d001      	beq.n	8004ed2 <__sflush_r+0xb2>
 8004ece:	2b16      	cmp	r3, #22
 8004ed0:	d101      	bne.n	8004ed6 <__sflush_r+0xb6>
 8004ed2:	602f      	str	r7, [r5, #0]
 8004ed4:	e7b1      	b.n	8004e3a <__sflush_r+0x1a>
 8004ed6:	89a3      	ldrh	r3, [r4, #12]
 8004ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004edc:	81a3      	strh	r3, [r4, #12]
 8004ede:	e7ad      	b.n	8004e3c <__sflush_r+0x1c>
 8004ee0:	690f      	ldr	r7, [r1, #16]
 8004ee2:	2f00      	cmp	r7, #0
 8004ee4:	d0a9      	beq.n	8004e3a <__sflush_r+0x1a>
 8004ee6:	0793      	lsls	r3, r2, #30
 8004ee8:	680e      	ldr	r6, [r1, #0]
 8004eea:	bf08      	it	eq
 8004eec:	694b      	ldreq	r3, [r1, #20]
 8004eee:	600f      	str	r7, [r1, #0]
 8004ef0:	bf18      	it	ne
 8004ef2:	2300      	movne	r3, #0
 8004ef4:	eba6 0807 	sub.w	r8, r6, r7
 8004ef8:	608b      	str	r3, [r1, #8]
 8004efa:	f1b8 0f00 	cmp.w	r8, #0
 8004efe:	dd9c      	ble.n	8004e3a <__sflush_r+0x1a>
 8004f00:	6a21      	ldr	r1, [r4, #32]
 8004f02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004f04:	4643      	mov	r3, r8
 8004f06:	463a      	mov	r2, r7
 8004f08:	4628      	mov	r0, r5
 8004f0a:	47b0      	blx	r6
 8004f0c:	2800      	cmp	r0, #0
 8004f0e:	dc06      	bgt.n	8004f1e <__sflush_r+0xfe>
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f16:	81a3      	strh	r3, [r4, #12]
 8004f18:	f04f 30ff 	mov.w	r0, #4294967295
 8004f1c:	e78e      	b.n	8004e3c <__sflush_r+0x1c>
 8004f1e:	4407      	add	r7, r0
 8004f20:	eba8 0800 	sub.w	r8, r8, r0
 8004f24:	e7e9      	b.n	8004efa <__sflush_r+0xda>
 8004f26:	bf00      	nop
 8004f28:	20400001 	.word	0x20400001

08004f2c <_fflush_r>:
 8004f2c:	b538      	push	{r3, r4, r5, lr}
 8004f2e:	690b      	ldr	r3, [r1, #16]
 8004f30:	4605      	mov	r5, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	b913      	cbnz	r3, 8004f3c <_fflush_r+0x10>
 8004f36:	2500      	movs	r5, #0
 8004f38:	4628      	mov	r0, r5
 8004f3a:	bd38      	pop	{r3, r4, r5, pc}
 8004f3c:	b118      	cbz	r0, 8004f46 <_fflush_r+0x1a>
 8004f3e:	6983      	ldr	r3, [r0, #24]
 8004f40:	b90b      	cbnz	r3, 8004f46 <_fflush_r+0x1a>
 8004f42:	f7ff fa15 	bl	8004370 <__sinit>
 8004f46:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <_fflush_r+0x6c>)
 8004f48:	429c      	cmp	r4, r3
 8004f4a:	d11b      	bne.n	8004f84 <_fflush_r+0x58>
 8004f4c:	686c      	ldr	r4, [r5, #4]
 8004f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0ef      	beq.n	8004f36 <_fflush_r+0xa>
 8004f56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004f58:	07d0      	lsls	r0, r2, #31
 8004f5a:	d404      	bmi.n	8004f66 <_fflush_r+0x3a>
 8004f5c:	0599      	lsls	r1, r3, #22
 8004f5e:	d402      	bmi.n	8004f66 <_fflush_r+0x3a>
 8004f60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f62:	f7ff faa3 	bl	80044ac <__retarget_lock_acquire_recursive>
 8004f66:	4628      	mov	r0, r5
 8004f68:	4621      	mov	r1, r4
 8004f6a:	f7ff ff59 	bl	8004e20 <__sflush_r>
 8004f6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004f70:	07da      	lsls	r2, r3, #31
 8004f72:	4605      	mov	r5, r0
 8004f74:	d4e0      	bmi.n	8004f38 <_fflush_r+0xc>
 8004f76:	89a3      	ldrh	r3, [r4, #12]
 8004f78:	059b      	lsls	r3, r3, #22
 8004f7a:	d4dd      	bmi.n	8004f38 <_fflush_r+0xc>
 8004f7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004f7e:	f7ff fa96 	bl	80044ae <__retarget_lock_release_recursive>
 8004f82:	e7d9      	b.n	8004f38 <_fflush_r+0xc>
 8004f84:	4b05      	ldr	r3, [pc, #20]	; (8004f9c <_fflush_r+0x70>)
 8004f86:	429c      	cmp	r4, r3
 8004f88:	d101      	bne.n	8004f8e <_fflush_r+0x62>
 8004f8a:	68ac      	ldr	r4, [r5, #8]
 8004f8c:	e7df      	b.n	8004f4e <_fflush_r+0x22>
 8004f8e:	4b04      	ldr	r3, [pc, #16]	; (8004fa0 <_fflush_r+0x74>)
 8004f90:	429c      	cmp	r4, r3
 8004f92:	bf08      	it	eq
 8004f94:	68ec      	ldreq	r4, [r5, #12]
 8004f96:	e7da      	b.n	8004f4e <_fflush_r+0x22>
 8004f98:	08005950 	.word	0x08005950
 8004f9c:	08005970 	.word	0x08005970
 8004fa0:	08005930 	.word	0x08005930

08004fa4 <_lseek_r>:
 8004fa4:	b538      	push	{r3, r4, r5, lr}
 8004fa6:	4d07      	ldr	r5, [pc, #28]	; (8004fc4 <_lseek_r+0x20>)
 8004fa8:	4604      	mov	r4, r0
 8004faa:	4608      	mov	r0, r1
 8004fac:	4611      	mov	r1, r2
 8004fae:	2200      	movs	r2, #0
 8004fb0:	602a      	str	r2, [r5, #0]
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f7fb fe04 	bl	8000bc0 <_lseek>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d102      	bne.n	8004fc2 <_lseek_r+0x1e>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	b103      	cbz	r3, 8004fc2 <_lseek_r+0x1e>
 8004fc0:	6023      	str	r3, [r4, #0]
 8004fc2:	bd38      	pop	{r3, r4, r5, pc}
 8004fc4:	20000188 	.word	0x20000188

08004fc8 <__swhatbuf_r>:
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	460e      	mov	r6, r1
 8004fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd0:	2900      	cmp	r1, #0
 8004fd2:	b096      	sub	sp, #88	; 0x58
 8004fd4:	4614      	mov	r4, r2
 8004fd6:	461d      	mov	r5, r3
 8004fd8:	da08      	bge.n	8004fec <__swhatbuf_r+0x24>
 8004fda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	602a      	str	r2, [r5, #0]
 8004fe2:	061a      	lsls	r2, r3, #24
 8004fe4:	d410      	bmi.n	8005008 <__swhatbuf_r+0x40>
 8004fe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fea:	e00e      	b.n	800500a <__swhatbuf_r+0x42>
 8004fec:	466a      	mov	r2, sp
 8004fee:	f000 f8bb 	bl	8005168 <_fstat_r>
 8004ff2:	2800      	cmp	r0, #0
 8004ff4:	dbf1      	blt.n	8004fda <__swhatbuf_r+0x12>
 8004ff6:	9a01      	ldr	r2, [sp, #4]
 8004ff8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ffc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005000:	425a      	negs	r2, r3
 8005002:	415a      	adcs	r2, r3
 8005004:	602a      	str	r2, [r5, #0]
 8005006:	e7ee      	b.n	8004fe6 <__swhatbuf_r+0x1e>
 8005008:	2340      	movs	r3, #64	; 0x40
 800500a:	2000      	movs	r0, #0
 800500c:	6023      	str	r3, [r4, #0]
 800500e:	b016      	add	sp, #88	; 0x58
 8005010:	bd70      	pop	{r4, r5, r6, pc}
	...

08005014 <__smakebuf_r>:
 8005014:	898b      	ldrh	r3, [r1, #12]
 8005016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005018:	079d      	lsls	r5, r3, #30
 800501a:	4606      	mov	r6, r0
 800501c:	460c      	mov	r4, r1
 800501e:	d507      	bpl.n	8005030 <__smakebuf_r+0x1c>
 8005020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005024:	6023      	str	r3, [r4, #0]
 8005026:	6123      	str	r3, [r4, #16]
 8005028:	2301      	movs	r3, #1
 800502a:	6163      	str	r3, [r4, #20]
 800502c:	b002      	add	sp, #8
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	ab01      	add	r3, sp, #4
 8005032:	466a      	mov	r2, sp
 8005034:	f7ff ffc8 	bl	8004fc8 <__swhatbuf_r>
 8005038:	9900      	ldr	r1, [sp, #0]
 800503a:	4605      	mov	r5, r0
 800503c:	4630      	mov	r0, r6
 800503e:	f7ff fa57 	bl	80044f0 <_malloc_r>
 8005042:	b948      	cbnz	r0, 8005058 <__smakebuf_r+0x44>
 8005044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005048:	059a      	lsls	r2, r3, #22
 800504a:	d4ef      	bmi.n	800502c <__smakebuf_r+0x18>
 800504c:	f023 0303 	bic.w	r3, r3, #3
 8005050:	f043 0302 	orr.w	r3, r3, #2
 8005054:	81a3      	strh	r3, [r4, #12]
 8005056:	e7e3      	b.n	8005020 <__smakebuf_r+0xc>
 8005058:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <__smakebuf_r+0x7c>)
 800505a:	62b3      	str	r3, [r6, #40]	; 0x28
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	6020      	str	r0, [r4, #0]
 8005060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005064:	81a3      	strh	r3, [r4, #12]
 8005066:	9b00      	ldr	r3, [sp, #0]
 8005068:	6163      	str	r3, [r4, #20]
 800506a:	9b01      	ldr	r3, [sp, #4]
 800506c:	6120      	str	r0, [r4, #16]
 800506e:	b15b      	cbz	r3, 8005088 <__smakebuf_r+0x74>
 8005070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005074:	4630      	mov	r0, r6
 8005076:	f000 f889 	bl	800518c <_isatty_r>
 800507a:	b128      	cbz	r0, 8005088 <__smakebuf_r+0x74>
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	f023 0303 	bic.w	r3, r3, #3
 8005082:	f043 0301 	orr.w	r3, r3, #1
 8005086:	81a3      	strh	r3, [r4, #12]
 8005088:	89a0      	ldrh	r0, [r4, #12]
 800508a:	4305      	orrs	r5, r0
 800508c:	81a5      	strh	r5, [r4, #12]
 800508e:	e7cd      	b.n	800502c <__smakebuf_r+0x18>
 8005090:	08004309 	.word	0x08004309

08005094 <__malloc_lock>:
 8005094:	4801      	ldr	r0, [pc, #4]	; (800509c <__malloc_lock+0x8>)
 8005096:	f7ff ba09 	b.w	80044ac <__retarget_lock_acquire_recursive>
 800509a:	bf00      	nop
 800509c:	2000017c 	.word	0x2000017c

080050a0 <__malloc_unlock>:
 80050a0:	4801      	ldr	r0, [pc, #4]	; (80050a8 <__malloc_unlock+0x8>)
 80050a2:	f7ff ba04 	b.w	80044ae <__retarget_lock_release_recursive>
 80050a6:	bf00      	nop
 80050a8:	2000017c 	.word	0x2000017c

080050ac <_free_r>:
 80050ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80050ae:	2900      	cmp	r1, #0
 80050b0:	d044      	beq.n	800513c <_free_r+0x90>
 80050b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050b6:	9001      	str	r0, [sp, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	f1a1 0404 	sub.w	r4, r1, #4
 80050be:	bfb8      	it	lt
 80050c0:	18e4      	addlt	r4, r4, r3
 80050c2:	f7ff ffe7 	bl	8005094 <__malloc_lock>
 80050c6:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <_free_r+0x94>)
 80050c8:	9801      	ldr	r0, [sp, #4]
 80050ca:	6813      	ldr	r3, [r2, #0]
 80050cc:	b933      	cbnz	r3, 80050dc <_free_r+0x30>
 80050ce:	6063      	str	r3, [r4, #4]
 80050d0:	6014      	str	r4, [r2, #0]
 80050d2:	b003      	add	sp, #12
 80050d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050d8:	f7ff bfe2 	b.w	80050a0 <__malloc_unlock>
 80050dc:	42a3      	cmp	r3, r4
 80050de:	d908      	bls.n	80050f2 <_free_r+0x46>
 80050e0:	6825      	ldr	r5, [r4, #0]
 80050e2:	1961      	adds	r1, r4, r5
 80050e4:	428b      	cmp	r3, r1
 80050e6:	bf01      	itttt	eq
 80050e8:	6819      	ldreq	r1, [r3, #0]
 80050ea:	685b      	ldreq	r3, [r3, #4]
 80050ec:	1949      	addeq	r1, r1, r5
 80050ee:	6021      	streq	r1, [r4, #0]
 80050f0:	e7ed      	b.n	80050ce <_free_r+0x22>
 80050f2:	461a      	mov	r2, r3
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	b10b      	cbz	r3, 80050fc <_free_r+0x50>
 80050f8:	42a3      	cmp	r3, r4
 80050fa:	d9fa      	bls.n	80050f2 <_free_r+0x46>
 80050fc:	6811      	ldr	r1, [r2, #0]
 80050fe:	1855      	adds	r5, r2, r1
 8005100:	42a5      	cmp	r5, r4
 8005102:	d10b      	bne.n	800511c <_free_r+0x70>
 8005104:	6824      	ldr	r4, [r4, #0]
 8005106:	4421      	add	r1, r4
 8005108:	1854      	adds	r4, r2, r1
 800510a:	42a3      	cmp	r3, r4
 800510c:	6011      	str	r1, [r2, #0]
 800510e:	d1e0      	bne.n	80050d2 <_free_r+0x26>
 8005110:	681c      	ldr	r4, [r3, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	6053      	str	r3, [r2, #4]
 8005116:	4421      	add	r1, r4
 8005118:	6011      	str	r1, [r2, #0]
 800511a:	e7da      	b.n	80050d2 <_free_r+0x26>
 800511c:	d902      	bls.n	8005124 <_free_r+0x78>
 800511e:	230c      	movs	r3, #12
 8005120:	6003      	str	r3, [r0, #0]
 8005122:	e7d6      	b.n	80050d2 <_free_r+0x26>
 8005124:	6825      	ldr	r5, [r4, #0]
 8005126:	1961      	adds	r1, r4, r5
 8005128:	428b      	cmp	r3, r1
 800512a:	bf04      	itt	eq
 800512c:	6819      	ldreq	r1, [r3, #0]
 800512e:	685b      	ldreq	r3, [r3, #4]
 8005130:	6063      	str	r3, [r4, #4]
 8005132:	bf04      	itt	eq
 8005134:	1949      	addeq	r1, r1, r5
 8005136:	6021      	streq	r1, [r4, #0]
 8005138:	6054      	str	r4, [r2, #4]
 800513a:	e7ca      	b.n	80050d2 <_free_r+0x26>
 800513c:	b003      	add	sp, #12
 800513e:	bd30      	pop	{r4, r5, pc}
 8005140:	20000180 	.word	0x20000180

08005144 <_read_r>:
 8005144:	b538      	push	{r3, r4, r5, lr}
 8005146:	4d07      	ldr	r5, [pc, #28]	; (8005164 <_read_r+0x20>)
 8005148:	4604      	mov	r4, r0
 800514a:	4608      	mov	r0, r1
 800514c:	4611      	mov	r1, r2
 800514e:	2200      	movs	r2, #0
 8005150:	602a      	str	r2, [r5, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	f7fb fcd4 	bl	8000b00 <_read>
 8005158:	1c43      	adds	r3, r0, #1
 800515a:	d102      	bne.n	8005162 <_read_r+0x1e>
 800515c:	682b      	ldr	r3, [r5, #0]
 800515e:	b103      	cbz	r3, 8005162 <_read_r+0x1e>
 8005160:	6023      	str	r3, [r4, #0]
 8005162:	bd38      	pop	{r3, r4, r5, pc}
 8005164:	20000188 	.word	0x20000188

08005168 <_fstat_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d07      	ldr	r5, [pc, #28]	; (8005188 <_fstat_r+0x20>)
 800516c:	2300      	movs	r3, #0
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	4611      	mov	r1, r2
 8005174:	602b      	str	r3, [r5, #0]
 8005176:	f7fb fd08 	bl	8000b8a <_fstat>
 800517a:	1c43      	adds	r3, r0, #1
 800517c:	d102      	bne.n	8005184 <_fstat_r+0x1c>
 800517e:	682b      	ldr	r3, [r5, #0]
 8005180:	b103      	cbz	r3, 8005184 <_fstat_r+0x1c>
 8005182:	6023      	str	r3, [r4, #0]
 8005184:	bd38      	pop	{r3, r4, r5, pc}
 8005186:	bf00      	nop
 8005188:	20000188 	.word	0x20000188

0800518c <_isatty_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4d06      	ldr	r5, [pc, #24]	; (80051a8 <_isatty_r+0x1c>)
 8005190:	2300      	movs	r3, #0
 8005192:	4604      	mov	r4, r0
 8005194:	4608      	mov	r0, r1
 8005196:	602b      	str	r3, [r5, #0]
 8005198:	f7fb fd07 	bl	8000baa <_isatty>
 800519c:	1c43      	adds	r3, r0, #1
 800519e:	d102      	bne.n	80051a6 <_isatty_r+0x1a>
 80051a0:	682b      	ldr	r3, [r5, #0]
 80051a2:	b103      	cbz	r3, 80051a6 <_isatty_r+0x1a>
 80051a4:	6023      	str	r3, [r4, #0]
 80051a6:	bd38      	pop	{r3, r4, r5, pc}
 80051a8:	20000188 	.word	0x20000188

080051ac <_init>:
 80051ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ae:	bf00      	nop
 80051b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b2:	bc08      	pop	{r3}
 80051b4:	469e      	mov	lr, r3
 80051b6:	4770      	bx	lr

080051b8 <_fini>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	bf00      	nop
 80051bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051be:	bc08      	pop	{r3}
 80051c0:	469e      	mov	lr, r3
 80051c2:	4770      	bx	lr
