
L4Initial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ee8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d8  08005078  08005078  00015078  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005250  08005250  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005250  08005250  00015250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005258  08005258  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005258  08005258  00015258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800525c  0800525c  0001525c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  080052d0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  080052d0  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dd92  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f2c  00000000  00000000  0002de32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002fd60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00030958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b305  00000000  00000000  00031478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dffb  00000000  00000000  0004c77d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a58f9  00000000  00000000  0005a778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00100071  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003800  00000000  00000000  001000c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005060 	.word	0x08005060

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08005060 	.word	0x08005060

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
#if(_DEBUG)
PUTCHAR_PROTOTYPE {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800057c:	1d39      	adds	r1, r7, #4
 800057e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000582:	2201      	movs	r2, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <__io_putchar+0x20>)
 8000586:	f003 f90d 	bl	80037a4 <HAL_UART_Transmit>

	return ch;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000f0 	.word	0x200000f0

08000598 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059e:	f000 fe23 	bl	80011e8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a2:	f000 f889 	bl	80006b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a6:	f000 f945 	bl	8000834 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005aa:	f000 f913 	bl	80007d4 <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80005ae:	f000 f8d3 	bl	8000758 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	int upTime = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
	uint8_t status = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71bb      	strb	r3, [r7, #6]

	uint8_t sil_rev_short = 0b0000000;
 80005be:	2300      	movs	r3, #0
 80005c0:	717b      	strb	r3, [r7, #5]

	printf("Checking Silicon Rev Bits\n\r");
 80005c2:	4832      	ldr	r0, [pc, #200]	; (800068c <main+0xf4>)
 80005c4:	f003 fdbe 	bl	8004144 <iprintf>
	AX_Radio_RW_Short_Address(&sil_rev_short, &status, &data, &hspi1, 0xff, 0);
 80005c8:	1dba      	adds	r2, r7, #6
 80005ca:	1df9      	adds	r1, r7, #7
 80005cc:	1d78      	adds	r0, r7, #5
 80005ce:	2300      	movs	r3, #0
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	23ff      	movs	r3, #255	; 0xff
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	4b2e      	ldr	r3, [pc, #184]	; (8000690 <main+0xf8>)
 80005d8:	f000 fb8d 	bl	8000cf6 <AX_Radio_RW_Short_Address>
	upTime++;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3301      	adds	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
	printf("Sys Uptime: %d\n\r", upTime);
 80005e2:	68f9      	ldr	r1, [r7, #12]
 80005e4:	482b      	ldr	r0, [pc, #172]	; (8000694 <main+0xfc>)
 80005e6:	f003 fdad 	bl	8004144 <iprintf>
	printf("Status Bits: %x\n\r", status);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4619      	mov	r1, r3
 80005ee:	482a      	ldr	r0, [pc, #168]	; (8000698 <main+0x100>)
 80005f0:	f003 fda8 	bl	8004144 <iprintf>
	printf("Silicon Rev Bits: %x\n\n\r", data);
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	4619      	mov	r1, r3
 80005f8:	4828      	ldr	r0, [pc, #160]	; (800069c <main+0x104>)
 80005fa:	f003 fda3 	bl	8004144 <iprintf>
	HAL_Delay(3000);
 80005fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000602:	f000 fe6d 	bl	80012e0 <HAL_Delay>

	printf("Attempting to init radio in full transmit @ 433MHz\n\r");
 8000606:	4826      	ldr	r0, [pc, #152]	; (80006a0 <main+0x108>)
 8000608:	f003 fd9c 	bl	8004144 <iprintf>
	int init_status = AX_Radio_Init(&hspi1);
 800060c:	4820      	ldr	r0, [pc, #128]	; (8000690 <main+0xf8>)
 800060e:	f000 fd6f 	bl	80010f0 <AX_Radio_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	60bb      	str	r3, [r7, #8]
	printf("Result: %d\n\r", init_status);
 8000616:	68b9      	ldr	r1, [r7, #8]
 8000618:	4822      	ldr	r0, [pc, #136]	; (80006a4 <main+0x10c>)
 800061a:	f003 fd93 	bl	8004144 <iprintf>
	printf("Entering eternal loop\n\n\r");
 800061e:	4822      	ldr	r0, [pc, #136]	; (80006a8 <main+0x110>)
 8000620:	f003 fd90 	bl	8004144 <iprintf>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		printf("AX Status %x\n\r", AX_Radio_Get_Status(&hspi1));
 8000624:	481a      	ldr	r0, [pc, #104]	; (8000690 <main+0xf8>)
 8000626:	f000 fd7f 	bl	8001128 <AX_Radio_Get_Status>
 800062a:	4603      	mov	r3, r0
 800062c:	4619      	mov	r1, r3
 800062e:	481f      	ldr	r0, [pc, #124]	; (80006ac <main+0x114>)
 8000630:	f003 fd88 	bl	8004144 <iprintf>
		printf("PLL Status %x\n\r", AX_Radio_Check_PLL(&hspi1));
 8000634:	4816      	ldr	r0, [pc, #88]	; (8000690 <main+0xf8>)
 8000636:	f000 fd99 	bl	800116c <AX_Radio_Check_PLL>
 800063a:	4603      	mov	r3, r0
 800063c:	4619      	mov	r1, r3
 800063e:	481c      	ldr	r0, [pc, #112]	; (80006b0 <main+0x118>)
 8000640:	f003 fd80 	bl	8004144 <iprintf>
		upTime++;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3301      	adds	r3, #1
 8000648:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1000);
 800064a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800064e:	f000 fe47 	bl	80012e0 <HAL_Delay>
		if (upTime == 10) {
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2b0a      	cmp	r3, #10
 8000656:	d1e5      	bne.n	8000624 <main+0x8c>
			printf("Switching to full TX\n\r");
 8000658:	4816      	ldr	r0, [pc, #88]	; (80006b4 <main+0x11c>)
 800065a:	f003 fd73 	bl	8004144 <iprintf>
			radio_write8(AX5043_REG_PWRMODE,
					AX_Radio_Get_Pwrmode_Upper(&hspi1) | AX5043_PWRSTATE_FULL_TX,
 800065e:	480c      	ldr	r0, [pc, #48]	; (8000690 <main+0xf8>)
 8000660:	f000 fc58 	bl	8000f14 <AX_Radio_Get_Pwrmode_Upper>
 8000664:	4603      	mov	r3, r0
			radio_write8(AX5043_REG_PWRMODE,
 8000666:	f043 030d 	orr.w	r3, r3, #13
 800066a:	b2db      	uxtb	r3, r3
 800066c:	4a08      	ldr	r2, [pc, #32]	; (8000690 <main+0xf8>)
 800066e:	4619      	mov	r1, r3
 8000670:	2002      	movs	r0, #2
 8000672:	f000 fc04 	bl	8000e7e <radio_write8>
					&hspi1);
			while ((radio_read8(AX5043_REG_POWSTAT, &hspi1) & (1 << 3)) == 0)
 8000676:	bf00      	nop
 8000678:	4905      	ldr	r1, [pc, #20]	; (8000690 <main+0xf8>)
 800067a:	2003      	movs	r0, #3
 800067c:	f000 fc1f 	bl	8000ebe <radio_read8>
 8000680:	4603      	mov	r3, r0
 8000682:	f003 0308 	and.w	r3, r3, #8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f6      	beq.n	8000678 <main+0xe0>
		printf("AX Status %x\n\r", AX_Radio_Get_Status(&hspi1));
 800068a:	e7cb      	b.n	8000624 <main+0x8c>
 800068c:	08005078 	.word	0x08005078
 8000690:	2000008c 	.word	0x2000008c
 8000694:	08005094 	.word	0x08005094
 8000698:	080050a8 	.word	0x080050a8
 800069c:	080050bc 	.word	0x080050bc
 80006a0:	080050d4 	.word	0x080050d4
 80006a4:	0800510c 	.word	0x0800510c
 80006a8:	0800511c 	.word	0x0800511c
 80006ac:	08005138 	.word	0x08005138
 80006b0:	08005148 	.word	0x08005148
 80006b4:	08005158 	.word	0x08005158

080006b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b096      	sub	sp, #88	; 0x58
 80006bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2244      	movs	r2, #68	; 0x44
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f003 fd34 	bl	8004134 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80006cc:	463b      	mov	r3, r7
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
 80006d2:	605a      	str	r2, [r3, #4]
 80006d4:	609a      	str	r2, [r3, #8]
 80006d6:	60da      	str	r2, [r3, #12]
 80006d8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80006da:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006de:	f001 f8a1 	bl	8001824 <HAL_PWREx_ControlVoltageScaling>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80006e8:	f000 f936 	bl	8000958 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ec:	2310      	movs	r3, #16
 80006ee:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006f0:	2301      	movs	r3, #1
 80006f2:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006f4:	2300      	movs	r3, #0
 80006f6:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006f8:	2360      	movs	r3, #96	; 0x60
 80006fa:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006fc:	2302      	movs	r3, #2
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000700:	2301      	movs	r3, #1
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000704:	2301      	movs	r3, #1
 8000706:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 8000708:	2328      	movs	r3, #40	; 0x28
 800070a:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070c:	2302      	movs	r3, #2
 800070e:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000710:	2302      	movs	r3, #2
 8000712:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000714:	f107 0314 	add.w	r3, r7, #20
 8000718:	4618      	mov	r0, r3
 800071a:	f001 f8d9 	bl	80018d0 <HAL_RCC_OscConfig>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <SystemClock_Config+0x70>
		Error_Handler();
 8000724:	f000 f918 	bl	8000958 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000728:	230f      	movs	r3, #15
 800072a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072c:	2303      	movs	r3, #3
 800072e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000734:	2300      	movs	r3, #0
 8000736:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 800073c:	463b      	mov	r3, r7
 800073e:	2104      	movs	r1, #4
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fd27 	bl	8002194 <HAL_RCC_ClockConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x98>
		Error_Handler();
 800074c:	f000 f904 	bl	8000958 <Error_Handler>
	}
}
 8000750:	bf00      	nop
 8000752:	3758      	adds	r7, #88	; 0x58
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800075c:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_SPI1_Init+0x74>)
 800075e:	4a1c      	ldr	r2, [pc, #112]	; (80007d0 <MX_SPI1_Init+0x78>)
 8000760:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000762:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_SPI1_Init+0x74>)
 8000764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000768:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_SPI1_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000770:	4b16      	ldr	r3, [pc, #88]	; (80007cc <MX_SPI1_Init+0x74>)
 8000772:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000776:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_SPI1_Init+0x74>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800077e:	4b13      	ldr	r3, [pc, #76]	; (80007cc <MX_SPI1_Init+0x74>)
 8000780:	2200      	movs	r2, #0
 8000782:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_SPI1_Init+0x74>)
 8000786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800078a:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800078c:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_SPI1_Init+0x74>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_SPI1_Init+0x74>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_SPI1_Init+0x74>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_SPI1_Init+0x74>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_SPI1_Init+0x74>)
 80007a6:	2207      	movs	r2, #7
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_SPI1_Init+0x74>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_SPI1_Init+0x74>)
 80007b2:	2208      	movs	r2, #8
 80007b4:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_SPI1_Init+0x74>)
 80007b8:	f002 f896 	bl	80028e8 <HAL_SPI_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_SPI1_Init+0x6e>
		Error_Handler();
 80007c2:	f000 f8c9 	bl	8000958 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	2000008c 	.word	0x2000008c
 80007d0:	40013000 	.word	0x40013000

080007d4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007d8:	4b14      	ldr	r3, [pc, #80]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007da:	4a15      	ldr	r2, [pc, #84]	; (8000830 <MX_USART2_UART_Init+0x5c>)
 80007dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007de:	4b13      	ldr	r3, [pc, #76]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007e6:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007ec:	4b0f      	ldr	r3, [pc, #60]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART2_UART_Init+0x58>)
 80007fa:	220c      	movs	r2, #12
 80007fc:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART2_UART_Init+0x58>)
 8000800:	2200      	movs	r2, #0
 8000802:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART2_UART_Init+0x58>)
 8000806:	2200      	movs	r2, #0
 8000808:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART2_UART_Init+0x58>)
 800080c:	2200      	movs	r2, #0
 800080e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART2_UART_Init+0x58>)
 8000812:	2200      	movs	r2, #0
 8000814:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART2_UART_Init+0x58>)
 8000818:	f002 ff76 	bl	8003708 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8000822:	f000 f899 	bl	8000958 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	200000f0 	.word	0x200000f0
 8000830:	40004400 	.word	0x40004400

08000834 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b08a      	sub	sp, #40	; 0x28
 8000838:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	4b40      	ldr	r3, [pc, #256]	; (800094c <MX_GPIO_Init+0x118>)
 800084c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084e:	4a3f      	ldr	r2, [pc, #252]	; (800094c <MX_GPIO_Init+0x118>)
 8000850:	f043 0304 	orr.w	r3, r3, #4
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b3d      	ldr	r3, [pc, #244]	; (800094c <MX_GPIO_Init+0x118>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0304 	and.w	r3, r3, #4
 800085e:	613b      	str	r3, [r7, #16]
 8000860:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	4b3a      	ldr	r3, [pc, #232]	; (800094c <MX_GPIO_Init+0x118>)
 8000864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000866:	4a39      	ldr	r2, [pc, #228]	; (800094c <MX_GPIO_Init+0x118>)
 8000868:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086e:	4b37      	ldr	r3, [pc, #220]	; (800094c <MX_GPIO_Init+0x118>)
 8000870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800087a:	4b34      	ldr	r3, [pc, #208]	; (800094c <MX_GPIO_Init+0x118>)
 800087c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087e:	4a33      	ldr	r2, [pc, #204]	; (800094c <MX_GPIO_Init+0x118>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000886:	4b31      	ldr	r3, [pc, #196]	; (800094c <MX_GPIO_Init+0x118>)
 8000888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60bb      	str	r3, [r7, #8]
 8000890:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000892:	4b2e      	ldr	r3, [pc, #184]	; (800094c <MX_GPIO_Init+0x118>)
 8000894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000896:	4a2d      	ldr	r2, [pc, #180]	; (800094c <MX_GPIO_Init+0x118>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089e:	4b2b      	ldr	r3, [pc, #172]	; (800094c <MX_GPIO_Init+0x118>)
 80008a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin,
 80008aa:	2200      	movs	r2, #0
 80008ac:	21b0      	movs	r1, #176	; 0xb0
 80008ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b2:	f000 ff91 	bl	80017d8 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	4824      	ldr	r0, [pc, #144]	; (8000950 <MX_GPIO_Init+0x11c>)
 80008be:	f000 ff8b 	bl	80017d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(AX_CS_GPIO_Port, AX_CS_Pin, GPIO_PIN_SET);
 80008c2:	2201      	movs	r2, #1
 80008c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008cc:	f000 ff84 	bl	80017d8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80008d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008d6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	481b      	ldr	r0, [pc, #108]	; (8000954 <MX_GPIO_Init+0x120>)
 80008e8:	f000 fe04 	bl	80014f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin AX_CS_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin | AX_CS_Pin;
 80008ec:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80008f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000908:	f000 fdf4 	bl	80014f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SMPS_PG_Pin */
	GPIO_InitStruct.Pin = SMPS_PG_Pin;
 800090c:	2340      	movs	r3, #64	; 0x40
 800090e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000910:	2300      	movs	r3, #0
 8000912:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000914:	2301      	movs	r3, #1
 8000916:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 0314 	add.w	r3, r7, #20
 800091c:	4619      	mov	r1, r3
 800091e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000922:	f000 fde7 	bl	80014f4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092c:	2301      	movs	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000934:	2300      	movs	r3, #0
 8000936:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 0314 	add.w	r3, r7, #20
 800093c:	4619      	mov	r1, r3
 800093e:	4804      	ldr	r0, [pc, #16]	; (8000950 <MX_GPIO_Init+0x11c>)
 8000940:	f000 fdd8 	bl	80014f4 <HAL_GPIO_Init>

}
 8000944:	bf00      	nop
 8000946:	3728      	adds	r7, #40	; 0x28
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000
 8000950:	48000400 	.word	0x48000400
 8000954:	48000800 	.word	0x48000800

08000958 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800096a:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <HAL_MspInit+0x44>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096e:	4a0e      	ldr	r2, [pc, #56]	; (80009a8 <HAL_MspInit+0x44>)
 8000970:	f043 0301 	orr.w	r3, r3, #1
 8000974:	6613      	str	r3, [r2, #96]	; 0x60
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <HAL_MspInit+0x44>)
 8000978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800097a:	f003 0301 	and.w	r3, r3, #1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <HAL_MspInit+0x44>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <HAL_MspInit+0x44>)
 8000988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800098c:	6593      	str	r3, [r2, #88]	; 0x58
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <HAL_MspInit+0x44>)
 8000990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000996:	603b      	str	r3, [r7, #0]
 8000998:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	370c      	adds	r7, #12
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	40021000 	.word	0x40021000

080009ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a18      	ldr	r2, [pc, #96]	; (8000a2c <HAL_SPI_MspInit+0x80>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d129      	bne.n	8000a22 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80009ce:	4b18      	ldr	r3, [pc, #96]	; (8000a30 <HAL_SPI_MspInit+0x84>)
 80009d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d2:	4a17      	ldr	r2, [pc, #92]	; (8000a30 <HAL_SPI_MspInit+0x84>)
 80009d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009d8:	6613      	str	r3, [r2, #96]	; 0x60
 80009da:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_SPI_MspInit+0x84>)
 80009dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e6:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <HAL_SPI_MspInit+0x84>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a11      	ldr	r2, [pc, #68]	; (8000a30 <HAL_SPI_MspInit+0x84>)
 80009ec:	f043 0301 	orr.w	r3, r3, #1
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_SPI_MspInit+0x84>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0301 	and.w	r3, r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80009fe:	f641 0302 	movw	r3, #6146	; 0x1802
 8000a02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a04:	2302      	movs	r3, #2
 8000a06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0c:	2303      	movs	r3, #3
 8000a0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a10:	2305      	movs	r3, #5
 8000a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a1e:	f000 fd69 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40013000 	.word	0x40013000
 8000a30:	40021000 	.word	0x40021000

08000a34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b096      	sub	sp, #88	; 0x58
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a3c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a40:	2200      	movs	r2, #0
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	605a      	str	r2, [r3, #4]
 8000a46:	609a      	str	r2, [r3, #8]
 8000a48:	60da      	str	r2, [r3, #12]
 8000a4a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a4c:	f107 0310 	add.w	r3, r7, #16
 8000a50:	2234      	movs	r2, #52	; 0x34
 8000a52:	2100      	movs	r1, #0
 8000a54:	4618      	mov	r0, r3
 8000a56:	f003 fb6d 	bl	8004134 <memset>
  if(huart->Instance==USART2)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	4a1f      	ldr	r2, [pc, #124]	; (8000adc <HAL_UART_MspInit+0xa8>)
 8000a60:	4293      	cmp	r3, r2
 8000a62:	d136      	bne.n	8000ad2 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a6c:	f107 0310 	add.w	r3, r7, #16
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fdb3 	bl	80025dc <HAL_RCCEx_PeriphCLKConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a7c:	f7ff ff6c 	bl	8000958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a84:	4a16      	ldr	r2, [pc, #88]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8000a8c:	4b14      	ldr	r3, [pc, #80]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9c:	4a10      	ldr	r2, [pc, #64]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000a9e:	f043 0301 	orr.w	r3, r3, #1
 8000aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <HAL_UART_MspInit+0xac>)
 8000aa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa8:	f003 0301 	and.w	r3, r3, #1
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ab0:	230c      	movs	r3, #12
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ac0:	2307      	movs	r3, #7
 8000ac2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ac4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f000 fd11 	bl	80014f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ad2:	bf00      	nop
 8000ad4:	3758      	adds	r7, #88	; 0x58
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40004400 	.word	0x40004400
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <NMI_Handler+0x4>

08000aea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aee:	e7fe      	b.n	8000aee <HardFault_Handler+0x4>

08000af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <MemManage_Handler+0x4>

08000af6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000af6:	b480      	push	{r7}
 8000af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <BusFault_Handler+0x4>

08000afc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b00:	e7fe      	b.n	8000b00 <UsageFault_Handler+0x4>

08000b02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b02:	b480      	push	{r7}
 8000b04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr

08000b1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b30:	f000 fbb6 	bl	80012a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b34:	bf00      	nop
 8000b36:	bd80      	pop	{r7, pc}

08000b38 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b086      	sub	sp, #24
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	60b9      	str	r1, [r7, #8]
 8000b42:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]
 8000b48:	e00a      	b.n	8000b60 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b4a:	f3af 8000 	nop.w
 8000b4e:	4601      	mov	r1, r0
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	60ba      	str	r2, [r7, #8]
 8000b56:	b2ca      	uxtb	r2, r1
 8000b58:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf0      	blt.n	8000b4a <_read+0x12>
	}

return len;
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	617b      	str	r3, [r7, #20]
 8000b82:	e009      	b.n	8000b98 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	1c5a      	adds	r2, r3, #1
 8000b88:	60ba      	str	r2, [r7, #8]
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f7ff fcf1 	bl	8000574 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	3301      	adds	r3, #1
 8000b96:	617b      	str	r3, [r7, #20]
 8000b98:	697a      	ldr	r2, [r7, #20]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	dbf1      	blt.n	8000b84 <_write+0x12>
	}
	return len;
 8000ba0:	687b      	ldr	r3, [r7, #4]
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <_close>:

int _close(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	return -1;
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr

08000bc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bc2:	b480      	push	{r7}
 8000bc4:	b083      	sub	sp, #12
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	6078      	str	r0, [r7, #4]
 8000bca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bd2:	605a      	str	r2, [r3, #4]
	return 0;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr

08000be2 <_isatty>:

int _isatty(int file)
{
 8000be2:	b480      	push	{r7}
 8000be4:	b083      	sub	sp, #12
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	6078      	str	r0, [r7, #4]
	return 1;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf6:	4770      	bx	lr

08000bf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b085      	sub	sp, #20
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
	return 0;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3714      	adds	r7, #20
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
	...

08000c14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c1c:	4a14      	ldr	r2, [pc, #80]	; (8000c70 <_sbrk+0x5c>)
 8000c1e:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <_sbrk+0x60>)
 8000c20:	1ad3      	subs	r3, r2, r3
 8000c22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c28:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <_sbrk+0x64>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d102      	bne.n	8000c36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c30:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <_sbrk+0x64>)
 8000c32:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <_sbrk+0x68>)
 8000c34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c36:	4b10      	ldr	r3, [pc, #64]	; (8000c78 <_sbrk+0x64>)
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4413      	add	r3, r2
 8000c3e:	693a      	ldr	r2, [r7, #16]
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d207      	bcs.n	8000c54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c44:	f003 fa4c 	bl	80040e0 <__errno>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	e009      	b.n	8000c68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c54:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <_sbrk+0x64>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c5a:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	4a05      	ldr	r2, [pc, #20]	; (8000c78 <_sbrk+0x64>)
 8000c64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c66:	68fb      	ldr	r3, [r7, #12]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3718      	adds	r7, #24
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000a000 	.word	0x2000a000
 8000c74:	00000400 	.word	0x00000400
 8000c78:	20000174 	.word	0x20000174
 8000c7c:	20000190 	.word	0x20000190

08000c80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c80:	b480      	push	{r7}
 8000c82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <SystemInit+0x20>)
 8000c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c8a:	4a05      	ldr	r2, [pc, #20]	; (8000ca0 <SystemInit+0x20>)
 8000c8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c94:	bf00      	nop
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	e000ed00 	.word	0xe000ed00

08000ca4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cdc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca8:	f7ff ffea 	bl	8000c80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cae:	490d      	ldr	r1, [pc, #52]	; (8000ce4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cb0:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <LoopForever+0xe>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb4:	e002      	b.n	8000cbc <LoopCopyDataInit>

08000cb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cba:	3304      	adds	r3, #4

08000cbc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cbc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cbe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc0:	d3f9      	bcc.n	8000cb6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc2:	4a0a      	ldr	r2, [pc, #40]	; (8000cec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc4:	4c0a      	ldr	r4, [pc, #40]	; (8000cf0 <LoopForever+0x16>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc8:	e001      	b.n	8000cce <LoopFillZerobss>

08000cca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ccc:	3204      	adds	r2, #4

08000cce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd0:	d3fb      	bcc.n	8000cca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cd2:	f003 fa0b 	bl	80040ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd6:	f7ff fc5f 	bl	8000598 <main>

08000cda <LoopForever>:

LoopForever:
    b LoopForever
 8000cda:	e7fe      	b.n	8000cda <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cdc:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ce0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000ce8:	08005260 	.word	0x08005260
  ldr r2, =_sbss
 8000cec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cf0:	2000018c 	.word	0x2000018c

08000cf4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf4:	e7fe      	b.n	8000cf4 <ADC1_2_IRQHandler>

08000cf6 <AX_Radio_RW_Short_Address>:
 */
#include "ax5243.h"

HAL_StatusTypeDef AX_Radio_RW_Short_Address(uint8_t * addr, uint8_t * status, uint8_t * data,
												SPI_HandleTypeDef * hspi, uint32_t timeout, uint8_t rw)
	{
 8000cf6:	b580      	push	{r7, lr}
 8000cf8:	b088      	sub	sp, #32
 8000cfa:	af02      	add	r7, sp, #8
 8000cfc:	60f8      	str	r0, [r7, #12]
 8000cfe:	60b9      	str	r1, [r7, #8]
 8000d00:	607a      	str	r2, [r7, #4]
 8000d02:	603b      	str	r3, [r7, #0]
		  HAL_StatusTypeDef status1, status2;
		  //bring chip select low
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f000 fd63 	bl	80017d8 <HAL_GPIO_WritePin>
		  //mask for read or write depending on flag
		  *addr = rw == 0 ? *addr & 0x7F : *addr | 0x80;
 8000d12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d105      	bne.n	8000d26 <AX_Radio_RW_Short_Address+0x30>
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	e004      	b.n	8000d30 <AX_Radio_RW_Short_Address+0x3a>
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000d2e:	b2db      	uxtb	r3, r3
 8000d30:	68fa      	ldr	r2, [r7, #12]
 8000d32:	7013      	strb	r3, [r2, #0]
		  //send 7 bit address with MSB signifying rw, receive status bits
		  status1 = HAL_SPI_TransmitReceive(hspi, (uint8_t *)addr, (uint8_t *)status, 1, timeout);
 8000d34:	6a3b      	ldr	r3, [r7, #32]
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2301      	movs	r3, #1
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	68f9      	ldr	r1, [r7, #12]
 8000d3e:	6838      	ldr	r0, [r7, #0]
 8000d40:	f002 f913 	bl	8002f6a <HAL_SPI_TransmitReceive>
 8000d44:	4603      	mov	r3, r0
 8000d46:	75fb      	strb	r3, [r7, #23]
		  //receive data bits back
		  status2 = rw == 0 ? HAL_SPI_Receive(hspi, data, 1, timeout) : HAL_SPI_Transmit(hspi, data, 1, timeout);
 8000d48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d107      	bne.n	8000d60 <AX_Radio_RW_Short_Address+0x6a>
 8000d50:	6a3b      	ldr	r3, [r7, #32]
 8000d52:	2201      	movs	r2, #1
 8000d54:	6879      	ldr	r1, [r7, #4]
 8000d56:	6838      	ldr	r0, [r7, #0]
 8000d58:	f001 ffd7 	bl	8002d0a <HAL_SPI_Receive>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	e006      	b.n	8000d6e <AX_Radio_RW_Short_Address+0x78>
 8000d60:	6a3b      	ldr	r3, [r7, #32]
 8000d62:	2201      	movs	r2, #1
 8000d64:	6879      	ldr	r1, [r7, #4]
 8000d66:	6838      	ldr	r0, [r7, #0]
 8000d68:	f001 fe61 	bl	8002a2e <HAL_SPI_Transmit>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	75bb      	strb	r3, [r7, #22]
		  //bring chip select high
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000d70:	2201      	movs	r2, #1
 8000d72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d7a:	f000 fd2d 	bl	80017d8 <HAL_GPIO_WritePin>

		  return status1 | status2;
 8000d7e:	7dfa      	ldrb	r2, [r7, #23]
 8000d80:	7dbb      	ldrb	r3, [r7, #22]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	b2db      	uxtb	r3, r3
	}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3718      	adds	r7, #24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <AX_Radio_RW_Long_Address>:



HAL_StatusTypeDef AX_Radio_RW_Long_Address(uint16_t * addr, uint16_t * status, uint8_t * data,
		SPI_HandleTypeDef * hspi, uint32_t timeout, uint8_t rw)
	{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b088      	sub	sp, #32
 8000d92:	af02      	add	r7, sp, #8
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
 8000d9a:	603b      	str	r3, [r7, #0]
		  HAL_StatusTypeDef status1, status2, status3;
		  uint8_t addr_upper, addr_lower, status_upper, status_lower;
		  //bring chip select low
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000da2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000da6:	f000 fd17 	bl	80017d8 <HAL_GPIO_WritePin>
		  //mask for read or write depending on flag
		  *addr = rw == 0 ? ((*addr & 0x7FFF) | 0x7000) : *addr | 0xF000;
 8000daa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d10a      	bne.n	8000dc8 <AX_Radio_RW_Long_Address+0x3a>
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	b21b      	sxth	r3, r3
 8000db8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000dc2:	b21b      	sxth	r3, r3
 8000dc4:	b29b      	uxth	r3, r3
 8000dc6:	e006      	b.n	8000dd6 <AX_Radio_RW_Long_Address+0x48>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000dd0:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	8013      	strh	r3, [r2, #0]
		  addr_upper = *addr >> 8;
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	881b      	ldrh	r3, [r3, #0]
 8000dde:	0a1b      	lsrs	r3, r3, #8
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	753b      	strb	r3, [r7, #20]
		  addr_lower = *addr & 0xFF;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	881b      	ldrh	r3, [r3, #0]
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	74fb      	strb	r3, [r7, #19]
		  //send four bit mask and upper nibble of addr
		  status1 = HAL_SPI_TransmitReceive(hspi, (uint8_t *)&addr_upper, (uint8_t *)&status_upper, 1, timeout);
 8000dee:	f107 0212 	add.w	r2, r7, #18
 8000df2:	f107 0114 	add.w	r1, r7, #20
 8000df6:	6a3b      	ldr	r3, [r7, #32]
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	6838      	ldr	r0, [r7, #0]
 8000dfe:	f002 f8b4 	bl	8002f6a <HAL_SPI_TransmitReceive>
 8000e02:	4603      	mov	r3, r0
 8000e04:	75fb      	strb	r3, [r7, #23]
		  //send lower byte of addr
		  status2 = HAL_SPI_TransmitReceive(hspi, (uint8_t *)&addr_lower, (uint8_t *)&status_lower, 1, timeout);
 8000e06:	f107 0211 	add.w	r2, r7, #17
 8000e0a:	f107 0113 	add.w	r1, r7, #19
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	2301      	movs	r3, #1
 8000e14:	6838      	ldr	r0, [r7, #0]
 8000e16:	f002 f8a8 	bl	8002f6a <HAL_SPI_TransmitReceive>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	75bb      	strb	r3, [r7, #22]
		  //receive data bits back
		  status3 = rw == 0 ? HAL_SPI_Receive(hspi, data, 1, timeout) : HAL_SPI_Transmit(hspi, data, 1, timeout);
 8000e1e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d107      	bne.n	8000e36 <AX_Radio_RW_Long_Address+0xa8>
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	2201      	movs	r2, #1
 8000e2a:	6879      	ldr	r1, [r7, #4]
 8000e2c:	6838      	ldr	r0, [r7, #0]
 8000e2e:	f001 ff6c 	bl	8002d0a <HAL_SPI_Receive>
 8000e32:	4603      	mov	r3, r0
 8000e34:	e006      	b.n	8000e44 <AX_Radio_RW_Long_Address+0xb6>
 8000e36:	6a3b      	ldr	r3, [r7, #32]
 8000e38:	2201      	movs	r2, #1
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	6838      	ldr	r0, [r7, #0]
 8000e3e:	f001 fdf6 	bl	8002a2e <HAL_SPI_Transmit>
 8000e42:	4603      	mov	r3, r0
 8000e44:	757b      	strb	r3, [r7, #21]
		  //bring chip select high
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f000 fcc2 	bl	80017d8 <HAL_GPIO_WritePin>

		  *status = (status_upper << 8) | status_lower;
 8000e54:	7cbb      	ldrb	r3, [r7, #18]
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b21a      	sxth	r2, r3
 8000e5a:	7c7b      	ldrb	r3, [r7, #17]
 8000e5c:	b21b      	sxth	r3, r3
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	b29a      	uxth	r2, r3
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	801a      	strh	r2, [r3, #0]

		  return status1 | status2 | status3;
 8000e68:	7dfa      	ldrb	r2, [r7, #23]
 8000e6a:	7dbb      	ldrb	r3, [r7, #22]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	b2da      	uxtb	r2, r3
 8000e70:	7d7b      	ldrb	r3, [r7, #21]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	b2db      	uxtb	r3, r3
	}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <radio_write8>:


uint8_t radio_write8(uint16_t reg, uint8_t data, SPI_HandleTypeDef * hspi)
	{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b086      	sub	sp, #24
 8000e82:	af02      	add	r7, sp, #8
 8000e84:	4603      	mov	r3, r0
 8000e86:	603a      	str	r2, [r7, #0]
 8000e88:	80fb      	strh	r3, [r7, #6]
 8000e8a:	460b      	mov	r3, r1
 8000e8c:	717b      	strb	r3, [r7, #5]
		uint16_t reg_local, status_local;
		uint8_t data_local;
		reg_local = reg;
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	81fb      	strh	r3, [r7, #14]
		status_local = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	81bb      	strh	r3, [r7, #12]
		data_local = data;
 8000e96:	797b      	ldrb	r3, [r7, #5]
 8000e98:	72fb      	strb	r3, [r7, #11]
		return AX_Radio_RW_Long_Address(&reg_local, &status_local, &data_local,
 8000e9a:	f107 020b 	add.w	r2, r7, #11
 8000e9e:	f107 010c 	add.w	r1, r7, #12
 8000ea2:	f107 000e 	add.w	r0, r7, #14
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	9301      	str	r3, [sp, #4]
 8000eaa:	23ff      	movs	r3, #255	; 0xff
 8000eac:	9300      	str	r3, [sp, #0]
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f7ff ff6d 	bl	8000d8e <AX_Radio_RW_Long_Address>
 8000eb4:	4603      	mov	r3, r0
				hspi, 0xFF, 0x1);
	}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3710      	adds	r7, #16
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <radio_read8>:

uint8_t radio_read8(uint16_t reg, SPI_HandleTypeDef * hspi)
	{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af02      	add	r7, sp, #8
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	6039      	str	r1, [r7, #0]
 8000ec8:	80fb      	strh	r3, [r7, #6]
		uint16_t reg_local, status_local;
		uint8_t data_local = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	72fb      	strb	r3, [r7, #11]
		reg_local = reg;
 8000ece:	88fb      	ldrh	r3, [r7, #6]
 8000ed0:	81fb      	strh	r3, [r7, #14]
		status_local = 0;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	81bb      	strh	r3, [r7, #12]
		AX_Radio_RW_Long_Address(&reg_local, &status_local, &data_local,
 8000ed6:	f107 020b 	add.w	r2, r7, #11
 8000eda:	f107 010c 	add.w	r1, r7, #12
 8000ede:	f107 000e 	add.w	r0, r7, #14
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	9301      	str	r3, [sp, #4]
 8000ee6:	23ff      	movs	r3, #255	; 0xff
 8000ee8:	9300      	str	r3, [sp, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f7ff ff4f 	bl	8000d8e <AX_Radio_RW_Long_Address>
				hspi, 0xFF, 0x0);
		return data_local;
 8000ef0:	7afb      	ldrb	r3, [r7, #11]
	}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <AX_Radio_Get_Pwrmode>:
const int8_t  axradio_phy_rssireference = 0xF8 + 64;
#pragma GCC diagnostic pop


uint8_t AX_Radio_Get_Pwrmode(SPI_HandleTypeDef * hspi)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
	return radio_read8(AX5043_REG_PWRMODE, hspi);
 8000f02:	6879      	ldr	r1, [r7, #4]
 8000f04:	2002      	movs	r0, #2
 8000f06:	f7ff ffda 	bl	8000ebe <radio_read8>
 8000f0a:	4603      	mov	r3, r0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <AX_Radio_Get_Pwrmode_Upper>:

uint8_t AX_Radio_Get_Pwrmode_Upper(SPI_HandleTypeDef * hspi)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	return AX_Radio_Get_Pwrmode(hspi) & 0xF0;
 8000f1c:	6878      	ldr	r0, [r7, #4]
 8000f1e:	f7ff ffec 	bl	8000efa <AX_Radio_Get_Pwrmode>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f023 030f 	bic.w	r3, r3, #15
 8000f28:	b2db      	uxtb	r3, r3
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <AX_Radio_Set_Registers_TXCW>:

uint8_t AX_Radio_Set_Registers_TXCW(SPI_HandleTypeDef * hspi)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b086      	sub	sp, #24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
	radio_write8(AX5043_REG_MODULATION, 0x08, hspi);
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	2108      	movs	r1, #8
 8000f40:	2010      	movs	r0, #16
 8000f42:	f7ff ff9c 	bl	8000e7e <radio_write8>
//	radio_write8(AX5043_REG_PINFUNCSYSCLK, 0x04, hspi); // This causes crosstalk with external inductor in V1 PCB
	radio_write8(AX5043_REG_TXPWRCOEFFB1, 0x0F, hspi);
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	210f      	movs	r1, #15
 8000f4a:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8000f4e:	f7ff ff96 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_TXPWRCOEFFB0, 0xFF, hspi);
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	21ff      	movs	r1, #255	; 0xff
 8000f56:	f240 106b 	movw	r0, #363	; 0x16b
 8000f5a:	f7ff ff90 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_XTALOSC, 0x03, hspi);
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	2103      	movs	r1, #3
 8000f62:	f44f 6071 	mov.w	r0, #3856	; 0xf10
 8000f66:	f7ff ff8a 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_XTALAMPL, 0x07, hspi);
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	2107      	movs	r1, #7
 8000f6e:	f640 7011 	movw	r0, #3857	; 0xf11
 8000f72:	f7ff ff84 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_XTALCAP, 0x08, hspi); // C_L = 12pF
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	2108      	movs	r1, #8
 8000f7a:	f44f 70c2 	mov.w	r0, #388	; 0x184
 8000f7e:	f7ff ff7e 	bl	8000e7e <radio_write8>

	radio_write8(AX5043_REG_FSKDEV2, 0x00, hspi);
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	2100      	movs	r1, #0
 8000f86:	f240 1061 	movw	r0, #353	; 0x161
 8000f8a:	f7ff ff78 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_FSKDEV1, 0x00, hspi);
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	2100      	movs	r1, #0
 8000f92:	f44f 70b1 	mov.w	r0, #354	; 0x162
 8000f96:	f7ff ff72 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_FSKDEV0, 0x00, hspi);
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	f240 1063 	movw	r0, #355	; 0x163
 8000fa2:	f7ff ff6c 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_TXRATE2, 0x00, hspi);
 8000fa6:	687a      	ldr	r2, [r7, #4]
 8000fa8:	2100      	movs	r1, #0
 8000faa:	f240 1065 	movw	r0, #357	; 0x165
 8000fae:	f7ff ff66 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_TXRATE1, 0x00, hspi);
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	f44f 70b3 	mov.w	r0, #358	; 0x166
 8000fba:	f7ff ff60 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_TXRATE0, 0x01, hspi);
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	f240 1067 	movw	r0, #359	; 0x167
 8000fc6:	f7ff ff5a 	bl	8000e7e <radio_write8>

	uint32_t freq = axradio_phy_chanfreq[0];
 8000fca:	4b48      	ldr	r3, [pc, #288]	; (80010ec <AX_Radio_Set_Registers_TXCW+0x1b8>)
 8000fcc:	613b      	str	r3, [r7, #16]
	radio_write8(AX5043_REG_FREQA0, freq, hspi);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	b2db      	uxtb	r3, r3
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	2037      	movs	r0, #55	; 0x37
 8000fd8:	f7ff ff51 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_FREQA1, (freq >> 8), hspi);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	0a1b      	lsrs	r3, r3, #8
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	2036      	movs	r0, #54	; 0x36
 8000fe8:	f7ff ff49 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_FREQA2, (freq >> 16), hspi);
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	0c1b      	lsrs	r3, r3, #16
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	2035      	movs	r0, #53	; 0x35
 8000ff8:	f7ff ff41 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_FREQA3, (freq >> 24), hspi);
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	0e1b      	lsrs	r3, r3, #24
 8001000:	b2db      	uxtb	r3, r3
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	4619      	mov	r1, r3
 8001006:	2034      	movs	r0, #52	; 0x34
 8001008:	f7ff ff39 	bl	8000e7e <radio_write8>

	radio_write8(AX5043_REG_0xF00, 0x0F, hspi);
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	210f      	movs	r1, #15
 8001010:	f44f 6070 	mov.w	r0, #3840	; 0xf00
 8001014:	f7ff ff33 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_0xF0D, 0x03, hspi);
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	2103      	movs	r1, #3
 800101c:	f640 700d 	movw	r0, #3853	; 0xf0d
 8001020:	f7ff ff2d 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_0xF18, 0x06, hspi);
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	2106      	movs	r1, #6
 8001028:	f640 7018 	movw	r0, #3864	; 0xf18
 800102c:	f7ff ff27 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_0xF1C, 0x07, hspi);
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	2107      	movs	r1, #7
 8001034:	f640 701c 	movw	r0, #3868	; 0xf1c
 8001038:	f7ff ff21 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_0xF35, 0x10, hspi);
 800103c:	687a      	ldr	r2, [r7, #4]
 800103e:	2110      	movs	r1, #16
 8001040:	f640 7035 	movw	r0, #3893	; 0xf35
 8001044:	f7ff ff1b 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_0xF44, 0x24, hspi);
 8001048:	687a      	ldr	r2, [r7, #4]
 800104a:	2124      	movs	r1, #36	; 0x24
 800104c:	f640 7044 	movw	r0, #3908	; 0xf44
 8001050:	f7ff ff15 	bl	8000e7e <radio_write8>

	// NOTE: There is currently an intermittent bug where the PLL will lose its
	// lock but find it again @ 433 MHz. This may be remediated by updating the
	// FIFO every now and probably setting up encoding and framing properly.
	// ------- Crispin starts filling the FIFO here -------
	uint8_t fakePreamble = 0x55;
 8001054:	2355      	movs	r3, #85	; 0x55
 8001056:	73fb      	strb	r3, [r7, #15]
	uint8_t numBytesToSend = 100;
 8001058:	2364      	movs	r3, #100	; 0x64
 800105a:	73bb      	strb	r3, [r7, #14]
	uint8_t fakePayload = 0xAA;
 800105c:	23aa      	movs	r3, #170	; 0xaa
 800105e:	737b      	strb	r3, [r7, #13]

	/* Radio Control for Sending Packets*/
	radio_write8(AX5043_REG_FIFOSTAT, 0x03, hspi); // clear FIFO
 8001060:	687a      	ldr	r2, [r7, #4]
 8001062:	2103      	movs	r1, #3
 8001064:	2028      	movs	r0, #40	; 0x28
 8001066:	f7ff ff0a 	bl	8000e7e <radio_write8>

	// preamble
	radio_write8(AX5043_REG_FIFODATA, 0x62, hspi); // REPEATDATA command
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	2162      	movs	r1, #98	; 0x62
 800106e:	2029      	movs	r0, #41	; 0x29
 8001070:	f7ff ff05 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, 0x18, hspi); // bypass framing & encoding, suppress CRC, no pkt start/end
 8001074:	687a      	ldr	r2, [r7, #4]
 8001076:	2118      	movs	r1, #24
 8001078:	2029      	movs	r0, #41	; 0x29
 800107a:	f7ff ff00 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, 0x14, hspi); // repeat byte given in next command 20 times
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	2114      	movs	r1, #20
 8001082:	2029      	movs	r0, #41	; 0x29
 8001084:	f7ff fefb 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, fakePreamble, hspi); // byte to be sent 10 times
 8001088:	7bfb      	ldrb	r3, [r7, #15]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	4619      	mov	r1, r3
 800108e:	2029      	movs	r0, #41	; 0x29
 8001090:	f7ff fef5 	bl	8000e7e <radio_write8>

	// frame
	radio_write8(AX5043_REG_FIFODATA, 0xE1, hspi); // TX Data command
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	21e1      	movs	r1, #225	; 0xe1
 8001098:	2029      	movs	r0, #41	; 0x29
 800109a:	f7ff fef0 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, (numBytesToSend+1), hspi); // 100 bytes +1 for control field byte
 800109e:	7bbb      	ldrb	r3, [r7, #14]
 80010a0:	3301      	adds	r3, #1
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	687a      	ldr	r2, [r7, #4]
 80010a6:	4619      	mov	r1, r3
 80010a8:	2029      	movs	r0, #41	; 0x29
 80010aa:	f7ff fee8 	bl	8000e7e <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, 0x03, hspi); // pkt start/end used here
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	2103      	movs	r1, #3
 80010b2:	2029      	movs	r0, #41	; 0x29
 80010b4:	f7ff fee3 	bl	8000e7e <radio_write8>
	for (uint8_t i = 0; i < numBytesToSend; i++)
 80010b8:	2300      	movs	r3, #0
 80010ba:	75fb      	strb	r3, [r7, #23]
 80010bc:	e008      	b.n	80010d0 <AX_Radio_Set_Registers_TXCW+0x19c>
		radio_write8(AX5043_REG_FIFODATA, fakePayload, hspi);
 80010be:	7b7b      	ldrb	r3, [r7, #13]
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4619      	mov	r1, r3
 80010c4:	2029      	movs	r0, #41	; 0x29
 80010c6:	f7ff feda 	bl	8000e7e <radio_write8>
	for (uint8_t i = 0; i < numBytesToSend; i++)
 80010ca:	7dfb      	ldrb	r3, [r7, #23]
 80010cc:	3301      	adds	r3, #1
 80010ce:	75fb      	strb	r3, [r7, #23]
 80010d0:	7dfa      	ldrb	r2, [r7, #23]
 80010d2:	7bbb      	ldrb	r3, [r7, #14]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d3f2      	bcc.n	80010be <AX_Radio_Set_Registers_TXCW+0x18a>

	// commit
	radio_write8(AX5043_REG_FIFOSTAT, 0x04, hspi);
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	2104      	movs	r1, #4
 80010dc:	2028      	movs	r0, #40	; 0x28
 80010de:	f7ff fece 	bl	8000e7e <radio_write8>
	// ------- Crispin stopped messing with the FIFO here -------

	return AXRADIO_ERR_NOERROR;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	1b100000 	.word	0x1b100000

080010f0 <AX_Radio_Init>:
 */

#include "ax5243_api.h"

uint8_t AX_Radio_Init(SPI_HandleTypeDef * hspi)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
	//AX_Radio_Reset(hspi);
	AX_Radio_Set_Registers_TXCW(hspi);
 80010f8:	6878      	ldr	r0, [r7, #4]
 80010fa:	f7ff ff1b 	bl	8000f34 <AX_Radio_Set_Registers_TXCW>
	HAL_Delay(1000);
 80010fe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001102:	f000 f8ed 	bl	80012e0 <HAL_Delay>
	if (AX_Radio_Range_PLL(hspi)) {
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f000 f83d 	bl	8001186 <AX_Radio_Range_PLL>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <AX_Radio_Init+0x26>
		return AXRADIO_ERR_RANGING;
 8001112:	2306      	movs	r3, #6
 8001114:	e004      	b.n	8001120 <AX_Radio_Init+0x30>
	}
	HAL_Delay(3000);
 8001116:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800111a:	f000 f8e1 	bl	80012e0 <HAL_Delay>
	return 0;
 800111e:	2300      	movs	r3, #0
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <AX_Radio_Get_Status>:


uint16_t AX_Radio_Get_Status(SPI_HandleTypeDef * hspi)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af02      	add	r7, sp, #8
 800112e:	6078      	str	r0, [r7, #4]
	uint16_t addr, status;
	uint8_t data;
	addr = status = data = 0x00;
 8001130:	2300      	movs	r3, #0
 8001132:	72fb      	strb	r3, [r7, #11]
 8001134:	2300      	movs	r3, #0
 8001136:	81bb      	strh	r3, [r7, #12]
 8001138:	89bb      	ldrh	r3, [r7, #12]
 800113a:	81fb      	strh	r3, [r7, #14]

	return (AX_Radio_RW_Long_Address(&addr, &status, &data, hspi, 0xff, 0x0)) ? 0xffff : status;
 800113c:	f107 020b 	add.w	r2, r7, #11
 8001140:	f107 010c 	add.w	r1, r7, #12
 8001144:	f107 000e 	add.w	r0, r7, #14
 8001148:	2300      	movs	r3, #0
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	23ff      	movs	r3, #255	; 0xff
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f7ff fe1c 	bl	8000d8e <AX_Radio_RW_Long_Address>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <AX_Radio_Get_Status+0x38>
 800115c:	89bb      	ldrh	r3, [r7, #12]
 800115e:	e001      	b.n	8001164 <AX_Radio_Get_Status+0x3c>
 8001160:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <AX_Radio_Check_PLL>:

uint8_t AX_Radio_Check_PLL(SPI_HandleTypeDef * hspi)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
	return radio_read8(AX5043_REG_PLLRANGINGA, hspi);
 8001174:	6879      	ldr	r1, [r7, #4]
 8001176:	2033      	movs	r0, #51	; 0x33
 8001178:	f7ff fea1 	bl	8000ebe <radio_read8>
 800117c:	4603      	mov	r3, r0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <AX_Radio_Range_PLL>:
{
	return AX_Radio_Check_PLL(hspi) & 0x40;
}

uint8_t AX_Radio_Range_PLL(SPI_HandleTypeDef * hspi)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
	uint8_t pll_contents;
	radio_write8(AX5043_REG_PLLRANGINGA, 0x18, hspi);
 800118e:	687a      	ldr	r2, [r7, #4]
 8001190:	2118      	movs	r1, #24
 8001192:	2033      	movs	r0, #51	; 0x33
 8001194:	f7ff fe73 	bl	8000e7e <radio_write8>
	do
	{
		pll_contents = radio_read8(AX5043_REG_PLLRANGINGA, hspi);
 8001198:	6879      	ldr	r1, [r7, #4]
 800119a:	2033      	movs	r0, #51	; 0x33
 800119c:	f7ff fe8f 	bl	8000ebe <radio_read8>
 80011a0:	4603      	mov	r3, r0
 80011a2:	73fb      	strb	r3, [r7, #15]
		if(pll_contents & 0x20) {
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	f003 0320 	and.w	r3, r3, #32
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <AX_Radio_Range_PLL+0x2c>
			return pll_contents;	//Range error
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	e016      	b.n	80011e0 <AX_Radio_Range_PLL+0x5a>
		}
	}
	while (pll_contents & 0x10);
 80011b2:	7bfb      	ldrb	r3, [r7, #15]
 80011b4:	f003 0310 	and.w	r3, r3, #16
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1ed      	bne.n	8001198 <AX_Radio_Range_PLL+0x12>
	HAL_Delay(100);
 80011bc:	2064      	movs	r0, #100	; 0x64
 80011be:	f000 f88f 	bl	80012e0 <HAL_Delay>
	if(pll_contents & 0x40) {
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <AX_Radio_Range_PLL+0x4a>
		return 0;				//Range lock
 80011cc:	2300      	movs	r3, #0
 80011ce:	e007      	b.n	80011e0 <AX_Radio_Range_PLL+0x5a>
	} else if (pll_contents & 0x20) {
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	f003 0320 	and.w	r3, r3, #32
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <AX_Radio_Range_PLL+0x58>
		return pll_contents;	//Range error
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	e000      	b.n	80011e0 <AX_Radio_Range_PLL+0x5a>
	}
	else return 0; //Ideally this should be dead code... Make error?
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ee:	2300      	movs	r3, #0
 80011f0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_Init+0x3c>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_Init+0x3c>)
 80011f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fe:	2003      	movs	r0, #3
 8001200:	f000 f944 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001204:	2000      	movs	r0, #0
 8001206:	f000 f80f 	bl	8001228 <HAL_InitTick>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	e001      	b.n	800121a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001216:	f7ff fba5 	bl	8000964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800121a:	79fb      	ldrb	r3, [r7, #7]
}
 800121c:	4618      	mov	r0, r3
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40022000 	.word	0x40022000

08001228 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001230:	2300      	movs	r3, #0
 8001232:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001234:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_InitTick+0x6c>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d023      	beq.n	8001284 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800123c:	4b16      	ldr	r3, [pc, #88]	; (8001298 <HAL_InitTick+0x70>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	4b14      	ldr	r3, [pc, #80]	; (8001294 <HAL_InitTick+0x6c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	fbb3 f3f1 	udiv	r3, r3, r1
 800124e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001252:	4618      	mov	r0, r3
 8001254:	f000 f941 	bl	80014da <HAL_SYSTICK_Config>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10f      	bne.n	800127e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d809      	bhi.n	8001278 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001264:	2200      	movs	r2, #0
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f000 f919 	bl	80014a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <HAL_InitTick+0x74>)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6013      	str	r3, [r2, #0]
 8001276:	e007      	b.n	8001288 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	73fb      	strb	r3, [r7, #15]
 800127c:	e004      	b.n	8001288 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	73fb      	strb	r3, [r7, #15]
 8001282:	e001      	b.n	8001288 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
}
 800128a:	4618      	mov	r0, r3
 800128c:	3710      	adds	r7, #16
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	20000000 	.word	0x20000000
 800129c:	20000004 	.word	0x20000004

080012a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x20>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	461a      	mov	r2, r3
 80012aa:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <HAL_IncTick+0x24>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4413      	add	r3, r2
 80012b0:	4a04      	ldr	r2, [pc, #16]	; (80012c4 <HAL_IncTick+0x24>)
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000178 	.word	0x20000178

080012c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return uwTick;
 80012cc:	4b03      	ldr	r3, [pc, #12]	; (80012dc <HAL_GetTick+0x14>)
 80012ce:	681b      	ldr	r3, [r3, #0]
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	46bd      	mov	sp, r7
 80012d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	20000178 	.word	0x20000178

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff ffee 	bl	80012c8 <HAL_GetTick>
 80012ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f8:	d005      	beq.n	8001306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_Delay+0x44>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001306:	bf00      	nop
 8001308:	f7ff ffde 	bl	80012c8 <HAL_GetTick>
 800130c:	4602      	mov	r2, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d8f7      	bhi.n	8001308 <HAL_Delay+0x28>
  {
  }
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff8e 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff47 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff5c 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff8e 	bl	80013e0 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5d 	bl	800138c <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffb0 	bl	8001448 <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b087      	sub	sp, #28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001502:	e14e      	b.n	80017a2 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	2101      	movs	r1, #1
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	fa01 f303 	lsl.w	r3, r1, r3
 8001510:	4013      	ands	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8140 	beq.w	800179c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	2b01      	cmp	r3, #1
 8001526:	d005      	beq.n	8001534 <HAL_GPIO_Init+0x40>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 0303 	and.w	r3, r3, #3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d130      	bne.n	8001596 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800153a:	697b      	ldr	r3, [r7, #20]
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	2203      	movs	r2, #3
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	68da      	ldr	r2, [r3, #12]
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	4313      	orrs	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800156a:	2201      	movs	r2, #1
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	43db      	mvns	r3, r3
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	4013      	ands	r3, r2
 8001578:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	091b      	lsrs	r3, r3, #4
 8001580:	f003 0201 	and.w	r2, r3, #1
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4313      	orrs	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0303 	and.w	r3, r3, #3
 800159e:	2b03      	cmp	r3, #3
 80015a0:	d017      	beq.n	80015d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	2203      	movs	r2, #3
 80015ae:	fa02 f303 	lsl.w	r3, r2, r3
 80015b2:	43db      	mvns	r3, r3
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	4013      	ands	r3, r2
 80015b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	689a      	ldr	r2, [r3, #8]
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	693a      	ldr	r2, [r7, #16]
 80015d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d123      	bne.n	8001626 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	08da      	lsrs	r2, r3, #3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3208      	adds	r2, #8
 80015e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	f003 0307 	and.w	r3, r3, #7
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	220f      	movs	r2, #15
 80015f6:	fa02 f303 	lsl.w	r3, r2, r3
 80015fa:	43db      	mvns	r3, r3
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	691a      	ldr	r2, [r3, #16]
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	08da      	lsrs	r2, r3, #3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3208      	adds	r2, #8
 8001620:	6939      	ldr	r1, [r7, #16]
 8001622:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	2203      	movs	r2, #3
 8001632:	fa02 f303 	lsl.w	r3, r2, r3
 8001636:	43db      	mvns	r3, r3
 8001638:	693a      	ldr	r2, [r7, #16]
 800163a:	4013      	ands	r3, r2
 800163c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	f003 0203 	and.w	r2, r3, #3
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 809a 	beq.w	800179c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001668:	4b55      	ldr	r3, [pc, #340]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 800166a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166c:	4a54      	ldr	r2, [pc, #336]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 800166e:	f043 0301 	orr.w	r3, r3, #1
 8001672:	6613      	str	r3, [r2, #96]	; 0x60
 8001674:	4b52      	ldr	r3, [pc, #328]	; (80017c0 <HAL_GPIO_Init+0x2cc>)
 8001676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	60bb      	str	r3, [r7, #8]
 800167e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001680:	4a50      	ldr	r2, [pc, #320]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	089b      	lsrs	r3, r3, #2
 8001686:	3302      	adds	r3, #2
 8001688:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800168c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f003 0303 	and.w	r3, r3, #3
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	220f      	movs	r2, #15
 8001698:	fa02 f303 	lsl.w	r3, r2, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80016aa:	d013      	beq.n	80016d4 <HAL_GPIO_Init+0x1e0>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4a46      	ldr	r2, [pc, #280]	; (80017c8 <HAL_GPIO_Init+0x2d4>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d00d      	beq.n	80016d0 <HAL_GPIO_Init+0x1dc>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	4a45      	ldr	r2, [pc, #276]	; (80017cc <HAL_GPIO_Init+0x2d8>)
 80016b8:	4293      	cmp	r3, r2
 80016ba:	d007      	beq.n	80016cc <HAL_GPIO_Init+0x1d8>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a44      	ldr	r2, [pc, #272]	; (80017d0 <HAL_GPIO_Init+0x2dc>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d101      	bne.n	80016c8 <HAL_GPIO_Init+0x1d4>
 80016c4:	2303      	movs	r3, #3
 80016c6:	e006      	b.n	80016d6 <HAL_GPIO_Init+0x1e2>
 80016c8:	2307      	movs	r3, #7
 80016ca:	e004      	b.n	80016d6 <HAL_GPIO_Init+0x1e2>
 80016cc:	2302      	movs	r3, #2
 80016ce:	e002      	b.n	80016d6 <HAL_GPIO_Init+0x1e2>
 80016d0:	2301      	movs	r3, #1
 80016d2:	e000      	b.n	80016d6 <HAL_GPIO_Init+0x1e2>
 80016d4:	2300      	movs	r3, #0
 80016d6:	697a      	ldr	r2, [r7, #20]
 80016d8:	f002 0203 	and.w	r2, r2, #3
 80016dc:	0092      	lsls	r2, r2, #2
 80016de:	4093      	lsls	r3, r2
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	4313      	orrs	r3, r2
 80016e4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016e6:	4937      	ldr	r1, [pc, #220]	; (80017c4 <HAL_GPIO_Init+0x2d0>)
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	089b      	lsrs	r3, r3, #2
 80016ec:	3302      	adds	r3, #2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016f4:	4b37      	ldr	r3, [pc, #220]	; (80017d4 <HAL_GPIO_Init+0x2e0>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4313      	orrs	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001718:	4a2e      	ldr	r2, [pc, #184]	; (80017d4 <HAL_GPIO_Init+0x2e0>)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800171e:	4b2d      	ldr	r3, [pc, #180]	; (80017d4 <HAL_GPIO_Init+0x2e0>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001742:	4a24      	ldr	r2, [pc, #144]	; (80017d4 <HAL_GPIO_Init+0x2e0>)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001748:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_GPIO_Init+0x2e0>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43db      	mvns	r3, r3
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800176c:	4a19      	ldr	r2, [pc, #100]	; (80017d4 <HAL_GPIO_Init+0x2e0>)
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001772:	4b18      	ldr	r3, [pc, #96]	; (80017d4 <HAL_GPIO_Init+0x2e0>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	4313      	orrs	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001796:	4a0f      	ldr	r2, [pc, #60]	; (80017d4 <HAL_GPIO_Init+0x2e0>)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	3301      	adds	r3, #1
 80017a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	fa22 f303 	lsr.w	r3, r2, r3
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f47f aea9 	bne.w	8001504 <HAL_GPIO_Init+0x10>
  }
}
 80017b2:	bf00      	nop
 80017b4:	bf00      	nop
 80017b6:	371c      	adds	r7, #28
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010000 	.word	0x40010000
 80017c8:	48000400 	.word	0x48000400
 80017cc:	48000800 	.word	0x48000800
 80017d0:	48000c00 	.word	0x48000c00
 80017d4:	40010400 	.word	0x40010400

080017d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017f6:	887a      	ldrh	r2, [r7, #2]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800180c:	4b04      	ldr	r3, [pc, #16]	; (8001820 <HAL_PWREx_GetVoltageRange+0x18>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	40007000 	.word	0x40007000

08001824 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001832:	d130      	bne.n	8001896 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001834:	4b23      	ldr	r3, [pc, #140]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800183c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001840:	d038      	beq.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001842:	4b20      	ldr	r3, [pc, #128]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800184a:	4a1e      	ldr	r2, [pc, #120]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800184c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001850:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2232      	movs	r2, #50	; 0x32
 8001858:	fb02 f303 	mul.w	r3, r2, r3
 800185c:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	0c9b      	lsrs	r3, r3, #18
 8001864:	3301      	adds	r3, #1
 8001866:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001868:	e002      	b.n	8001870 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	3b01      	subs	r3, #1
 800186e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001872:	695b      	ldr	r3, [r3, #20]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800187c:	d102      	bne.n	8001884 <HAL_PWREx_ControlVoltageScaling+0x60>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d1f2      	bne.n	800186a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001886:	695b      	ldr	r3, [r3, #20]
 8001888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001890:	d110      	bne.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e00f      	b.n	80018b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800189e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018a2:	d007      	beq.n	80018b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018ac:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3714      	adds	r7, #20
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	40007000 	.word	0x40007000
 80018c8:	20000000 	.word	0x20000000
 80018cc:	431bde83 	.word	0x431bde83

080018d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d102      	bne.n	80018e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	f000 bc4f 	b.w	8002182 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018e4:	4b97      	ldr	r3, [pc, #604]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f003 030c 	and.w	r3, r3, #12
 80018ec:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018ee:	4b95      	ldr	r3, [pc, #596]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b00      	cmp	r3, #0
 8001902:	f000 80e6 	beq.w	8001ad2 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001906:	6a3b      	ldr	r3, [r7, #32]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d007      	beq.n	800191c <HAL_RCC_OscConfig+0x4c>
 800190c:	6a3b      	ldr	r3, [r7, #32]
 800190e:	2b0c      	cmp	r3, #12
 8001910:	f040 808d 	bne.w	8001a2e <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	2b01      	cmp	r3, #1
 8001918:	f040 8089 	bne.w	8001a2e <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800191c:	4b89      	ldr	r3, [pc, #548]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0302 	and.w	r3, r3, #2
 8001924:	2b00      	cmp	r3, #0
 8001926:	d006      	beq.n	8001936 <HAL_RCC_OscConfig+0x66>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d102      	bne.n	8001936 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	f000 bc26 	b.w	8002182 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800193a:	4b82      	ldr	r3, [pc, #520]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0308 	and.w	r3, r3, #8
 8001942:	2b00      	cmp	r3, #0
 8001944:	d004      	beq.n	8001950 <HAL_RCC_OscConfig+0x80>
 8001946:	4b7f      	ldr	r3, [pc, #508]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800194e:	e005      	b.n	800195c <HAL_RCC_OscConfig+0x8c>
 8001950:	4b7c      	ldr	r3, [pc, #496]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001952:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800195c:	4293      	cmp	r3, r2
 800195e:	d224      	bcs.n	80019aa <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fdd9 	bl	800251c <RCC_SetFlashLatencyFromMSIRange>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d002      	beq.n	8001976 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	f000 bc06 	b.w	8002182 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001976:	4b73      	ldr	r3, [pc, #460]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a72      	ldr	r2, [pc, #456]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 800197c:	f043 0308 	orr.w	r3, r3, #8
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b70      	ldr	r3, [pc, #448]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198e:	496d      	ldr	r1, [pc, #436]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001990:	4313      	orrs	r3, r2
 8001992:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001994:	4b6b      	ldr	r3, [pc, #428]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6a1b      	ldr	r3, [r3, #32]
 80019a0:	021b      	lsls	r3, r3, #8
 80019a2:	4968      	ldr	r1, [pc, #416]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
 80019a8:	e025      	b.n	80019f6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019aa:	4b66      	ldr	r3, [pc, #408]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a65      	ldr	r2, [pc, #404]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 80019b0:	f043 0308 	orr.w	r3, r3, #8
 80019b4:	6013      	str	r3, [r2, #0]
 80019b6:	4b63      	ldr	r3, [pc, #396]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c2:	4960      	ldr	r1, [pc, #384]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c8:	4b5e      	ldr	r3, [pc, #376]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	021b      	lsls	r3, r3, #8
 80019d6:	495b      	ldr	r1, [pc, #364]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 80019d8:	4313      	orrs	r3, r2
 80019da:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d109      	bne.n	80019f6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 fd98 	bl	800251c <RCC_SetFlashLatencyFromMSIRange>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e3c5      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019f6:	f000 fccd 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b51      	ldr	r3, [pc, #324]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	091b      	lsrs	r3, r3, #4
 8001a02:	f003 030f 	and.w	r3, r3, #15
 8001a06:	4950      	ldr	r1, [pc, #320]	; (8001b48 <HAL_RCC_OscConfig+0x278>)
 8001a08:	5ccb      	ldrb	r3, [r1, r3]
 8001a0a:	f003 031f 	and.w	r3, r3, #31
 8001a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a12:	4a4e      	ldr	r2, [pc, #312]	; (8001b4c <HAL_RCC_OscConfig+0x27c>)
 8001a14:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a16:	4b4e      	ldr	r3, [pc, #312]	; (8001b50 <HAL_RCC_OscConfig+0x280>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff fc04 	bl	8001228 <HAL_InitTick>
 8001a20:	4603      	mov	r3, r0
 8001a22:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001a24:	7dfb      	ldrb	r3, [r7, #23]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d052      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001a2a:	7dfb      	ldrb	r3, [r7, #23]
 8001a2c:	e3a9      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69db      	ldr	r3, [r3, #28]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d032      	beq.n	8001a9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a36:	4b43      	ldr	r3, [pc, #268]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a42      	ldr	r2, [pc, #264]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a42:	f7ff fc41 	bl	80012c8 <HAL_GetTick>
 8001a46:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fc3d 	bl	80012c8 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e392      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a5c:	4b39      	ldr	r3, [pc, #228]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d0f0      	beq.n	8001a4a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a35      	ldr	r2, [pc, #212]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a6e:	f043 0308 	orr.w	r3, r3, #8
 8001a72:	6013      	str	r3, [r2, #0]
 8001a74:	4b33      	ldr	r3, [pc, #204]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a80:	4930      	ldr	r1, [pc, #192]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a86:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6a1b      	ldr	r3, [r3, #32]
 8001a92:	021b      	lsls	r3, r3, #8
 8001a94:	492b      	ldr	r1, [pc, #172]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a96:	4313      	orrs	r3, r2
 8001a98:	604b      	str	r3, [r1, #4]
 8001a9a:	e01a      	b.n	8001ad2 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a9c:	4b29      	ldr	r3, [pc, #164]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a28      	ldr	r2, [pc, #160]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001aa8:	f7ff fc0e 	bl	80012c8 <HAL_GetTick>
 8001aac:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aae:	e008      	b.n	8001ac2 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001ab0:	f7ff fc0a 	bl	80012c8 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e35f      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ac2:	4b20      	ldr	r3, [pc, #128]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d1f0      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x1e0>
 8001ace:	e000      	b.n	8001ad2 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ad0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d073      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d005      	beq.n	8001af0 <HAL_RCC_OscConfig+0x220>
 8001ae4:	6a3b      	ldr	r3, [r7, #32]
 8001ae6:	2b0c      	cmp	r3, #12
 8001ae8:	d10e      	bne.n	8001b08 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	2b03      	cmp	r3, #3
 8001aee:	d10b      	bne.n	8001b08 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d063      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x2f4>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d15f      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e33c      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b10:	d106      	bne.n	8001b20 <HAL_RCC_OscConfig+0x250>
 8001b12:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a0b      	ldr	r2, [pc, #44]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b1c:	6013      	str	r3, [r2, #0]
 8001b1e:	e025      	b.n	8001b6c <HAL_RCC_OscConfig+0x29c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b28:	d114      	bne.n	8001b54 <HAL_RCC_OscConfig+0x284>
 8001b2a:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a05      	ldr	r2, [pc, #20]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001b30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b34:	6013      	str	r3, [r2, #0]
 8001b36:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a02      	ldr	r2, [pc, #8]	; (8001b44 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b40:	6013      	str	r3, [r2, #0]
 8001b42:	e013      	b.n	8001b6c <HAL_RCC_OscConfig+0x29c>
 8001b44:	40021000 	.word	0x40021000
 8001b48:	08005170 	.word	0x08005170
 8001b4c:	20000000 	.word	0x20000000
 8001b50:	20000004 	.word	0x20000004
 8001b54:	4b8f      	ldr	r3, [pc, #572]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a8e      	ldr	r2, [pc, #568]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b8c      	ldr	r3, [pc, #560]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a8b      	ldr	r2, [pc, #556]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d013      	beq.n	8001b9c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b74:	f7ff fba8 	bl	80012c8 <HAL_GetTick>
 8001b78:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b7c:	f7ff fba4 	bl	80012c8 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e2f9      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b8e:	4b81      	ldr	r3, [pc, #516]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x2ac>
 8001b9a:	e014      	b.n	8001bc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fb94 	bl	80012c8 <HAL_GetTick>
 8001ba0:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff fb90 	bl	80012c8 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e2e5      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bb6:	4b77      	ldr	r3, [pc, #476]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x2d4>
 8001bc2:	e000      	b.n	8001bc6 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d060      	beq.n	8001c94 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d005      	beq.n	8001be4 <HAL_RCC_OscConfig+0x314>
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d119      	bne.n	8001c12 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d116      	bne.n	8001c12 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001be4:	4b6b      	ldr	r3, [pc, #428]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_RCC_OscConfig+0x32c>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e2c2      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bfc:	4b65      	ldr	r3, [pc, #404]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	061b      	lsls	r3, r3, #24
 8001c0a:	4962      	ldr	r1, [pc, #392]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c10:	e040      	b.n	8001c94 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d023      	beq.n	8001c62 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c1a:	4b5e      	ldr	r3, [pc, #376]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a5d      	ldr	r2, [pc, #372]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c26:	f7ff fb4f 	bl	80012c8 <HAL_GetTick>
 8001c2a:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c2e:	f7ff fb4b 	bl	80012c8 <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e2a0      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c40:	4b54      	ldr	r3, [pc, #336]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4c:	4b51      	ldr	r3, [pc, #324]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	061b      	lsls	r3, r3, #24
 8001c5a:	494e      	ldr	r1, [pc, #312]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	604b      	str	r3, [r1, #4]
 8001c60:	e018      	b.n	8001c94 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c62:	4b4c      	ldr	r3, [pc, #304]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a4b      	ldr	r2, [pc, #300]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6e:	f7ff fb2b 	bl	80012c8 <HAL_GetTick>
 8001c72:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c76:	f7ff fb27 	bl	80012c8 <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e27c      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c88:	4b42      	ldr	r3, [pc, #264]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f0      	bne.n	8001c76 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 8082 	beq.w	8001da6 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	695b      	ldr	r3, [r3, #20]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d05f      	beq.n	8001d6a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001caa:	4b3a      	ldr	r3, [pc, #232]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb0:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	f003 0310 	and.w	r3, r3, #16
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d037      	beq.n	8001d30 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	f003 0302 	and.w	r3, r3, #2
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d006      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d101      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e254      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f003 0301 	and.w	r3, r3, #1
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01b      	beq.n	8001d1a <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce8:	4a2a      	ldr	r2, [pc, #168]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cf2:	f7ff fae9 	bl	80012c8 <HAL_GetTick>
 8001cf6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cf8:	e008      	b.n	8001d0c <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfa:	f7ff fae5 	bl	80012c8 <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	69bb      	ldr	r3, [r7, #24]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b11      	cmp	r3, #17
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e23a      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d0c:	4b21      	ldr	r3, [pc, #132]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d1ef      	bne.n	8001cfa <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001d1a:	4b1e      	ldr	r3, [pc, #120]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d20:	f023 0210 	bic.w	r2, r3, #16
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	491a      	ldr	r1, [pc, #104]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d30:	4b18      	ldr	r3, [pc, #96]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d36:	4a17      	ldr	r2, [pc, #92]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff fac2 	bl	80012c8 <HAL_GetTick>
 8001d44:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d48:	f7ff fabe 	bl	80012c8 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b11      	cmp	r3, #17
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e213      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0ef      	beq.n	8001d48 <HAL_RCC_OscConfig+0x478>
 8001d68:	e01d      	b.n	8001da6 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d6a:	4b0a      	ldr	r3, [pc, #40]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d70:	4a08      	ldr	r2, [pc, #32]	; (8001d94 <HAL_RCC_OscConfig+0x4c4>)
 8001d72:	f023 0301 	bic.w	r3, r3, #1
 8001d76:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d7a:	f7ff faa5 	bl	80012c8 <HAL_GetTick>
 8001d7e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d80:	e00a      	b.n	8001d98 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d82:	f7ff faa1 	bl	80012c8 <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b11      	cmp	r3, #17
 8001d8e:	d903      	bls.n	8001d98 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e1f6      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
 8001d94:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d98:	4ba9      	ldr	r3, [pc, #676]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9e:	f003 0302 	and.w	r3, r3, #2
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d1ed      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80bd 	beq.w	8001f2e <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001db4:	2300      	movs	r3, #0
 8001db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001dba:	4ba1      	ldr	r3, [pc, #644]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10e      	bne.n	8001de4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dc6:	4b9e      	ldr	r3, [pc, #632]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	4a9d      	ldr	r2, [pc, #628]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001dd2:	4b9b      	ldr	r3, [pc, #620]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dde:	2301      	movs	r3, #1
 8001de0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de4:	4b97      	ldr	r3, [pc, #604]	; (8002044 <HAL_RCC_OscConfig+0x774>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d118      	bne.n	8001e22 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001df0:	4b94      	ldr	r3, [pc, #592]	; (8002044 <HAL_RCC_OscConfig+0x774>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a93      	ldr	r2, [pc, #588]	; (8002044 <HAL_RCC_OscConfig+0x774>)
 8001df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dfc:	f7ff fa64 	bl	80012c8 <HAL_GetTick>
 8001e00:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e04:	f7ff fa60 	bl	80012c8 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e1b5      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e16:	4b8b      	ldr	r3, [pc, #556]	; (8002044 <HAL_RCC_OscConfig+0x774>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f0      	beq.n	8001e04 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d02c      	beq.n	8001e88 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 8001e2e:	4b84      	ldr	r3, [pc, #528]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e34:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e40:	497f      	ldr	r1, [pc, #508]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d010      	beq.n	8001e76 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e54:	4b7a      	ldr	r3, [pc, #488]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	4a79      	ldr	r2, [pc, #484]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e64:	4b76      	ldr	r3, [pc, #472]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e6a:	4a75      	ldr	r2, [pc, #468]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e74:	e018      	b.n	8001ea8 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e76:	4b72      	ldr	r3, [pc, #456]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7c:	4a70      	ldr	r2, [pc, #448]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e86:	e00f      	b.n	8001ea8 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001e88:	4b6d      	ldr	r3, [pc, #436]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e8e:	4a6c      	ldr	r2, [pc, #432]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001e98:	4b69      	ldr	r3, [pc, #420]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	4a68      	ldr	r2, [pc, #416]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001ea0:	f023 0304 	bic.w	r3, r3, #4
 8001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	689b      	ldr	r3, [r3, #8]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d016      	beq.n	8001ede <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb0:	f7ff fa0a 	bl	80012c8 <HAL_GetTick>
 8001eb4:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb6:	e00a      	b.n	8001ece <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb8:	f7ff fa06 	bl	80012c8 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e159      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ece:	4b5c      	ldr	r3, [pc, #368]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ed      	beq.n	8001eb8 <HAL_RCC_OscConfig+0x5e8>
 8001edc:	e01d      	b.n	8001f1a <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ede:	f7ff f9f3 	bl	80012c8 <HAL_GetTick>
 8001ee2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee4:	e00a      	b.n	8001efc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ee6:	f7ff f9ef 	bl	80012c8 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	69bb      	ldr	r3, [r7, #24]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e142      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ed      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8001f0a:	4b4d      	ldr	r3, [pc, #308]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f10:	4a4b      	ldr	r2, [pc, #300]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d105      	bne.n	8001f2e <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f22:	4b47      	ldr	r3, [pc, #284]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f26:	4a46      	ldr	r2, [pc, #280]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0320 	and.w	r3, r3, #32
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d03c      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d01c      	beq.n	8001f7c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f42:	4b3f      	ldr	r3, [pc, #252]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001f44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f48:	4a3d      	ldr	r2, [pc, #244]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001f4a:	f043 0301 	orr.w	r3, r3, #1
 8001f4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f52:	f7ff f9b9 	bl	80012c8 <HAL_GetTick>
 8001f56:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f5a:	f7ff f9b5 	bl	80012c8 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e10a      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f6c:	4b34      	ldr	r3, [pc, #208]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001f6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0ef      	beq.n	8001f5a <HAL_RCC_OscConfig+0x68a>
 8001f7a:	e01b      	b.n	8001fb4 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f7c:	4b30      	ldr	r3, [pc, #192]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001f7e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f82:	4a2f      	ldr	r2, [pc, #188]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8c:	f7ff f99c 	bl	80012c8 <HAL_GetTick>
 8001f90:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f94:	f7ff f998 	bl	80012c8 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e0ed      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001fa6:	4b26      	ldr	r3, [pc, #152]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001fa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1ef      	bne.n	8001f94 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f000 80e1 	beq.w	8002180 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	f040 80b5 	bne.w	8002132 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f003 0203 	and.w	r2, r3, #3
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d124      	bne.n	8002026 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d11b      	bne.n	8002026 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ff8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d113      	bne.n	8002026 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002008:	085b      	lsrs	r3, r3, #1
 800200a:	3b01      	subs	r3, #1
 800200c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800200e:	429a      	cmp	r2, r3
 8002010:	d109      	bne.n	8002026 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201c:	085b      	lsrs	r3, r3, #1
 800201e:	3b01      	subs	r3, #1
 8002020:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002022:	429a      	cmp	r2, r3
 8002024:	d05f      	beq.n	80020e6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	2b0c      	cmp	r3, #12
 800202a:	d05a      	beq.n	80020e2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800202c:	4b04      	ldr	r3, [pc, #16]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a03      	ldr	r2, [pc, #12]	; (8002040 <HAL_RCC_OscConfig+0x770>)
 8002032:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002036:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002038:	f7ff f946 	bl	80012c8 <HAL_GetTick>
 800203c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800203e:	e00c      	b.n	800205a <HAL_RCC_OscConfig+0x78a>
 8002040:	40021000 	.word	0x40021000
 8002044:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff f93e 	bl	80012c8 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e093      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205a:	4b4c      	ldr	r3, [pc, #304]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002066:	4b49      	ldr	r3, [pc, #292]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 8002068:	68da      	ldr	r2, [r3, #12]
 800206a:	4b49      	ldr	r3, [pc, #292]	; (8002190 <HAL_RCC_OscConfig+0x8c0>)
 800206c:	4013      	ands	r3, r2
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002076:	3a01      	subs	r2, #1
 8002078:	0112      	lsls	r2, r2, #4
 800207a:	4311      	orrs	r1, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002080:	0212      	lsls	r2, r2, #8
 8002082:	4311      	orrs	r1, r2
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002088:	0852      	lsrs	r2, r2, #1
 800208a:	3a01      	subs	r2, #1
 800208c:	0552      	lsls	r2, r2, #21
 800208e:	4311      	orrs	r1, r2
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002094:	0852      	lsrs	r2, r2, #1
 8002096:	3a01      	subs	r2, #1
 8002098:	0652      	lsls	r2, r2, #25
 800209a:	430a      	orrs	r2, r1
 800209c:	493b      	ldr	r1, [pc, #236]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020a2:	4b3a      	ldr	r3, [pc, #232]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a39      	ldr	r2, [pc, #228]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 80020a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ac:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020ae:	4b37      	ldr	r3, [pc, #220]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 80020b0:	68db      	ldr	r3, [r3, #12]
 80020b2:	4a36      	ldr	r2, [pc, #216]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 80020b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020b8:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020ba:	f7ff f905 	bl	80012c8 <HAL_GetTick>
 80020be:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c2:	f7ff f901 	bl	80012c8 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e056      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020d4:	4b2d      	ldr	r3, [pc, #180]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d0f0      	beq.n	80020c2 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020e0:	e04e      	b.n	8002180 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e04d      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e6:	4b29      	ldr	r3, [pc, #164]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d146      	bne.n	8002180 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80020f2:	4b26      	ldr	r3, [pc, #152]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a25      	ldr	r2, [pc, #148]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 80020f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020fc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020fe:	4b23      	ldr	r3, [pc, #140]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 8002100:	68db      	ldr	r3, [r3, #12]
 8002102:	4a22      	ldr	r2, [pc, #136]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 8002104:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002108:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800210a:	f7ff f8dd 	bl	80012c8 <HAL_GetTick>
 800210e:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002112:	f7ff f8d9 	bl	80012c8 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e02e      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x842>
 8002130:	e026      	b.n	8002180 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	2b0c      	cmp	r3, #12
 8002136:	d021      	beq.n	800217c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a13      	ldr	r2, [pc, #76]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 800213e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7ff f8c0 	bl	80012c8 <HAL_GetTick>
 8002148:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214c:	f7ff f8bc 	bl	80012c8 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e011      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f0      	bne.n	800214c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	4a07      	ldr	r2, [pc, #28]	; (800218c <HAL_RCC_OscConfig+0x8bc>)
 8002170:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002174:	f023 0303 	bic.w	r3, r3, #3
 8002178:	60d3      	str	r3, [r2, #12]
 800217a:	e001      	b.n	8002180 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e000      	b.n	8002182 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3728      	adds	r7, #40	; 0x28
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	40021000 	.word	0x40021000
 8002190:	f99f808c 	.word	0xf99f808c

08002194 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d101      	bne.n	80021a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e0e7      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021a8:	4b75      	ldr	r3, [pc, #468]	; (8002380 <HAL_RCC_ClockConfig+0x1ec>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	683a      	ldr	r2, [r7, #0]
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d910      	bls.n	80021d8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b6:	4b72      	ldr	r3, [pc, #456]	; (8002380 <HAL_RCC_ClockConfig+0x1ec>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f023 0207 	bic.w	r2, r3, #7
 80021be:	4970      	ldr	r1, [pc, #448]	; (8002380 <HAL_RCC_ClockConfig+0x1ec>)
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c6:	4b6e      	ldr	r3, [pc, #440]	; (8002380 <HAL_RCC_ClockConfig+0x1ec>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	683a      	ldr	r2, [r7, #0]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d001      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e0cf      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0302 	and.w	r3, r3, #2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d010      	beq.n	8002206 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	4b66      	ldr	r3, [pc, #408]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d908      	bls.n	8002206 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021f4:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	4960      	ldr	r1, [pc, #384]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	2b00      	cmp	r3, #0
 8002210:	d04c      	beq.n	80022ac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b03      	cmp	r3, #3
 8002218:	d107      	bne.n	800222a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800221a:	4b5a      	ldr	r3, [pc, #360]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d121      	bne.n	800226a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e0a6      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b02      	cmp	r3, #2
 8002230:	d107      	bne.n	8002242 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002232:	4b54      	ldr	r3, [pc, #336]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d115      	bne.n	800226a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e09a      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d107      	bne.n	800225a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800224a:	4b4e      	ldr	r3, [pc, #312]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e08e      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225a:	4b4a      	ldr	r3, [pc, #296]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002262:	2b00      	cmp	r3, #0
 8002264:	d101      	bne.n	800226a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e086      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800226a:	4b46      	ldr	r3, [pc, #280]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 800226c:	689b      	ldr	r3, [r3, #8]
 800226e:	f023 0203 	bic.w	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	4943      	ldr	r1, [pc, #268]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 8002278:	4313      	orrs	r3, r2
 800227a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800227c:	f7ff f824 	bl	80012c8 <HAL_GetTick>
 8002280:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002282:	e00a      	b.n	800229a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002284:	f7ff f820 	bl	80012c8 <HAL_GetTick>
 8002288:	4602      	mov	r2, r0
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002292:	4293      	cmp	r3, r2
 8002294:	d901      	bls.n	800229a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002296:	2303      	movs	r3, #3
 8002298:	e06e      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800229a:	4b3a      	ldr	r3, [pc, #232]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 020c 	and.w	r2, r3, #12
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d1eb      	bne.n	8002284 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0302 	and.w	r3, r3, #2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d010      	beq.n	80022da <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d208      	bcs.n	80022da <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c8:	4b2e      	ldr	r3, [pc, #184]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	492b      	ldr	r1, [pc, #172]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022da:	4b29      	ldr	r3, [pc, #164]	; (8002380 <HAL_RCC_ClockConfig+0x1ec>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0307 	and.w	r3, r3, #7
 80022e2:	683a      	ldr	r2, [r7, #0]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d210      	bcs.n	800230a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_RCC_ClockConfig+0x1ec>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f023 0207 	bic.w	r2, r3, #7
 80022f0:	4923      	ldr	r1, [pc, #140]	; (8002380 <HAL_RCC_ClockConfig+0x1ec>)
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	4313      	orrs	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f8:	4b21      	ldr	r3, [pc, #132]	; (8002380 <HAL_RCC_ClockConfig+0x1ec>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d001      	beq.n	800230a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e036      	b.n	8002378 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	2b00      	cmp	r3, #0
 8002314:	d008      	beq.n	8002328 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002316:	4b1b      	ldr	r3, [pc, #108]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	4918      	ldr	r1, [pc, #96]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 8002324:	4313      	orrs	r3, r2
 8002326:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d009      	beq.n	8002348 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	4910      	ldr	r1, [pc, #64]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 8002344:	4313      	orrs	r3, r2
 8002346:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002348:	f000 f824 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 800234c:	4602      	mov	r2, r0
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_RCC_ClockConfig+0x1f0>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	091b      	lsrs	r3, r3, #4
 8002354:	f003 030f 	and.w	r3, r3, #15
 8002358:	490b      	ldr	r1, [pc, #44]	; (8002388 <HAL_RCC_ClockConfig+0x1f4>)
 800235a:	5ccb      	ldrb	r3, [r1, r3]
 800235c:	f003 031f 	and.w	r3, r3, #31
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
 8002364:	4a09      	ldr	r2, [pc, #36]	; (800238c <HAL_RCC_ClockConfig+0x1f8>)
 8002366:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1fc>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe ff5b 	bl	8001228 <HAL_InitTick>
 8002372:	4603      	mov	r3, r0
 8002374:	72fb      	strb	r3, [r7, #11]

  return status;
 8002376:	7afb      	ldrb	r3, [r7, #11]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40022000 	.word	0x40022000
 8002384:	40021000 	.word	0x40021000
 8002388:	08005170 	.word	0x08005170
 800238c:	20000000 	.word	0x20000000
 8002390:	20000004 	.word	0x20000004

08002394 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002394:	b480      	push	{r7}
 8002396:	b089      	sub	sp, #36	; 0x24
 8002398:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a2:	4b3e      	ldr	r3, [pc, #248]	; (800249c <HAL_RCC_GetSysClockFreq+0x108>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 030c 	and.w	r3, r3, #12
 80023aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ac:	4b3b      	ldr	r3, [pc, #236]	; (800249c <HAL_RCC_GetSysClockFreq+0x108>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d005      	beq.n	80023c8 <HAL_RCC_GetSysClockFreq+0x34>
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	2b0c      	cmp	r3, #12
 80023c0:	d121      	bne.n	8002406 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d11e      	bne.n	8002406 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023c8:	4b34      	ldr	r3, [pc, #208]	; (800249c <HAL_RCC_GetSysClockFreq+0x108>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0308 	and.w	r3, r3, #8
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023d4:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_RCC_GetSysClockFreq+0x108>)
 80023d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023da:	0a1b      	lsrs	r3, r3, #8
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	61fb      	str	r3, [r7, #28]
 80023e2:	e005      	b.n	80023f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023e4:	4b2d      	ldr	r3, [pc, #180]	; (800249c <HAL_RCC_GetSysClockFreq+0x108>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	091b      	lsrs	r3, r3, #4
 80023ea:	f003 030f 	and.w	r3, r3, #15
 80023ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023f0:	4a2b      	ldr	r2, [pc, #172]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10d      	bne.n	800241c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002404:	e00a      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	2b04      	cmp	r3, #4
 800240a:	d102      	bne.n	8002412 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	e004      	b.n	800241c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	2b08      	cmp	r3, #8
 8002416:	d101      	bne.n	800241c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002418:	4b23      	ldr	r3, [pc, #140]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x114>)
 800241a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	2b0c      	cmp	r3, #12
 8002420:	d134      	bne.n	800248c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002422:	4b1e      	ldr	r3, [pc, #120]	; (800249c <HAL_RCC_GetSysClockFreq+0x108>)
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0303 	and.w	r3, r3, #3
 800242a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b02      	cmp	r3, #2
 8002430:	d003      	beq.n	800243a <HAL_RCC_GetSysClockFreq+0xa6>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b03      	cmp	r3, #3
 8002436:	d003      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0xac>
 8002438:	e005      	b.n	8002446 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800243a:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800243c:	617b      	str	r3, [r7, #20]
      break;
 800243e:	e005      	b.n	800244c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002440:	4b19      	ldr	r3, [pc, #100]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002442:	617b      	str	r3, [r7, #20]
      break;
 8002444:	e002      	b.n	800244c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	617b      	str	r3, [r7, #20]
      break;
 800244a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <HAL_RCC_GetSysClockFreq+0x108>)
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	091b      	lsrs	r3, r3, #4
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	3301      	adds	r3, #1
 8002458:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_RCC_GetSysClockFreq+0x108>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	0a1b      	lsrs	r3, r3, #8
 8002460:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	fb03 f202 	mul.w	r2, r3, r2
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002470:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <HAL_RCC_GetSysClockFreq+0x108>)
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	0e5b      	lsrs	r3, r3, #25
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	3301      	adds	r3, #1
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	fbb2 f3f3 	udiv	r3, r2, r3
 800248a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800248c:	69bb      	ldr	r3, [r7, #24]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3724      	adds	r7, #36	; 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
 800249a:	bf00      	nop
 800249c:	40021000 	.word	0x40021000
 80024a0:	08005188 	.word	0x08005188
 80024a4:	00f42400 	.word	0x00f42400
 80024a8:	007a1200 	.word	0x007a1200

080024ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024b0:	4b03      	ldr	r3, [pc, #12]	; (80024c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024b2:	681b      	ldr	r3, [r3, #0]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000000 	.word	0x20000000

080024c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024c8:	f7ff fff0 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	0a1b      	lsrs	r3, r3, #8
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	4904      	ldr	r1, [pc, #16]	; (80024ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	f003 031f 	and.w	r3, r3, #31
 80024e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	40021000 	.word	0x40021000
 80024ec:	08005180 	.word	0x08005180

080024f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024f4:	f7ff ffda 	bl	80024ac <HAL_RCC_GetHCLKFreq>
 80024f8:	4602      	mov	r2, r0
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	0adb      	lsrs	r3, r3, #11
 8002500:	f003 0307 	and.w	r3, r3, #7
 8002504:	4904      	ldr	r1, [pc, #16]	; (8002518 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002506:	5ccb      	ldrb	r3, [r1, r3]
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002510:	4618      	mov	r0, r3
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	08005180 	.word	0x08005180

0800251c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002528:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002534:	f7ff f968 	bl	8001808 <HAL_PWREx_GetVoltageRange>
 8002538:	6178      	str	r0, [r7, #20]
 800253a:	e014      	b.n	8002566 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002540:	4a24      	ldr	r2, [pc, #144]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002546:	6593      	str	r3, [r2, #88]	; 0x58
 8002548:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800254a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800254c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002554:	f7ff f958 	bl	8001808 <HAL_PWREx_GetVoltageRange>
 8002558:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800255a:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800255c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255e:	4a1d      	ldr	r2, [pc, #116]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002564:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256c:	d10b      	bne.n	8002586 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b80      	cmp	r3, #128	; 0x80
 8002572:	d919      	bls.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2ba0      	cmp	r3, #160	; 0xa0
 8002578:	d902      	bls.n	8002580 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800257a:	2302      	movs	r3, #2
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	e013      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002580:	2301      	movs	r3, #1
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	e010      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d902      	bls.n	8002592 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800258c:	2303      	movs	r3, #3
 800258e:	613b      	str	r3, [r7, #16]
 8002590:	e00a      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b80      	cmp	r3, #128	; 0x80
 8002596:	d102      	bne.n	800259e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002598:	2302      	movs	r3, #2
 800259a:	613b      	str	r3, [r7, #16]
 800259c:	e004      	b.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2b70      	cmp	r3, #112	; 0x70
 80025a2:	d101      	bne.n	80025a8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025a4:	2301      	movs	r3, #1
 80025a6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 0207 	bic.w	r2, r3, #7
 80025b0:	4909      	ldr	r1, [pc, #36]	; (80025d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025b8:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	693a      	ldr	r2, [r7, #16]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d001      	beq.n	80025ca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40022000 	.word	0x40022000

080025dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e4:	2300      	movs	r3, #0
 80025e6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025e8:	2300      	movs	r3, #0
 80025ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 809e 	beq.w	8002736 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025fe:	4b46      	ldr	r3, [pc, #280]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x32>
 800260a:	2301      	movs	r3, #1
 800260c:	e000      	b.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x34>
 800260e:	2300      	movs	r3, #0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00d      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002614:	4b40      	ldr	r3, [pc, #256]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	4a3f      	ldr	r2, [pc, #252]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800261a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261e:	6593      	str	r3, [r2, #88]	; 0x58
 8002620:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262c:	2301      	movs	r3, #1
 800262e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002630:	4b3a      	ldr	r3, [pc, #232]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a39      	ldr	r2, [pc, #228]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800263a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800263c:	f7fe fe44 	bl	80012c8 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002642:	e009      	b.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7fe fe40 	bl	80012c8 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d902      	bls.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	74fb      	strb	r3, [r7, #19]
        break;
 8002656:	e005      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002658:	4b30      	ldr	r3, [pc, #192]	; (800271c <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ef      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002664:	7cfb      	ldrb	r3, [r7, #19]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d15a      	bne.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800266a:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800266c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002670:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002674:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d01e      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xde>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	429a      	cmp	r2, r3
 8002684:	d019      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002686:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002690:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002692:	4b21      	ldr	r3, [pc, #132]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002698:	4a1f      	ldr	r2, [pc, #124]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800269a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800269e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80026a2:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a8:	4a1b      	ldr	r2, [pc, #108]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80026b2:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d016      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c4:	f7fe fe00 	bl	80012c8 <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ca:	e00b      	b.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026cc:	f7fe fdfc 	bl	80012c8 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d902      	bls.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	74fb      	strb	r3, [r7, #19]
            break;
 80026e2:	e006      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ea:	f003 0302 	and.w	r3, r3, #2
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d0ec      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80026f2:	7cfb      	ldrb	r3, [r7, #19]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10b      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026f8:	4b07      	ldr	r3, [pc, #28]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002706:	4904      	ldr	r1, [pc, #16]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800270e:	e009      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002710:	7cfb      	ldrb	r3, [r7, #19]
 8002712:	74bb      	strb	r3, [r7, #18]
 8002714:	e006      	b.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x148>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002720:	7cfb      	ldrb	r3, [r7, #19]
 8002722:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002724:	7c7b      	ldrb	r3, [r7, #17]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d105      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272a:	4b6e      	ldr	r3, [pc, #440]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800272c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800272e:	4a6d      	ldr	r2, [pc, #436]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002730:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002734:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002742:	4b68      	ldr	r3, [pc, #416]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002748:	f023 0203 	bic.w	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	4964      	ldr	r1, [pc, #400]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002764:	4b5f      	ldr	r3, [pc, #380]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 020c 	bic.w	r2, r3, #12
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	495c      	ldr	r1, [pc, #368]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0304 	and.w	r3, r3, #4
 8002782:	2b00      	cmp	r3, #0
 8002784:	d00a      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002786:	4b57      	ldr	r3, [pc, #348]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800278c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4953      	ldr	r1, [pc, #332]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0320 	and.w	r3, r3, #32
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00a      	beq.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027a8:	4b4e      	ldr	r3, [pc, #312]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	494b      	ldr	r1, [pc, #300]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027b8:	4313      	orrs	r3, r2
 80027ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00a      	beq.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027ca:	4b46      	ldr	r3, [pc, #280]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4942      	ldr	r1, [pc, #264]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d00a      	beq.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027ec:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	493a      	ldr	r1, [pc, #232]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800280e:	4b35      	ldr	r3, [pc, #212]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002814:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	695b      	ldr	r3, [r3, #20]
 800281c:	4931      	ldr	r1, [pc, #196]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002830:	4b2c      	ldr	r3, [pc, #176]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	699b      	ldr	r3, [r3, #24]
 800283e:	4929      	ldr	r1, [pc, #164]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002852:	4b24      	ldr	r3, [pc, #144]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002858:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	69db      	ldr	r3, [r3, #28]
 8002860:	4920      	ldr	r1, [pc, #128]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d015      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002874:	4b1b      	ldr	r3, [pc, #108]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002882:	4918      	ldr	r1, [pc, #96]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002892:	d105      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002894:	4b13      	ldr	r3, [pc, #76]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002896:	68db      	ldr	r3, [r3, #12]
 8002898:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800289a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800289e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d015      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028ac:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ba:	490a      	ldr	r1, [pc, #40]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80028ca:	d105      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028cc:	4b05      	ldr	r3, [pc, #20]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80028d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000

080028e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e095      	b.n	8002a26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d108      	bne.n	8002914 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800290a:	d009      	beq.n	8002920 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	61da      	str	r2, [r3, #28]
 8002912:	e005      	b.n	8002920 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2200      	movs	r2, #0
 8002918:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d106      	bne.n	8002940 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fe f836 	bl	80009ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2202      	movs	r2, #2
 8002944:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002956:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002960:	d902      	bls.n	8002968 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002962:	2300      	movs	r3, #0
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	e002      	b.n	800296e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002968:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800296c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002976:	d007      	beq.n	8002988 <HAL_SPI_Init+0xa0>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002980:	d002      	beq.n	8002988 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	f003 0302 	and.w	r3, r3, #2
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	699b      	ldr	r3, [r3, #24]
 80029b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80029c0:	431a      	orrs	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ca:	ea42 0103 	orr.w	r1, r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	0c1b      	lsrs	r3, r3, #16
 80029e4:	f003 0204 	and.w	r2, r3, #4
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	f003 0310 	and.w	r3, r3, #16
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	431a      	orrs	r2, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002a04:	ea42 0103 	orr.w	r1, r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3710      	adds	r7, #16
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	b088      	sub	sp, #32
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	603b      	str	r3, [r7, #0]
 8002a3a:	4613      	mov	r3, r2
 8002a3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d101      	bne.n	8002a50 <HAL_SPI_Transmit+0x22>
 8002a4c:	2302      	movs	r3, #2
 8002a4e:	e158      	b.n	8002d02 <HAL_SPI_Transmit+0x2d4>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a58:	f7fe fc36 	bl	80012c8 <HAL_GetTick>
 8002a5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002a5e:	88fb      	ldrh	r3, [r7, #6]
 8002a60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d002      	beq.n	8002a74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a72:	e13d      	b.n	8002cf0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d002      	beq.n	8002a80 <HAL_SPI_Transmit+0x52>
 8002a7a:	88fb      	ldrh	r3, [r7, #6]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d102      	bne.n	8002a86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002a84:	e134      	b.n	8002cf0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2203      	movs	r2, #3
 8002a8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	68ba      	ldr	r2, [r7, #8]
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	88fa      	ldrh	r2, [r7, #6]
 8002a9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	88fa      	ldrh	r2, [r7, #6]
 8002aa4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	689b      	ldr	r3, [r3, #8]
 8002acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ad0:	d10f      	bne.n	8002af2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ae0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002af0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002afc:	2b40      	cmp	r3, #64	; 0x40
 8002afe:	d007      	beq.n	8002b10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b18:	d94b      	bls.n	8002bb2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d002      	beq.n	8002b28 <HAL_SPI_Transmit+0xfa>
 8002b22:	8afb      	ldrh	r3, [r7, #22]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d13e      	bne.n	8002ba6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	881a      	ldrh	r2, [r3, #0]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b38:	1c9a      	adds	r2, r3, #2
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b42:	b29b      	uxth	r3, r3
 8002b44:	3b01      	subs	r3, #1
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002b4c:	e02b      	b.n	8002ba6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d112      	bne.n	8002b82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b60:	881a      	ldrh	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b6c:	1c9a      	adds	r2, r3, #2
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b80:	e011      	b.n	8002ba6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b82:	f7fe fba1 	bl	80012c8 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d803      	bhi.n	8002b9a <HAL_SPI_Transmit+0x16c>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b98:	d102      	bne.n	8002ba0 <HAL_SPI_Transmit+0x172>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d102      	bne.n	8002ba6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ba4:	e0a4      	b.n	8002cf0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d1ce      	bne.n	8002b4e <HAL_SPI_Transmit+0x120>
 8002bb0:	e07c      	b.n	8002cac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d002      	beq.n	8002bc0 <HAL_SPI_Transmit+0x192>
 8002bba:	8afb      	ldrh	r3, [r7, #22]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d170      	bne.n	8002ca2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d912      	bls.n	8002bf0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bce:	881a      	ldrh	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	1c9a      	adds	r2, r3, #2
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002be4:	b29b      	uxth	r3, r3
 8002be6:	3b02      	subs	r3, #2
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002bee:	e058      	b.n	8002ca2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	330c      	adds	r3, #12
 8002bfa:	7812      	ldrb	r2, [r2, #0]
 8002bfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	1c5a      	adds	r2, r3, #1
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	b29a      	uxth	r2, r3
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002c16:	e044      	b.n	8002ca2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d12b      	bne.n	8002c7e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d912      	bls.n	8002c56 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c34:	881a      	ldrh	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	1c9a      	adds	r2, r3, #2
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	3b02      	subs	r3, #2
 8002c4e:	b29a      	uxth	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c54:	e025      	b.n	8002ca2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	330c      	adds	r3, #12
 8002c60:	7812      	ldrb	r2, [r2, #0]
 8002c62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	3b01      	subs	r3, #1
 8002c76:	b29a      	uxth	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002c7c:	e011      	b.n	8002ca2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002c7e:	f7fe fb23 	bl	80012c8 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	683a      	ldr	r2, [r7, #0]
 8002c8a:	429a      	cmp	r2, r3
 8002c8c:	d803      	bhi.n	8002c96 <HAL_SPI_Transmit+0x268>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c94:	d102      	bne.n	8002c9c <HAL_SPI_Transmit+0x26e>
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ca0:	e026      	b.n	8002cf0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ca6:	b29b      	uxth	r3, r3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1b5      	bne.n	8002c18 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	6839      	ldr	r1, [r7, #0]
 8002cb0:	68f8      	ldr	r0, [r7, #12]
 8002cb2:	f000 fce3 	bl	800367c <SPI_EndRxTxTransaction>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d002      	beq.n	8002cc2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d10a      	bne.n	8002ce0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d002      	beq.n	8002cee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	77fb      	strb	r3, [r7, #31]
 8002cec:	e000      	b.n	8002cf0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002cee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b088      	sub	sp, #32
 8002d0e:	af02      	add	r7, sp, #8
 8002d10:	60f8      	str	r0, [r7, #12]
 8002d12:	60b9      	str	r1, [r7, #8]
 8002d14:	603b      	str	r3, [r7, #0]
 8002d16:	4613      	mov	r3, r2
 8002d18:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d26:	d112      	bne.n	8002d4e <HAL_SPI_Receive+0x44>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d10e      	bne.n	8002d4e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2204      	movs	r2, #4
 8002d34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002d38:	88fa      	ldrh	r2, [r7, #6]
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f910 	bl	8002f6a <HAL_SPI_TransmitReceive>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	e109      	b.n	8002f62 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d101      	bne.n	8002d5c <HAL_SPI_Receive+0x52>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	e102      	b.n	8002f62 <HAL_SPI_Receive+0x258>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	2201      	movs	r2, #1
 8002d60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d64:	f7fe fab0 	bl	80012c8 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d002      	beq.n	8002d7c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002d76:	2302      	movs	r3, #2
 8002d78:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d7a:	e0e9      	b.n	8002f50 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <HAL_SPI_Receive+0x7e>
 8002d82:	88fb      	ldrh	r3, [r7, #6]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d102      	bne.n	8002d8e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002d8c:	e0e0      	b.n	8002f50 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2204      	movs	r2, #4
 8002d92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	68ba      	ldr	r2, [r7, #8]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	88fa      	ldrh	r2, [r7, #6]
 8002da6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	88fa      	ldrh	r2, [r7, #6]
 8002dae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2200      	movs	r2, #0
 8002db6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dd8:	d908      	bls.n	8002dec <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685a      	ldr	r2, [r3, #4]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	e007      	b.n	8002dfc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002dfa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e04:	d10f      	bne.n	8002e26 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e14:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e24:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e30:	2b40      	cmp	r3, #64	; 0x40
 8002e32:	d007      	beq.n	8002e44 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e42:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e4c:	d867      	bhi.n	8002f1e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002e4e:	e030      	b.n	8002eb2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d117      	bne.n	8002e8e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f103 020c 	add.w	r2, r3, #12
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6a:	7812      	ldrb	r2, [r2, #0]
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002e8c:	e011      	b.n	8002eb2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e8e:	f7fe fa1b 	bl	80012c8 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	683a      	ldr	r2, [r7, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d803      	bhi.n	8002ea6 <HAL_SPI_Receive+0x19c>
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ea4:	d102      	bne.n	8002eac <HAL_SPI_Receive+0x1a2>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d102      	bne.n	8002eb2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002eb0:	e04e      	b.n	8002f50 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1c8      	bne.n	8002e50 <HAL_SPI_Receive+0x146>
 8002ebe:	e034      	b.n	8002f2a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d115      	bne.n	8002efa <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	b292      	uxth	r2, r2
 8002eda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee0:	1c9a      	adds	r2, r3, #2
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002ef8:	e011      	b.n	8002f1e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002efa:	f7fe f9e5 	bl	80012c8 <HAL_GetTick>
 8002efe:	4602      	mov	r2, r0
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	683a      	ldr	r2, [r7, #0]
 8002f06:	429a      	cmp	r2, r3
 8002f08:	d803      	bhi.n	8002f12 <HAL_SPI_Receive+0x208>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d102      	bne.n	8002f18 <HAL_SPI_Receive+0x20e>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8002f1c:	e018      	b.n	8002f50 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002f24:	b29b      	uxth	r3, r3
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1ca      	bne.n	8002ec0 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	6839      	ldr	r1, [r7, #0]
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 fb4c 	bl	80035cc <SPI_EndRxTransaction>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d002      	beq.n	8002f40 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	75fb      	strb	r3, [r7, #23]
 8002f4c:	e000      	b.n	8002f50 <HAL_SPI_Receive+0x246>
  }

error :
 8002f4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f60:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b08a      	sub	sp, #40	; 0x28
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
 8002f76:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <HAL_SPI_TransmitReceive+0x26>
 8002f8c:	2302      	movs	r3, #2
 8002f8e:	e1fb      	b.n	8003388 <HAL_SPI_TransmitReceive+0x41e>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f98:	f7fe f996 	bl	80012c8 <HAL_GetTick>
 8002f9c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002fa4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002fac:	887b      	ldrh	r3, [r7, #2]
 8002fae:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002fb4:	7efb      	ldrb	r3, [r7, #27]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d00e      	beq.n	8002fd8 <HAL_SPI_TransmitReceive+0x6e>
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fc0:	d106      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <HAL_SPI_TransmitReceive+0x66>
 8002fca:	7efb      	ldrb	r3, [r7, #27]
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d003      	beq.n	8002fd8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002fd6:	e1cd      	b.n	8003374 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d005      	beq.n	8002fea <HAL_SPI_TransmitReceive+0x80>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_SPI_TransmitReceive+0x80>
 8002fe4:	887b      	ldrh	r3, [r7, #2]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d103      	bne.n	8002ff2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002ff0:	e1c0      	b.n	8003374 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d003      	beq.n	8003006 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2205      	movs	r2, #5
 8003002:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2200      	movs	r2, #0
 800300a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	887a      	ldrh	r2, [r7, #2]
 8003016:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	887a      	ldrh	r2, [r7, #2]
 800301e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	68ba      	ldr	r2, [r7, #8]
 8003026:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	887a      	ldrh	r2, [r7, #2]
 800302c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	887a      	ldrh	r2, [r7, #2]
 8003032:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003048:	d802      	bhi.n	8003050 <HAL_SPI_TransmitReceive+0xe6>
 800304a:	8a3b      	ldrh	r3, [r7, #16]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d908      	bls.n	8003062 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800305e:	605a      	str	r2, [r3, #4]
 8003060:	e007      	b.n	8003072 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003070:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307c:	2b40      	cmp	r3, #64	; 0x40
 800307e:	d007      	beq.n	8003090 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800308e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003098:	d97c      	bls.n	8003194 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <HAL_SPI_TransmitReceive+0x13e>
 80030a2:	8a7b      	ldrh	r3, [r7, #18]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d169      	bne.n	800317c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ac:	881a      	ldrh	r2, [r3, #0]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b8:	1c9a      	adds	r2, r3, #2
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030cc:	e056      	b.n	800317c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d11b      	bne.n	8003114 <HAL_SPI_TransmitReceive+0x1aa>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d016      	beq.n	8003114 <HAL_SPI_TransmitReceive+0x1aa>
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d113      	bne.n	8003114 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	881a      	ldrh	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030fc:	1c9a      	adds	r2, r3, #2
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003106:	b29b      	uxth	r3, r3
 8003108:	3b01      	subs	r3, #1
 800310a:	b29a      	uxth	r2, r3
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b01      	cmp	r3, #1
 8003120:	d11c      	bne.n	800315c <HAL_SPI_TransmitReceive+0x1f2>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003128:	b29b      	uxth	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d016      	beq.n	800315c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68da      	ldr	r2, [r3, #12]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	b292      	uxth	r2, r2
 800313a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003140:	1c9a      	adds	r2, r3, #2
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800314c:	b29b      	uxth	r3, r3
 800314e:	3b01      	subs	r3, #1
 8003150:	b29a      	uxth	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003158:	2301      	movs	r3, #1
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800315c:	f7fe f8b4 	bl	80012c8 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003168:	429a      	cmp	r2, r3
 800316a:	d807      	bhi.n	800317c <HAL_SPI_TransmitReceive+0x212>
 800316c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003172:	d003      	beq.n	800317c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800317a:	e0fb      	b.n	8003374 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003180:	b29b      	uxth	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d1a3      	bne.n	80030ce <HAL_SPI_TransmitReceive+0x164>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d19d      	bne.n	80030ce <HAL_SPI_TransmitReceive+0x164>
 8003192:	e0df      	b.n	8003354 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d003      	beq.n	80031a4 <HAL_SPI_TransmitReceive+0x23a>
 800319c:	8a7b      	ldrh	r3, [r7, #18]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	f040 80cb 	bne.w	800333a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d912      	bls.n	80031d4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b2:	881a      	ldrh	r2, [r3, #0]
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	1c9a      	adds	r2, r3, #2
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b02      	subs	r3, #2
 80031cc:	b29a      	uxth	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031d2:	e0b2      	b.n	800333a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	330c      	adds	r3, #12
 80031de:	7812      	ldrb	r2, [r2, #0]
 80031e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	1c5a      	adds	r2, r3, #1
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031fa:	e09e      	b.n	800333a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 0302 	and.w	r3, r3, #2
 8003206:	2b02      	cmp	r3, #2
 8003208:	d134      	bne.n	8003274 <HAL_SPI_TransmitReceive+0x30a>
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d02f      	beq.n	8003274 <HAL_SPI_TransmitReceive+0x30a>
 8003214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003216:	2b01      	cmp	r3, #1
 8003218:	d12c      	bne.n	8003274 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b01      	cmp	r3, #1
 8003222:	d912      	bls.n	800324a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003228:	881a      	ldrh	r2, [r3, #0]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	1c9a      	adds	r2, r3, #2
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323e:	b29b      	uxth	r3, r3
 8003240:	3b02      	subs	r3, #2
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003248:	e012      	b.n	8003270 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	330c      	adds	r3, #12
 8003254:	7812      	ldrb	r2, [r2, #0]
 8003256:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003266:	b29b      	uxth	r3, r3
 8003268:	3b01      	subs	r3, #1
 800326a:	b29a      	uxth	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003270:	2300      	movs	r3, #0
 8003272:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b01      	cmp	r3, #1
 8003280:	d148      	bne.n	8003314 <HAL_SPI_TransmitReceive+0x3aa>
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003288:	b29b      	uxth	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d042      	beq.n	8003314 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003294:	b29b      	uxth	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	d923      	bls.n	80032e2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a4:	b292      	uxth	r2, r2
 80032a6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	1c9a      	adds	r2, r3, #2
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	3b02      	subs	r3, #2
 80032bc:	b29a      	uxth	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d81f      	bhi.n	8003310 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	685a      	ldr	r2, [r3, #4]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032de:	605a      	str	r2, [r3, #4]
 80032e0:	e016      	b.n	8003310 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f103 020c 	add.w	r2, r3, #12
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	7812      	ldrb	r2, [r2, #0]
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f8:	1c5a      	adds	r2, r3, #1
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003304:	b29b      	uxth	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b29a      	uxth	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003310:	2301      	movs	r3, #1
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003314:	f7fd ffd8 	bl	80012c8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003320:	429a      	cmp	r2, r3
 8003322:	d803      	bhi.n	800332c <HAL_SPI_TransmitReceive+0x3c2>
 8003324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800332a:	d102      	bne.n	8003332 <HAL_SPI_TransmitReceive+0x3c8>
 800332c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800332e:	2b00      	cmp	r3, #0
 8003330:	d103      	bne.n	800333a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003338:	e01c      	b.n	8003374 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800333e:	b29b      	uxth	r3, r3
 8003340:	2b00      	cmp	r3, #0
 8003342:	f47f af5b 	bne.w	80031fc <HAL_SPI_TransmitReceive+0x292>
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800334c:	b29b      	uxth	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	f47f af54 	bne.w	80031fc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003354:	69fa      	ldr	r2, [r7, #28]
 8003356:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 f98f 	bl	800367c <SPI_EndRxTxTransaction>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d006      	beq.n	8003372 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2220      	movs	r2, #32
 800336e:	661a      	str	r2, [r3, #96]	; 0x60
 8003370:	e000      	b.n	8003374 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003372:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003384:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003388:	4618      	mov	r0, r3
 800338a:	3728      	adds	r7, #40	; 0x28
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b088      	sub	sp, #32
 8003394:	af00      	add	r7, sp, #0
 8003396:	60f8      	str	r0, [r7, #12]
 8003398:	60b9      	str	r1, [r7, #8]
 800339a:	603b      	str	r3, [r7, #0]
 800339c:	4613      	mov	r3, r2
 800339e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80033a0:	f7fd ff92 	bl	80012c8 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a8:	1a9b      	subs	r3, r3, r2
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	4413      	add	r3, r2
 80033ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80033b0:	f7fd ff8a 	bl	80012c8 <HAL_GetTick>
 80033b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80033b6:	4b39      	ldr	r3, [pc, #228]	; (800349c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	015b      	lsls	r3, r3, #5
 80033bc:	0d1b      	lsrs	r3, r3, #20
 80033be:	69fa      	ldr	r2, [r7, #28]
 80033c0:	fb02 f303 	mul.w	r3, r2, r3
 80033c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80033c6:	e054      	b.n	8003472 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ce:	d050      	beq.n	8003472 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033d0:	f7fd ff7a 	bl	80012c8 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	69fa      	ldr	r2, [r7, #28]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d902      	bls.n	80033e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d13d      	bne.n	8003462 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033fe:	d111      	bne.n	8003424 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003408:	d004      	beq.n	8003414 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003412:	d107      	bne.n	8003424 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003422:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800342c:	d10f      	bne.n	800344e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800344c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e017      	b.n	8003492 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003468:	2300      	movs	r3, #0
 800346a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	3b01      	subs	r3, #1
 8003470:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4013      	ands	r3, r2
 800347c:	68ba      	ldr	r2, [r7, #8]
 800347e:	429a      	cmp	r2, r3
 8003480:	bf0c      	ite	eq
 8003482:	2301      	moveq	r3, #1
 8003484:	2300      	movne	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	461a      	mov	r2, r3
 800348a:	79fb      	ldrb	r3, [r7, #7]
 800348c:	429a      	cmp	r2, r3
 800348e:	d19b      	bne.n	80033c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003490:	2300      	movs	r3, #0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3720      	adds	r7, #32
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000000 	.word	0x20000000

080034a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b08a      	sub	sp, #40	; 0x28
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
 80034ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80034ae:	2300      	movs	r3, #0
 80034b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80034b2:	f7fd ff09 	bl	80012c8 <HAL_GetTick>
 80034b6:	4602      	mov	r2, r0
 80034b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	683a      	ldr	r2, [r7, #0]
 80034be:	4413      	add	r3, r2
 80034c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80034c2:	f7fd ff01 	bl	80012c8 <HAL_GetTick>
 80034c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	330c      	adds	r3, #12
 80034ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80034d0:	4b3d      	ldr	r3, [pc, #244]	; (80035c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	4613      	mov	r3, r2
 80034d6:	009b      	lsls	r3, r3, #2
 80034d8:	4413      	add	r3, r2
 80034da:	00da      	lsls	r2, r3, #3
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	0d1b      	lsrs	r3, r3, #20
 80034e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034e2:	fb02 f303 	mul.w	r3, r2, r3
 80034e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80034e8:	e060      	b.n	80035ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80034ea:	68bb      	ldr	r3, [r7, #8]
 80034ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80034f0:	d107      	bne.n	8003502 <SPI_WaitFifoStateUntilTimeout+0x62>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d104      	bne.n	8003502 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003500:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003508:	d050      	beq.n	80035ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800350a:	f7fd fedd 	bl	80012c8 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003516:	429a      	cmp	r2, r3
 8003518:	d902      	bls.n	8003520 <SPI_WaitFifoStateUntilTimeout+0x80>
 800351a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351c:	2b00      	cmp	r3, #0
 800351e:	d13d      	bne.n	800359c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685a      	ldr	r2, [r3, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800352e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003538:	d111      	bne.n	800355e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003542:	d004      	beq.n	800354e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800354c:	d107      	bne.n	800355e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800355c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003566:	d10f      	bne.n	8003588 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003576:	601a      	str	r2, [r3, #0]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003586:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e010      	b.n	80035be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d101      	bne.n	80035a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	4013      	ands	r3, r2
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d196      	bne.n	80034ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3728      	adds	r7, #40	; 0x28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
 80035c6:	bf00      	nop
 80035c8:	20000000 	.word	0x20000000

080035cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af02      	add	r7, sp, #8
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035e0:	d111      	bne.n	8003606 <SPI_EndRxTransaction+0x3a>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ea:	d004      	beq.n	80035f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035f4:	d107      	bne.n	8003606 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003604:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	2200      	movs	r2, #0
 800360e:	2180      	movs	r1, #128	; 0x80
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff febd 	bl	8003390 <SPI_WaitFlagStateUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d007      	beq.n	800362c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003620:	f043 0220 	orr.w	r2, r3, #32
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e023      	b.n	8003674 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003634:	d11d      	bne.n	8003672 <SPI_EndRxTransaction+0xa6>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800363e:	d004      	beq.n	800364a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003648:	d113      	bne.n	8003672 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2200      	movs	r2, #0
 8003652:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f7ff ff22 	bl	80034a0 <SPI_WaitFifoStateUntilTimeout>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d007      	beq.n	8003672 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003666:	f043 0220 	orr.w	r2, r3, #32
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e000      	b.n	8003674 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b086      	sub	sp, #24
 8003680:	af02      	add	r7, sp, #8
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	2200      	movs	r2, #0
 8003690:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f7ff ff03 	bl	80034a0 <SPI_WaitFifoStateUntilTimeout>
 800369a:	4603      	mov	r3, r0
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a4:	f043 0220 	orr.w	r2, r3, #32
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036ac:	2303      	movs	r3, #3
 80036ae:	e027      	b.n	8003700 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	9300      	str	r3, [sp, #0]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2200      	movs	r2, #0
 80036b8:	2180      	movs	r1, #128	; 0x80
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f7ff fe68 	bl	8003390 <SPI_WaitFlagStateUntilTimeout>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d007      	beq.n	80036d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ca:	f043 0220 	orr.w	r2, r3, #32
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e014      	b.n	8003700 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2200      	movs	r2, #0
 80036de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f7ff fedc 	bl	80034a0 <SPI_WaitFifoStateUntilTimeout>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d007      	beq.n	80036fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f2:	f043 0220 	orr.w	r2, r3, #32
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e000      	b.n	8003700 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}

08003708 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d101      	bne.n	800371a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003716:	2301      	movs	r3, #1
 8003718:	e040      	b.n	800379c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371e:	2b00      	cmp	r3, #0
 8003720:	d106      	bne.n	8003730 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7fd f982 	bl	8000a34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2224      	movs	r2, #36	; 0x24
 8003734:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0201 	bic.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f000 f8c0 	bl	80038cc <UART_SetConfig>
 800374c:	4603      	mov	r3, r0
 800374e:	2b01      	cmp	r3, #1
 8003750:	d101      	bne.n	8003756 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	e022      	b.n	800379c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 fb0e 	bl	8003d80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003772:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689a      	ldr	r2, [r3, #8]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003782:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0201 	orr.w	r2, r2, #1
 8003792:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 fb95 	bl	8003ec4 <UART_CheckIdleState>
 800379a:	4603      	mov	r3, r0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b08a      	sub	sp, #40	; 0x28
 80037a8:	af02      	add	r7, sp, #8
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	603b      	str	r3, [r7, #0]
 80037b0:	4613      	mov	r3, r2
 80037b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	f040 8082 	bne.w	80038c2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80037be:	68bb      	ldr	r3, [r7, #8]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <HAL_UART_Transmit+0x26>
 80037c4:	88fb      	ldrh	r3, [r7, #6]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e07a      	b.n	80038c4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d101      	bne.n	80037dc <HAL_UART_Transmit+0x38>
 80037d8:	2302      	movs	r3, #2
 80037da:	e073      	b.n	80038c4 <HAL_UART_Transmit+0x120>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2200      	movs	r2, #0
 80037e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2221      	movs	r2, #33	; 0x21
 80037f0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037f2:	f7fd fd69 	bl	80012c8 <HAL_GetTick>
 80037f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	88fa      	ldrh	r2, [r7, #6]
 80037fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	88fa      	ldrh	r2, [r7, #6]
 8003804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003810:	d108      	bne.n	8003824 <HAL_UART_Transmit+0x80>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d104      	bne.n	8003824 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800381a:	2300      	movs	r3, #0
 800381c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	61bb      	str	r3, [r7, #24]
 8003822:	e003      	b.n	800382c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003828:	2300      	movs	r3, #0
 800382a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003834:	e02d      	b.n	8003892 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2200      	movs	r2, #0
 800383e:	2180      	movs	r1, #128	; 0x80
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 fb88 	bl	8003f56 <UART_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e039      	b.n	80038c4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003850:	69fb      	ldr	r3, [r7, #28]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10b      	bne.n	800386e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	881a      	ldrh	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003862:	b292      	uxth	r2, r2
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	3302      	adds	r3, #2
 800386a:	61bb      	str	r3, [r7, #24]
 800386c:	e008      	b.n	8003880 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	b292      	uxth	r2, r2
 8003878:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3301      	adds	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1cb      	bne.n	8003836 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	9300      	str	r3, [sp, #0]
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	2200      	movs	r2, #0
 80038a6:	2140      	movs	r1, #64	; 0x40
 80038a8:	68f8      	ldr	r0, [r7, #12]
 80038aa:	f000 fb54 	bl	8003f56 <UART_WaitOnFlagUntilTimeout>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e005      	b.n	80038c4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2220      	movs	r2, #32
 80038bc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80038be:	2300      	movs	r3, #0
 80038c0:	e000      	b.n	80038c4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80038c2:	2302      	movs	r3, #2
  }
}
 80038c4:	4618      	mov	r0, r3
 80038c6:	3720      	adds	r7, #32
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd80      	pop	{r7, pc}

080038cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d0:	b08a      	sub	sp, #40	; 0x28
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	689a      	ldr	r2, [r3, #8]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	431a      	orrs	r2, r3
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	431a      	orrs	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	4b9e      	ldr	r3, [pc, #632]	; (8003b74 <UART_SetConfig+0x2a8>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	6812      	ldr	r2, [r2, #0]
 8003902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003904:	430b      	orrs	r3, r1
 8003906:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a93      	ldr	r2, [pc, #588]	; (8003b78 <UART_SetConfig+0x2ac>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d004      	beq.n	8003938 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003934:	4313      	orrs	r3, r2
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003948:	430a      	orrs	r2, r1
 800394a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a8a      	ldr	r2, [pc, #552]	; (8003b7c <UART_SetConfig+0x2b0>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d126      	bne.n	80039a4 <UART_SetConfig+0xd8>
 8003956:	4b8a      	ldr	r3, [pc, #552]	; (8003b80 <UART_SetConfig+0x2b4>)
 8003958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800395c:	f003 0303 	and.w	r3, r3, #3
 8003960:	2b03      	cmp	r3, #3
 8003962:	d81b      	bhi.n	800399c <UART_SetConfig+0xd0>
 8003964:	a201      	add	r2, pc, #4	; (adr r2, 800396c <UART_SetConfig+0xa0>)
 8003966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800396a:	bf00      	nop
 800396c:	0800397d 	.word	0x0800397d
 8003970:	0800398d 	.word	0x0800398d
 8003974:	08003985 	.word	0x08003985
 8003978:	08003995 	.word	0x08003995
 800397c:	2301      	movs	r3, #1
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003982:	e0ab      	b.n	8003adc <UART_SetConfig+0x210>
 8003984:	2302      	movs	r3, #2
 8003986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398a:	e0a7      	b.n	8003adc <UART_SetConfig+0x210>
 800398c:	2304      	movs	r3, #4
 800398e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003992:	e0a3      	b.n	8003adc <UART_SetConfig+0x210>
 8003994:	2308      	movs	r3, #8
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399a:	e09f      	b.n	8003adc <UART_SetConfig+0x210>
 800399c:	2310      	movs	r3, #16
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a2:	e09b      	b.n	8003adc <UART_SetConfig+0x210>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a76      	ldr	r2, [pc, #472]	; (8003b84 <UART_SetConfig+0x2b8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d138      	bne.n	8003a20 <UART_SetConfig+0x154>
 80039ae:	4b74      	ldr	r3, [pc, #464]	; (8003b80 <UART_SetConfig+0x2b4>)
 80039b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039b4:	f003 030c 	and.w	r3, r3, #12
 80039b8:	2b0c      	cmp	r3, #12
 80039ba:	d82d      	bhi.n	8003a18 <UART_SetConfig+0x14c>
 80039bc:	a201      	add	r2, pc, #4	; (adr r2, 80039c4 <UART_SetConfig+0xf8>)
 80039be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c2:	bf00      	nop
 80039c4:	080039f9 	.word	0x080039f9
 80039c8:	08003a19 	.word	0x08003a19
 80039cc:	08003a19 	.word	0x08003a19
 80039d0:	08003a19 	.word	0x08003a19
 80039d4:	08003a09 	.word	0x08003a09
 80039d8:	08003a19 	.word	0x08003a19
 80039dc:	08003a19 	.word	0x08003a19
 80039e0:	08003a19 	.word	0x08003a19
 80039e4:	08003a01 	.word	0x08003a01
 80039e8:	08003a19 	.word	0x08003a19
 80039ec:	08003a19 	.word	0x08003a19
 80039f0:	08003a19 	.word	0x08003a19
 80039f4:	08003a11 	.word	0x08003a11
 80039f8:	2300      	movs	r3, #0
 80039fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039fe:	e06d      	b.n	8003adc <UART_SetConfig+0x210>
 8003a00:	2302      	movs	r3, #2
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a06:	e069      	b.n	8003adc <UART_SetConfig+0x210>
 8003a08:	2304      	movs	r3, #4
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0e:	e065      	b.n	8003adc <UART_SetConfig+0x210>
 8003a10:	2308      	movs	r3, #8
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a16:	e061      	b.n	8003adc <UART_SetConfig+0x210>
 8003a18:	2310      	movs	r3, #16
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1e:	e05d      	b.n	8003adc <UART_SetConfig+0x210>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a58      	ldr	r2, [pc, #352]	; (8003b88 <UART_SetConfig+0x2bc>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d125      	bne.n	8003a76 <UART_SetConfig+0x1aa>
 8003a2a:	4b55      	ldr	r3, [pc, #340]	; (8003b80 <UART_SetConfig+0x2b4>)
 8003a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a30:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a34:	2b30      	cmp	r3, #48	; 0x30
 8003a36:	d016      	beq.n	8003a66 <UART_SetConfig+0x19a>
 8003a38:	2b30      	cmp	r3, #48	; 0x30
 8003a3a:	d818      	bhi.n	8003a6e <UART_SetConfig+0x1a2>
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d00a      	beq.n	8003a56 <UART_SetConfig+0x18a>
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d814      	bhi.n	8003a6e <UART_SetConfig+0x1a2>
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <UART_SetConfig+0x182>
 8003a48:	2b10      	cmp	r3, #16
 8003a4a:	d008      	beq.n	8003a5e <UART_SetConfig+0x192>
 8003a4c:	e00f      	b.n	8003a6e <UART_SetConfig+0x1a2>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a54:	e042      	b.n	8003adc <UART_SetConfig+0x210>
 8003a56:	2302      	movs	r3, #2
 8003a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5c:	e03e      	b.n	8003adc <UART_SetConfig+0x210>
 8003a5e:	2304      	movs	r3, #4
 8003a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a64:	e03a      	b.n	8003adc <UART_SetConfig+0x210>
 8003a66:	2308      	movs	r3, #8
 8003a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6c:	e036      	b.n	8003adc <UART_SetConfig+0x210>
 8003a6e:	2310      	movs	r3, #16
 8003a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a74:	e032      	b.n	8003adc <UART_SetConfig+0x210>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a3f      	ldr	r2, [pc, #252]	; (8003b78 <UART_SetConfig+0x2ac>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d12a      	bne.n	8003ad6 <UART_SetConfig+0x20a>
 8003a80:	4b3f      	ldr	r3, [pc, #252]	; (8003b80 <UART_SetConfig+0x2b4>)
 8003a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a86:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a8e:	d01a      	beq.n	8003ac6 <UART_SetConfig+0x1fa>
 8003a90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a94:	d81b      	bhi.n	8003ace <UART_SetConfig+0x202>
 8003a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9a:	d00c      	beq.n	8003ab6 <UART_SetConfig+0x1ea>
 8003a9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa0:	d815      	bhi.n	8003ace <UART_SetConfig+0x202>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d003      	beq.n	8003aae <UART_SetConfig+0x1e2>
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aaa:	d008      	beq.n	8003abe <UART_SetConfig+0x1f2>
 8003aac:	e00f      	b.n	8003ace <UART_SetConfig+0x202>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab4:	e012      	b.n	8003adc <UART_SetConfig+0x210>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003abc:	e00e      	b.n	8003adc <UART_SetConfig+0x210>
 8003abe:	2304      	movs	r3, #4
 8003ac0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac4:	e00a      	b.n	8003adc <UART_SetConfig+0x210>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003acc:	e006      	b.n	8003adc <UART_SetConfig+0x210>
 8003ace:	2310      	movs	r3, #16
 8003ad0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad4:	e002      	b.n	8003adc <UART_SetConfig+0x210>
 8003ad6:	2310      	movs	r3, #16
 8003ad8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a25      	ldr	r2, [pc, #148]	; (8003b78 <UART_SetConfig+0x2ac>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	f040 808a 	bne.w	8003bfc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d824      	bhi.n	8003b3a <UART_SetConfig+0x26e>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <UART_SetConfig+0x22c>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b3b 	.word	0x08003b3b
 8003b00:	08003b25 	.word	0x08003b25
 8003b04:	08003b3b 	.word	0x08003b3b
 8003b08:	08003b2b 	.word	0x08003b2b
 8003b0c:	08003b3b 	.word	0x08003b3b
 8003b10:	08003b3b 	.word	0x08003b3b
 8003b14:	08003b3b 	.word	0x08003b3b
 8003b18:	08003b33 	.word	0x08003b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b1c:	f7fe fcd2 	bl	80024c4 <HAL_RCC_GetPCLK1Freq>
 8003b20:	61f8      	str	r0, [r7, #28]
        break;
 8003b22:	e010      	b.n	8003b46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <UART_SetConfig+0x2c0>)
 8003b26:	61fb      	str	r3, [r7, #28]
        break;
 8003b28:	e00d      	b.n	8003b46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b2a:	f7fe fc33 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8003b2e:	61f8      	str	r0, [r7, #28]
        break;
 8003b30:	e009      	b.n	8003b46 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b36:	61fb      	str	r3, [r7, #28]
        break;
 8003b38:	e005      	b.n	8003b46 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f000 8109 	beq.w	8003d60 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	685a      	ldr	r2, [r3, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	005b      	lsls	r3, r3, #1
 8003b56:	4413      	add	r3, r2
 8003b58:	69fa      	ldr	r2, [r7, #28]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d305      	bcc.n	8003b6a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b64:	69fa      	ldr	r2, [r7, #28]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d912      	bls.n	8003b90 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b70:	e0f6      	b.n	8003d60 <UART_SetConfig+0x494>
 8003b72:	bf00      	nop
 8003b74:	efff69f3 	.word	0xefff69f3
 8003b78:	40008000 	.word	0x40008000
 8003b7c:	40013800 	.word	0x40013800
 8003b80:	40021000 	.word	0x40021000
 8003b84:	40004400 	.word	0x40004400
 8003b88:	40004800 	.word	0x40004800
 8003b8c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2200      	movs	r2, #0
 8003b94:	461c      	mov	r4, r3
 8003b96:	4615      	mov	r5, r2
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	022b      	lsls	r3, r5, #8
 8003ba2:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ba6:	0222      	lsls	r2, r4, #8
 8003ba8:	68f9      	ldr	r1, [r7, #12]
 8003baa:	6849      	ldr	r1, [r1, #4]
 8003bac:	0849      	lsrs	r1, r1, #1
 8003bae:	2000      	movs	r0, #0
 8003bb0:	4688      	mov	r8, r1
 8003bb2:	4681      	mov	r9, r0
 8003bb4:	eb12 0a08 	adds.w	sl, r2, r8
 8003bb8:	eb43 0b09 	adc.w	fp, r3, r9
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	603b      	str	r3, [r7, #0]
 8003bc4:	607a      	str	r2, [r7, #4]
 8003bc6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bca:	4650      	mov	r0, sl
 8003bcc:	4659      	mov	r1, fp
 8003bce:	f7fc fb4f 	bl	8000270 <__aeabi_uldivmod>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003be0:	d308      	bcc.n	8003bf4 <UART_SetConfig+0x328>
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003be8:	d204      	bcs.n	8003bf4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	60da      	str	r2, [r3, #12]
 8003bf2:	e0b5      	b.n	8003d60 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bfa:	e0b1      	b.n	8003d60 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c04:	d15d      	bne.n	8003cc2 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003c06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d827      	bhi.n	8003c5e <UART_SetConfig+0x392>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <UART_SetConfig+0x348>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c39 	.word	0x08003c39
 8003c18:	08003c41 	.word	0x08003c41
 8003c1c:	08003c49 	.word	0x08003c49
 8003c20:	08003c5f 	.word	0x08003c5f
 8003c24:	08003c4f 	.word	0x08003c4f
 8003c28:	08003c5f 	.word	0x08003c5f
 8003c2c:	08003c5f 	.word	0x08003c5f
 8003c30:	08003c5f 	.word	0x08003c5f
 8003c34:	08003c57 	.word	0x08003c57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c38:	f7fe fc44 	bl	80024c4 <HAL_RCC_GetPCLK1Freq>
 8003c3c:	61f8      	str	r0, [r7, #28]
        break;
 8003c3e:	e014      	b.n	8003c6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c40:	f7fe fc56 	bl	80024f0 <HAL_RCC_GetPCLK2Freq>
 8003c44:	61f8      	str	r0, [r7, #28]
        break;
 8003c46:	e010      	b.n	8003c6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c48:	4b4c      	ldr	r3, [pc, #304]	; (8003d7c <UART_SetConfig+0x4b0>)
 8003c4a:	61fb      	str	r3, [r7, #28]
        break;
 8003c4c:	e00d      	b.n	8003c6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c4e:	f7fe fba1 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8003c52:	61f8      	str	r0, [r7, #28]
        break;
 8003c54:	e009      	b.n	8003c6a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c5a:	61fb      	str	r3, [r7, #28]
        break;
 8003c5c:	e005      	b.n	8003c6a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d077      	beq.n	8003d60 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	005a      	lsls	r2, r3, #1
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	085b      	lsrs	r3, r3, #1
 8003c7a:	441a      	add	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	685b      	ldr	r3, [r3, #4]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	2b0f      	cmp	r3, #15
 8003c8a:	d916      	bls.n	8003cba <UART_SetConfig+0x3ee>
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c92:	d212      	bcs.n	8003cba <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	f023 030f 	bic.w	r3, r3, #15
 8003c9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	085b      	lsrs	r3, r3, #1
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	f003 0307 	and.w	r3, r3, #7
 8003ca8:	b29a      	uxth	r2, r3
 8003caa:	8afb      	ldrh	r3, [r7, #22]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	8afa      	ldrh	r2, [r7, #22]
 8003cb6:	60da      	str	r2, [r3, #12]
 8003cb8:	e052      	b.n	8003d60 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cc0:	e04e      	b.n	8003d60 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cc6:	2b08      	cmp	r3, #8
 8003cc8:	d827      	bhi.n	8003d1a <UART_SetConfig+0x44e>
 8003cca:	a201      	add	r2, pc, #4	; (adr r2, 8003cd0 <UART_SetConfig+0x404>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	08003cfd 	.word	0x08003cfd
 8003cd8:	08003d05 	.word	0x08003d05
 8003cdc:	08003d1b 	.word	0x08003d1b
 8003ce0:	08003d0b 	.word	0x08003d0b
 8003ce4:	08003d1b 	.word	0x08003d1b
 8003ce8:	08003d1b 	.word	0x08003d1b
 8003cec:	08003d1b 	.word	0x08003d1b
 8003cf0:	08003d13 	.word	0x08003d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf4:	f7fe fbe6 	bl	80024c4 <HAL_RCC_GetPCLK1Freq>
 8003cf8:	61f8      	str	r0, [r7, #28]
        break;
 8003cfa:	e014      	b.n	8003d26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cfc:	f7fe fbf8 	bl	80024f0 <HAL_RCC_GetPCLK2Freq>
 8003d00:	61f8      	str	r0, [r7, #28]
        break;
 8003d02:	e010      	b.n	8003d26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d04:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <UART_SetConfig+0x4b0>)
 8003d06:	61fb      	str	r3, [r7, #28]
        break;
 8003d08:	e00d      	b.n	8003d26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0a:	f7fe fb43 	bl	8002394 <HAL_RCC_GetSysClockFreq>
 8003d0e:	61f8      	str	r0, [r7, #28]
        break;
 8003d10:	e009      	b.n	8003d26 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d16:	61fb      	str	r3, [r7, #28]
        break;
 8003d18:	e005      	b.n	8003d26 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d24:	bf00      	nop
    }

    if (pclk != 0U)
 8003d26:	69fb      	ldr	r3, [r7, #28]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d019      	beq.n	8003d60 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	085a      	lsrs	r2, r3, #1
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	441a      	add	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	2b0f      	cmp	r3, #15
 8003d44:	d909      	bls.n	8003d5a <UART_SetConfig+0x48e>
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4c:	d205      	bcs.n	8003d5a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	60da      	str	r2, [r3, #12]
 8003d58:	e002      	b.n	8003d60 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2200      	movs	r2, #0
 8003d64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3728      	adds	r7, #40	; 0x28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d7a:	bf00      	nop
 8003d7c:	00f42400 	.word	0x00f42400

08003d80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f003 0301 	and.w	r3, r3, #1
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	f003 0304 	and.w	r3, r3, #4
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00a      	beq.n	8003dee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00a      	beq.n	8003e10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e14:	f003 0310 	and.w	r3, r3, #16
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d00a      	beq.n	8003e32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689b      	ldr	r3, [r3, #8]
 8003e22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	f003 0320 	and.w	r3, r3, #32
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00a      	beq.n	8003e54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	430a      	orrs	r2, r1
 8003e52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d01a      	beq.n	8003e96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e7e:	d10a      	bne.n	8003e96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	430a      	orrs	r2, r1
 8003e94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00a      	beq.n	8003eb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	605a      	str	r2, [r3, #4]
  }
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af02      	add	r7, sp, #8
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ed4:	f7fd f9f8 	bl	80012c8 <HAL_GetTick>
 8003ed8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b08      	cmp	r3, #8
 8003ee6:	d10e      	bne.n	8003f06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ee8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f82d 	bl	8003f56 <UART_WaitOnFlagUntilTimeout>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d001      	beq.n	8003f06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e023      	b.n	8003f4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d10e      	bne.n	8003f32 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f14:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f000 f817 	bl	8003f56 <UART_WaitOnFlagUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d001      	beq.n	8003f32 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e00d      	b.n	8003f4e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2220      	movs	r2, #32
 8003f3c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2200      	movs	r2, #0
 8003f42:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2200      	movs	r2, #0
 8003f48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3710      	adds	r7, #16
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b09c      	sub	sp, #112	; 0x70
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	60f8      	str	r0, [r7, #12]
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	603b      	str	r3, [r7, #0]
 8003f62:	4613      	mov	r3, r2
 8003f64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f66:	e0a5      	b.n	80040b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f6e:	f000 80a1 	beq.w	80040b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f72:	f7fd f9a9 	bl	80012c8 <HAL_GetTick>
 8003f76:	4602      	mov	r2, r0
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d302      	bcc.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d13e      	bne.n	8004006 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f98:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f9c:	667b      	str	r3, [r7, #100]	; 0x64
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fa6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fa8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e6      	bne.n	8003f88 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	3308      	adds	r3, #8
 8003fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fcc:	f023 0301 	bic.w	r3, r3, #1
 8003fd0:	663b      	str	r3, [r7, #96]	; 0x60
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	3308      	adds	r3, #8
 8003fd8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003fda:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fdc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fe8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e5      	bne.n	8003fba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2220      	movs	r2, #32
 8003ff2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e067      	b.n	80040d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d04f      	beq.n	80040b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800401e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004022:	d147      	bne.n	80040b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800402c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	e853 3f00 	ldrex	r3, [r3]
 800403a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800403c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004042:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	461a      	mov	r2, r3
 800404a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800404c:	637b      	str	r3, [r7, #52]	; 0x34
 800404e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004050:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004052:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004054:	e841 2300 	strex	r3, r2, [r1]
 8004058:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800405a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e6      	bne.n	800402e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3308      	adds	r3, #8
 8004066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	613b      	str	r3, [r7, #16]
   return(result);
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f023 0301 	bic.w	r3, r3, #1
 8004076:	66bb      	str	r3, [r7, #104]	; 0x68
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	3308      	adds	r3, #8
 800407e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004080:	623a      	str	r2, [r7, #32]
 8004082:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	69f9      	ldr	r1, [r7, #28]
 8004086:	6a3a      	ldr	r2, [r7, #32]
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	61bb      	str	r3, [r7, #24]
   return(result);
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e5      	bne.n	8004060 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2220      	movs	r2, #32
 800409e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e010      	b.n	80040d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	69da      	ldr	r2, [r3, #28]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	4013      	ands	r3, r2
 80040be:	68ba      	ldr	r2, [r7, #8]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	bf0c      	ite	eq
 80040c4:	2301      	moveq	r3, #1
 80040c6:	2300      	movne	r3, #0
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	461a      	mov	r2, r3
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	429a      	cmp	r2, r3
 80040d0:	f43f af4a 	beq.w	8003f68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3770      	adds	r7, #112	; 0x70
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <__errno>:
 80040e0:	4b01      	ldr	r3, [pc, #4]	; (80040e8 <__errno+0x8>)
 80040e2:	6818      	ldr	r0, [r3, #0]
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	2000000c 	.word	0x2000000c

080040ec <__libc_init_array>:
 80040ec:	b570      	push	{r4, r5, r6, lr}
 80040ee:	4d0d      	ldr	r5, [pc, #52]	; (8004124 <__libc_init_array+0x38>)
 80040f0:	4c0d      	ldr	r4, [pc, #52]	; (8004128 <__libc_init_array+0x3c>)
 80040f2:	1b64      	subs	r4, r4, r5
 80040f4:	10a4      	asrs	r4, r4, #2
 80040f6:	2600      	movs	r6, #0
 80040f8:	42a6      	cmp	r6, r4
 80040fa:	d109      	bne.n	8004110 <__libc_init_array+0x24>
 80040fc:	4d0b      	ldr	r5, [pc, #44]	; (800412c <__libc_init_array+0x40>)
 80040fe:	4c0c      	ldr	r4, [pc, #48]	; (8004130 <__libc_init_array+0x44>)
 8004100:	f000 ffae 	bl	8005060 <_init>
 8004104:	1b64      	subs	r4, r4, r5
 8004106:	10a4      	asrs	r4, r4, #2
 8004108:	2600      	movs	r6, #0
 800410a:	42a6      	cmp	r6, r4
 800410c:	d105      	bne.n	800411a <__libc_init_array+0x2e>
 800410e:	bd70      	pop	{r4, r5, r6, pc}
 8004110:	f855 3b04 	ldr.w	r3, [r5], #4
 8004114:	4798      	blx	r3
 8004116:	3601      	adds	r6, #1
 8004118:	e7ee      	b.n	80040f8 <__libc_init_array+0xc>
 800411a:	f855 3b04 	ldr.w	r3, [r5], #4
 800411e:	4798      	blx	r3
 8004120:	3601      	adds	r6, #1
 8004122:	e7f2      	b.n	800410a <__libc_init_array+0x1e>
 8004124:	08005258 	.word	0x08005258
 8004128:	08005258 	.word	0x08005258
 800412c:	08005258 	.word	0x08005258
 8004130:	0800525c 	.word	0x0800525c

08004134 <memset>:
 8004134:	4402      	add	r2, r0
 8004136:	4603      	mov	r3, r0
 8004138:	4293      	cmp	r3, r2
 800413a:	d100      	bne.n	800413e <memset+0xa>
 800413c:	4770      	bx	lr
 800413e:	f803 1b01 	strb.w	r1, [r3], #1
 8004142:	e7f9      	b.n	8004138 <memset+0x4>

08004144 <iprintf>:
 8004144:	b40f      	push	{r0, r1, r2, r3}
 8004146:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <iprintf+0x2c>)
 8004148:	b513      	push	{r0, r1, r4, lr}
 800414a:	681c      	ldr	r4, [r3, #0]
 800414c:	b124      	cbz	r4, 8004158 <iprintf+0x14>
 800414e:	69a3      	ldr	r3, [r4, #24]
 8004150:	b913      	cbnz	r3, 8004158 <iprintf+0x14>
 8004152:	4620      	mov	r0, r4
 8004154:	f000 f866 	bl	8004224 <__sinit>
 8004158:	ab05      	add	r3, sp, #20
 800415a:	9a04      	ldr	r2, [sp, #16]
 800415c:	68a1      	ldr	r1, [r4, #8]
 800415e:	9301      	str	r3, [sp, #4]
 8004160:	4620      	mov	r0, r4
 8004162:	f000 f9bd 	bl	80044e0 <_vfiprintf_r>
 8004166:	b002      	add	sp, #8
 8004168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800416c:	b004      	add	sp, #16
 800416e:	4770      	bx	lr
 8004170:	2000000c 	.word	0x2000000c

08004174 <std>:
 8004174:	2300      	movs	r3, #0
 8004176:	b510      	push	{r4, lr}
 8004178:	4604      	mov	r4, r0
 800417a:	e9c0 3300 	strd	r3, r3, [r0]
 800417e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004182:	6083      	str	r3, [r0, #8]
 8004184:	8181      	strh	r1, [r0, #12]
 8004186:	6643      	str	r3, [r0, #100]	; 0x64
 8004188:	81c2      	strh	r2, [r0, #14]
 800418a:	6183      	str	r3, [r0, #24]
 800418c:	4619      	mov	r1, r3
 800418e:	2208      	movs	r2, #8
 8004190:	305c      	adds	r0, #92	; 0x5c
 8004192:	f7ff ffcf 	bl	8004134 <memset>
 8004196:	4b05      	ldr	r3, [pc, #20]	; (80041ac <std+0x38>)
 8004198:	6263      	str	r3, [r4, #36]	; 0x24
 800419a:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <std+0x3c>)
 800419c:	62a3      	str	r3, [r4, #40]	; 0x28
 800419e:	4b05      	ldr	r3, [pc, #20]	; (80041b4 <std+0x40>)
 80041a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80041a2:	4b05      	ldr	r3, [pc, #20]	; (80041b8 <std+0x44>)
 80041a4:	6224      	str	r4, [r4, #32]
 80041a6:	6323      	str	r3, [r4, #48]	; 0x30
 80041a8:	bd10      	pop	{r4, pc}
 80041aa:	bf00      	nop
 80041ac:	08004a89 	.word	0x08004a89
 80041b0:	08004aab 	.word	0x08004aab
 80041b4:	08004ae3 	.word	0x08004ae3
 80041b8:	08004b07 	.word	0x08004b07

080041bc <_cleanup_r>:
 80041bc:	4901      	ldr	r1, [pc, #4]	; (80041c4 <_cleanup_r+0x8>)
 80041be:	f000 b8af 	b.w	8004320 <_fwalk_reent>
 80041c2:	bf00      	nop
 80041c4:	08004de1 	.word	0x08004de1

080041c8 <__sfmoreglue>:
 80041c8:	b570      	push	{r4, r5, r6, lr}
 80041ca:	2268      	movs	r2, #104	; 0x68
 80041cc:	1e4d      	subs	r5, r1, #1
 80041ce:	4355      	muls	r5, r2
 80041d0:	460e      	mov	r6, r1
 80041d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80041d6:	f000 f8e5 	bl	80043a4 <_malloc_r>
 80041da:	4604      	mov	r4, r0
 80041dc:	b140      	cbz	r0, 80041f0 <__sfmoreglue+0x28>
 80041de:	2100      	movs	r1, #0
 80041e0:	e9c0 1600 	strd	r1, r6, [r0]
 80041e4:	300c      	adds	r0, #12
 80041e6:	60a0      	str	r0, [r4, #8]
 80041e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80041ec:	f7ff ffa2 	bl	8004134 <memset>
 80041f0:	4620      	mov	r0, r4
 80041f2:	bd70      	pop	{r4, r5, r6, pc}

080041f4 <__sfp_lock_acquire>:
 80041f4:	4801      	ldr	r0, [pc, #4]	; (80041fc <__sfp_lock_acquire+0x8>)
 80041f6:	f000 b8b3 	b.w	8004360 <__retarget_lock_acquire_recursive>
 80041fa:	bf00      	nop
 80041fc:	2000017d 	.word	0x2000017d

08004200 <__sfp_lock_release>:
 8004200:	4801      	ldr	r0, [pc, #4]	; (8004208 <__sfp_lock_release+0x8>)
 8004202:	f000 b8ae 	b.w	8004362 <__retarget_lock_release_recursive>
 8004206:	bf00      	nop
 8004208:	2000017d 	.word	0x2000017d

0800420c <__sinit_lock_acquire>:
 800420c:	4801      	ldr	r0, [pc, #4]	; (8004214 <__sinit_lock_acquire+0x8>)
 800420e:	f000 b8a7 	b.w	8004360 <__retarget_lock_acquire_recursive>
 8004212:	bf00      	nop
 8004214:	2000017e 	.word	0x2000017e

08004218 <__sinit_lock_release>:
 8004218:	4801      	ldr	r0, [pc, #4]	; (8004220 <__sinit_lock_release+0x8>)
 800421a:	f000 b8a2 	b.w	8004362 <__retarget_lock_release_recursive>
 800421e:	bf00      	nop
 8004220:	2000017e 	.word	0x2000017e

08004224 <__sinit>:
 8004224:	b510      	push	{r4, lr}
 8004226:	4604      	mov	r4, r0
 8004228:	f7ff fff0 	bl	800420c <__sinit_lock_acquire>
 800422c:	69a3      	ldr	r3, [r4, #24]
 800422e:	b11b      	cbz	r3, 8004238 <__sinit+0x14>
 8004230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004234:	f7ff bff0 	b.w	8004218 <__sinit_lock_release>
 8004238:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800423c:	6523      	str	r3, [r4, #80]	; 0x50
 800423e:	4b13      	ldr	r3, [pc, #76]	; (800428c <__sinit+0x68>)
 8004240:	4a13      	ldr	r2, [pc, #76]	; (8004290 <__sinit+0x6c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	62a2      	str	r2, [r4, #40]	; 0x28
 8004246:	42a3      	cmp	r3, r4
 8004248:	bf04      	itt	eq
 800424a:	2301      	moveq	r3, #1
 800424c:	61a3      	streq	r3, [r4, #24]
 800424e:	4620      	mov	r0, r4
 8004250:	f000 f820 	bl	8004294 <__sfp>
 8004254:	6060      	str	r0, [r4, #4]
 8004256:	4620      	mov	r0, r4
 8004258:	f000 f81c 	bl	8004294 <__sfp>
 800425c:	60a0      	str	r0, [r4, #8]
 800425e:	4620      	mov	r0, r4
 8004260:	f000 f818 	bl	8004294 <__sfp>
 8004264:	2200      	movs	r2, #0
 8004266:	60e0      	str	r0, [r4, #12]
 8004268:	2104      	movs	r1, #4
 800426a:	6860      	ldr	r0, [r4, #4]
 800426c:	f7ff ff82 	bl	8004174 <std>
 8004270:	68a0      	ldr	r0, [r4, #8]
 8004272:	2201      	movs	r2, #1
 8004274:	2109      	movs	r1, #9
 8004276:	f7ff ff7d 	bl	8004174 <std>
 800427a:	68e0      	ldr	r0, [r4, #12]
 800427c:	2202      	movs	r2, #2
 800427e:	2112      	movs	r1, #18
 8004280:	f7ff ff78 	bl	8004174 <std>
 8004284:	2301      	movs	r3, #1
 8004286:	61a3      	str	r3, [r4, #24]
 8004288:	e7d2      	b.n	8004230 <__sinit+0xc>
 800428a:	bf00      	nop
 800428c:	080051b8 	.word	0x080051b8
 8004290:	080041bd 	.word	0x080041bd

08004294 <__sfp>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	4607      	mov	r7, r0
 8004298:	f7ff ffac 	bl	80041f4 <__sfp_lock_acquire>
 800429c:	4b1e      	ldr	r3, [pc, #120]	; (8004318 <__sfp+0x84>)
 800429e:	681e      	ldr	r6, [r3, #0]
 80042a0:	69b3      	ldr	r3, [r6, #24]
 80042a2:	b913      	cbnz	r3, 80042aa <__sfp+0x16>
 80042a4:	4630      	mov	r0, r6
 80042a6:	f7ff ffbd 	bl	8004224 <__sinit>
 80042aa:	3648      	adds	r6, #72	; 0x48
 80042ac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80042b0:	3b01      	subs	r3, #1
 80042b2:	d503      	bpl.n	80042bc <__sfp+0x28>
 80042b4:	6833      	ldr	r3, [r6, #0]
 80042b6:	b30b      	cbz	r3, 80042fc <__sfp+0x68>
 80042b8:	6836      	ldr	r6, [r6, #0]
 80042ba:	e7f7      	b.n	80042ac <__sfp+0x18>
 80042bc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80042c0:	b9d5      	cbnz	r5, 80042f8 <__sfp+0x64>
 80042c2:	4b16      	ldr	r3, [pc, #88]	; (800431c <__sfp+0x88>)
 80042c4:	60e3      	str	r3, [r4, #12]
 80042c6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80042ca:	6665      	str	r5, [r4, #100]	; 0x64
 80042cc:	f000 f847 	bl	800435e <__retarget_lock_init_recursive>
 80042d0:	f7ff ff96 	bl	8004200 <__sfp_lock_release>
 80042d4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80042d8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80042dc:	6025      	str	r5, [r4, #0]
 80042de:	61a5      	str	r5, [r4, #24]
 80042e0:	2208      	movs	r2, #8
 80042e2:	4629      	mov	r1, r5
 80042e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80042e8:	f7ff ff24 	bl	8004134 <memset>
 80042ec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80042f0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80042f4:	4620      	mov	r0, r4
 80042f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f8:	3468      	adds	r4, #104	; 0x68
 80042fa:	e7d9      	b.n	80042b0 <__sfp+0x1c>
 80042fc:	2104      	movs	r1, #4
 80042fe:	4638      	mov	r0, r7
 8004300:	f7ff ff62 	bl	80041c8 <__sfmoreglue>
 8004304:	4604      	mov	r4, r0
 8004306:	6030      	str	r0, [r6, #0]
 8004308:	2800      	cmp	r0, #0
 800430a:	d1d5      	bne.n	80042b8 <__sfp+0x24>
 800430c:	f7ff ff78 	bl	8004200 <__sfp_lock_release>
 8004310:	230c      	movs	r3, #12
 8004312:	603b      	str	r3, [r7, #0]
 8004314:	e7ee      	b.n	80042f4 <__sfp+0x60>
 8004316:	bf00      	nop
 8004318:	080051b8 	.word	0x080051b8
 800431c:	ffff0001 	.word	0xffff0001

08004320 <_fwalk_reent>:
 8004320:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004324:	4606      	mov	r6, r0
 8004326:	4688      	mov	r8, r1
 8004328:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800432c:	2700      	movs	r7, #0
 800432e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004332:	f1b9 0901 	subs.w	r9, r9, #1
 8004336:	d505      	bpl.n	8004344 <_fwalk_reent+0x24>
 8004338:	6824      	ldr	r4, [r4, #0]
 800433a:	2c00      	cmp	r4, #0
 800433c:	d1f7      	bne.n	800432e <_fwalk_reent+0xe>
 800433e:	4638      	mov	r0, r7
 8004340:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004344:	89ab      	ldrh	r3, [r5, #12]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d907      	bls.n	800435a <_fwalk_reent+0x3a>
 800434a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800434e:	3301      	adds	r3, #1
 8004350:	d003      	beq.n	800435a <_fwalk_reent+0x3a>
 8004352:	4629      	mov	r1, r5
 8004354:	4630      	mov	r0, r6
 8004356:	47c0      	blx	r8
 8004358:	4307      	orrs	r7, r0
 800435a:	3568      	adds	r5, #104	; 0x68
 800435c:	e7e9      	b.n	8004332 <_fwalk_reent+0x12>

0800435e <__retarget_lock_init_recursive>:
 800435e:	4770      	bx	lr

08004360 <__retarget_lock_acquire_recursive>:
 8004360:	4770      	bx	lr

08004362 <__retarget_lock_release_recursive>:
 8004362:	4770      	bx	lr

08004364 <sbrk_aligned>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	4e0e      	ldr	r6, [pc, #56]	; (80043a0 <sbrk_aligned+0x3c>)
 8004368:	460c      	mov	r4, r1
 800436a:	6831      	ldr	r1, [r6, #0]
 800436c:	4605      	mov	r5, r0
 800436e:	b911      	cbnz	r1, 8004376 <sbrk_aligned+0x12>
 8004370:	f000 fb7a 	bl	8004a68 <_sbrk_r>
 8004374:	6030      	str	r0, [r6, #0]
 8004376:	4621      	mov	r1, r4
 8004378:	4628      	mov	r0, r5
 800437a:	f000 fb75 	bl	8004a68 <_sbrk_r>
 800437e:	1c43      	adds	r3, r0, #1
 8004380:	d00a      	beq.n	8004398 <sbrk_aligned+0x34>
 8004382:	1cc4      	adds	r4, r0, #3
 8004384:	f024 0403 	bic.w	r4, r4, #3
 8004388:	42a0      	cmp	r0, r4
 800438a:	d007      	beq.n	800439c <sbrk_aligned+0x38>
 800438c:	1a21      	subs	r1, r4, r0
 800438e:	4628      	mov	r0, r5
 8004390:	f000 fb6a 	bl	8004a68 <_sbrk_r>
 8004394:	3001      	adds	r0, #1
 8004396:	d101      	bne.n	800439c <sbrk_aligned+0x38>
 8004398:	f04f 34ff 	mov.w	r4, #4294967295
 800439c:	4620      	mov	r0, r4
 800439e:	bd70      	pop	{r4, r5, r6, pc}
 80043a0:	20000184 	.word	0x20000184

080043a4 <_malloc_r>:
 80043a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043a8:	1ccd      	adds	r5, r1, #3
 80043aa:	f025 0503 	bic.w	r5, r5, #3
 80043ae:	3508      	adds	r5, #8
 80043b0:	2d0c      	cmp	r5, #12
 80043b2:	bf38      	it	cc
 80043b4:	250c      	movcc	r5, #12
 80043b6:	2d00      	cmp	r5, #0
 80043b8:	4607      	mov	r7, r0
 80043ba:	db01      	blt.n	80043c0 <_malloc_r+0x1c>
 80043bc:	42a9      	cmp	r1, r5
 80043be:	d905      	bls.n	80043cc <_malloc_r+0x28>
 80043c0:	230c      	movs	r3, #12
 80043c2:	603b      	str	r3, [r7, #0]
 80043c4:	2600      	movs	r6, #0
 80043c6:	4630      	mov	r0, r6
 80043c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80043cc:	4e2e      	ldr	r6, [pc, #184]	; (8004488 <_malloc_r+0xe4>)
 80043ce:	f000 fdbb 	bl	8004f48 <__malloc_lock>
 80043d2:	6833      	ldr	r3, [r6, #0]
 80043d4:	461c      	mov	r4, r3
 80043d6:	bb34      	cbnz	r4, 8004426 <_malloc_r+0x82>
 80043d8:	4629      	mov	r1, r5
 80043da:	4638      	mov	r0, r7
 80043dc:	f7ff ffc2 	bl	8004364 <sbrk_aligned>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	4604      	mov	r4, r0
 80043e4:	d14d      	bne.n	8004482 <_malloc_r+0xde>
 80043e6:	6834      	ldr	r4, [r6, #0]
 80043e8:	4626      	mov	r6, r4
 80043ea:	2e00      	cmp	r6, #0
 80043ec:	d140      	bne.n	8004470 <_malloc_r+0xcc>
 80043ee:	6823      	ldr	r3, [r4, #0]
 80043f0:	4631      	mov	r1, r6
 80043f2:	4638      	mov	r0, r7
 80043f4:	eb04 0803 	add.w	r8, r4, r3
 80043f8:	f000 fb36 	bl	8004a68 <_sbrk_r>
 80043fc:	4580      	cmp	r8, r0
 80043fe:	d13a      	bne.n	8004476 <_malloc_r+0xd2>
 8004400:	6821      	ldr	r1, [r4, #0]
 8004402:	3503      	adds	r5, #3
 8004404:	1a6d      	subs	r5, r5, r1
 8004406:	f025 0503 	bic.w	r5, r5, #3
 800440a:	3508      	adds	r5, #8
 800440c:	2d0c      	cmp	r5, #12
 800440e:	bf38      	it	cc
 8004410:	250c      	movcc	r5, #12
 8004412:	4629      	mov	r1, r5
 8004414:	4638      	mov	r0, r7
 8004416:	f7ff ffa5 	bl	8004364 <sbrk_aligned>
 800441a:	3001      	adds	r0, #1
 800441c:	d02b      	beq.n	8004476 <_malloc_r+0xd2>
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	442b      	add	r3, r5
 8004422:	6023      	str	r3, [r4, #0]
 8004424:	e00e      	b.n	8004444 <_malloc_r+0xa0>
 8004426:	6822      	ldr	r2, [r4, #0]
 8004428:	1b52      	subs	r2, r2, r5
 800442a:	d41e      	bmi.n	800446a <_malloc_r+0xc6>
 800442c:	2a0b      	cmp	r2, #11
 800442e:	d916      	bls.n	800445e <_malloc_r+0xba>
 8004430:	1961      	adds	r1, r4, r5
 8004432:	42a3      	cmp	r3, r4
 8004434:	6025      	str	r5, [r4, #0]
 8004436:	bf18      	it	ne
 8004438:	6059      	strne	r1, [r3, #4]
 800443a:	6863      	ldr	r3, [r4, #4]
 800443c:	bf08      	it	eq
 800443e:	6031      	streq	r1, [r6, #0]
 8004440:	5162      	str	r2, [r4, r5]
 8004442:	604b      	str	r3, [r1, #4]
 8004444:	4638      	mov	r0, r7
 8004446:	f104 060b 	add.w	r6, r4, #11
 800444a:	f000 fd83 	bl	8004f54 <__malloc_unlock>
 800444e:	f026 0607 	bic.w	r6, r6, #7
 8004452:	1d23      	adds	r3, r4, #4
 8004454:	1af2      	subs	r2, r6, r3
 8004456:	d0b6      	beq.n	80043c6 <_malloc_r+0x22>
 8004458:	1b9b      	subs	r3, r3, r6
 800445a:	50a3      	str	r3, [r4, r2]
 800445c:	e7b3      	b.n	80043c6 <_malloc_r+0x22>
 800445e:	6862      	ldr	r2, [r4, #4]
 8004460:	42a3      	cmp	r3, r4
 8004462:	bf0c      	ite	eq
 8004464:	6032      	streq	r2, [r6, #0]
 8004466:	605a      	strne	r2, [r3, #4]
 8004468:	e7ec      	b.n	8004444 <_malloc_r+0xa0>
 800446a:	4623      	mov	r3, r4
 800446c:	6864      	ldr	r4, [r4, #4]
 800446e:	e7b2      	b.n	80043d6 <_malloc_r+0x32>
 8004470:	4634      	mov	r4, r6
 8004472:	6876      	ldr	r6, [r6, #4]
 8004474:	e7b9      	b.n	80043ea <_malloc_r+0x46>
 8004476:	230c      	movs	r3, #12
 8004478:	603b      	str	r3, [r7, #0]
 800447a:	4638      	mov	r0, r7
 800447c:	f000 fd6a 	bl	8004f54 <__malloc_unlock>
 8004480:	e7a1      	b.n	80043c6 <_malloc_r+0x22>
 8004482:	6025      	str	r5, [r4, #0]
 8004484:	e7de      	b.n	8004444 <_malloc_r+0xa0>
 8004486:	bf00      	nop
 8004488:	20000180 	.word	0x20000180

0800448c <__sfputc_r>:
 800448c:	6893      	ldr	r3, [r2, #8]
 800448e:	3b01      	subs	r3, #1
 8004490:	2b00      	cmp	r3, #0
 8004492:	b410      	push	{r4}
 8004494:	6093      	str	r3, [r2, #8]
 8004496:	da08      	bge.n	80044aa <__sfputc_r+0x1e>
 8004498:	6994      	ldr	r4, [r2, #24]
 800449a:	42a3      	cmp	r3, r4
 800449c:	db01      	blt.n	80044a2 <__sfputc_r+0x16>
 800449e:	290a      	cmp	r1, #10
 80044a0:	d103      	bne.n	80044aa <__sfputc_r+0x1e>
 80044a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044a6:	f000 bb33 	b.w	8004b10 <__swbuf_r>
 80044aa:	6813      	ldr	r3, [r2, #0]
 80044ac:	1c58      	adds	r0, r3, #1
 80044ae:	6010      	str	r0, [r2, #0]
 80044b0:	7019      	strb	r1, [r3, #0]
 80044b2:	4608      	mov	r0, r1
 80044b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <__sfputs_r>:
 80044ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044bc:	4606      	mov	r6, r0
 80044be:	460f      	mov	r7, r1
 80044c0:	4614      	mov	r4, r2
 80044c2:	18d5      	adds	r5, r2, r3
 80044c4:	42ac      	cmp	r4, r5
 80044c6:	d101      	bne.n	80044cc <__sfputs_r+0x12>
 80044c8:	2000      	movs	r0, #0
 80044ca:	e007      	b.n	80044dc <__sfputs_r+0x22>
 80044cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044d0:	463a      	mov	r2, r7
 80044d2:	4630      	mov	r0, r6
 80044d4:	f7ff ffda 	bl	800448c <__sfputc_r>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	d1f3      	bne.n	80044c4 <__sfputs_r+0xa>
 80044dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080044e0 <_vfiprintf_r>:
 80044e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044e4:	460d      	mov	r5, r1
 80044e6:	b09d      	sub	sp, #116	; 0x74
 80044e8:	4614      	mov	r4, r2
 80044ea:	4698      	mov	r8, r3
 80044ec:	4606      	mov	r6, r0
 80044ee:	b118      	cbz	r0, 80044f8 <_vfiprintf_r+0x18>
 80044f0:	6983      	ldr	r3, [r0, #24]
 80044f2:	b90b      	cbnz	r3, 80044f8 <_vfiprintf_r+0x18>
 80044f4:	f7ff fe96 	bl	8004224 <__sinit>
 80044f8:	4b89      	ldr	r3, [pc, #548]	; (8004720 <_vfiprintf_r+0x240>)
 80044fa:	429d      	cmp	r5, r3
 80044fc:	d11b      	bne.n	8004536 <_vfiprintf_r+0x56>
 80044fe:	6875      	ldr	r5, [r6, #4]
 8004500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004502:	07d9      	lsls	r1, r3, #31
 8004504:	d405      	bmi.n	8004512 <_vfiprintf_r+0x32>
 8004506:	89ab      	ldrh	r3, [r5, #12]
 8004508:	059a      	lsls	r2, r3, #22
 800450a:	d402      	bmi.n	8004512 <_vfiprintf_r+0x32>
 800450c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800450e:	f7ff ff27 	bl	8004360 <__retarget_lock_acquire_recursive>
 8004512:	89ab      	ldrh	r3, [r5, #12]
 8004514:	071b      	lsls	r3, r3, #28
 8004516:	d501      	bpl.n	800451c <_vfiprintf_r+0x3c>
 8004518:	692b      	ldr	r3, [r5, #16]
 800451a:	b9eb      	cbnz	r3, 8004558 <_vfiprintf_r+0x78>
 800451c:	4629      	mov	r1, r5
 800451e:	4630      	mov	r0, r6
 8004520:	f000 fb5a 	bl	8004bd8 <__swsetup_r>
 8004524:	b1c0      	cbz	r0, 8004558 <_vfiprintf_r+0x78>
 8004526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004528:	07dc      	lsls	r4, r3, #31
 800452a:	d50e      	bpl.n	800454a <_vfiprintf_r+0x6a>
 800452c:	f04f 30ff 	mov.w	r0, #4294967295
 8004530:	b01d      	add	sp, #116	; 0x74
 8004532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004536:	4b7b      	ldr	r3, [pc, #492]	; (8004724 <_vfiprintf_r+0x244>)
 8004538:	429d      	cmp	r5, r3
 800453a:	d101      	bne.n	8004540 <_vfiprintf_r+0x60>
 800453c:	68b5      	ldr	r5, [r6, #8]
 800453e:	e7df      	b.n	8004500 <_vfiprintf_r+0x20>
 8004540:	4b79      	ldr	r3, [pc, #484]	; (8004728 <_vfiprintf_r+0x248>)
 8004542:	429d      	cmp	r5, r3
 8004544:	bf08      	it	eq
 8004546:	68f5      	ldreq	r5, [r6, #12]
 8004548:	e7da      	b.n	8004500 <_vfiprintf_r+0x20>
 800454a:	89ab      	ldrh	r3, [r5, #12]
 800454c:	0598      	lsls	r0, r3, #22
 800454e:	d4ed      	bmi.n	800452c <_vfiprintf_r+0x4c>
 8004550:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004552:	f7ff ff06 	bl	8004362 <__retarget_lock_release_recursive>
 8004556:	e7e9      	b.n	800452c <_vfiprintf_r+0x4c>
 8004558:	2300      	movs	r3, #0
 800455a:	9309      	str	r3, [sp, #36]	; 0x24
 800455c:	2320      	movs	r3, #32
 800455e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004562:	f8cd 800c 	str.w	r8, [sp, #12]
 8004566:	2330      	movs	r3, #48	; 0x30
 8004568:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800472c <_vfiprintf_r+0x24c>
 800456c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004570:	f04f 0901 	mov.w	r9, #1
 8004574:	4623      	mov	r3, r4
 8004576:	469a      	mov	sl, r3
 8004578:	f813 2b01 	ldrb.w	r2, [r3], #1
 800457c:	b10a      	cbz	r2, 8004582 <_vfiprintf_r+0xa2>
 800457e:	2a25      	cmp	r2, #37	; 0x25
 8004580:	d1f9      	bne.n	8004576 <_vfiprintf_r+0x96>
 8004582:	ebba 0b04 	subs.w	fp, sl, r4
 8004586:	d00b      	beq.n	80045a0 <_vfiprintf_r+0xc0>
 8004588:	465b      	mov	r3, fp
 800458a:	4622      	mov	r2, r4
 800458c:	4629      	mov	r1, r5
 800458e:	4630      	mov	r0, r6
 8004590:	f7ff ff93 	bl	80044ba <__sfputs_r>
 8004594:	3001      	adds	r0, #1
 8004596:	f000 80aa 	beq.w	80046ee <_vfiprintf_r+0x20e>
 800459a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800459c:	445a      	add	r2, fp
 800459e:	9209      	str	r2, [sp, #36]	; 0x24
 80045a0:	f89a 3000 	ldrb.w	r3, [sl]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80a2 	beq.w	80046ee <_vfiprintf_r+0x20e>
 80045aa:	2300      	movs	r3, #0
 80045ac:	f04f 32ff 	mov.w	r2, #4294967295
 80045b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80045b4:	f10a 0a01 	add.w	sl, sl, #1
 80045b8:	9304      	str	r3, [sp, #16]
 80045ba:	9307      	str	r3, [sp, #28]
 80045bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80045c0:	931a      	str	r3, [sp, #104]	; 0x68
 80045c2:	4654      	mov	r4, sl
 80045c4:	2205      	movs	r2, #5
 80045c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80045ca:	4858      	ldr	r0, [pc, #352]	; (800472c <_vfiprintf_r+0x24c>)
 80045cc:	f7fb fe00 	bl	80001d0 <memchr>
 80045d0:	9a04      	ldr	r2, [sp, #16]
 80045d2:	b9d8      	cbnz	r0, 800460c <_vfiprintf_r+0x12c>
 80045d4:	06d1      	lsls	r1, r2, #27
 80045d6:	bf44      	itt	mi
 80045d8:	2320      	movmi	r3, #32
 80045da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045de:	0713      	lsls	r3, r2, #28
 80045e0:	bf44      	itt	mi
 80045e2:	232b      	movmi	r3, #43	; 0x2b
 80045e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80045e8:	f89a 3000 	ldrb.w	r3, [sl]
 80045ec:	2b2a      	cmp	r3, #42	; 0x2a
 80045ee:	d015      	beq.n	800461c <_vfiprintf_r+0x13c>
 80045f0:	9a07      	ldr	r2, [sp, #28]
 80045f2:	4654      	mov	r4, sl
 80045f4:	2000      	movs	r0, #0
 80045f6:	f04f 0c0a 	mov.w	ip, #10
 80045fa:	4621      	mov	r1, r4
 80045fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004600:	3b30      	subs	r3, #48	; 0x30
 8004602:	2b09      	cmp	r3, #9
 8004604:	d94e      	bls.n	80046a4 <_vfiprintf_r+0x1c4>
 8004606:	b1b0      	cbz	r0, 8004636 <_vfiprintf_r+0x156>
 8004608:	9207      	str	r2, [sp, #28]
 800460a:	e014      	b.n	8004636 <_vfiprintf_r+0x156>
 800460c:	eba0 0308 	sub.w	r3, r0, r8
 8004610:	fa09 f303 	lsl.w	r3, r9, r3
 8004614:	4313      	orrs	r3, r2
 8004616:	9304      	str	r3, [sp, #16]
 8004618:	46a2      	mov	sl, r4
 800461a:	e7d2      	b.n	80045c2 <_vfiprintf_r+0xe2>
 800461c:	9b03      	ldr	r3, [sp, #12]
 800461e:	1d19      	adds	r1, r3, #4
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	9103      	str	r1, [sp, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	bfbb      	ittet	lt
 8004628:	425b      	neglt	r3, r3
 800462a:	f042 0202 	orrlt.w	r2, r2, #2
 800462e:	9307      	strge	r3, [sp, #28]
 8004630:	9307      	strlt	r3, [sp, #28]
 8004632:	bfb8      	it	lt
 8004634:	9204      	strlt	r2, [sp, #16]
 8004636:	7823      	ldrb	r3, [r4, #0]
 8004638:	2b2e      	cmp	r3, #46	; 0x2e
 800463a:	d10c      	bne.n	8004656 <_vfiprintf_r+0x176>
 800463c:	7863      	ldrb	r3, [r4, #1]
 800463e:	2b2a      	cmp	r3, #42	; 0x2a
 8004640:	d135      	bne.n	80046ae <_vfiprintf_r+0x1ce>
 8004642:	9b03      	ldr	r3, [sp, #12]
 8004644:	1d1a      	adds	r2, r3, #4
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	9203      	str	r2, [sp, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	bfb8      	it	lt
 800464e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004652:	3402      	adds	r4, #2
 8004654:	9305      	str	r3, [sp, #20]
 8004656:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800473c <_vfiprintf_r+0x25c>
 800465a:	7821      	ldrb	r1, [r4, #0]
 800465c:	2203      	movs	r2, #3
 800465e:	4650      	mov	r0, sl
 8004660:	f7fb fdb6 	bl	80001d0 <memchr>
 8004664:	b140      	cbz	r0, 8004678 <_vfiprintf_r+0x198>
 8004666:	2340      	movs	r3, #64	; 0x40
 8004668:	eba0 000a 	sub.w	r0, r0, sl
 800466c:	fa03 f000 	lsl.w	r0, r3, r0
 8004670:	9b04      	ldr	r3, [sp, #16]
 8004672:	4303      	orrs	r3, r0
 8004674:	3401      	adds	r4, #1
 8004676:	9304      	str	r3, [sp, #16]
 8004678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800467c:	482c      	ldr	r0, [pc, #176]	; (8004730 <_vfiprintf_r+0x250>)
 800467e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004682:	2206      	movs	r2, #6
 8004684:	f7fb fda4 	bl	80001d0 <memchr>
 8004688:	2800      	cmp	r0, #0
 800468a:	d03f      	beq.n	800470c <_vfiprintf_r+0x22c>
 800468c:	4b29      	ldr	r3, [pc, #164]	; (8004734 <_vfiprintf_r+0x254>)
 800468e:	bb1b      	cbnz	r3, 80046d8 <_vfiprintf_r+0x1f8>
 8004690:	9b03      	ldr	r3, [sp, #12]
 8004692:	3307      	adds	r3, #7
 8004694:	f023 0307 	bic.w	r3, r3, #7
 8004698:	3308      	adds	r3, #8
 800469a:	9303      	str	r3, [sp, #12]
 800469c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800469e:	443b      	add	r3, r7
 80046a0:	9309      	str	r3, [sp, #36]	; 0x24
 80046a2:	e767      	b.n	8004574 <_vfiprintf_r+0x94>
 80046a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80046a8:	460c      	mov	r4, r1
 80046aa:	2001      	movs	r0, #1
 80046ac:	e7a5      	b.n	80045fa <_vfiprintf_r+0x11a>
 80046ae:	2300      	movs	r3, #0
 80046b0:	3401      	adds	r4, #1
 80046b2:	9305      	str	r3, [sp, #20]
 80046b4:	4619      	mov	r1, r3
 80046b6:	f04f 0c0a 	mov.w	ip, #10
 80046ba:	4620      	mov	r0, r4
 80046bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046c0:	3a30      	subs	r2, #48	; 0x30
 80046c2:	2a09      	cmp	r2, #9
 80046c4:	d903      	bls.n	80046ce <_vfiprintf_r+0x1ee>
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d0c5      	beq.n	8004656 <_vfiprintf_r+0x176>
 80046ca:	9105      	str	r1, [sp, #20]
 80046cc:	e7c3      	b.n	8004656 <_vfiprintf_r+0x176>
 80046ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80046d2:	4604      	mov	r4, r0
 80046d4:	2301      	movs	r3, #1
 80046d6:	e7f0      	b.n	80046ba <_vfiprintf_r+0x1da>
 80046d8:	ab03      	add	r3, sp, #12
 80046da:	9300      	str	r3, [sp, #0]
 80046dc:	462a      	mov	r2, r5
 80046de:	4b16      	ldr	r3, [pc, #88]	; (8004738 <_vfiprintf_r+0x258>)
 80046e0:	a904      	add	r1, sp, #16
 80046e2:	4630      	mov	r0, r6
 80046e4:	f3af 8000 	nop.w
 80046e8:	4607      	mov	r7, r0
 80046ea:	1c78      	adds	r0, r7, #1
 80046ec:	d1d6      	bne.n	800469c <_vfiprintf_r+0x1bc>
 80046ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80046f0:	07d9      	lsls	r1, r3, #31
 80046f2:	d405      	bmi.n	8004700 <_vfiprintf_r+0x220>
 80046f4:	89ab      	ldrh	r3, [r5, #12]
 80046f6:	059a      	lsls	r2, r3, #22
 80046f8:	d402      	bmi.n	8004700 <_vfiprintf_r+0x220>
 80046fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80046fc:	f7ff fe31 	bl	8004362 <__retarget_lock_release_recursive>
 8004700:	89ab      	ldrh	r3, [r5, #12]
 8004702:	065b      	lsls	r3, r3, #25
 8004704:	f53f af12 	bmi.w	800452c <_vfiprintf_r+0x4c>
 8004708:	9809      	ldr	r0, [sp, #36]	; 0x24
 800470a:	e711      	b.n	8004530 <_vfiprintf_r+0x50>
 800470c:	ab03      	add	r3, sp, #12
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	462a      	mov	r2, r5
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <_vfiprintf_r+0x258>)
 8004714:	a904      	add	r1, sp, #16
 8004716:	4630      	mov	r0, r6
 8004718:	f000 f880 	bl	800481c <_printf_i>
 800471c:	e7e4      	b.n	80046e8 <_vfiprintf_r+0x208>
 800471e:	bf00      	nop
 8004720:	080051dc 	.word	0x080051dc
 8004724:	080051fc 	.word	0x080051fc
 8004728:	080051bc 	.word	0x080051bc
 800472c:	0800521c 	.word	0x0800521c
 8004730:	08005226 	.word	0x08005226
 8004734:	00000000 	.word	0x00000000
 8004738:	080044bb 	.word	0x080044bb
 800473c:	08005222 	.word	0x08005222

08004740 <_printf_common>:
 8004740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004744:	4616      	mov	r6, r2
 8004746:	4699      	mov	r9, r3
 8004748:	688a      	ldr	r2, [r1, #8]
 800474a:	690b      	ldr	r3, [r1, #16]
 800474c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004750:	4293      	cmp	r3, r2
 8004752:	bfb8      	it	lt
 8004754:	4613      	movlt	r3, r2
 8004756:	6033      	str	r3, [r6, #0]
 8004758:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800475c:	4607      	mov	r7, r0
 800475e:	460c      	mov	r4, r1
 8004760:	b10a      	cbz	r2, 8004766 <_printf_common+0x26>
 8004762:	3301      	adds	r3, #1
 8004764:	6033      	str	r3, [r6, #0]
 8004766:	6823      	ldr	r3, [r4, #0]
 8004768:	0699      	lsls	r1, r3, #26
 800476a:	bf42      	ittt	mi
 800476c:	6833      	ldrmi	r3, [r6, #0]
 800476e:	3302      	addmi	r3, #2
 8004770:	6033      	strmi	r3, [r6, #0]
 8004772:	6825      	ldr	r5, [r4, #0]
 8004774:	f015 0506 	ands.w	r5, r5, #6
 8004778:	d106      	bne.n	8004788 <_printf_common+0x48>
 800477a:	f104 0a19 	add.w	sl, r4, #25
 800477e:	68e3      	ldr	r3, [r4, #12]
 8004780:	6832      	ldr	r2, [r6, #0]
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	42ab      	cmp	r3, r5
 8004786:	dc26      	bgt.n	80047d6 <_printf_common+0x96>
 8004788:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800478c:	1e13      	subs	r3, r2, #0
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	bf18      	it	ne
 8004792:	2301      	movne	r3, #1
 8004794:	0692      	lsls	r2, r2, #26
 8004796:	d42b      	bmi.n	80047f0 <_printf_common+0xb0>
 8004798:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800479c:	4649      	mov	r1, r9
 800479e:	4638      	mov	r0, r7
 80047a0:	47c0      	blx	r8
 80047a2:	3001      	adds	r0, #1
 80047a4:	d01e      	beq.n	80047e4 <_printf_common+0xa4>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	68e5      	ldr	r5, [r4, #12]
 80047aa:	6832      	ldr	r2, [r6, #0]
 80047ac:	f003 0306 	and.w	r3, r3, #6
 80047b0:	2b04      	cmp	r3, #4
 80047b2:	bf08      	it	eq
 80047b4:	1aad      	subeq	r5, r5, r2
 80047b6:	68a3      	ldr	r3, [r4, #8]
 80047b8:	6922      	ldr	r2, [r4, #16]
 80047ba:	bf0c      	ite	eq
 80047bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80047c0:	2500      	movne	r5, #0
 80047c2:	4293      	cmp	r3, r2
 80047c4:	bfc4      	itt	gt
 80047c6:	1a9b      	subgt	r3, r3, r2
 80047c8:	18ed      	addgt	r5, r5, r3
 80047ca:	2600      	movs	r6, #0
 80047cc:	341a      	adds	r4, #26
 80047ce:	42b5      	cmp	r5, r6
 80047d0:	d11a      	bne.n	8004808 <_printf_common+0xc8>
 80047d2:	2000      	movs	r0, #0
 80047d4:	e008      	b.n	80047e8 <_printf_common+0xa8>
 80047d6:	2301      	movs	r3, #1
 80047d8:	4652      	mov	r2, sl
 80047da:	4649      	mov	r1, r9
 80047dc:	4638      	mov	r0, r7
 80047de:	47c0      	blx	r8
 80047e0:	3001      	adds	r0, #1
 80047e2:	d103      	bne.n	80047ec <_printf_common+0xac>
 80047e4:	f04f 30ff 	mov.w	r0, #4294967295
 80047e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ec:	3501      	adds	r5, #1
 80047ee:	e7c6      	b.n	800477e <_printf_common+0x3e>
 80047f0:	18e1      	adds	r1, r4, r3
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	2030      	movs	r0, #48	; 0x30
 80047f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80047fa:	4422      	add	r2, r4
 80047fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004800:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004804:	3302      	adds	r3, #2
 8004806:	e7c7      	b.n	8004798 <_printf_common+0x58>
 8004808:	2301      	movs	r3, #1
 800480a:	4622      	mov	r2, r4
 800480c:	4649      	mov	r1, r9
 800480e:	4638      	mov	r0, r7
 8004810:	47c0      	blx	r8
 8004812:	3001      	adds	r0, #1
 8004814:	d0e6      	beq.n	80047e4 <_printf_common+0xa4>
 8004816:	3601      	adds	r6, #1
 8004818:	e7d9      	b.n	80047ce <_printf_common+0x8e>
	...

0800481c <_printf_i>:
 800481c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004820:	7e0f      	ldrb	r7, [r1, #24]
 8004822:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004824:	2f78      	cmp	r7, #120	; 0x78
 8004826:	4691      	mov	r9, r2
 8004828:	4680      	mov	r8, r0
 800482a:	460c      	mov	r4, r1
 800482c:	469a      	mov	sl, r3
 800482e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004832:	d807      	bhi.n	8004844 <_printf_i+0x28>
 8004834:	2f62      	cmp	r7, #98	; 0x62
 8004836:	d80a      	bhi.n	800484e <_printf_i+0x32>
 8004838:	2f00      	cmp	r7, #0
 800483a:	f000 80d8 	beq.w	80049ee <_printf_i+0x1d2>
 800483e:	2f58      	cmp	r7, #88	; 0x58
 8004840:	f000 80a3 	beq.w	800498a <_printf_i+0x16e>
 8004844:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004848:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800484c:	e03a      	b.n	80048c4 <_printf_i+0xa8>
 800484e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004852:	2b15      	cmp	r3, #21
 8004854:	d8f6      	bhi.n	8004844 <_printf_i+0x28>
 8004856:	a101      	add	r1, pc, #4	; (adr r1, 800485c <_printf_i+0x40>)
 8004858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800485c:	080048b5 	.word	0x080048b5
 8004860:	080048c9 	.word	0x080048c9
 8004864:	08004845 	.word	0x08004845
 8004868:	08004845 	.word	0x08004845
 800486c:	08004845 	.word	0x08004845
 8004870:	08004845 	.word	0x08004845
 8004874:	080048c9 	.word	0x080048c9
 8004878:	08004845 	.word	0x08004845
 800487c:	08004845 	.word	0x08004845
 8004880:	08004845 	.word	0x08004845
 8004884:	08004845 	.word	0x08004845
 8004888:	080049d5 	.word	0x080049d5
 800488c:	080048f9 	.word	0x080048f9
 8004890:	080049b7 	.word	0x080049b7
 8004894:	08004845 	.word	0x08004845
 8004898:	08004845 	.word	0x08004845
 800489c:	080049f7 	.word	0x080049f7
 80048a0:	08004845 	.word	0x08004845
 80048a4:	080048f9 	.word	0x080048f9
 80048a8:	08004845 	.word	0x08004845
 80048ac:	08004845 	.word	0x08004845
 80048b0:	080049bf 	.word	0x080049bf
 80048b4:	682b      	ldr	r3, [r5, #0]
 80048b6:	1d1a      	adds	r2, r3, #4
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	602a      	str	r2, [r5, #0]
 80048bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80048c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0a3      	b.n	8004a10 <_printf_i+0x1f4>
 80048c8:	6820      	ldr	r0, [r4, #0]
 80048ca:	6829      	ldr	r1, [r5, #0]
 80048cc:	0606      	lsls	r6, r0, #24
 80048ce:	f101 0304 	add.w	r3, r1, #4
 80048d2:	d50a      	bpl.n	80048ea <_printf_i+0xce>
 80048d4:	680e      	ldr	r6, [r1, #0]
 80048d6:	602b      	str	r3, [r5, #0]
 80048d8:	2e00      	cmp	r6, #0
 80048da:	da03      	bge.n	80048e4 <_printf_i+0xc8>
 80048dc:	232d      	movs	r3, #45	; 0x2d
 80048de:	4276      	negs	r6, r6
 80048e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048e4:	485e      	ldr	r0, [pc, #376]	; (8004a60 <_printf_i+0x244>)
 80048e6:	230a      	movs	r3, #10
 80048e8:	e019      	b.n	800491e <_printf_i+0x102>
 80048ea:	680e      	ldr	r6, [r1, #0]
 80048ec:	602b      	str	r3, [r5, #0]
 80048ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80048f2:	bf18      	it	ne
 80048f4:	b236      	sxthne	r6, r6
 80048f6:	e7ef      	b.n	80048d8 <_printf_i+0xbc>
 80048f8:	682b      	ldr	r3, [r5, #0]
 80048fa:	6820      	ldr	r0, [r4, #0]
 80048fc:	1d19      	adds	r1, r3, #4
 80048fe:	6029      	str	r1, [r5, #0]
 8004900:	0601      	lsls	r1, r0, #24
 8004902:	d501      	bpl.n	8004908 <_printf_i+0xec>
 8004904:	681e      	ldr	r6, [r3, #0]
 8004906:	e002      	b.n	800490e <_printf_i+0xf2>
 8004908:	0646      	lsls	r6, r0, #25
 800490a:	d5fb      	bpl.n	8004904 <_printf_i+0xe8>
 800490c:	881e      	ldrh	r6, [r3, #0]
 800490e:	4854      	ldr	r0, [pc, #336]	; (8004a60 <_printf_i+0x244>)
 8004910:	2f6f      	cmp	r7, #111	; 0x6f
 8004912:	bf0c      	ite	eq
 8004914:	2308      	moveq	r3, #8
 8004916:	230a      	movne	r3, #10
 8004918:	2100      	movs	r1, #0
 800491a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800491e:	6865      	ldr	r5, [r4, #4]
 8004920:	60a5      	str	r5, [r4, #8]
 8004922:	2d00      	cmp	r5, #0
 8004924:	bfa2      	ittt	ge
 8004926:	6821      	ldrge	r1, [r4, #0]
 8004928:	f021 0104 	bicge.w	r1, r1, #4
 800492c:	6021      	strge	r1, [r4, #0]
 800492e:	b90e      	cbnz	r6, 8004934 <_printf_i+0x118>
 8004930:	2d00      	cmp	r5, #0
 8004932:	d04d      	beq.n	80049d0 <_printf_i+0x1b4>
 8004934:	4615      	mov	r5, r2
 8004936:	fbb6 f1f3 	udiv	r1, r6, r3
 800493a:	fb03 6711 	mls	r7, r3, r1, r6
 800493e:	5dc7      	ldrb	r7, [r0, r7]
 8004940:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004944:	4637      	mov	r7, r6
 8004946:	42bb      	cmp	r3, r7
 8004948:	460e      	mov	r6, r1
 800494a:	d9f4      	bls.n	8004936 <_printf_i+0x11a>
 800494c:	2b08      	cmp	r3, #8
 800494e:	d10b      	bne.n	8004968 <_printf_i+0x14c>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	07de      	lsls	r6, r3, #31
 8004954:	d508      	bpl.n	8004968 <_printf_i+0x14c>
 8004956:	6923      	ldr	r3, [r4, #16]
 8004958:	6861      	ldr	r1, [r4, #4]
 800495a:	4299      	cmp	r1, r3
 800495c:	bfde      	ittt	le
 800495e:	2330      	movle	r3, #48	; 0x30
 8004960:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004964:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004968:	1b52      	subs	r2, r2, r5
 800496a:	6122      	str	r2, [r4, #16]
 800496c:	f8cd a000 	str.w	sl, [sp]
 8004970:	464b      	mov	r3, r9
 8004972:	aa03      	add	r2, sp, #12
 8004974:	4621      	mov	r1, r4
 8004976:	4640      	mov	r0, r8
 8004978:	f7ff fee2 	bl	8004740 <_printf_common>
 800497c:	3001      	adds	r0, #1
 800497e:	d14c      	bne.n	8004a1a <_printf_i+0x1fe>
 8004980:	f04f 30ff 	mov.w	r0, #4294967295
 8004984:	b004      	add	sp, #16
 8004986:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800498a:	4835      	ldr	r0, [pc, #212]	; (8004a60 <_printf_i+0x244>)
 800498c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004990:	6829      	ldr	r1, [r5, #0]
 8004992:	6823      	ldr	r3, [r4, #0]
 8004994:	f851 6b04 	ldr.w	r6, [r1], #4
 8004998:	6029      	str	r1, [r5, #0]
 800499a:	061d      	lsls	r5, r3, #24
 800499c:	d514      	bpl.n	80049c8 <_printf_i+0x1ac>
 800499e:	07df      	lsls	r7, r3, #31
 80049a0:	bf44      	itt	mi
 80049a2:	f043 0320 	orrmi.w	r3, r3, #32
 80049a6:	6023      	strmi	r3, [r4, #0]
 80049a8:	b91e      	cbnz	r6, 80049b2 <_printf_i+0x196>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	f023 0320 	bic.w	r3, r3, #32
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	2310      	movs	r3, #16
 80049b4:	e7b0      	b.n	8004918 <_printf_i+0xfc>
 80049b6:	6823      	ldr	r3, [r4, #0]
 80049b8:	f043 0320 	orr.w	r3, r3, #32
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	2378      	movs	r3, #120	; 0x78
 80049c0:	4828      	ldr	r0, [pc, #160]	; (8004a64 <_printf_i+0x248>)
 80049c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80049c6:	e7e3      	b.n	8004990 <_printf_i+0x174>
 80049c8:	0659      	lsls	r1, r3, #25
 80049ca:	bf48      	it	mi
 80049cc:	b2b6      	uxthmi	r6, r6
 80049ce:	e7e6      	b.n	800499e <_printf_i+0x182>
 80049d0:	4615      	mov	r5, r2
 80049d2:	e7bb      	b.n	800494c <_printf_i+0x130>
 80049d4:	682b      	ldr	r3, [r5, #0]
 80049d6:	6826      	ldr	r6, [r4, #0]
 80049d8:	6961      	ldr	r1, [r4, #20]
 80049da:	1d18      	adds	r0, r3, #4
 80049dc:	6028      	str	r0, [r5, #0]
 80049de:	0635      	lsls	r5, r6, #24
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	d501      	bpl.n	80049e8 <_printf_i+0x1cc>
 80049e4:	6019      	str	r1, [r3, #0]
 80049e6:	e002      	b.n	80049ee <_printf_i+0x1d2>
 80049e8:	0670      	lsls	r0, r6, #25
 80049ea:	d5fb      	bpl.n	80049e4 <_printf_i+0x1c8>
 80049ec:	8019      	strh	r1, [r3, #0]
 80049ee:	2300      	movs	r3, #0
 80049f0:	6123      	str	r3, [r4, #16]
 80049f2:	4615      	mov	r5, r2
 80049f4:	e7ba      	b.n	800496c <_printf_i+0x150>
 80049f6:	682b      	ldr	r3, [r5, #0]
 80049f8:	1d1a      	adds	r2, r3, #4
 80049fa:	602a      	str	r2, [r5, #0]
 80049fc:	681d      	ldr	r5, [r3, #0]
 80049fe:	6862      	ldr	r2, [r4, #4]
 8004a00:	2100      	movs	r1, #0
 8004a02:	4628      	mov	r0, r5
 8004a04:	f7fb fbe4 	bl	80001d0 <memchr>
 8004a08:	b108      	cbz	r0, 8004a0e <_printf_i+0x1f2>
 8004a0a:	1b40      	subs	r0, r0, r5
 8004a0c:	6060      	str	r0, [r4, #4]
 8004a0e:	6863      	ldr	r3, [r4, #4]
 8004a10:	6123      	str	r3, [r4, #16]
 8004a12:	2300      	movs	r3, #0
 8004a14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a18:	e7a8      	b.n	800496c <_printf_i+0x150>
 8004a1a:	6923      	ldr	r3, [r4, #16]
 8004a1c:	462a      	mov	r2, r5
 8004a1e:	4649      	mov	r1, r9
 8004a20:	4640      	mov	r0, r8
 8004a22:	47d0      	blx	sl
 8004a24:	3001      	adds	r0, #1
 8004a26:	d0ab      	beq.n	8004980 <_printf_i+0x164>
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	079b      	lsls	r3, r3, #30
 8004a2c:	d413      	bmi.n	8004a56 <_printf_i+0x23a>
 8004a2e:	68e0      	ldr	r0, [r4, #12]
 8004a30:	9b03      	ldr	r3, [sp, #12]
 8004a32:	4298      	cmp	r0, r3
 8004a34:	bfb8      	it	lt
 8004a36:	4618      	movlt	r0, r3
 8004a38:	e7a4      	b.n	8004984 <_printf_i+0x168>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	4632      	mov	r2, r6
 8004a3e:	4649      	mov	r1, r9
 8004a40:	4640      	mov	r0, r8
 8004a42:	47d0      	blx	sl
 8004a44:	3001      	adds	r0, #1
 8004a46:	d09b      	beq.n	8004980 <_printf_i+0x164>
 8004a48:	3501      	adds	r5, #1
 8004a4a:	68e3      	ldr	r3, [r4, #12]
 8004a4c:	9903      	ldr	r1, [sp, #12]
 8004a4e:	1a5b      	subs	r3, r3, r1
 8004a50:	42ab      	cmp	r3, r5
 8004a52:	dcf2      	bgt.n	8004a3a <_printf_i+0x21e>
 8004a54:	e7eb      	b.n	8004a2e <_printf_i+0x212>
 8004a56:	2500      	movs	r5, #0
 8004a58:	f104 0619 	add.w	r6, r4, #25
 8004a5c:	e7f5      	b.n	8004a4a <_printf_i+0x22e>
 8004a5e:	bf00      	nop
 8004a60:	0800522d 	.word	0x0800522d
 8004a64:	0800523e 	.word	0x0800523e

08004a68 <_sbrk_r>:
 8004a68:	b538      	push	{r3, r4, r5, lr}
 8004a6a:	4d06      	ldr	r5, [pc, #24]	; (8004a84 <_sbrk_r+0x1c>)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	4604      	mov	r4, r0
 8004a70:	4608      	mov	r0, r1
 8004a72:	602b      	str	r3, [r5, #0]
 8004a74:	f7fc f8ce 	bl	8000c14 <_sbrk>
 8004a78:	1c43      	adds	r3, r0, #1
 8004a7a:	d102      	bne.n	8004a82 <_sbrk_r+0x1a>
 8004a7c:	682b      	ldr	r3, [r5, #0]
 8004a7e:	b103      	cbz	r3, 8004a82 <_sbrk_r+0x1a>
 8004a80:	6023      	str	r3, [r4, #0]
 8004a82:	bd38      	pop	{r3, r4, r5, pc}
 8004a84:	20000188 	.word	0x20000188

08004a88 <__sread>:
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	460c      	mov	r4, r1
 8004a8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a90:	f000 fab2 	bl	8004ff8 <_read_r>
 8004a94:	2800      	cmp	r0, #0
 8004a96:	bfab      	itete	ge
 8004a98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004a9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004a9c:	181b      	addge	r3, r3, r0
 8004a9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004aa2:	bfac      	ite	ge
 8004aa4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004aa6:	81a3      	strhlt	r3, [r4, #12]
 8004aa8:	bd10      	pop	{r4, pc}

08004aaa <__swrite>:
 8004aaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aae:	461f      	mov	r7, r3
 8004ab0:	898b      	ldrh	r3, [r1, #12]
 8004ab2:	05db      	lsls	r3, r3, #23
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	460c      	mov	r4, r1
 8004ab8:	4616      	mov	r6, r2
 8004aba:	d505      	bpl.n	8004ac8 <__swrite+0x1e>
 8004abc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f000 f9c8 	bl	8004e58 <_lseek_r>
 8004ac8:	89a3      	ldrh	r3, [r4, #12]
 8004aca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004ace:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ad2:	81a3      	strh	r3, [r4, #12]
 8004ad4:	4632      	mov	r2, r6
 8004ad6:	463b      	mov	r3, r7
 8004ad8:	4628      	mov	r0, r5
 8004ada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ade:	f000 b869 	b.w	8004bb4 <_write_r>

08004ae2 <__sseek>:
 8004ae2:	b510      	push	{r4, lr}
 8004ae4:	460c      	mov	r4, r1
 8004ae6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004aea:	f000 f9b5 	bl	8004e58 <_lseek_r>
 8004aee:	1c43      	adds	r3, r0, #1
 8004af0:	89a3      	ldrh	r3, [r4, #12]
 8004af2:	bf15      	itete	ne
 8004af4:	6560      	strne	r0, [r4, #84]	; 0x54
 8004af6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004afa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004afe:	81a3      	strheq	r3, [r4, #12]
 8004b00:	bf18      	it	ne
 8004b02:	81a3      	strhne	r3, [r4, #12]
 8004b04:	bd10      	pop	{r4, pc}

08004b06 <__sclose>:
 8004b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b0a:	f000 b8d3 	b.w	8004cb4 <_close_r>
	...

08004b10 <__swbuf_r>:
 8004b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b12:	460e      	mov	r6, r1
 8004b14:	4614      	mov	r4, r2
 8004b16:	4605      	mov	r5, r0
 8004b18:	b118      	cbz	r0, 8004b22 <__swbuf_r+0x12>
 8004b1a:	6983      	ldr	r3, [r0, #24]
 8004b1c:	b90b      	cbnz	r3, 8004b22 <__swbuf_r+0x12>
 8004b1e:	f7ff fb81 	bl	8004224 <__sinit>
 8004b22:	4b21      	ldr	r3, [pc, #132]	; (8004ba8 <__swbuf_r+0x98>)
 8004b24:	429c      	cmp	r4, r3
 8004b26:	d12b      	bne.n	8004b80 <__swbuf_r+0x70>
 8004b28:	686c      	ldr	r4, [r5, #4]
 8004b2a:	69a3      	ldr	r3, [r4, #24]
 8004b2c:	60a3      	str	r3, [r4, #8]
 8004b2e:	89a3      	ldrh	r3, [r4, #12]
 8004b30:	071a      	lsls	r2, r3, #28
 8004b32:	d52f      	bpl.n	8004b94 <__swbuf_r+0x84>
 8004b34:	6923      	ldr	r3, [r4, #16]
 8004b36:	b36b      	cbz	r3, 8004b94 <__swbuf_r+0x84>
 8004b38:	6923      	ldr	r3, [r4, #16]
 8004b3a:	6820      	ldr	r0, [r4, #0]
 8004b3c:	1ac0      	subs	r0, r0, r3
 8004b3e:	6963      	ldr	r3, [r4, #20]
 8004b40:	b2f6      	uxtb	r6, r6
 8004b42:	4283      	cmp	r3, r0
 8004b44:	4637      	mov	r7, r6
 8004b46:	dc04      	bgt.n	8004b52 <__swbuf_r+0x42>
 8004b48:	4621      	mov	r1, r4
 8004b4a:	4628      	mov	r0, r5
 8004b4c:	f000 f948 	bl	8004de0 <_fflush_r>
 8004b50:	bb30      	cbnz	r0, 8004ba0 <__swbuf_r+0x90>
 8004b52:	68a3      	ldr	r3, [r4, #8]
 8004b54:	3b01      	subs	r3, #1
 8004b56:	60a3      	str	r3, [r4, #8]
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	1c5a      	adds	r2, r3, #1
 8004b5c:	6022      	str	r2, [r4, #0]
 8004b5e:	701e      	strb	r6, [r3, #0]
 8004b60:	6963      	ldr	r3, [r4, #20]
 8004b62:	3001      	adds	r0, #1
 8004b64:	4283      	cmp	r3, r0
 8004b66:	d004      	beq.n	8004b72 <__swbuf_r+0x62>
 8004b68:	89a3      	ldrh	r3, [r4, #12]
 8004b6a:	07db      	lsls	r3, r3, #31
 8004b6c:	d506      	bpl.n	8004b7c <__swbuf_r+0x6c>
 8004b6e:	2e0a      	cmp	r6, #10
 8004b70:	d104      	bne.n	8004b7c <__swbuf_r+0x6c>
 8004b72:	4621      	mov	r1, r4
 8004b74:	4628      	mov	r0, r5
 8004b76:	f000 f933 	bl	8004de0 <_fflush_r>
 8004b7a:	b988      	cbnz	r0, 8004ba0 <__swbuf_r+0x90>
 8004b7c:	4638      	mov	r0, r7
 8004b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b80:	4b0a      	ldr	r3, [pc, #40]	; (8004bac <__swbuf_r+0x9c>)
 8004b82:	429c      	cmp	r4, r3
 8004b84:	d101      	bne.n	8004b8a <__swbuf_r+0x7a>
 8004b86:	68ac      	ldr	r4, [r5, #8]
 8004b88:	e7cf      	b.n	8004b2a <__swbuf_r+0x1a>
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <__swbuf_r+0xa0>)
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	bf08      	it	eq
 8004b90:	68ec      	ldreq	r4, [r5, #12]
 8004b92:	e7ca      	b.n	8004b2a <__swbuf_r+0x1a>
 8004b94:	4621      	mov	r1, r4
 8004b96:	4628      	mov	r0, r5
 8004b98:	f000 f81e 	bl	8004bd8 <__swsetup_r>
 8004b9c:	2800      	cmp	r0, #0
 8004b9e:	d0cb      	beq.n	8004b38 <__swbuf_r+0x28>
 8004ba0:	f04f 37ff 	mov.w	r7, #4294967295
 8004ba4:	e7ea      	b.n	8004b7c <__swbuf_r+0x6c>
 8004ba6:	bf00      	nop
 8004ba8:	080051dc 	.word	0x080051dc
 8004bac:	080051fc 	.word	0x080051fc
 8004bb0:	080051bc 	.word	0x080051bc

08004bb4 <_write_r>:
 8004bb4:	b538      	push	{r3, r4, r5, lr}
 8004bb6:	4d07      	ldr	r5, [pc, #28]	; (8004bd4 <_write_r+0x20>)
 8004bb8:	4604      	mov	r4, r0
 8004bba:	4608      	mov	r0, r1
 8004bbc:	4611      	mov	r1, r2
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	602a      	str	r2, [r5, #0]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f7fb ffd5 	bl	8000b72 <_write>
 8004bc8:	1c43      	adds	r3, r0, #1
 8004bca:	d102      	bne.n	8004bd2 <_write_r+0x1e>
 8004bcc:	682b      	ldr	r3, [r5, #0]
 8004bce:	b103      	cbz	r3, 8004bd2 <_write_r+0x1e>
 8004bd0:	6023      	str	r3, [r4, #0]
 8004bd2:	bd38      	pop	{r3, r4, r5, pc}
 8004bd4:	20000188 	.word	0x20000188

08004bd8 <__swsetup_r>:
 8004bd8:	4b32      	ldr	r3, [pc, #200]	; (8004ca4 <__swsetup_r+0xcc>)
 8004bda:	b570      	push	{r4, r5, r6, lr}
 8004bdc:	681d      	ldr	r5, [r3, #0]
 8004bde:	4606      	mov	r6, r0
 8004be0:	460c      	mov	r4, r1
 8004be2:	b125      	cbz	r5, 8004bee <__swsetup_r+0x16>
 8004be4:	69ab      	ldr	r3, [r5, #24]
 8004be6:	b913      	cbnz	r3, 8004bee <__swsetup_r+0x16>
 8004be8:	4628      	mov	r0, r5
 8004bea:	f7ff fb1b 	bl	8004224 <__sinit>
 8004bee:	4b2e      	ldr	r3, [pc, #184]	; (8004ca8 <__swsetup_r+0xd0>)
 8004bf0:	429c      	cmp	r4, r3
 8004bf2:	d10f      	bne.n	8004c14 <__swsetup_r+0x3c>
 8004bf4:	686c      	ldr	r4, [r5, #4]
 8004bf6:	89a3      	ldrh	r3, [r4, #12]
 8004bf8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004bfc:	0719      	lsls	r1, r3, #28
 8004bfe:	d42c      	bmi.n	8004c5a <__swsetup_r+0x82>
 8004c00:	06dd      	lsls	r5, r3, #27
 8004c02:	d411      	bmi.n	8004c28 <__swsetup_r+0x50>
 8004c04:	2309      	movs	r3, #9
 8004c06:	6033      	str	r3, [r6, #0]
 8004c08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004c0c:	81a3      	strh	r3, [r4, #12]
 8004c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c12:	e03e      	b.n	8004c92 <__swsetup_r+0xba>
 8004c14:	4b25      	ldr	r3, [pc, #148]	; (8004cac <__swsetup_r+0xd4>)
 8004c16:	429c      	cmp	r4, r3
 8004c18:	d101      	bne.n	8004c1e <__swsetup_r+0x46>
 8004c1a:	68ac      	ldr	r4, [r5, #8]
 8004c1c:	e7eb      	b.n	8004bf6 <__swsetup_r+0x1e>
 8004c1e:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <__swsetup_r+0xd8>)
 8004c20:	429c      	cmp	r4, r3
 8004c22:	bf08      	it	eq
 8004c24:	68ec      	ldreq	r4, [r5, #12]
 8004c26:	e7e6      	b.n	8004bf6 <__swsetup_r+0x1e>
 8004c28:	0758      	lsls	r0, r3, #29
 8004c2a:	d512      	bpl.n	8004c52 <__swsetup_r+0x7a>
 8004c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c2e:	b141      	cbz	r1, 8004c42 <__swsetup_r+0x6a>
 8004c30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c34:	4299      	cmp	r1, r3
 8004c36:	d002      	beq.n	8004c3e <__swsetup_r+0x66>
 8004c38:	4630      	mov	r0, r6
 8004c3a:	f000 f991 	bl	8004f60 <_free_r>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	6363      	str	r3, [r4, #52]	; 0x34
 8004c42:	89a3      	ldrh	r3, [r4, #12]
 8004c44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c48:	81a3      	strh	r3, [r4, #12]
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	6063      	str	r3, [r4, #4]
 8004c4e:	6923      	ldr	r3, [r4, #16]
 8004c50:	6023      	str	r3, [r4, #0]
 8004c52:	89a3      	ldrh	r3, [r4, #12]
 8004c54:	f043 0308 	orr.w	r3, r3, #8
 8004c58:	81a3      	strh	r3, [r4, #12]
 8004c5a:	6923      	ldr	r3, [r4, #16]
 8004c5c:	b94b      	cbnz	r3, 8004c72 <__swsetup_r+0x9a>
 8004c5e:	89a3      	ldrh	r3, [r4, #12]
 8004c60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c68:	d003      	beq.n	8004c72 <__swsetup_r+0x9a>
 8004c6a:	4621      	mov	r1, r4
 8004c6c:	4630      	mov	r0, r6
 8004c6e:	f000 f92b 	bl	8004ec8 <__smakebuf_r>
 8004c72:	89a0      	ldrh	r0, [r4, #12]
 8004c74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004c78:	f010 0301 	ands.w	r3, r0, #1
 8004c7c:	d00a      	beq.n	8004c94 <__swsetup_r+0xbc>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60a3      	str	r3, [r4, #8]
 8004c82:	6963      	ldr	r3, [r4, #20]
 8004c84:	425b      	negs	r3, r3
 8004c86:	61a3      	str	r3, [r4, #24]
 8004c88:	6923      	ldr	r3, [r4, #16]
 8004c8a:	b943      	cbnz	r3, 8004c9e <__swsetup_r+0xc6>
 8004c8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004c90:	d1ba      	bne.n	8004c08 <__swsetup_r+0x30>
 8004c92:	bd70      	pop	{r4, r5, r6, pc}
 8004c94:	0781      	lsls	r1, r0, #30
 8004c96:	bf58      	it	pl
 8004c98:	6963      	ldrpl	r3, [r4, #20]
 8004c9a:	60a3      	str	r3, [r4, #8]
 8004c9c:	e7f4      	b.n	8004c88 <__swsetup_r+0xb0>
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	e7f7      	b.n	8004c92 <__swsetup_r+0xba>
 8004ca2:	bf00      	nop
 8004ca4:	2000000c 	.word	0x2000000c
 8004ca8:	080051dc 	.word	0x080051dc
 8004cac:	080051fc 	.word	0x080051fc
 8004cb0:	080051bc 	.word	0x080051bc

08004cb4 <_close_r>:
 8004cb4:	b538      	push	{r3, r4, r5, lr}
 8004cb6:	4d06      	ldr	r5, [pc, #24]	; (8004cd0 <_close_r+0x1c>)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	4604      	mov	r4, r0
 8004cbc:	4608      	mov	r0, r1
 8004cbe:	602b      	str	r3, [r5, #0]
 8004cc0:	f7fb ff73 	bl	8000baa <_close>
 8004cc4:	1c43      	adds	r3, r0, #1
 8004cc6:	d102      	bne.n	8004cce <_close_r+0x1a>
 8004cc8:	682b      	ldr	r3, [r5, #0]
 8004cca:	b103      	cbz	r3, 8004cce <_close_r+0x1a>
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	bd38      	pop	{r3, r4, r5, pc}
 8004cd0:	20000188 	.word	0x20000188

08004cd4 <__sflush_r>:
 8004cd4:	898a      	ldrh	r2, [r1, #12]
 8004cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cda:	4605      	mov	r5, r0
 8004cdc:	0710      	lsls	r0, r2, #28
 8004cde:	460c      	mov	r4, r1
 8004ce0:	d458      	bmi.n	8004d94 <__sflush_r+0xc0>
 8004ce2:	684b      	ldr	r3, [r1, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	dc05      	bgt.n	8004cf4 <__sflush_r+0x20>
 8004ce8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	dc02      	bgt.n	8004cf4 <__sflush_r+0x20>
 8004cee:	2000      	movs	r0, #0
 8004cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cf4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cf6:	2e00      	cmp	r6, #0
 8004cf8:	d0f9      	beq.n	8004cee <__sflush_r+0x1a>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d00:	682f      	ldr	r7, [r5, #0]
 8004d02:	602b      	str	r3, [r5, #0]
 8004d04:	d032      	beq.n	8004d6c <__sflush_r+0x98>
 8004d06:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d08:	89a3      	ldrh	r3, [r4, #12]
 8004d0a:	075a      	lsls	r2, r3, #29
 8004d0c:	d505      	bpl.n	8004d1a <__sflush_r+0x46>
 8004d0e:	6863      	ldr	r3, [r4, #4]
 8004d10:	1ac0      	subs	r0, r0, r3
 8004d12:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d14:	b10b      	cbz	r3, 8004d1a <__sflush_r+0x46>
 8004d16:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d18:	1ac0      	subs	r0, r0, r3
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d20:	6a21      	ldr	r1, [r4, #32]
 8004d22:	4628      	mov	r0, r5
 8004d24:	47b0      	blx	r6
 8004d26:	1c43      	adds	r3, r0, #1
 8004d28:	89a3      	ldrh	r3, [r4, #12]
 8004d2a:	d106      	bne.n	8004d3a <__sflush_r+0x66>
 8004d2c:	6829      	ldr	r1, [r5, #0]
 8004d2e:	291d      	cmp	r1, #29
 8004d30:	d82c      	bhi.n	8004d8c <__sflush_r+0xb8>
 8004d32:	4a2a      	ldr	r2, [pc, #168]	; (8004ddc <__sflush_r+0x108>)
 8004d34:	40ca      	lsrs	r2, r1
 8004d36:	07d6      	lsls	r6, r2, #31
 8004d38:	d528      	bpl.n	8004d8c <__sflush_r+0xb8>
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	6062      	str	r2, [r4, #4]
 8004d3e:	04d9      	lsls	r1, r3, #19
 8004d40:	6922      	ldr	r2, [r4, #16]
 8004d42:	6022      	str	r2, [r4, #0]
 8004d44:	d504      	bpl.n	8004d50 <__sflush_r+0x7c>
 8004d46:	1c42      	adds	r2, r0, #1
 8004d48:	d101      	bne.n	8004d4e <__sflush_r+0x7a>
 8004d4a:	682b      	ldr	r3, [r5, #0]
 8004d4c:	b903      	cbnz	r3, 8004d50 <__sflush_r+0x7c>
 8004d4e:	6560      	str	r0, [r4, #84]	; 0x54
 8004d50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d52:	602f      	str	r7, [r5, #0]
 8004d54:	2900      	cmp	r1, #0
 8004d56:	d0ca      	beq.n	8004cee <__sflush_r+0x1a>
 8004d58:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d5c:	4299      	cmp	r1, r3
 8004d5e:	d002      	beq.n	8004d66 <__sflush_r+0x92>
 8004d60:	4628      	mov	r0, r5
 8004d62:	f000 f8fd 	bl	8004f60 <_free_r>
 8004d66:	2000      	movs	r0, #0
 8004d68:	6360      	str	r0, [r4, #52]	; 0x34
 8004d6a:	e7c1      	b.n	8004cf0 <__sflush_r+0x1c>
 8004d6c:	6a21      	ldr	r1, [r4, #32]
 8004d6e:	2301      	movs	r3, #1
 8004d70:	4628      	mov	r0, r5
 8004d72:	47b0      	blx	r6
 8004d74:	1c41      	adds	r1, r0, #1
 8004d76:	d1c7      	bne.n	8004d08 <__sflush_r+0x34>
 8004d78:	682b      	ldr	r3, [r5, #0]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d0c4      	beq.n	8004d08 <__sflush_r+0x34>
 8004d7e:	2b1d      	cmp	r3, #29
 8004d80:	d001      	beq.n	8004d86 <__sflush_r+0xb2>
 8004d82:	2b16      	cmp	r3, #22
 8004d84:	d101      	bne.n	8004d8a <__sflush_r+0xb6>
 8004d86:	602f      	str	r7, [r5, #0]
 8004d88:	e7b1      	b.n	8004cee <__sflush_r+0x1a>
 8004d8a:	89a3      	ldrh	r3, [r4, #12]
 8004d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d90:	81a3      	strh	r3, [r4, #12]
 8004d92:	e7ad      	b.n	8004cf0 <__sflush_r+0x1c>
 8004d94:	690f      	ldr	r7, [r1, #16]
 8004d96:	2f00      	cmp	r7, #0
 8004d98:	d0a9      	beq.n	8004cee <__sflush_r+0x1a>
 8004d9a:	0793      	lsls	r3, r2, #30
 8004d9c:	680e      	ldr	r6, [r1, #0]
 8004d9e:	bf08      	it	eq
 8004da0:	694b      	ldreq	r3, [r1, #20]
 8004da2:	600f      	str	r7, [r1, #0]
 8004da4:	bf18      	it	ne
 8004da6:	2300      	movne	r3, #0
 8004da8:	eba6 0807 	sub.w	r8, r6, r7
 8004dac:	608b      	str	r3, [r1, #8]
 8004dae:	f1b8 0f00 	cmp.w	r8, #0
 8004db2:	dd9c      	ble.n	8004cee <__sflush_r+0x1a>
 8004db4:	6a21      	ldr	r1, [r4, #32]
 8004db6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004db8:	4643      	mov	r3, r8
 8004dba:	463a      	mov	r2, r7
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47b0      	blx	r6
 8004dc0:	2800      	cmp	r0, #0
 8004dc2:	dc06      	bgt.n	8004dd2 <__sflush_r+0xfe>
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd0:	e78e      	b.n	8004cf0 <__sflush_r+0x1c>
 8004dd2:	4407      	add	r7, r0
 8004dd4:	eba8 0800 	sub.w	r8, r8, r0
 8004dd8:	e7e9      	b.n	8004dae <__sflush_r+0xda>
 8004dda:	bf00      	nop
 8004ddc:	20400001 	.word	0x20400001

08004de0 <_fflush_r>:
 8004de0:	b538      	push	{r3, r4, r5, lr}
 8004de2:	690b      	ldr	r3, [r1, #16]
 8004de4:	4605      	mov	r5, r0
 8004de6:	460c      	mov	r4, r1
 8004de8:	b913      	cbnz	r3, 8004df0 <_fflush_r+0x10>
 8004dea:	2500      	movs	r5, #0
 8004dec:	4628      	mov	r0, r5
 8004dee:	bd38      	pop	{r3, r4, r5, pc}
 8004df0:	b118      	cbz	r0, 8004dfa <_fflush_r+0x1a>
 8004df2:	6983      	ldr	r3, [r0, #24]
 8004df4:	b90b      	cbnz	r3, 8004dfa <_fflush_r+0x1a>
 8004df6:	f7ff fa15 	bl	8004224 <__sinit>
 8004dfa:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <_fflush_r+0x6c>)
 8004dfc:	429c      	cmp	r4, r3
 8004dfe:	d11b      	bne.n	8004e38 <_fflush_r+0x58>
 8004e00:	686c      	ldr	r4, [r5, #4]
 8004e02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d0ef      	beq.n	8004dea <_fflush_r+0xa>
 8004e0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e0c:	07d0      	lsls	r0, r2, #31
 8004e0e:	d404      	bmi.n	8004e1a <_fflush_r+0x3a>
 8004e10:	0599      	lsls	r1, r3, #22
 8004e12:	d402      	bmi.n	8004e1a <_fflush_r+0x3a>
 8004e14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e16:	f7ff faa3 	bl	8004360 <__retarget_lock_acquire_recursive>
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	f7ff ff59 	bl	8004cd4 <__sflush_r>
 8004e22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e24:	07da      	lsls	r2, r3, #31
 8004e26:	4605      	mov	r5, r0
 8004e28:	d4e0      	bmi.n	8004dec <_fflush_r+0xc>
 8004e2a:	89a3      	ldrh	r3, [r4, #12]
 8004e2c:	059b      	lsls	r3, r3, #22
 8004e2e:	d4dd      	bmi.n	8004dec <_fflush_r+0xc>
 8004e30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e32:	f7ff fa96 	bl	8004362 <__retarget_lock_release_recursive>
 8004e36:	e7d9      	b.n	8004dec <_fflush_r+0xc>
 8004e38:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <_fflush_r+0x70>)
 8004e3a:	429c      	cmp	r4, r3
 8004e3c:	d101      	bne.n	8004e42 <_fflush_r+0x62>
 8004e3e:	68ac      	ldr	r4, [r5, #8]
 8004e40:	e7df      	b.n	8004e02 <_fflush_r+0x22>
 8004e42:	4b04      	ldr	r3, [pc, #16]	; (8004e54 <_fflush_r+0x74>)
 8004e44:	429c      	cmp	r4, r3
 8004e46:	bf08      	it	eq
 8004e48:	68ec      	ldreq	r4, [r5, #12]
 8004e4a:	e7da      	b.n	8004e02 <_fflush_r+0x22>
 8004e4c:	080051dc 	.word	0x080051dc
 8004e50:	080051fc 	.word	0x080051fc
 8004e54:	080051bc 	.word	0x080051bc

08004e58 <_lseek_r>:
 8004e58:	b538      	push	{r3, r4, r5, lr}
 8004e5a:	4d07      	ldr	r5, [pc, #28]	; (8004e78 <_lseek_r+0x20>)
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	4608      	mov	r0, r1
 8004e60:	4611      	mov	r1, r2
 8004e62:	2200      	movs	r2, #0
 8004e64:	602a      	str	r2, [r5, #0]
 8004e66:	461a      	mov	r2, r3
 8004e68:	f7fb fec6 	bl	8000bf8 <_lseek>
 8004e6c:	1c43      	adds	r3, r0, #1
 8004e6e:	d102      	bne.n	8004e76 <_lseek_r+0x1e>
 8004e70:	682b      	ldr	r3, [r5, #0]
 8004e72:	b103      	cbz	r3, 8004e76 <_lseek_r+0x1e>
 8004e74:	6023      	str	r3, [r4, #0]
 8004e76:	bd38      	pop	{r3, r4, r5, pc}
 8004e78:	20000188 	.word	0x20000188

08004e7c <__swhatbuf_r>:
 8004e7c:	b570      	push	{r4, r5, r6, lr}
 8004e7e:	460e      	mov	r6, r1
 8004e80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e84:	2900      	cmp	r1, #0
 8004e86:	b096      	sub	sp, #88	; 0x58
 8004e88:	4614      	mov	r4, r2
 8004e8a:	461d      	mov	r5, r3
 8004e8c:	da08      	bge.n	8004ea0 <__swhatbuf_r+0x24>
 8004e8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	602a      	str	r2, [r5, #0]
 8004e96:	061a      	lsls	r2, r3, #24
 8004e98:	d410      	bmi.n	8004ebc <__swhatbuf_r+0x40>
 8004e9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e9e:	e00e      	b.n	8004ebe <__swhatbuf_r+0x42>
 8004ea0:	466a      	mov	r2, sp
 8004ea2:	f000 f8bb 	bl	800501c <_fstat_r>
 8004ea6:	2800      	cmp	r0, #0
 8004ea8:	dbf1      	blt.n	8004e8e <__swhatbuf_r+0x12>
 8004eaa:	9a01      	ldr	r2, [sp, #4]
 8004eac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004eb0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004eb4:	425a      	negs	r2, r3
 8004eb6:	415a      	adcs	r2, r3
 8004eb8:	602a      	str	r2, [r5, #0]
 8004eba:	e7ee      	b.n	8004e9a <__swhatbuf_r+0x1e>
 8004ebc:	2340      	movs	r3, #64	; 0x40
 8004ebe:	2000      	movs	r0, #0
 8004ec0:	6023      	str	r3, [r4, #0]
 8004ec2:	b016      	add	sp, #88	; 0x58
 8004ec4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004ec8 <__smakebuf_r>:
 8004ec8:	898b      	ldrh	r3, [r1, #12]
 8004eca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ecc:	079d      	lsls	r5, r3, #30
 8004ece:	4606      	mov	r6, r0
 8004ed0:	460c      	mov	r4, r1
 8004ed2:	d507      	bpl.n	8004ee4 <__smakebuf_r+0x1c>
 8004ed4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ed8:	6023      	str	r3, [r4, #0]
 8004eda:	6123      	str	r3, [r4, #16]
 8004edc:	2301      	movs	r3, #1
 8004ede:	6163      	str	r3, [r4, #20]
 8004ee0:	b002      	add	sp, #8
 8004ee2:	bd70      	pop	{r4, r5, r6, pc}
 8004ee4:	ab01      	add	r3, sp, #4
 8004ee6:	466a      	mov	r2, sp
 8004ee8:	f7ff ffc8 	bl	8004e7c <__swhatbuf_r>
 8004eec:	9900      	ldr	r1, [sp, #0]
 8004eee:	4605      	mov	r5, r0
 8004ef0:	4630      	mov	r0, r6
 8004ef2:	f7ff fa57 	bl	80043a4 <_malloc_r>
 8004ef6:	b948      	cbnz	r0, 8004f0c <__smakebuf_r+0x44>
 8004ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004efc:	059a      	lsls	r2, r3, #22
 8004efe:	d4ef      	bmi.n	8004ee0 <__smakebuf_r+0x18>
 8004f00:	f023 0303 	bic.w	r3, r3, #3
 8004f04:	f043 0302 	orr.w	r3, r3, #2
 8004f08:	81a3      	strh	r3, [r4, #12]
 8004f0a:	e7e3      	b.n	8004ed4 <__smakebuf_r+0xc>
 8004f0c:	4b0d      	ldr	r3, [pc, #52]	; (8004f44 <__smakebuf_r+0x7c>)
 8004f0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f10:	89a3      	ldrh	r3, [r4, #12]
 8004f12:	6020      	str	r0, [r4, #0]
 8004f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f18:	81a3      	strh	r3, [r4, #12]
 8004f1a:	9b00      	ldr	r3, [sp, #0]
 8004f1c:	6163      	str	r3, [r4, #20]
 8004f1e:	9b01      	ldr	r3, [sp, #4]
 8004f20:	6120      	str	r0, [r4, #16]
 8004f22:	b15b      	cbz	r3, 8004f3c <__smakebuf_r+0x74>
 8004f24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f28:	4630      	mov	r0, r6
 8004f2a:	f000 f889 	bl	8005040 <_isatty_r>
 8004f2e:	b128      	cbz	r0, 8004f3c <__smakebuf_r+0x74>
 8004f30:	89a3      	ldrh	r3, [r4, #12]
 8004f32:	f023 0303 	bic.w	r3, r3, #3
 8004f36:	f043 0301 	orr.w	r3, r3, #1
 8004f3a:	81a3      	strh	r3, [r4, #12]
 8004f3c:	89a0      	ldrh	r0, [r4, #12]
 8004f3e:	4305      	orrs	r5, r0
 8004f40:	81a5      	strh	r5, [r4, #12]
 8004f42:	e7cd      	b.n	8004ee0 <__smakebuf_r+0x18>
 8004f44:	080041bd 	.word	0x080041bd

08004f48 <__malloc_lock>:
 8004f48:	4801      	ldr	r0, [pc, #4]	; (8004f50 <__malloc_lock+0x8>)
 8004f4a:	f7ff ba09 	b.w	8004360 <__retarget_lock_acquire_recursive>
 8004f4e:	bf00      	nop
 8004f50:	2000017c 	.word	0x2000017c

08004f54 <__malloc_unlock>:
 8004f54:	4801      	ldr	r0, [pc, #4]	; (8004f5c <__malloc_unlock+0x8>)
 8004f56:	f7ff ba04 	b.w	8004362 <__retarget_lock_release_recursive>
 8004f5a:	bf00      	nop
 8004f5c:	2000017c 	.word	0x2000017c

08004f60 <_free_r>:
 8004f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f62:	2900      	cmp	r1, #0
 8004f64:	d044      	beq.n	8004ff0 <_free_r+0x90>
 8004f66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f6a:	9001      	str	r0, [sp, #4]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f1a1 0404 	sub.w	r4, r1, #4
 8004f72:	bfb8      	it	lt
 8004f74:	18e4      	addlt	r4, r4, r3
 8004f76:	f7ff ffe7 	bl	8004f48 <__malloc_lock>
 8004f7a:	4a1e      	ldr	r2, [pc, #120]	; (8004ff4 <_free_r+0x94>)
 8004f7c:	9801      	ldr	r0, [sp, #4]
 8004f7e:	6813      	ldr	r3, [r2, #0]
 8004f80:	b933      	cbnz	r3, 8004f90 <_free_r+0x30>
 8004f82:	6063      	str	r3, [r4, #4]
 8004f84:	6014      	str	r4, [r2, #0]
 8004f86:	b003      	add	sp, #12
 8004f88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f8c:	f7ff bfe2 	b.w	8004f54 <__malloc_unlock>
 8004f90:	42a3      	cmp	r3, r4
 8004f92:	d908      	bls.n	8004fa6 <_free_r+0x46>
 8004f94:	6825      	ldr	r5, [r4, #0]
 8004f96:	1961      	adds	r1, r4, r5
 8004f98:	428b      	cmp	r3, r1
 8004f9a:	bf01      	itttt	eq
 8004f9c:	6819      	ldreq	r1, [r3, #0]
 8004f9e:	685b      	ldreq	r3, [r3, #4]
 8004fa0:	1949      	addeq	r1, r1, r5
 8004fa2:	6021      	streq	r1, [r4, #0]
 8004fa4:	e7ed      	b.n	8004f82 <_free_r+0x22>
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	b10b      	cbz	r3, 8004fb0 <_free_r+0x50>
 8004fac:	42a3      	cmp	r3, r4
 8004fae:	d9fa      	bls.n	8004fa6 <_free_r+0x46>
 8004fb0:	6811      	ldr	r1, [r2, #0]
 8004fb2:	1855      	adds	r5, r2, r1
 8004fb4:	42a5      	cmp	r5, r4
 8004fb6:	d10b      	bne.n	8004fd0 <_free_r+0x70>
 8004fb8:	6824      	ldr	r4, [r4, #0]
 8004fba:	4421      	add	r1, r4
 8004fbc:	1854      	adds	r4, r2, r1
 8004fbe:	42a3      	cmp	r3, r4
 8004fc0:	6011      	str	r1, [r2, #0]
 8004fc2:	d1e0      	bne.n	8004f86 <_free_r+0x26>
 8004fc4:	681c      	ldr	r4, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	6053      	str	r3, [r2, #4]
 8004fca:	4421      	add	r1, r4
 8004fcc:	6011      	str	r1, [r2, #0]
 8004fce:	e7da      	b.n	8004f86 <_free_r+0x26>
 8004fd0:	d902      	bls.n	8004fd8 <_free_r+0x78>
 8004fd2:	230c      	movs	r3, #12
 8004fd4:	6003      	str	r3, [r0, #0]
 8004fd6:	e7d6      	b.n	8004f86 <_free_r+0x26>
 8004fd8:	6825      	ldr	r5, [r4, #0]
 8004fda:	1961      	adds	r1, r4, r5
 8004fdc:	428b      	cmp	r3, r1
 8004fde:	bf04      	itt	eq
 8004fe0:	6819      	ldreq	r1, [r3, #0]
 8004fe2:	685b      	ldreq	r3, [r3, #4]
 8004fe4:	6063      	str	r3, [r4, #4]
 8004fe6:	bf04      	itt	eq
 8004fe8:	1949      	addeq	r1, r1, r5
 8004fea:	6021      	streq	r1, [r4, #0]
 8004fec:	6054      	str	r4, [r2, #4]
 8004fee:	e7ca      	b.n	8004f86 <_free_r+0x26>
 8004ff0:	b003      	add	sp, #12
 8004ff2:	bd30      	pop	{r4, r5, pc}
 8004ff4:	20000180 	.word	0x20000180

08004ff8 <_read_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4d07      	ldr	r5, [pc, #28]	; (8005018 <_read_r+0x20>)
 8004ffc:	4604      	mov	r4, r0
 8004ffe:	4608      	mov	r0, r1
 8005000:	4611      	mov	r1, r2
 8005002:	2200      	movs	r2, #0
 8005004:	602a      	str	r2, [r5, #0]
 8005006:	461a      	mov	r2, r3
 8005008:	f7fb fd96 	bl	8000b38 <_read>
 800500c:	1c43      	adds	r3, r0, #1
 800500e:	d102      	bne.n	8005016 <_read_r+0x1e>
 8005010:	682b      	ldr	r3, [r5, #0]
 8005012:	b103      	cbz	r3, 8005016 <_read_r+0x1e>
 8005014:	6023      	str	r3, [r4, #0]
 8005016:	bd38      	pop	{r3, r4, r5, pc}
 8005018:	20000188 	.word	0x20000188

0800501c <_fstat_r>:
 800501c:	b538      	push	{r3, r4, r5, lr}
 800501e:	4d07      	ldr	r5, [pc, #28]	; (800503c <_fstat_r+0x20>)
 8005020:	2300      	movs	r3, #0
 8005022:	4604      	mov	r4, r0
 8005024:	4608      	mov	r0, r1
 8005026:	4611      	mov	r1, r2
 8005028:	602b      	str	r3, [r5, #0]
 800502a:	f7fb fdca 	bl	8000bc2 <_fstat>
 800502e:	1c43      	adds	r3, r0, #1
 8005030:	d102      	bne.n	8005038 <_fstat_r+0x1c>
 8005032:	682b      	ldr	r3, [r5, #0]
 8005034:	b103      	cbz	r3, 8005038 <_fstat_r+0x1c>
 8005036:	6023      	str	r3, [r4, #0]
 8005038:	bd38      	pop	{r3, r4, r5, pc}
 800503a:	bf00      	nop
 800503c:	20000188 	.word	0x20000188

08005040 <_isatty_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4d06      	ldr	r5, [pc, #24]	; (800505c <_isatty_r+0x1c>)
 8005044:	2300      	movs	r3, #0
 8005046:	4604      	mov	r4, r0
 8005048:	4608      	mov	r0, r1
 800504a:	602b      	str	r3, [r5, #0]
 800504c:	f7fb fdc9 	bl	8000be2 <_isatty>
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d102      	bne.n	800505a <_isatty_r+0x1a>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	b103      	cbz	r3, 800505a <_isatty_r+0x1a>
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	20000188 	.word	0x20000188

08005060 <_init>:
 8005060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005062:	bf00      	nop
 8005064:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005066:	bc08      	pop	{r3}
 8005068:	469e      	mov	lr, r3
 800506a:	4770      	bx	lr

0800506c <_fini>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	bf00      	nop
 8005070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005072:	bc08      	pop	{r3}
 8005074:	469e      	mov	lr, r3
 8005076:	4770      	bx	lr
