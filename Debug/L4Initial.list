
L4Initial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000800  08005354  08005354  00015354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b54  08005b54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005b54  08005b54  00015b54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b5c  08005b5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b5c  08005b5c  00015b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b60  08005b60  00015b60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005b64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08005bd4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08005bd4  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000deb2  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6a  00000000  00000000  0002df52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  0002fec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b40  00000000  00000000  00030ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b31a  00000000  00000000  00031618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e155  00000000  00000000  0004c932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5a05  00000000  00000000  0005aa87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010048c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038bc  00000000  00000000  001004dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800533c 	.word	0x0800533c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0800533c 	.word	0x0800533c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <__io_putchar>:
 * @brief  Retargets the C library printf function to the USART.
 * @param  None
 * @retval None
 */
#if(_DEBUG)
PUTCHAR_PROTOTYPE {
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 800057c:	1d39      	adds	r1, r7, #4
 800057e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000582:	2201      	movs	r2, #1
 8000584:	4803      	ldr	r0, [pc, #12]	; (8000594 <__io_putchar+0x20>)
 8000586:	f003 fa6d 	bl	8003a64 <HAL_UART_Transmit>

	return ch;
 800058a:	687b      	ldr	r3, [r7, #4]
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	200000f0 	.word	0x200000f0

08000598 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800059e:	f000 ff83 	bl	80014a8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a2:	f000 f86d 	bl	8000680 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a6:	f000 f929 	bl	80007fc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005aa:	f000 f8f7 	bl	800079c <MX_USART2_UART_Init>
	MX_SPI1_Init();
 80005ae:	f000 f8b7 	bl	8000720 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	int upTime = 0;
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
	uint8_t status = 0;
 80005b6:	2300      	movs	r3, #0
 80005b8:	71fb      	strb	r3, [r7, #7]
	uint8_t data = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71bb      	strb	r3, [r7, #6]

	uint8_t sil_rev_short = 0b0000000;
 80005be:	2300      	movs	r3, #0
 80005c0:	717b      	strb	r3, [r7, #5]

	printf("Checking Silicon Rev Bits\n\r");
 80005c2:	4824      	ldr	r0, [pc, #144]	; (8000654 <main+0xbc>)
 80005c4:	f003 ff2c 	bl	8004420 <iprintf>
	AX_Radio_RW_Short_Address(&sil_rev_short, &status, &data, &hspi1, 0xff, 0);
 80005c8:	1dba      	adds	r2, r7, #6
 80005ca:	1df9      	adds	r1, r7, #7
 80005cc:	1d78      	adds	r0, r7, #5
 80005ce:	2300      	movs	r3, #0
 80005d0:	9301      	str	r3, [sp, #4]
 80005d2:	23ff      	movs	r3, #255	; 0xff
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	4b20      	ldr	r3, [pc, #128]	; (8000658 <main+0xc0>)
 80005d8:	f000 fb71 	bl	8000cbe <AX_Radio_RW_Short_Address>
	upTime++;
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3301      	adds	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
	printf("Sys Uptime: %d\n\r", upTime);
 80005e2:	68f9      	ldr	r1, [r7, #12]
 80005e4:	481d      	ldr	r0, [pc, #116]	; (800065c <main+0xc4>)
 80005e6:	f003 ff1b 	bl	8004420 <iprintf>
	printf("Status Bits: %x\n\r", status);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4619      	mov	r1, r3
 80005ee:	481c      	ldr	r0, [pc, #112]	; (8000660 <main+0xc8>)
 80005f0:	f003 ff16 	bl	8004420 <iprintf>
	printf("Silicon Rev Bits: %x\n\n\r", data);
 80005f4:	79bb      	ldrb	r3, [r7, #6]
 80005f6:	4619      	mov	r1, r3
 80005f8:	481a      	ldr	r0, [pc, #104]	; (8000664 <main+0xcc>)
 80005fa:	f003 ff11 	bl	8004420 <iprintf>
	HAL_Delay(3000);
 80005fe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000602:	f000 ffcd 	bl	80015a0 <HAL_Delay>

	printf("Attempting to init radio in full transmit @ 433MHz\n\r");
 8000606:	4818      	ldr	r0, [pc, #96]	; (8000668 <main+0xd0>)
 8000608:	f003 ff0a 	bl	8004420 <iprintf>
//	int init_status = AX_Radio_Init(&hspi1);
	int init_status = AX_Radio_Full_Init(&hspi1);
 800060c:	4812      	ldr	r0, [pc, #72]	; (8000658 <main+0xc0>)
 800060e:	f000 fed7 	bl	80013c0 <AX_Radio_Full_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	60bb      	str	r3, [r7, #8]
	printf("Result: %d\n\r", init_status);
 8000616:	68b9      	ldr	r1, [r7, #8]
 8000618:	4814      	ldr	r0, [pc, #80]	; (800066c <main+0xd4>)
 800061a:	f003 ff01 	bl	8004420 <iprintf>
	printf("Entering eternal loop\n\n\r");
 800061e:	4814      	ldr	r0, [pc, #80]	; (8000670 <main+0xd8>)
 8000620:	f003 fefe 	bl	8004420 <iprintf>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		printf("Switching to full TX\n\r");
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <main+0xdc>)
 8000626:	f003 fefb 	bl	8004420 <iprintf>
		AX_Radio_FIFO_Routine(&hspi1);
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <main+0xc0>)
 800062c:	f000 fe0c 	bl	8001248 <AX_Radio_FIFO_Routine>
		printf("AX Status %x\n\r", AX_Radio_Get_Status(&hspi1));
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <main+0xc0>)
 8000632:	f000 fed9 	bl	80013e8 <AX_Radio_Get_Status>
 8000636:	4603      	mov	r3, r0
 8000638:	4619      	mov	r1, r3
 800063a:	480f      	ldr	r0, [pc, #60]	; (8000678 <main+0xe0>)
 800063c:	f003 fef0 	bl	8004420 <iprintf>
		printf("PLL Status %x\n\r", AX_Radio_Check_PLL(&hspi1));
 8000640:	4805      	ldr	r0, [pc, #20]	; (8000658 <main+0xc0>)
 8000642:	f000 fef3 	bl	800142c <AX_Radio_Check_PLL>
 8000646:	4603      	mov	r3, r0
 8000648:	4619      	mov	r1, r3
 800064a:	480c      	ldr	r0, [pc, #48]	; (800067c <main+0xe4>)
 800064c:	f003 fee8 	bl	8004420 <iprintf>
		printf("Switching to full TX\n\r");
 8000650:	e7e8      	b.n	8000624 <main+0x8c>
 8000652:	bf00      	nop
 8000654:	08005354 	.word	0x08005354
 8000658:	2000008c 	.word	0x2000008c
 800065c:	08005370 	.word	0x08005370
 8000660:	08005384 	.word	0x08005384
 8000664:	08005398 	.word	0x08005398
 8000668:	080053b0 	.word	0x080053b0
 800066c:	080053e8 	.word	0x080053e8
 8000670:	080053f8 	.word	0x080053f8
 8000674:	08005414 	.word	0x08005414
 8000678:	0800542c 	.word	0x0800542c
 800067c:	0800543c 	.word	0x0800543c

08000680 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b096      	sub	sp, #88	; 0x58
 8000684:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	2244      	movs	r2, #68	; 0x44
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 febe 	bl	8004410 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000694:	463b      	mov	r3, r7
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	609a      	str	r2, [r3, #8]
 800069e:	60da      	str	r2, [r3, #12]
 80006a0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80006a2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a6:	f001 fa1d 	bl	8001ae4 <HAL_PWREx_ControlVoltageScaling>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80006b0:	f000 f936 	bl	8000920 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006b4:	2310      	movs	r3, #16
 80006b6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b8:	2301      	movs	r3, #1
 80006ba:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSICalibrationValue = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006c0:	2360      	movs	r3, #96	; 0x60
 80006c2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c8:	2301      	movs	r3, #1
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLM = 1;
 80006cc:	2301      	movs	r3, #1
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLN = 40;
 80006d0:	2328      	movs	r3, #40	; 0x28
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006dc:	f107 0314 	add.w	r3, r7, #20
 80006e0:	4618      	mov	r0, r3
 80006e2:	f001 fa55 	bl	8001b90 <HAL_RCC_OscConfig>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <SystemClock_Config+0x70>
		Error_Handler();
 80006ec:	f000 f918 	bl	8000920 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006f0:	230f      	movs	r3, #15
 80006f2:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2303      	movs	r3, #3
 80006f6:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8000704:	463b      	mov	r3, r7
 8000706:	2104      	movs	r1, #4
 8000708:	4618      	mov	r0, r3
 800070a:	f001 fea3 	bl	8002454 <HAL_RCC_ClockConfig>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <SystemClock_Config+0x98>
		Error_Handler();
 8000714:	f000 f904 	bl	8000920 <Error_Handler>
	}
}
 8000718:	bf00      	nop
 800071a:	3758      	adds	r7, #88	; 0x58
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}

08000720 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000720:	b580      	push	{r7, lr}
 8000722:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000724:	4b1b      	ldr	r3, [pc, #108]	; (8000794 <MX_SPI1_Init+0x74>)
 8000726:	4a1c      	ldr	r2, [pc, #112]	; (8000798 <MX_SPI1_Init+0x78>)
 8000728:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800072a:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <MX_SPI1_Init+0x74>)
 800072c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000730:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000732:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_SPI1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000738:	4b16      	ldr	r3, [pc, #88]	; (8000794 <MX_SPI1_Init+0x74>)
 800073a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800073e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <MX_SPI1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000746:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_SPI1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <MX_SPI1_Init+0x74>)
 800074e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000752:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_SPI1_Init+0x74>)
 8000756:	2200      	movs	r2, #0
 8000758:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <MX_SPI1_Init+0x74>)
 800075c:	2200      	movs	r2, #0
 800075e:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000760:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <MX_SPI1_Init+0x74>)
 8000762:	2200      	movs	r2, #0
 8000764:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000766:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_SPI1_Init+0x74>)
 8000768:	2200      	movs	r2, #0
 800076a:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 7;
 800076c:	4b09      	ldr	r3, [pc, #36]	; (8000794 <MX_SPI1_Init+0x74>)
 800076e:	2207      	movs	r2, #7
 8000770:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_SPI1_Init+0x74>)
 8000774:	2200      	movs	r2, #0
 8000776:	631a      	str	r2, [r3, #48]	; 0x30
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MX_SPI1_Init+0x74>)
 800077a:	2208      	movs	r2, #8
 800077c:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800077e:	4805      	ldr	r0, [pc, #20]	; (8000794 <MX_SPI1_Init+0x74>)
 8000780:	f002 fa12 	bl	8002ba8 <HAL_SPI_Init>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <MX_SPI1_Init+0x6e>
		Error_Handler();
 800078a:	f000 f8c9 	bl	8000920 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	2000008c 	.word	0x2000008c
 8000798:	40013000 	.word	0x40013000

0800079c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80007a0:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a2:	4a15      	ldr	r2, [pc, #84]	; (80007f8 <MX_USART2_UART_Init+0x5c>)
 80007a4:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007ac:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007ae:	4b11      	ldr	r3, [pc, #68]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80007ba:	4b0e      	ldr	r3, [pc, #56]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007bc:	2200      	movs	r2, #0
 80007be:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c2:	220c      	movs	r2, #12
 80007c4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007d2:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d8:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007da:	2200      	movs	r2, #0
 80007dc:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_USART2_UART_Init+0x58>)
 80007e0:	f003 f8f2 	bl	80039c8 <HAL_UART_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_USART2_UART_Init+0x52>
		Error_Handler();
 80007ea:	f000 f899 	bl	8000920 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200000f0 	.word	0x200000f0
 80007f8:	40004400 	.word	0x40004400

080007fc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000812:	4b40      	ldr	r3, [pc, #256]	; (8000914 <MX_GPIO_Init+0x118>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000816:	4a3f      	ldr	r2, [pc, #252]	; (8000914 <MX_GPIO_Init+0x118>)
 8000818:	f043 0304 	orr.w	r3, r3, #4
 800081c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081e:	4b3d      	ldr	r3, [pc, #244]	; (8000914 <MX_GPIO_Init+0x118>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	f003 0304 	and.w	r3, r3, #4
 8000826:	613b      	str	r3, [r7, #16]
 8000828:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800082a:	4b3a      	ldr	r3, [pc, #232]	; (8000914 <MX_GPIO_Init+0x118>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	4a39      	ldr	r2, [pc, #228]	; (8000914 <MX_GPIO_Init+0x118>)
 8000830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000836:	4b37      	ldr	r3, [pc, #220]	; (8000914 <MX_GPIO_Init+0x118>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000842:	4b34      	ldr	r3, [pc, #208]	; (8000914 <MX_GPIO_Init+0x118>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	4a33      	ldr	r2, [pc, #204]	; (8000914 <MX_GPIO_Init+0x118>)
 8000848:	f043 0301 	orr.w	r3, r3, #1
 800084c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800084e:	4b31      	ldr	r3, [pc, #196]	; (8000914 <MX_GPIO_Init+0x118>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b2e      	ldr	r3, [pc, #184]	; (8000914 <MX_GPIO_Init+0x118>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	4a2d      	ldr	r2, [pc, #180]	; (8000914 <MX_GPIO_Init+0x118>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000866:	4b2b      	ldr	r3, [pc, #172]	; (8000914 <MX_GPIO_Init+0x118>)
 8000868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	607b      	str	r3, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin,
 8000872:	2200      	movs	r2, #0
 8000874:	21b0      	movs	r1, #176	; 0xb0
 8000876:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800087a:	f001 f90d 	bl	8001a98 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000884:	4824      	ldr	r0, [pc, #144]	; (8000918 <MX_GPIO_Init+0x11c>)
 8000886:	f001 f907 	bl	8001a98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(AX_CS_GPIO_Port, AX_CS_Pin, GPIO_PIN_SET);
 800088a:	2201      	movs	r2, #1
 800088c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000890:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000894:	f001 f900 	bl	8001a98 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800089e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008a2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	4619      	mov	r1, r3
 80008ae:	481b      	ldr	r0, [pc, #108]	; (800091c <MX_GPIO_Init+0x120>)
 80008b0:	f000 ff80 	bl	80017b4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SMPS_EN_Pin SMPS_V1_Pin SMPS_SW_Pin AX_CS_Pin */
	GPIO_InitStruct.Pin = SMPS_EN_Pin | SMPS_V1_Pin | SMPS_SW_Pin | AX_CS_Pin;
 80008b4:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 80008b8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ba:	2301      	movs	r3, #1
 80008bc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c2:	2300      	movs	r3, #0
 80008c4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c6:	f107 0314 	add.w	r3, r7, #20
 80008ca:	4619      	mov	r1, r3
 80008cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008d0:	f000 ff70 	bl	80017b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SMPS_PG_Pin */
	GPIO_InitStruct.Pin = SMPS_PG_Pin;
 80008d4:	2340      	movs	r3, #64	; 0x40
 80008d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d8:	2300      	movs	r3, #0
 80008da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008dc:	2301      	movs	r3, #1
 80008de:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(SMPS_PG_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 0314 	add.w	r3, r7, #20
 80008e4:	4619      	mov	r1, r3
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ea:	f000 ff63 	bl	80017b4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD4_Pin */
	GPIO_InitStruct.Pin = LD4_Pin;
 80008ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008f2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000900:	f107 0314 	add.w	r3, r7, #20
 8000904:	4619      	mov	r1, r3
 8000906:	4804      	ldr	r0, [pc, #16]	; (8000918 <MX_GPIO_Init+0x11c>)
 8000908:	f000 ff54 	bl	80017b4 <HAL_GPIO_Init>

}
 800090c:	bf00      	nop
 800090e:	3728      	adds	r7, #40	; 0x28
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40021000 	.word	0x40021000
 8000918:	48000400 	.word	0x48000400
 800091c:	48000800 	.word	0x48000800

08000920 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000928:	e7fe      	b.n	8000928 <Error_Handler+0x8>
	...

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	4b0f      	ldr	r3, [pc, #60]	; (8000970 <HAL_MspInit+0x44>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000936:	4a0e      	ldr	r2, [pc, #56]	; (8000970 <HAL_MspInit+0x44>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6613      	str	r3, [r2, #96]	; 0x60
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <HAL_MspInit+0x44>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	; (8000970 <HAL_MspInit+0x44>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800094e:	4a08      	ldr	r2, [pc, #32]	; (8000970 <HAL_MspInit+0x44>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6593      	str	r3, [r2, #88]	; 0x58
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <HAL_MspInit+0x44>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a18      	ldr	r2, [pc, #96]	; (80009f4 <HAL_SPI_MspInit+0x80>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d129      	bne.n	80009ea <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000996:	4b18      	ldr	r3, [pc, #96]	; (80009f8 <HAL_SPI_MspInit+0x84>)
 8000998:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800099a:	4a17      	ldr	r2, [pc, #92]	; (80009f8 <HAL_SPI_MspInit+0x84>)
 800099c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a0:	6613      	str	r3, [r2, #96]	; 0x60
 80009a2:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <HAL_SPI_MspInit+0x84>)
 80009a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_SPI_MspInit+0x84>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <HAL_SPI_MspInit+0x84>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_SPI_MspInit+0x84>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA11     ------> SPI1_MISO
    PA12     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_11|GPIO_PIN_12;
 80009c6:	f641 0302 	movw	r3, #6146	; 0x1802
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009d8:	2305      	movs	r3, #5
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e6:	f000 fee5 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	; 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40013000 	.word	0x40013000
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b096      	sub	sp, #88	; 0x58
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a08:	2200      	movs	r2, #0
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	605a      	str	r2, [r3, #4]
 8000a0e:	609a      	str	r2, [r3, #8]
 8000a10:	60da      	str	r2, [r3, #12]
 8000a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a14:	f107 0310 	add.w	r3, r7, #16
 8000a18:	2234      	movs	r2, #52	; 0x34
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f003 fcf7 	bl	8004410 <memset>
  if(huart->Instance==USART2)
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a1f      	ldr	r2, [pc, #124]	; (8000aa4 <HAL_UART_MspInit+0xa8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d136      	bne.n	8000a9a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a30:	2300      	movs	r3, #0
 8000a32:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a34:	f107 0310 	add.w	r3, r7, #16
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f001 ff2f 	bl	800289c <HAL_RCCEx_PeriphCLKConfig>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d001      	beq.n	8000a48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a44:	f7ff ff6c 	bl	8000920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <HAL_UART_MspInit+0xac>)
 8000a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a4c:	4a16      	ldr	r2, [pc, #88]	; (8000aa8 <HAL_UART_MspInit+0xac>)
 8000a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a52:	6593      	str	r3, [r2, #88]	; 0x58
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <HAL_UART_MspInit+0xac>)
 8000a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a5c:	60fb      	str	r3, [r7, #12]
 8000a5e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <HAL_UART_MspInit+0xac>)
 8000a62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a64:	4a10      	ldr	r2, [pc, #64]	; (8000aa8 <HAL_UART_MspInit+0xac>)
 8000a66:	f043 0301 	orr.w	r3, r3, #1
 8000a6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <HAL_UART_MspInit+0xac>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	f003 0301 	and.w	r3, r3, #1
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a84:	2303      	movs	r3, #3
 8000a86:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a88:	2307      	movs	r3, #7
 8000a8a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a90:	4619      	mov	r1, r3
 8000a92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a96:	f000 fe8d 	bl	80017b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3758      	adds	r7, #88	; 0x58
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	40021000 	.word	0x40021000

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 fd32 	bl	8001560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b086      	sub	sp, #24
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	60f8      	str	r0, [r7, #12]
 8000b08:	60b9      	str	r1, [r7, #8]
 8000b0a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00a      	b.n	8000b28 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b12:	f3af 8000 	nop.w
 8000b16:	4601      	mov	r1, r0
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	1c5a      	adds	r2, r3, #1
 8000b1c:	60ba      	str	r2, [r7, #8]
 8000b1e:	b2ca      	uxtb	r2, r1
 8000b20:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	3301      	adds	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
 8000b28:	697a      	ldr	r2, [r7, #20]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	429a      	cmp	r2, r3
 8000b2e:	dbf0      	blt.n	8000b12 <_read+0x12>
	}

return len;
 8000b30:	687b      	ldr	r3, [r7, #4]
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3718      	adds	r7, #24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}

08000b3a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b3a:	b580      	push	{r7, lr}
 8000b3c:	b086      	sub	sp, #24
 8000b3e:	af00      	add	r7, sp, #0
 8000b40:	60f8      	str	r0, [r7, #12]
 8000b42:	60b9      	str	r1, [r7, #8]
 8000b44:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	e009      	b.n	8000b60 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	1c5a      	adds	r2, r3, #1
 8000b50:	60ba      	str	r2, [r7, #8]
 8000b52:	781b      	ldrb	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f7ff fd0d 	bl	8000574 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b5a:	697b      	ldr	r3, [r7, #20]
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697a      	ldr	r2, [r7, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	dbf1      	blt.n	8000b4c <_write+0x12>
	}
	return len;
 8000b68:	687b      	ldr	r3, [r7, #4]
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3718      	adds	r7, #24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <_close>:

int _close(int file)
{
 8000b72:	b480      	push	{r7}
 8000b74:	b083      	sub	sp, #12
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	6078      	str	r0, [r7, #4]
	return -1;
 8000b7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b8a:	b480      	push	{r7}
 8000b8c:	b083      	sub	sp, #12
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
 8000b92:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b9a:	605a      	str	r2, [r3, #4]
	return 0;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <_isatty>:

int _isatty(int file)
{
 8000baa:	b480      	push	{r7}
 8000bac:	b083      	sub	sp, #12
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
	return 1;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
	return 0;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	3714      	adds	r7, #20
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
	...

08000bdc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be4:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <_sbrk+0x5c>)
 8000be6:	4b15      	ldr	r3, [pc, #84]	; (8000c3c <_sbrk+0x60>)
 8000be8:	1ad3      	subs	r3, r2, r3
 8000bea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bec:	697b      	ldr	r3, [r7, #20]
 8000bee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf0:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d102      	bne.n	8000bfe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <_sbrk+0x64>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <_sbrk+0x68>)
 8000bfc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <_sbrk+0x64>)
 8000c00:	681a      	ldr	r2, [r3, #0]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	4413      	add	r3, r2
 8000c06:	693a      	ldr	r2, [r7, #16]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	d207      	bcs.n	8000c1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c0c:	f003 fbc8 	bl	80043a0 <__errno>
 8000c10:	4603      	mov	r3, r0
 8000c12:	220c      	movs	r2, #12
 8000c14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c16:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1a:	e009      	b.n	8000c30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c1c:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <_sbrk+0x64>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <_sbrk+0x64>)
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	4413      	add	r3, r2
 8000c2a:	4a05      	ldr	r2, [pc, #20]	; (8000c40 <_sbrk+0x64>)
 8000c2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c2e:	68fb      	ldr	r3, [r7, #12]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3718      	adds	r7, #24
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2000a000 	.word	0x2000a000
 8000c3c:	00000400 	.word	0x00000400
 8000c40:	20000174 	.word	0x20000174
 8000c44:	20000190 	.word	0x20000190

08000c48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <SystemInit+0x20>)
 8000c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c52:	4a05      	ldr	r2, [pc, #20]	; (8000c68 <SystemInit+0x20>)
 8000c54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000ed00 	.word	0xe000ed00

08000c6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ca4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c70:	f7ff ffea 	bl	8000c48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c74:	480c      	ldr	r0, [pc, #48]	; (8000ca8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c76:	490d      	ldr	r1, [pc, #52]	; (8000cac <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c78:	4a0d      	ldr	r2, [pc, #52]	; (8000cb0 <LoopForever+0xe>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c7c:	e002      	b.n	8000c84 <LoopCopyDataInit>

08000c7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c82:	3304      	adds	r3, #4

08000c84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c88:	d3f9      	bcc.n	8000c7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8a:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c8c:	4c0a      	ldr	r4, [pc, #40]	; (8000cb8 <LoopForever+0x16>)
  movs r3, #0
 8000c8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c90:	e001      	b.n	8000c96 <LoopFillZerobss>

08000c92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c94:	3204      	adds	r2, #4

08000c96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c98:	d3fb      	bcc.n	8000c92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c9a:	f003 fb87 	bl	80043ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c9e:	f7ff fc7b 	bl	8000598 <main>

08000ca2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ca2:	e7fe      	b.n	8000ca2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca4:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000ca8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cb0:	08005b64 	.word	0x08005b64
  ldr r2, =_sbss
 8000cb4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cb8:	2000018c 	.word	0x2000018c

08000cbc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cbc:	e7fe      	b.n	8000cbc <ADC1_2_IRQHandler>

08000cbe <AX_Radio_RW_Short_Address>:
 */
#include "ax5243.h"

HAL_StatusTypeDef AX_Radio_RW_Short_Address(uint8_t * addr, uint8_t * status, uint8_t * data,
												SPI_HandleTypeDef * hspi, uint32_t timeout, uint8_t rw)
	{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b088      	sub	sp, #32
 8000cc2:	af02      	add	r7, sp, #8
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
 8000cca:	603b      	str	r3, [r7, #0]
		  HAL_StatusTypeDef status1, status2;
		  //bring chip select low
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cd6:	f000 fedf 	bl	8001a98 <HAL_GPIO_WritePin>
		  //mask for read or write depending on flag
		  *addr = rw == 0 ? *addr & 0x7F : *addr | 0x80;
 8000cda:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d105      	bne.n	8000cee <AX_Radio_RW_Short_Address+0x30>
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	781b      	ldrb	r3, [r3, #0]
 8000ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	e004      	b.n	8000cf8 <AX_Radio_RW_Short_Address+0x3a>
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	68fa      	ldr	r2, [r7, #12]
 8000cfa:	7013      	strb	r3, [r2, #0]
		  //send 7 bit address with MSB signifying rw, receive status bits
		  status1 = HAL_SPI_TransmitReceive(hspi, (uint8_t *)addr, (uint8_t *)status, 1, timeout);
 8000cfc:	6a3b      	ldr	r3, [r7, #32]
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	2301      	movs	r3, #1
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	68f9      	ldr	r1, [r7, #12]
 8000d06:	6838      	ldr	r0, [r7, #0]
 8000d08:	f002 fa8f 	bl	800322a <HAL_SPI_TransmitReceive>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	75fb      	strb	r3, [r7, #23]
		  //receive data bits back
		  status2 = rw == 0 ? HAL_SPI_Receive(hspi, data, 1, timeout) : HAL_SPI_Transmit(hspi, data, 1, timeout);
 8000d10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d107      	bne.n	8000d28 <AX_Radio_RW_Short_Address+0x6a>
 8000d18:	6a3b      	ldr	r3, [r7, #32]
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	6838      	ldr	r0, [r7, #0]
 8000d20:	f002 f953 	bl	8002fca <HAL_SPI_Receive>
 8000d24:	4603      	mov	r3, r0
 8000d26:	e006      	b.n	8000d36 <AX_Radio_RW_Short_Address+0x78>
 8000d28:	6a3b      	ldr	r3, [r7, #32]
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	6879      	ldr	r1, [r7, #4]
 8000d2e:	6838      	ldr	r0, [r7, #0]
 8000d30:	f001 ffdd 	bl	8002cee <HAL_SPI_Transmit>
 8000d34:	4603      	mov	r3, r0
 8000d36:	75bb      	strb	r3, [r7, #22]
		  //bring chip select high
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d42:	f000 fea9 	bl	8001a98 <HAL_GPIO_WritePin>

		  return status1 | status2;
 8000d46:	7dfa      	ldrb	r2, [r7, #23]
 8000d48:	7dbb      	ldrb	r3, [r7, #22]
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	b2db      	uxtb	r3, r3
	}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <AX_Radio_RW_Long_Address>:



HAL_StatusTypeDef AX_Radio_RW_Long_Address(uint16_t * addr, uint16_t * status, uint8_t * data,
		SPI_HandleTypeDef * hspi, uint32_t timeout, uint8_t rw)
	{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b088      	sub	sp, #32
 8000d5a:	af02      	add	r7, sp, #8
 8000d5c:	60f8      	str	r0, [r7, #12]
 8000d5e:	60b9      	str	r1, [r7, #8]
 8000d60:	607a      	str	r2, [r7, #4]
 8000d62:	603b      	str	r3, [r7, #0]
		  HAL_StatusTypeDef status1, status2, status3;
		  uint8_t addr_upper, addr_lower, status_upper, status_lower;
		  //bring chip select low
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d6e:	f000 fe93 	bl	8001a98 <HAL_GPIO_WritePin>
		  //mask for read or write depending on flag
		  *addr = rw == 0 ? ((*addr & 0x7FFF) | 0x7000) : *addr | 0xF000;
 8000d72:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d10a      	bne.n	8000d90 <AX_Radio_RW_Long_Address+0x3a>
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d84:	b21b      	sxth	r3, r3
 8000d86:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000d8a:	b21b      	sxth	r3, r3
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	e006      	b.n	8000d9e <AX_Radio_RW_Long_Address+0x48>
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	881b      	ldrh	r3, [r3, #0]
 8000d94:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000d98:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	68fa      	ldr	r2, [r7, #12]
 8000da0:	8013      	strh	r3, [r2, #0]
		  addr_upper = *addr >> 8;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	881b      	ldrh	r3, [r3, #0]
 8000da6:	0a1b      	lsrs	r3, r3, #8
 8000da8:	b29b      	uxth	r3, r3
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	753b      	strb	r3, [r7, #20]
		  addr_lower = *addr & 0xFF;
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	881b      	ldrh	r3, [r3, #0]
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	74fb      	strb	r3, [r7, #19]
		  //send four bit mask and upper nibble of addr
		  status1 = HAL_SPI_TransmitReceive(hspi, (uint8_t *)&addr_upper, (uint8_t *)&status_upper, 1, timeout);
 8000db6:	f107 0212 	add.w	r2, r7, #18
 8000dba:	f107 0114 	add.w	r1, r7, #20
 8000dbe:	6a3b      	ldr	r3, [r7, #32]
 8000dc0:	9300      	str	r3, [sp, #0]
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	6838      	ldr	r0, [r7, #0]
 8000dc6:	f002 fa30 	bl	800322a <HAL_SPI_TransmitReceive>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	75fb      	strb	r3, [r7, #23]
		  //send lower byte of addr
		  status2 = HAL_SPI_TransmitReceive(hspi, (uint8_t *)&addr_lower, (uint8_t *)&status_lower, 1, timeout);
 8000dce:	f107 0211 	add.w	r2, r7, #17
 8000dd2:	f107 0113 	add.w	r1, r7, #19
 8000dd6:	6a3b      	ldr	r3, [r7, #32]
 8000dd8:	9300      	str	r3, [sp, #0]
 8000dda:	2301      	movs	r3, #1
 8000ddc:	6838      	ldr	r0, [r7, #0]
 8000dde:	f002 fa24 	bl	800322a <HAL_SPI_TransmitReceive>
 8000de2:	4603      	mov	r3, r0
 8000de4:	75bb      	strb	r3, [r7, #22]
		  //receive data bits back
		  status3 = rw == 0 ? HAL_SPI_Receive(hspi, data, 1, timeout) : HAL_SPI_Transmit(hspi, data, 1, timeout);
 8000de6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d107      	bne.n	8000dfe <AX_Radio_RW_Long_Address+0xa8>
 8000dee:	6a3b      	ldr	r3, [r7, #32]
 8000df0:	2201      	movs	r2, #1
 8000df2:	6879      	ldr	r1, [r7, #4]
 8000df4:	6838      	ldr	r0, [r7, #0]
 8000df6:	f002 f8e8 	bl	8002fca <HAL_SPI_Receive>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	e006      	b.n	8000e0c <AX_Radio_RW_Long_Address+0xb6>
 8000dfe:	6a3b      	ldr	r3, [r7, #32]
 8000e00:	2201      	movs	r2, #1
 8000e02:	6879      	ldr	r1, [r7, #4]
 8000e04:	6838      	ldr	r0, [r7, #0]
 8000e06:	f001 ff72 	bl	8002cee <HAL_SPI_Transmit>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	757b      	strb	r3, [r7, #21]
		  //bring chip select high
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e18:	f000 fe3e 	bl	8001a98 <HAL_GPIO_WritePin>

		  *status = (status_upper << 8) | status_lower;
 8000e1c:	7cbb      	ldrb	r3, [r7, #18]
 8000e1e:	021b      	lsls	r3, r3, #8
 8000e20:	b21a      	sxth	r2, r3
 8000e22:	7c7b      	ldrb	r3, [r7, #17]
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	4313      	orrs	r3, r2
 8000e28:	b21b      	sxth	r3, r3
 8000e2a:	b29a      	uxth	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	801a      	strh	r2, [r3, #0]

		  return status1 | status2 | status3;
 8000e30:	7dfa      	ldrb	r2, [r7, #23]
 8000e32:	7dbb      	ldrb	r3, [r7, #22]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	7d7b      	ldrb	r3, [r7, #21]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b2db      	uxtb	r3, r3
	}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <radio_write8>:


uint8_t radio_write8(uint16_t reg, uint8_t data, SPI_HandleTypeDef * hspi)
	{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af02      	add	r7, sp, #8
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	603a      	str	r2, [r7, #0]
 8000e50:	80fb      	strh	r3, [r7, #6]
 8000e52:	460b      	mov	r3, r1
 8000e54:	717b      	strb	r3, [r7, #5]
		uint16_t reg_local, status_local;
		uint8_t data_local;
		reg_local = reg;
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	81fb      	strh	r3, [r7, #14]
		status_local = 0;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	81bb      	strh	r3, [r7, #12]
		data_local = data;
 8000e5e:	797b      	ldrb	r3, [r7, #5]
 8000e60:	72fb      	strb	r3, [r7, #11]
		return AX_Radio_RW_Long_Address(&reg_local, &status_local, &data_local,
 8000e62:	f107 020b 	add.w	r2, r7, #11
 8000e66:	f107 010c 	add.w	r1, r7, #12
 8000e6a:	f107 000e 	add.w	r0, r7, #14
 8000e6e:	2301      	movs	r3, #1
 8000e70:	9301      	str	r3, [sp, #4]
 8000e72:	23ff      	movs	r3, #255	; 0xff
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	f7ff ff6d 	bl	8000d56 <AX_Radio_RW_Long_Address>
 8000e7c:	4603      	mov	r3, r0
				hspi, 0xFF, 0x1);
	}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <radio_read8>:

uint8_t radio_read8(uint16_t reg, SPI_HandleTypeDef * hspi)
	{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b086      	sub	sp, #24
 8000e8a:	af02      	add	r7, sp, #8
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	6039      	str	r1, [r7, #0]
 8000e90:	80fb      	strh	r3, [r7, #6]
		uint16_t reg_local, status_local;
		uint8_t data_local = 0;
 8000e92:	2300      	movs	r3, #0
 8000e94:	72fb      	strb	r3, [r7, #11]
		reg_local = reg;
 8000e96:	88fb      	ldrh	r3, [r7, #6]
 8000e98:	81fb      	strh	r3, [r7, #14]
		status_local = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	81bb      	strh	r3, [r7, #12]
		AX_Radio_RW_Long_Address(&reg_local, &status_local, &data_local,
 8000e9e:	f107 020b 	add.w	r2, r7, #11
 8000ea2:	f107 010c 	add.w	r1, r7, #12
 8000ea6:	f107 000e 	add.w	r0, r7, #14
 8000eaa:	2300      	movs	r3, #0
 8000eac:	9301      	str	r3, [sp, #4]
 8000eae:	23ff      	movs	r3, #255	; 0xff
 8000eb0:	9300      	str	r3, [sp, #0]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	f7ff ff4f 	bl	8000d56 <AX_Radio_RW_Long_Address>
				hspi, 0xFF, 0x0);
		return data_local;
 8000eb8:	7afb      	ldrb	r3, [r7, #11]
	}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <AX_Radio_Data_Transmission_Setup>:

	return AXRADIO_ERR_NOERROR;
}

uint8_t AX_Radio_Data_Transmission_Setup(SPI_HandleTypeDef * hspi)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
	// Initially testing with 169 MHz
	uint32_t rate = 9600; //9600bps
 8000eca:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000ece:	60fb      	str	r3, [r7, #12]
	AX_Radio_169_MHz_Settings(hspi);
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f84d 	bl	8000f70 <AX_Radio_169_MHz_Settings>
	AX_Radio_Set_Data_Rate(1, rate, hspi);
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68f9      	ldr	r1, [r7, #12]
 8000eda:	2001      	movs	r0, #1
 8000edc:	f000 f90c 	bl	80010f8 <AX_Radio_Set_Data_Rate>
	AX_Radio_Set_Frequency_Deviation(rate, hspi);
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f000 f8e0 	bl	80010a8 <AX_Radio_Set_Frequency_Deviation>
	radio_write8(AX5043_REG_MODULATION, 0x08, hspi);
 8000ee8:	687a      	ldr	r2, [r7, #4]
 8000eea:	2108      	movs	r1, #8
 8000eec:	2010      	movs	r0, #16
 8000eee:	f7ff ffaa 	bl	8000e46 <radio_write8>

	// General XTAL Settings
	radio_write8(AX5043_REG_XTALOSC, 0x03, hspi);
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	2103      	movs	r1, #3
 8000ef6:	f44f 6071 	mov.w	r0, #3856	; 0xf10
 8000efa:	f7ff ffa4 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_XTALAMPL, 0x07, hspi);
 8000efe:	687a      	ldr	r2, [r7, #4]
 8000f00:	2107      	movs	r1, #7
 8000f02:	f640 7011 	movw	r0, #3857	; 0xf11
 8000f06:	f7ff ff9e 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_XTALCAP, 0x08, hspi); // C_L = 12pF
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	2108      	movs	r1, #8
 8000f0e:	f44f 70c2 	mov.w	r0, #388	; 0x184
 8000f12:	f7ff ff98 	bl	8000e46 <radio_write8>

	// Full power @ 16 dBm
	radio_write8(AX5043_REG_TXPWRCOEFFB1, 0x0F, hspi);
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	210f      	movs	r1, #15
 8000f1a:	f44f 70b5 	mov.w	r0, #362	; 0x16a
 8000f1e:	f7ff ff92 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_TXPWRCOEFFB0, 0xFF, hspi);
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	21ff      	movs	r1, #255	; 0xff
 8000f26:	f240 106b 	movw	r0, #363	; 0x16b
 8000f2a:	f7ff ff8c 	bl	8000e46 <radio_write8>

	// G3RUH encoding, HDLC framing, CCITT-16 CRC
	radio_write8(AX5043_REG_ENCODING, 0x07, hspi); // differential encoding, bit inversion, scrambler
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	2107      	movs	r1, #7
 8000f32:	2011      	movs	r0, #17
 8000f34:	f7ff ff87 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FRAMING, 0x14, hspi); // HDLC, CRC check in CCITT 16-bit
 8000f38:	687a      	ldr	r2, [r7, #4]
 8000f3a:	2114      	movs	r1, #20
 8000f3c:	2012      	movs	r0, #18
 8000f3e:	f7ff ff82 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_PKTLENCFG, 0xF0, hspi);
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	21f0      	movs	r1, #240	; 0xf0
 8000f46:	f240 2001 	movw	r0, #513	; 0x201
 8000f4a:	f7ff ff7c 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_PKTMAXLEN, 0xFF, hspi);
 8000f4e:	687a      	ldr	r2, [r7, #4]
 8000f50:	21ff      	movs	r1, #255	; 0xff
 8000f52:	f240 2003 	movw	r0, #515	; 0x203
 8000f56:	f7ff ff76 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_PKTACCEPTFLAGS, 0x20, hspi);
 8000f5a:	687a      	ldr	r2, [r7, #4]
 8000f5c:	2120      	movs	r1, #32
 8000f5e:	f240 2033 	movw	r0, #563	; 0x233
 8000f62:	f7ff ff70 	bl	8000e46 <radio_write8>

	// FIFOOOOOOOOOO but lets do it in main, kay?
	return AXRADIO_ERR_NOERROR;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}

08000f70 <AX_Radio_169_MHz_Settings>:
	AX_Radio_Set_Center_Frequency(fc, hspi);
	return AXRADIO_ERR_NOERROR;
}

uint8_t AX_Radio_169_MHz_Settings(SPI_HandleTypeDef * hspi)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	radio_write8(AX5043_REG_PLLVCODIV, PLLVCODIV_EXTERNAL_INDUCTOR |
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	2130      	movs	r1, #48	; 0x30
 8000f7c:	2032      	movs	r0, #50	; 0x32
 8000f7e:	f7ff ff62 	bl	8000e46 <radio_write8>
			PLLVCODIV_RFDIV_OFF, hspi);
	radio_write8(AX5043_REG_0xF34, F34_RFDIV_OFF, hspi);
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	2108      	movs	r1, #8
 8000f86:	f640 7034 	movw	r0, #3892	; 0xf34
 8000f8a:	f7ff ff5c 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_0xF35, 0x11, hspi);
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	2111      	movs	r1, #17
 8000f92:	f640 7035 	movw	r0, #3893	; 0xf35
 8000f96:	f7ff ff56 	bl	8000e46 <radio_write8>

	// 169 MHz, BW = idk
	// I cannot find the laws on legality on this for the fucking life of me, yolo ig
	uint32_t fc = 169;
 8000f9a:	23a9      	movs	r3, #169	; 0xa9
 8000f9c:	60fb      	str	r3, [r7, #12]
	AX_Radio_Set_Center_Frequency(fc, hspi);
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f000 f805 	bl	8000fb0 <AX_Radio_Set_Center_Frequency>
	return AXRADIO_ERR_NOERROR;
 8000fa6:	2300      	movs	r3, #0
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <AX_Radio_Set_Center_Frequency>:
	AX_Radio_Set_Center_Frequency(fc, hspi);
	return AXRADIO_ERR_NOERROR;
}

uint8_t AX_Radio_Set_Center_Frequency(uint32_t freq, SPI_HandleTypeDef * hspi)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	// need to replace 27 MHz crystals soon...
	if (freq == 169)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2ba9      	cmp	r3, #169	; 0xa9
 8000fbe:	d121      	bne.n	8001004 <AX_Radio_Set_Center_Frequency+0x54>
	{
		freq = 0x063b47bf; // freq=fc/fxtal*(2^24) | since fxtal=16MHz, freq=fc*(2^20)
 8000fc0:	4b37      	ldr	r3, [pc, #220]	; (80010a0 <AX_Radio_Set_Center_Frequency+0xf0>)
 8000fc2:	607b      	str	r3, [r7, #4]
		radio_write8(AX5043_REG_FREQA0, freq, hspi);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	b2db      	uxtb	r3, r3
 8000fc8:	683a      	ldr	r2, [r7, #0]
 8000fca:	4619      	mov	r1, r3
 8000fcc:	2037      	movs	r0, #55	; 0x37
 8000fce:	f7ff ff3a 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_FREQA1, (freq >> 8), hspi);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	0a1b      	lsrs	r3, r3, #8
 8000fd6:	b2db      	uxtb	r3, r3
 8000fd8:	683a      	ldr	r2, [r7, #0]
 8000fda:	4619      	mov	r1, r3
 8000fdc:	2036      	movs	r0, #54	; 0x36
 8000fde:	f7ff ff32 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_FREQA2, (freq >> 16), hspi);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	0c1b      	lsrs	r3, r3, #16
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	683a      	ldr	r2, [r7, #0]
 8000fea:	4619      	mov	r1, r3
 8000fec:	2035      	movs	r0, #53	; 0x35
 8000fee:	f7ff ff2a 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_FREQA3, (freq >> 24), hspi);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	0e1b      	lsrs	r3, r3, #24
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2034      	movs	r0, #52	; 0x34
 8000ffe:	f7ff ff22 	bl	8000e46 <radio_write8>
 8001002:	e048      	b.n	8001096 <AX_Radio_Set_Center_Frequency+0xe6>
	}
	else if (freq == 915)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f240 3293 	movw	r2, #915	; 0x393
 800100a:	4293      	cmp	r3, r2
 800100c:	d121      	bne.n	8001052 <AX_Radio_Set_Center_Frequency+0xa2>
	{
		freq = 0x21BD2B0B; // freq=fc/fxtal*(2^24) | since fxtal=16MHz, freq=fc*(2^20)
 800100e:	4b25      	ldr	r3, [pc, #148]	; (80010a4 <AX_Radio_Set_Center_Frequency+0xf4>)
 8001010:	607b      	str	r3, [r7, #4]
		radio_write8(AX5043_REG_FREQA0, freq, hspi);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	683a      	ldr	r2, [r7, #0]
 8001018:	4619      	mov	r1, r3
 800101a:	2037      	movs	r0, #55	; 0x37
 800101c:	f7ff ff13 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_FREQA1, (freq >> 8), hspi);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	0a1b      	lsrs	r3, r3, #8
 8001024:	b2db      	uxtb	r3, r3
 8001026:	683a      	ldr	r2, [r7, #0]
 8001028:	4619      	mov	r1, r3
 800102a:	2036      	movs	r0, #54	; 0x36
 800102c:	f7ff ff0b 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_FREQA2, (freq >> 16), hspi);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	0c1b      	lsrs	r3, r3, #16
 8001034:	b2db      	uxtb	r3, r3
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	2035      	movs	r0, #53	; 0x35
 800103c:	f7ff ff03 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_FREQA3, (freq >> 24), hspi);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	0e1b      	lsrs	r3, r3, #24
 8001044:	b2db      	uxtb	r3, r3
 8001046:	683a      	ldr	r2, [r7, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	2034      	movs	r0, #52	; 0x34
 800104c:	f7ff fefb 	bl	8000e46 <radio_write8>
 8001050:	e021      	b.n	8001096 <AX_Radio_Set_Center_Frequency+0xe6>
	}
	else
	{
		freq *= (1<<20); // freq=fc/fxtal*(2^24) | since fxtal=16MHz, freq=fc*(2^20)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	051b      	lsls	r3, r3, #20
 8001056:	607b      	str	r3, [r7, #4]
		radio_write8(AX5043_REG_FREQA0, freq, hspi);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	b2db      	uxtb	r3, r3
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	4619      	mov	r1, r3
 8001060:	2037      	movs	r0, #55	; 0x37
 8001062:	f7ff fef0 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_FREQA1, (freq >> 8), hspi);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	0a1b      	lsrs	r3, r3, #8
 800106a:	b2db      	uxtb	r3, r3
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	4619      	mov	r1, r3
 8001070:	2036      	movs	r0, #54	; 0x36
 8001072:	f7ff fee8 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_FREQA2, (freq >> 16), hspi);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	0c1b      	lsrs	r3, r3, #16
 800107a:	b2db      	uxtb	r3, r3
 800107c:	683a      	ldr	r2, [r7, #0]
 800107e:	4619      	mov	r1, r3
 8001080:	2035      	movs	r0, #53	; 0x35
 8001082:	f7ff fee0 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_FREQA3, (freq >> 24), hspi);
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	0e1b      	lsrs	r3, r3, #24
 800108a:	b2db      	uxtb	r3, r3
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	4619      	mov	r1, r3
 8001090:	2034      	movs	r0, #52	; 0x34
 8001092:	f7ff fed8 	bl	8000e46 <radio_write8>
	}
	return AXRADIO_ERR_NOERROR;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	063b47bf 	.word	0x063b47bf
 80010a4:	21bd2b0b 	.word	0x21bd2b0b

080010a8 <AX_Radio_Set_Frequency_Deviation>:

uint8_t AX_Radio_Set_Frequency_Deviation(uint32_t rate, SPI_HandleTypeDef * hspi)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	6039      	str	r1, [r7, #0]
	uint32_t dev = (rate>>2)*(1<<20); // FSKDEV = m * 0.5 * BITRATE / fxtal * (2^24), m(odulation index)=0.5, fxtal = 16 MHz
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	089b      	lsrs	r3, r3, #2
 80010b6:	051b      	lsls	r3, r3, #20
 80010b8:	60fb      	str	r3, [r7, #12]
	radio_write8(AX5043_REG_FSKDEV0, dev, hspi);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	4619      	mov	r1, r3
 80010c2:	f240 1063 	movw	r0, #355	; 0x163
 80010c6:	f7ff febe 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FSKDEV1, (dev >> 8), hspi);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	0a1b      	lsrs	r3, r3, #8
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	683a      	ldr	r2, [r7, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	f44f 70b1 	mov.w	r0, #354	; 0x162
 80010d8:	f7ff feb5 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FSKDEV2, (dev >> 16), hspi);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	0c1b      	lsrs	r3, r3, #16
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	4619      	mov	r1, r3
 80010e6:	f240 1061 	movw	r0, #353	; 0x161
 80010ea:	f7ff feac 	bl	8000e46 <radio_write8>
	return AXRADIO_ERR_NOERROR;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	4618      	mov	r0, r3
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}

080010f8 <AX_Radio_Set_Data_Rate>:

uint8_t AX_Radio_Set_Data_Rate(uint8_t rw, uint32_t rate, SPI_HandleTypeDef * hspi)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08a      	sub	sp, #40	; 0x28
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	60b9      	str	r1, [r7, #8]
 8001102:	607a      	str	r2, [r7, #4]
 8001104:	73fb      	strb	r3, [r7, #15]
	if (rw)
 8001106:	7bfb      	ldrb	r3, [r7, #15]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d01a      	beq.n	8001142 <AX_Radio_Set_Data_Rate+0x4a>
	{
		radio_write8(AX5043_REG_TXRATE0, rate, hspi);
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	687a      	ldr	r2, [r7, #4]
 8001112:	4619      	mov	r1, r3
 8001114:	f240 1067 	movw	r0, #359	; 0x167
 8001118:	f7ff fe95 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_TXRATE1, (rate >> 8), hspi);
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	0a1b      	lsrs	r3, r3, #8
 8001120:	b2db      	uxtb	r3, r3
 8001122:	687a      	ldr	r2, [r7, #4]
 8001124:	4619      	mov	r1, r3
 8001126:	f44f 70b3 	mov.w	r0, #358	; 0x166
 800112a:	f7ff fe8c 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_TXRATE2, (rate >> 16), hspi);
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	0c1b      	lsrs	r3, r3, #16
 8001132:	b2db      	uxtb	r3, r3
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4619      	mov	r1, r3
 8001138:	f240 1065 	movw	r0, #357	; 0x165
 800113c:	f7ff fe83 	bl	8000e46 <radio_write8>
 8001140:	e079      	b.n	8001236 <AX_Radio_Set_Data_Rate+0x13e>
	}
	else
	{
		// NOTE: XTALDIV = 1 for 27 MHz, currently XTALDIV = 2 for 169 & 915 boards..
		// TODO: define these magic numbers and even abstract away at some point...
		uint32_t bandwidth = 14400; // (1+m)*rate
 8001142:	f44f 5361 	mov.w	r3, #14400	; 0x3840
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
		uint32_t decimation = 27120000 / ((1<<4) * 2 * 4 * bandwidth); // fxtal/(2^4*fxtaldiv*(1/fcoeff)*BW)
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800114a:	01db      	lsls	r3, r3, #7
 800114c:	4a3c      	ldr	r2, [pc, #240]	; (8001240 <AX_Radio_Set_Data_Rate+0x148>)
 800114e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001152:	623b      	str	r3, [r7, #32]
		uint32_t rxdatarate = (1<<7) / (2 * 9600 * decimation) * 27120000;
 8001154:	6a3b      	ldr	r3, [r7, #32]
 8001156:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 800115a:	fb02 f303 	mul.w	r3, r2, r3
 800115e:	2280      	movs	r2, #128	; 0x80
 8001160:	fbb2 f3f3 	udiv	r3, r2, r3
 8001164:	4a36      	ldr	r2, [pc, #216]	; (8001240 <AX_Radio_Set_Data_Rate+0x148>)
 8001166:	fb02 f303 	mul.w	r3, r2, r3
 800116a:	61fb      	str	r3, [r7, #28]
		uint32_t iffreq = (((bandwidth / 2) * 2) * (2<<20) / 27120000) ; // setting f_if = bw/2, iffreq = f_if*fxtaldiv*(2^20)/fxtal
 800116c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116e:	f023 0301 	bic.w	r3, r3, #1
 8001172:	055b      	lsls	r3, r3, #21
 8001174:	4a33      	ldr	r2, [pc, #204]	; (8001244 <AX_Radio_Set_Data_Rate+0x14c>)
 8001176:	fba2 2303 	umull	r2, r3, r2, r3
 800117a:	0e1b      	lsrs	r3, r3, #24
 800117c:	61bb      	str	r3, [r7, #24]
		uint32_t freqOffset = 4182; //27.12MHz crystals are rated for 40ppm frequency stability, so 2*6760hz at worst case
 800117e:	f241 0356 	movw	r3, #4182	; 0x1056
 8001182:	617b      	str	r3, [r7, #20]

		// leaving PHASEGAINx registers at default
		radio_write8(AX5043_REG_DECIMATION, decimation, hspi);
 8001184:	6a3b      	ldr	r3, [r7, #32]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	4619      	mov	r1, r3
 800118c:	f44f 7081 	mov.w	r0, #258	; 0x102
 8001190:	f7ff fe59 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_RXDATARATE0, rxdatarate, hspi);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	b2db      	uxtb	r3, r3
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4619      	mov	r1, r3
 800119c:	f240 1005 	movw	r0, #261	; 0x105
 80011a0:	f7ff fe51 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_RXDATARATE1, (rxdatarate >> 8), hspi);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	0a1b      	lsrs	r3, r3, #8
 80011a8:	b2db      	uxtb	r3, r3
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4619      	mov	r1, r3
 80011ae:	f44f 7082 	mov.w	r0, #260	; 0x104
 80011b2:	f7ff fe48 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_RXDATARATE2, (rxdatarate >> 16), hspi);
 80011b6:	69fb      	ldr	r3, [r7, #28]
 80011b8:	0c1b      	lsrs	r3, r3, #16
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	687a      	ldr	r2, [r7, #4]
 80011be:	4619      	mov	r1, r3
 80011c0:	f240 1003 	movw	r0, #259	; 0x103
 80011c4:	f7ff fe3f 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_IFFREQ0, iffreq,hspi);
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	4619      	mov	r1, r3
 80011d0:	f240 1001 	movw	r0, #257	; 0x101
 80011d4:	f7ff fe37 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_IFFREQ0, (iffreq >> 8), hspi);
 80011d8:	69bb      	ldr	r3, [r7, #24]
 80011da:	0a1b      	lsrs	r3, r3, #8
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	4619      	mov	r1, r3
 80011e2:	f240 1001 	movw	r0, #257	; 0x101
 80011e6:	f7ff fe2e 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_MAXRFOFFSET0, freqOffset, hspi);
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f240 100b 	movw	r0, #267	; 0x10b
 80011f6:	f7ff fe26 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_MAXRFOFFSET1, (freqOffset >> 8), hspi);
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	687a      	ldr	r2, [r7, #4]
 8001202:	4619      	mov	r1, r3
 8001204:	f44f 7085 	mov.w	r0, #266	; 0x10a
 8001208:	f7ff fe1d 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_MAXRFOFFSET2, (1<<8) | (freqOffset >> 16), hspi); // frequency correction at LO1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	0c1b      	lsrs	r3, r3, #16
 8001210:	b2db      	uxtb	r3, r3
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	4619      	mov	r1, r3
 8001216:	f240 1009 	movw	r0, #265	; 0x109
 800121a:	f7ff fe14 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_AGCTARGET0, 0x89, hspi); // 0.75x max range of 512 to avoid ADC saturation but provide max performance
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	2189      	movs	r1, #137	; 0x89
 8001222:	f240 1021 	movw	r0, #289	; 0x121
 8001226:	f7ff fe0e 	bl	8000e46 <radio_write8>
		radio_write8(AX5043_REG_AGCGAIN0, 0x74, hspi); // DECAY | ATTACK; F3db~bitrate, so 0x04 corresponds to 9636~9600bps
 800122a:	687a      	ldr	r2, [r7, #4]
 800122c:	2174      	movs	r1, #116	; 0x74
 800122e:	f44f 7090 	mov.w	r0, #288	; 0x120
 8001232:	f7ff fe08 	bl	8000e46 <radio_write8>
	}
	return AXRADIO_ERR_NOERROR;
 8001236:	2300      	movs	r3, #0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3728      	adds	r7, #40	; 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	019dd180 	.word	0x019dd180
 8001244:	9e5e76d3 	.word	0x9e5e76d3

08001248 <AX_Radio_FIFO_Routine>:

uint8_t AX_Radio_FIFO_Routine(SPI_HandleTypeDef * hspi)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	f5ad 6dc7 	sub.w	sp, sp, #1592	; 0x638
 800124e:	af00      	add	r7, sp, #0
 8001250:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001254:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001258:	6018      	str	r0, [r3, #0]
	uint8_t preamble = 0x55;
 800125a:	2355      	movs	r3, #85	; 0x55
 800125c:	f887 3636 	strb.w	r3, [r7, #1590]	; 0x636
	uint8_t numBytesToSend = 100;
 8001260:	2364      	movs	r3, #100	; 0x64
 8001262:	f887 3635 	strb.w	r3, [r7, #1589]	; 0x635
	char beeData[] = "According to all known laws of aviation, there is no way a bee should be able to fly. Its wings are too small to get its fat little body off the ground. The bee, of course, flies anyway because bees don't care what humans think is impossible. Yellow, black. Yellow, black. Yellow, black. Yellow, black. Ooh, black and yellow! Let's shake it up a little. Barry! Breakfast is ready! Coming! Hang on a second. Hello? Barry? Adam? Can you believe this is happening? I can't. I'll pick you up. Looking sharp. Use the stairs, Your father paid good money for those. Sorry. I'm excited. Here's the graduate. We're very proud of you, son. A perfect report card, all B's. Very proud. Ma! I got a thing going here. You got lint on your fuzz. Ow! That's me! Wave to us! We'll be in row 118,000. Bye! Barry, I told you, stop flying in the house! Hey, Adam. Hey, Barry. Is that fuzz gel? A little. Special day, graduation. Never thought I'd make it. Three days grade school, three days high school. Those were awkward. Three days college. I'm glad I took a day and hitchhiked around The Hive. You did come back different. Hi, Barry. Artie, growing a mustache? Looks good. Hear about Frankie? Yeah. You going to the funeral? No, I'm not going. Everybody knows, sting someone, you die. Don't waste it on a squirrel. Such a hothead. I guess he could have just gotten out of the way. I love this incorporating an amusement park into our day. That's why we don't need vacations. Boy, quite a bit of pomp under the circumstances. Well, Adam, today we are men. We are! Bee-men. Amen! Hallelujah!";
 8001266:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800126a:	f2a3 632c 	subw	r3, r3, #1580	; 0x62c
 800126e:	4a53      	ldr	r2, [pc, #332]	; (80013bc <AX_Radio_FIFO_Routine+0x174>)
 8001270:	4618      	mov	r0, r3
 8001272:	4611      	mov	r1, r2
 8001274:	f240 6327 	movw	r3, #1575	; 0x627
 8001278:	461a      	mov	r2, r3
 800127a:	f003 f8bb 	bl	80043f4 <memcpy>
	/* Radio Control for Sending Packets*/
//	radio_write8(AX5043_REG_PWRMODE, 0x67, hspi); // Enable FIFO
	while ((radio_read8(AX5043_REG_POWSTAT, hspi) & (1 << 3)) == 0); // wait for pwrmode change to settle
 800127e:	bf00      	nop
 8001280:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001284:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001288:	6819      	ldr	r1, [r3, #0]
 800128a:	2003      	movs	r0, #3
 800128c:	f7ff fdfb 	bl	8000e86 <radio_read8>
 8001290:	4603      	mov	r3, r0
 8001292:	f003 0308 	and.w	r3, r3, #8
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0f2      	beq.n	8001280 <AX_Radio_FIFO_Routine+0x38>
	radio_write8(AX5043_REG_FIFOSTAT, 0x03, hspi); // clear FIFO
 800129a:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800129e:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2103      	movs	r1, #3
 80012a6:	2028      	movs	r0, #40	; 0x28
 80012a8:	f7ff fdcd 	bl	8000e46 <radio_write8>

	// preamble
	radio_write8(AX5043_REG_FIFODATA, 0x62, hspi); // REPEATDATA command
 80012ac:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80012b0:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	2162      	movs	r1, #98	; 0x62
 80012b8:	2029      	movs	r0, #41	; 0x29
 80012ba:	f7ff fdc4 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, 0x18, hspi); // bypass framing & encoding, suppress CRC, no pkt start/end
 80012be:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80012c2:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	2118      	movs	r1, #24
 80012ca:	2029      	movs	r0, #41	; 0x29
 80012cc:	f7ff fdbb 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, 0x14, hspi); // repeat byte given in next command 20 times
 80012d0:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80012d4:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	2114      	movs	r1, #20
 80012dc:	2029      	movs	r0, #41	; 0x29
 80012de:	f7ff fdb2 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, preamble, hspi); // byte to be sent 10 times
 80012e2:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80012e6:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80012ea:	f897 1636 	ldrb.w	r1, [r7, #1590]	; 0x636
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	2029      	movs	r0, #41	; 0x29
 80012f2:	f7ff fda8 	bl	8000e46 <radio_write8>

	// frame
	radio_write8(AX5043_REG_FIFODATA, 0xE1, hspi); // TX Data command
 80012f6:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 80012fa:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	21e1      	movs	r1, #225	; 0xe1
 8001302:	2029      	movs	r0, #41	; 0x29
 8001304:	f7ff fd9f 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, (numBytesToSend+1), hspi); // 100 bytes +1 for control field byte
 8001308:	f897 3635 	ldrb.w	r3, [r7, #1589]	; 0x635
 800130c:	3301      	adds	r3, #1
 800130e:	b2d9      	uxtb	r1, r3
 8001310:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001314:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	2029      	movs	r0, #41	; 0x29
 800131c:	f7ff fd93 	bl	8000e46 <radio_write8>
	radio_write8(AX5043_REG_FIFODATA, 0x03, hspi); // pkt start/end used here
 8001320:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001324:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	2103      	movs	r1, #3
 800132c:	2029      	movs	r0, #41	; 0x29
 800132e:	f7ff fd8a 	bl	8000e46 <radio_write8>
	for (uint8_t i = 0; i < numBytesToSend; i++)
 8001332:	2300      	movs	r3, #0
 8001334:	f887 3637 	strb.w	r3, [r7, #1591]	; 0x637
 8001338:	e013      	b.n	8001362 <AX_Radio_FIFO_Routine+0x11a>
		radio_write8(AX5043_REG_FIFODATA, beeData[i], hspi);
 800133a:	f897 3637 	ldrb.w	r3, [r7, #1591]	; 0x637
 800133e:	f507 62c7 	add.w	r2, r7, #1592	; 0x638
 8001342:	f2a2 622c 	subw	r2, r2, #1580	; 0x62c
 8001346:	5cd1      	ldrb	r1, [r2, r3]
 8001348:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 800134c:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	2029      	movs	r0, #41	; 0x29
 8001354:	f7ff fd77 	bl	8000e46 <radio_write8>
	for (uint8_t i = 0; i < numBytesToSend; i++)
 8001358:	f897 3637 	ldrb.w	r3, [r7, #1591]	; 0x637
 800135c:	3301      	adds	r3, #1
 800135e:	f887 3637 	strb.w	r3, [r7, #1591]	; 0x637
 8001362:	f897 2637 	ldrb.w	r2, [r7, #1591]	; 0x637
 8001366:	f897 3635 	ldrb.w	r3, [r7, #1589]	; 0x635
 800136a:	429a      	cmp	r2, r3
 800136c:	d3e5      	bcc.n	800133a <AX_Radio_FIFO_Routine+0xf2>

	// commit
	radio_write8(AX5043_REG_FIFOSTAT, 0x04, hspi);
 800136e:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001372:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	2104      	movs	r1, #4
 800137a:	2028      	movs	r0, #40	; 0x28
 800137c:	f7ff fd63 	bl	8000e46 <radio_write8>

	// set to full tx
	radio_write8(AX5043_REG_PWRMODE,0x6D,hspi);
 8001380:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001384:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	216d      	movs	r1, #109	; 0x6d
 800138c:	2002      	movs	r0, #2
 800138e:	f7ff fd5a 	bl	8000e46 <radio_write8>
	while ((radio_read8(AX5043_REG_POWSTAT, hspi) & (1 << 3)) == 0);
 8001392:	bf00      	nop
 8001394:	f507 63c7 	add.w	r3, r7, #1592	; 0x638
 8001398:	f2a3 6334 	subw	r3, r3, #1588	; 0x634
 800139c:	6819      	ldr	r1, [r3, #0]
 800139e:	2003      	movs	r0, #3
 80013a0:	f7ff fd71 	bl	8000e86 <radio_read8>
 80013a4:	4603      	mov	r3, r0
 80013a6:	f003 0308 	and.w	r3, r3, #8
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f2      	beq.n	8001394 <AX_Radio_FIFO_Routine+0x14c>
	return AXRADIO_ERR_NOERROR;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	f507 67c7 	add.w	r7, r7, #1592	; 0x638
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	0800544c 	.word	0x0800544c

080013c0 <AX_Radio_Full_Init>:
	HAL_Delay(3000);
	return 0;
}

uint8_t AX_Radio_Full_Init(SPI_HandleTypeDef * hspi)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	AX_Radio_Data_Transmission_Setup(hspi);
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fd7a 	bl	8000ec2 <AX_Radio_Data_Transmission_Setup>
	if (AX_Radio_Range_PLL(hspi)) {
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 f839 	bl	8001446 <AX_Radio_Range_PLL>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <AX_Radio_Full_Init+0x1e>
			return AXRADIO_ERR_RANGING;
 80013da:	2306      	movs	r3, #6
 80013dc:	e000      	b.n	80013e0 <AX_Radio_Full_Init+0x20>
	}
	return 0;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <AX_Radio_Get_Status>:


uint16_t AX_Radio_Get_Status(SPI_HandleTypeDef * hspi)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	6078      	str	r0, [r7, #4]
	uint16_t addr, status;
	uint8_t data;
	addr = status = data = 0x00;
 80013f0:	2300      	movs	r3, #0
 80013f2:	72fb      	strb	r3, [r7, #11]
 80013f4:	2300      	movs	r3, #0
 80013f6:	81bb      	strh	r3, [r7, #12]
 80013f8:	89bb      	ldrh	r3, [r7, #12]
 80013fa:	81fb      	strh	r3, [r7, #14]

	return (AX_Radio_RW_Long_Address(&addr, &status, &data, hspi, 0xff, 0x0)) ? 0xffff : status;
 80013fc:	f107 020b 	add.w	r2, r7, #11
 8001400:	f107 010c 	add.w	r1, r7, #12
 8001404:	f107 000e 	add.w	r0, r7, #14
 8001408:	2300      	movs	r3, #0
 800140a:	9301      	str	r3, [sp, #4]
 800140c:	23ff      	movs	r3, #255	; 0xff
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f7ff fca0 	bl	8000d56 <AX_Radio_RW_Long_Address>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d101      	bne.n	8001420 <AX_Radio_Get_Status+0x38>
 800141c:	89bb      	ldrh	r3, [r7, #12]
 800141e:	e001      	b.n	8001424 <AX_Radio_Get_Status+0x3c>
 8001420:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8001424:	4618      	mov	r0, r3
 8001426:	3710      	adds	r7, #16
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <AX_Radio_Check_PLL>:

uint8_t AX_Radio_Check_PLL(SPI_HandleTypeDef * hspi)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	return radio_read8(AX5043_REG_PLLRANGINGA, hspi);
 8001434:	6879      	ldr	r1, [r7, #4]
 8001436:	2033      	movs	r0, #51	; 0x33
 8001438:	f7ff fd25 	bl	8000e86 <radio_read8>
 800143c:	4603      	mov	r3, r0
}
 800143e:	4618      	mov	r0, r3
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <AX_Radio_Range_PLL>:
{
	return AX_Radio_Check_PLL(hspi) & 0x40;
}

uint8_t AX_Radio_Range_PLL(SPI_HandleTypeDef * hspi)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	uint8_t pll_contents;
	radio_write8(AX5043_REG_PLLRANGINGA, 0x18, hspi);
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	2118      	movs	r1, #24
 8001452:	2033      	movs	r0, #51	; 0x33
 8001454:	f7ff fcf7 	bl	8000e46 <radio_write8>
	do
	{
		pll_contents = radio_read8(AX5043_REG_PLLRANGINGA, hspi);
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	2033      	movs	r0, #51	; 0x33
 800145c:	f7ff fd13 	bl	8000e86 <radio_read8>
 8001460:	4603      	mov	r3, r0
 8001462:	73fb      	strb	r3, [r7, #15]
		if(pll_contents & 0x20) {
 8001464:	7bfb      	ldrb	r3, [r7, #15]
 8001466:	f003 0320 	and.w	r3, r3, #32
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <AX_Radio_Range_PLL+0x2c>
			return pll_contents;	//Range error
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	e016      	b.n	80014a0 <AX_Radio_Range_PLL+0x5a>
		}
	}
	while (pll_contents & 0x10);
 8001472:	7bfb      	ldrb	r3, [r7, #15]
 8001474:	f003 0310 	and.w	r3, r3, #16
 8001478:	2b00      	cmp	r3, #0
 800147a:	d1ed      	bne.n	8001458 <AX_Radio_Range_PLL+0x12>
	HAL_Delay(100);
 800147c:	2064      	movs	r0, #100	; 0x64
 800147e:	f000 f88f 	bl	80015a0 <HAL_Delay>
	if(pll_contents & 0x40) {
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <AX_Radio_Range_PLL+0x4a>
		return 0;				//Range lock
 800148c:	2300      	movs	r3, #0
 800148e:	e007      	b.n	80014a0 <AX_Radio_Range_PLL+0x5a>
	} else if (pll_contents & 0x20) {
 8001490:	7bfb      	ldrb	r3, [r7, #15]
 8001492:	f003 0320 	and.w	r3, r3, #32
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <AX_Radio_Range_PLL+0x58>
		return pll_contents;	//Range error
 800149a:	7bfb      	ldrb	r3, [r7, #15]
 800149c:	e000      	b.n	80014a0 <AX_Radio_Range_PLL+0x5a>
	}
	else return 0; //Ideally this should be dead code... Make error?
 800149e:	2300      	movs	r3, #0
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014b2:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <HAL_Init+0x3c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <HAL_Init+0x3c>)
 80014b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014bc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014be:	2003      	movs	r0, #3
 80014c0:	f000 f944 	bl	800174c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014c4:	2000      	movs	r0, #0
 80014c6:	f000 f80f 	bl	80014e8 <HAL_InitTick>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	71fb      	strb	r3, [r7, #7]
 80014d4:	e001      	b.n	80014da <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014d6:	f7ff fa29 	bl	800092c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014da:	79fb      	ldrb	r3, [r7, #7]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40022000 	.word	0x40022000

080014e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80014f4:	4b17      	ldr	r3, [pc, #92]	; (8001554 <HAL_InitTick+0x6c>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d023      	beq.n	8001544 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80014fc:	4b16      	ldr	r3, [pc, #88]	; (8001558 <HAL_InitTick+0x70>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b14      	ldr	r3, [pc, #80]	; (8001554 <HAL_InitTick+0x6c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800150a:	fbb3 f3f1 	udiv	r3, r3, r1
 800150e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f000 f941 	bl	800179a <HAL_SYSTICK_Config>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d10f      	bne.n	800153e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2b0f      	cmp	r3, #15
 8001522:	d809      	bhi.n	8001538 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001524:	2200      	movs	r2, #0
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	f04f 30ff 	mov.w	r0, #4294967295
 800152c:	f000 f919 	bl	8001762 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001530:	4a0a      	ldr	r2, [pc, #40]	; (800155c <HAL_InitTick+0x74>)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6013      	str	r3, [r2, #0]
 8001536:	e007      	b.n	8001548 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	73fb      	strb	r3, [r7, #15]
 800153c:	e004      	b.n	8001548 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	73fb      	strb	r3, [r7, #15]
 8001542:	e001      	b.n	8001548 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001544:	2301      	movs	r3, #1
 8001546:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001548:	7bfb      	ldrb	r3, [r7, #15]
}
 800154a:	4618      	mov	r0, r3
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000008 	.word	0x20000008
 8001558:	20000000 	.word	0x20000000
 800155c:	20000004 	.word	0x20000004

08001560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <HAL_IncTick+0x20>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	461a      	mov	r2, r3
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <HAL_IncTick+0x24>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4413      	add	r3, r2
 8001570:	4a04      	ldr	r2, [pc, #16]	; (8001584 <HAL_IncTick+0x24>)
 8001572:	6013      	str	r3, [r2, #0]
}
 8001574:	bf00      	nop
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	20000008 	.word	0x20000008
 8001584:	20000178 	.word	0x20000178

08001588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return uwTick;
 800158c:	4b03      	ldr	r3, [pc, #12]	; (800159c <HAL_GetTick+0x14>)
 800158e:	681b      	ldr	r3, [r3, #0]
}
 8001590:	4618      	mov	r0, r3
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	20000178 	.word	0x20000178

080015a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015a8:	f7ff ffee 	bl	8001588 <HAL_GetTick>
 80015ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015b8:	d005      	beq.n	80015c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ba:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_Delay+0x44>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	461a      	mov	r2, r3
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4413      	add	r3, r2
 80015c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015c6:	bf00      	nop
 80015c8:	f7ff ffde 	bl	8001588 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	68fa      	ldr	r2, [r7, #12]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d8f7      	bhi.n	80015c8 <HAL_Delay+0x28>
  {
  }
}
 80015d8:	bf00      	nop
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008

080015e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f003 0307 	and.w	r3, r3, #7
 80015f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015fe:	68ba      	ldr	r2, [r7, #8]
 8001600:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001604:	4013      	ands	r3, r2
 8001606:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001610:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001614:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001618:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800161a:	4a04      	ldr	r2, [pc, #16]	; (800162c <__NVIC_SetPriorityGrouping+0x44>)
 800161c:	68bb      	ldr	r3, [r7, #8]
 800161e:	60d3      	str	r3, [r2, #12]
}
 8001620:	bf00      	nop
 8001622:	3714      	adds	r7, #20
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000ed00 	.word	0xe000ed00

08001630 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <__NVIC_GetPriorityGrouping+0x18>)
 8001636:	68db      	ldr	r3, [r3, #12]
 8001638:	0a1b      	lsrs	r3, r3, #8
 800163a:	f003 0307 	and.w	r3, r3, #7
}
 800163e:	4618      	mov	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	4603      	mov	r3, r0
 8001654:	6039      	str	r1, [r7, #0]
 8001656:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	2b00      	cmp	r3, #0
 800165e:	db0a      	blt.n	8001676 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	b2da      	uxtb	r2, r3
 8001664:	490c      	ldr	r1, [pc, #48]	; (8001698 <__NVIC_SetPriority+0x4c>)
 8001666:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166a:	0112      	lsls	r2, r2, #4
 800166c:	b2d2      	uxtb	r2, r2
 800166e:	440b      	add	r3, r1
 8001670:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001674:	e00a      	b.n	800168c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	b2da      	uxtb	r2, r3
 800167a:	4908      	ldr	r1, [pc, #32]	; (800169c <__NVIC_SetPriority+0x50>)
 800167c:	79fb      	ldrb	r3, [r7, #7]
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	3b04      	subs	r3, #4
 8001684:	0112      	lsls	r2, r2, #4
 8001686:	b2d2      	uxtb	r2, r2
 8001688:	440b      	add	r3, r1
 800168a:	761a      	strb	r2, [r3, #24]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001696:	4770      	bx	lr
 8001698:	e000e100 	.word	0xe000e100
 800169c:	e000ed00 	.word	0xe000ed00

080016a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	; 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	60f8      	str	r0, [r7, #12]
 80016a8:	60b9      	str	r1, [r7, #8]
 80016aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	f1c3 0307 	rsb	r3, r3, #7
 80016ba:	2b04      	cmp	r3, #4
 80016bc:	bf28      	it	cs
 80016be:	2304      	movcs	r3, #4
 80016c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3304      	adds	r3, #4
 80016c6:	2b06      	cmp	r3, #6
 80016c8:	d902      	bls.n	80016d0 <NVIC_EncodePriority+0x30>
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	3b03      	subs	r3, #3
 80016ce:	e000      	b.n	80016d2 <NVIC_EncodePriority+0x32>
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	f04f 32ff 	mov.w	r2, #4294967295
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43da      	mvns	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	401a      	ands	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e8:	f04f 31ff 	mov.w	r1, #4294967295
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	fa01 f303 	lsl.w	r3, r1, r3
 80016f2:	43d9      	mvns	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f8:	4313      	orrs	r3, r2
         );
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3724      	adds	r7, #36	; 0x24
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3b01      	subs	r3, #1
 8001714:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001718:	d301      	bcc.n	800171e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800171a:	2301      	movs	r3, #1
 800171c:	e00f      	b.n	800173e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <SysTick_Config+0x40>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	3b01      	subs	r3, #1
 8001724:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001726:	210f      	movs	r1, #15
 8001728:	f04f 30ff 	mov.w	r0, #4294967295
 800172c:	f7ff ff8e 	bl	800164c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <SysTick_Config+0x40>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001736:	4b04      	ldr	r3, [pc, #16]	; (8001748 <SysTick_Config+0x40>)
 8001738:	2207      	movs	r2, #7
 800173a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	e000e010 	.word	0xe000e010

0800174c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001754:	6878      	ldr	r0, [r7, #4]
 8001756:	f7ff ff47 	bl	80015e8 <__NVIC_SetPriorityGrouping>
}
 800175a:	bf00      	nop
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b086      	sub	sp, #24
 8001766:	af00      	add	r7, sp, #0
 8001768:	4603      	mov	r3, r0
 800176a:	60b9      	str	r1, [r7, #8]
 800176c:	607a      	str	r2, [r7, #4]
 800176e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001770:	2300      	movs	r3, #0
 8001772:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001774:	f7ff ff5c 	bl	8001630 <__NVIC_GetPriorityGrouping>
 8001778:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	68b9      	ldr	r1, [r7, #8]
 800177e:	6978      	ldr	r0, [r7, #20]
 8001780:	f7ff ff8e 	bl	80016a0 <NVIC_EncodePriority>
 8001784:	4602      	mov	r2, r0
 8001786:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800178a:	4611      	mov	r1, r2
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff5d 	bl	800164c <__NVIC_SetPriority>
}
 8001792:	bf00      	nop
 8001794:	3718      	adds	r7, #24
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	b082      	sub	sp, #8
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017a2:	6878      	ldr	r0, [r7, #4]
 80017a4:	f7ff ffb0 	bl	8001708 <SysTick_Config>
 80017a8:	4603      	mov	r3, r0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
 80017bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017c2:	e14e      	b.n	8001a62 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	2101      	movs	r1, #1
 80017ca:	697b      	ldr	r3, [r7, #20]
 80017cc:	fa01 f303 	lsl.w	r3, r1, r3
 80017d0:	4013      	ands	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 8140 	beq.w	8001a5c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d005      	beq.n	80017f4 <HAL_GPIO_Init+0x40>
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	f003 0303 	and.w	r3, r3, #3
 80017f0:	2b02      	cmp	r3, #2
 80017f2:	d130      	bne.n	8001856 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4013      	ands	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	68da      	ldr	r2, [r3, #12]
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800182a:	2201      	movs	r2, #1
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43db      	mvns	r3, r3
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4013      	ands	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800183a:	683b      	ldr	r3, [r7, #0]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	091b      	lsrs	r3, r3, #4
 8001840:	f003 0201 	and.w	r2, r3, #1
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	fa02 f303 	lsl.w	r3, r2, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4313      	orrs	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	2b03      	cmp	r3, #3
 8001860:	d017      	beq.n	8001892 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68db      	ldr	r3, [r3, #12]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	2203      	movs	r2, #3
 800186e:	fa02 f303 	lsl.w	r3, r2, r3
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	4313      	orrs	r3, r2
 800188a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d123      	bne.n	80018e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	08da      	lsrs	r2, r3, #3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	3208      	adds	r2, #8
 80018a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	220f      	movs	r2, #15
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	693a      	ldr	r2, [r7, #16]
 80018be:	4013      	ands	r3, r2
 80018c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	009b      	lsls	r3, r3, #2
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	08da      	lsrs	r2, r3, #3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	3208      	adds	r2, #8
 80018e0:	6939      	ldr	r1, [r7, #16]
 80018e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	2203      	movs	r2, #3
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f003 0203 	and.w	r2, r3, #3
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001922:	2b00      	cmp	r3, #0
 8001924:	f000 809a 	beq.w	8001a5c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001928:	4b55      	ldr	r3, [pc, #340]	; (8001a80 <HAL_GPIO_Init+0x2cc>)
 800192a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192c:	4a54      	ldr	r2, [pc, #336]	; (8001a80 <HAL_GPIO_Init+0x2cc>)
 800192e:	f043 0301 	orr.w	r3, r3, #1
 8001932:	6613      	str	r3, [r2, #96]	; 0x60
 8001934:	4b52      	ldr	r3, [pc, #328]	; (8001a80 <HAL_GPIO_Init+0x2cc>)
 8001936:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001938:	f003 0301 	and.w	r3, r3, #1
 800193c:	60bb      	str	r3, [r7, #8]
 800193e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001940:	4a50      	ldr	r2, [pc, #320]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	f003 0303 	and.w	r3, r3, #3
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	220f      	movs	r2, #15
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800196a:	d013      	beq.n	8001994 <HAL_GPIO_Init+0x1e0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a46      	ldr	r2, [pc, #280]	; (8001a88 <HAL_GPIO_Init+0x2d4>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d00d      	beq.n	8001990 <HAL_GPIO_Init+0x1dc>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a45      	ldr	r2, [pc, #276]	; (8001a8c <HAL_GPIO_Init+0x2d8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d007      	beq.n	800198c <HAL_GPIO_Init+0x1d8>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a44      	ldr	r2, [pc, #272]	; (8001a90 <HAL_GPIO_Init+0x2dc>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d101      	bne.n	8001988 <HAL_GPIO_Init+0x1d4>
 8001984:	2303      	movs	r3, #3
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 8001988:	2307      	movs	r3, #7
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x1e2>
 8001994:	2300      	movs	r3, #0
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019a6:	4937      	ldr	r1, [pc, #220]	; (8001a84 <HAL_GPIO_Init+0x2d0>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019b4:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019d8:	4a2e      	ldr	r2, [pc, #184]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019de:	4b2d      	ldr	r3, [pc, #180]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a02:	4a24      	ldr	r2, [pc, #144]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a08:	4b22      	ldr	r3, [pc, #136]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a2c:	4a19      	ldr	r2, [pc, #100]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a32:	4b18      	ldr	r3, [pc, #96]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a56:	4a0f      	ldr	r2, [pc, #60]	; (8001a94 <HAL_GPIO_Init+0x2e0>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f aea9 	bne.w	80017c4 <HAL_GPIO_Init+0x10>
  }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	48000c00 	.word	0x48000c00
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001acc:	4b04      	ldr	r3, [pc, #16]	; (8001ae0 <HAL_PWREx_GetVoltageRange+0x18>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	40007000 	.word	0x40007000

08001ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001af2:	d130      	bne.n	8001b56 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001af4:	4b23      	ldr	r3, [pc, #140]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b00:	d038      	beq.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b0a:	4a1e      	ldr	r2, [pc, #120]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b10:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b12:	4b1d      	ldr	r3, [pc, #116]	; (8001b88 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2232      	movs	r2, #50	; 0x32
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	4a1b      	ldr	r2, [pc, #108]	; (8001b8c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b22:	0c9b      	lsrs	r3, r3, #18
 8001b24:	3301      	adds	r3, #1
 8001b26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b28:	e002      	b.n	8001b30 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	3b01      	subs	r3, #1
 8001b2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b30:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b32:	695b      	ldr	r3, [r3, #20]
 8001b34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3c:	d102      	bne.n	8001b44 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f2      	bne.n	8001b2a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b44:	4b0f      	ldr	r3, [pc, #60]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	695b      	ldr	r3, [r3, #20]
 8001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b50:	d110      	bne.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e00f      	b.n	8001b76 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b62:	d007      	beq.n	8001b74 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b64:	4b07      	ldr	r3, [pc, #28]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b6c:	4a05      	ldr	r2, [pc, #20]	; (8001b84 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b72:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	40007000 	.word	0x40007000
 8001b88:	20000000 	.word	0x20000000
 8001b8c:	431bde83 	.word	0x431bde83

08001b90 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b08a      	sub	sp, #40	; 0x28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d102      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	f000 bc4f 	b.w	8002442 <HAL_RCC_OscConfig+0x8b2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba4:	4b97      	ldr	r3, [pc, #604]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bae:	4b95      	ldr	r3, [pc, #596]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80e6 	beq.w	8001d92 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d007      	beq.n	8001bdc <HAL_RCC_OscConfig+0x4c>
 8001bcc:	6a3b      	ldr	r3, [r7, #32]
 8001bce:	2b0c      	cmp	r3, #12
 8001bd0:	f040 808d 	bne.w	8001cee <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	f040 8089 	bne.w	8001cee <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bdc:	4b89      	ldr	r3, [pc, #548]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d006      	beq.n	8001bf6 <HAL_RCC_OscConfig+0x66>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	69db      	ldr	r3, [r3, #28]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	f000 bc26 	b.w	8002442 <HAL_RCC_OscConfig+0x8b2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001bfa:	4b82      	ldr	r3, [pc, #520]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0308 	and.w	r3, r3, #8
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d004      	beq.n	8001c10 <HAL_RCC_OscConfig+0x80>
 8001c06:	4b7f      	ldr	r3, [pc, #508]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c0e:	e005      	b.n	8001c1c <HAL_RCC_OscConfig+0x8c>
 8001c10:	4b7c      	ldr	r3, [pc, #496]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c16:	091b      	lsrs	r3, r3, #4
 8001c18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d224      	bcs.n	8001c6a <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c24:	4618      	mov	r0, r3
 8001c26:	f000 fdd9 	bl	80027dc <RCC_SetFlashLatencyFromMSIRange>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d002      	beq.n	8001c36 <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
 8001c32:	f000 bc06 	b.w	8002442 <HAL_RCC_OscConfig+0x8b2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c36:	4b73      	ldr	r3, [pc, #460]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a72      	ldr	r2, [pc, #456]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	f043 0308 	orr.w	r3, r3, #8
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	4b70      	ldr	r3, [pc, #448]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c4e:	496d      	ldr	r1, [pc, #436]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c50:	4313      	orrs	r3, r2
 8001c52:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c54:	4b6b      	ldr	r3, [pc, #428]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6a1b      	ldr	r3, [r3, #32]
 8001c60:	021b      	lsls	r3, r3, #8
 8001c62:	4968      	ldr	r1, [pc, #416]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
 8001c68:	e025      	b.n	8001cb6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c6a:	4b66      	ldr	r3, [pc, #408]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a65      	ldr	r2, [pc, #404]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	4b63      	ldr	r3, [pc, #396]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	4960      	ldr	r1, [pc, #384]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c88:	4b5e      	ldr	r3, [pc, #376]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	021b      	lsls	r3, r3, #8
 8001c96:	495b      	ldr	r1, [pc, #364]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d109      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fd98 	bl	80027dc <RCC_SetFlashLatencyFromMSIRange>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e3c5      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001cb6:	f000 fccd 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b51      	ldr	r3, [pc, #324]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	091b      	lsrs	r3, r3, #4
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	4950      	ldr	r1, [pc, #320]	; (8001e08 <HAL_RCC_OscConfig+0x278>)
 8001cc8:	5ccb      	ldrb	r3, [r1, r3]
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	4a4e      	ldr	r2, [pc, #312]	; (8001e0c <HAL_RCC_OscConfig+0x27c>)
 8001cd4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001cd6:	4b4e      	ldr	r3, [pc, #312]	; (8001e10 <HAL_RCC_OscConfig+0x280>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fc04 	bl	80014e8 <HAL_InitTick>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 8001ce4:	7dfb      	ldrb	r3, [r7, #23]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d052      	beq.n	8001d90 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
 8001cec:	e3a9      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d032      	beq.n	8001d5c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cf6:	4b43      	ldr	r3, [pc, #268]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a42      	ldr	r2, [pc, #264]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d02:	f7ff fc41 	bl	8001588 <HAL_GetTick>
 8001d06:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d08:	e008      	b.n	8001d1c <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d0a:	f7ff fc3d 	bl	8001588 <HAL_GetTick>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b02      	cmp	r3, #2
 8001d16:	d901      	bls.n	8001d1c <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	e392      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d1c:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d0f0      	beq.n	8001d0a <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a35      	ldr	r2, [pc, #212]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d2e:	f043 0308 	orr.w	r3, r3, #8
 8001d32:	6013      	str	r3, [r2, #0]
 8001d34:	4b33      	ldr	r3, [pc, #204]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d40:	4930      	ldr	r1, [pc, #192]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d46:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6a1b      	ldr	r3, [r3, #32]
 8001d52:	021b      	lsls	r3, r3, #8
 8001d54:	492b      	ldr	r1, [pc, #172]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]
 8001d5a:	e01a      	b.n	8001d92 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d5c:	4b29      	ldr	r3, [pc, #164]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a28      	ldr	r2, [pc, #160]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d62:	f023 0301 	bic.w	r3, r3, #1
 8001d66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d68:	f7ff fc0e 	bl	8001588 <HAL_GetTick>
 8001d6c:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d70:	f7ff fc0a 	bl	8001588 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e35f      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d82:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0x1e0>
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d90:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d073      	beq.n	8001e86 <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	2b08      	cmp	r3, #8
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_OscConfig+0x220>
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d10e      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	2b03      	cmp	r3, #3
 8001dae:	d10b      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db0:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d063      	beq.n	8001e84 <HAL_RCC_OscConfig+0x2f4>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d15f      	bne.n	8001e84 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e33c      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd0:	d106      	bne.n	8001de0 <HAL_RCC_OscConfig+0x250>
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a0b      	ldr	r2, [pc, #44]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	e025      	b.n	8001e2c <HAL_RCC_OscConfig+0x29c>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001de8:	d114      	bne.n	8001e14 <HAL_RCC_OscConfig+0x284>
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001df0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df4:	6013      	str	r3, [r2, #0]
 8001df6:	4b03      	ldr	r3, [pc, #12]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a02      	ldr	r2, [pc, #8]	; (8001e04 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	e013      	b.n	8001e2c <HAL_RCC_OscConfig+0x29c>
 8001e04:	40021000 	.word	0x40021000
 8001e08:	08005a74 	.word	0x08005a74
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000004 	.word	0x20000004
 8001e14:	4b8f      	ldr	r3, [pc, #572]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a8e      	ldr	r2, [pc, #568]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e1a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e1e:	6013      	str	r3, [r2, #0]
 8001e20:	4b8c      	ldr	r3, [pc, #560]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a8b      	ldr	r2, [pc, #556]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d013      	beq.n	8001e5c <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e34:	f7ff fba8 	bl	8001588 <HAL_GetTick>
 8001e38:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x2be>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff fba4 	bl	8001588 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e2f9      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e4e:	4b81      	ldr	r3, [pc, #516]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x2ac>
 8001e5a:	e014      	b.n	8001e86 <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5c:	f7ff fb94 	bl	8001588 <HAL_GetTick>
 8001e60:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e62:	e008      	b.n	8001e76 <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e64:	f7ff fb90 	bl	8001588 <HAL_GetTick>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	2b64      	cmp	r3, #100	; 0x64
 8001e70:	d901      	bls.n	8001e76 <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001e72:	2303      	movs	r3, #3
 8001e74:	e2e5      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e76:	4b77      	ldr	r3, [pc, #476]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1f0      	bne.n	8001e64 <HAL_RCC_OscConfig+0x2d4>
 8001e82:	e000      	b.n	8001e86 <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0302 	and.w	r3, r3, #2
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d060      	beq.n	8001f54 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x314>
 8001e98:	6a3b      	ldr	r3, [r7, #32]
 8001e9a:	2b0c      	cmp	r3, #12
 8001e9c:	d119      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d116      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea4:	4b6b      	ldr	r3, [pc, #428]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d005      	beq.n	8001ebc <HAL_RCC_OscConfig+0x32c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e2c2      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b65      	ldr	r3, [pc, #404]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	4962      	ldr	r1, [pc, #392]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed0:	e040      	b.n	8001f54 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d023      	beq.n	8001f22 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eda:	4b5e      	ldr	r3, [pc, #376]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a5d      	ldr	r2, [pc, #372]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7ff fb4f 	bl	8001588 <HAL_GetTick>
 8001eea:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001eee:	f7ff fb4b 	bl	8001588 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e2a0      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f00:	4b54      	ldr	r3, [pc, #336]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0c:	4b51      	ldr	r3, [pc, #324]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	061b      	lsls	r3, r3, #24
 8001f1a:	494e      	ldr	r1, [pc, #312]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	604b      	str	r3, [r1, #4]
 8001f20:	e018      	b.n	8001f54 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f22:	4b4c      	ldr	r3, [pc, #304]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a4b      	ldr	r2, [pc, #300]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7ff fb2b 	bl	8001588 <HAL_GetTick>
 8001f32:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f36:	f7ff fb27 	bl	8001588 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e27c      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f48:	4b42      	ldr	r3, [pc, #264]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 8082 	beq.w	8002066 <HAL_RCC_OscConfig+0x4d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	695b      	ldr	r3, [r3, #20]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d05f      	beq.n	800202a <HAL_RCC_OscConfig+0x49a>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 8001f6a:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f70:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	f003 0310 	and.w	r3, r3, #16
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d037      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x460>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d006      	beq.n	8001f98 <HAL_RCC_OscConfig+0x408>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d101      	bne.n	8001f98 <HAL_RCC_OscConfig+0x408>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e254      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d01b      	beq.n	8001fda <HAL_RCC_OscConfig+0x44a>
        {
          __HAL_RCC_LSI_DISABLE();
 8001fa2:	4b2c      	ldr	r3, [pc, #176]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa8:	4a2a      	ldr	r2, [pc, #168]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001faa:	f023 0301 	bic.w	r3, r3, #1
 8001fae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fb2:	f7ff fae9 	bl	8001588 <HAL_GetTick>
 8001fb6:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x43c>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fba:	f7ff fae5 	bl	8001588 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b11      	cmp	r3, #17
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x43c>
            {
              return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e23a      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd2:	f003 0302 	and.w	r3, r3, #2
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1ef      	bne.n	8001fba <HAL_RCC_OscConfig+0x42a>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe0:	f023 0210 	bic.w	r2, r3, #16
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	491a      	ldr	r1, [pc, #104]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff0:	4b18      	ldr	r3, [pc, #96]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff6:	4a17      	ldr	r2, [pc, #92]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7ff fac2 	bl	8001588 <HAL_GetTick>
 8002004:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7ff fabe 	bl	8001588 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b11      	cmp	r3, #17
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e213      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800201a:	4b0e      	ldr	r3, [pc, #56]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 800201c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0ef      	beq.n	8002008 <HAL_RCC_OscConfig+0x478>
 8002028:	e01d      	b.n	8002066 <HAL_RCC_OscConfig+0x4d6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 800202c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002030:	4a08      	ldr	r2, [pc, #32]	; (8002054 <HAL_RCC_OscConfig+0x4c4>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203a:	f7ff faa5 	bl	8001588 <HAL_GetTick>
 800203e:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x4c8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002042:	f7ff faa1 	bl	8001588 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b11      	cmp	r3, #17
 800204e:	d903      	bls.n	8002058 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e1f6      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
 8002054:	40021000 	.word	0x40021000
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002058:	4ba9      	ldr	r3, [pc, #676]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 800205a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1ed      	bne.n	8002042 <HAL_RCC_OscConfig+0x4b2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80bd 	beq.w	80021ee <HAL_RCC_OscConfig+0x65e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800207a:	4ba1      	ldr	r3, [pc, #644]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 800207c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800207e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10e      	bne.n	80020a4 <HAL_RCC_OscConfig+0x514>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	4b9e      	ldr	r3, [pc, #632]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 8002088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208a:	4a9d      	ldr	r2, [pc, #628]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 800208c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002090:	6593      	str	r3, [r2, #88]	; 0x58
 8002092:	4b9b      	ldr	r3, [pc, #620]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 8002094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800209e:	2301      	movs	r3, #1
 80020a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a4:	4b97      	ldr	r3, [pc, #604]	; (8002304 <HAL_RCC_OscConfig+0x774>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d118      	bne.n	80020e2 <HAL_RCC_OscConfig+0x552>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020b0:	4b94      	ldr	r3, [pc, #592]	; (8002304 <HAL_RCC_OscConfig+0x774>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a93      	ldr	r2, [pc, #588]	; (8002304 <HAL_RCC_OscConfig+0x774>)
 80020b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020bc:	f7ff fa64 	bl	8001588 <HAL_GetTick>
 80020c0:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x546>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c4:	f7ff fa60 	bl	8001588 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x546>
        {
          return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e1b5      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d6:	4b8b      	ldr	r3, [pc, #556]	; (8002304 <HAL_RCC_OscConfig+0x774>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0x534>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d02c      	beq.n	8002148 <HAL_RCC_OscConfig+0x5b8>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80020ee:	4b84      	ldr	r3, [pc, #528]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 80020f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002100:	497f      	ldr	r1, [pc, #508]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 8002102:	4313      	orrs	r3, r2
 8002104:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d010      	beq.n	8002136 <HAL_RCC_OscConfig+0x5a6>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002114:	4b7a      	ldr	r3, [pc, #488]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 8002116:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211a:	4a79      	ldr	r2, [pc, #484]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 800211c:	f043 0304 	orr.w	r3, r3, #4
 8002120:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002124:	4b76      	ldr	r3, [pc, #472]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 8002126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800212a:	4a75      	ldr	r2, [pc, #468]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002134:	e018      	b.n	8002168 <HAL_RCC_OscConfig+0x5d8>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002136:	4b72      	ldr	r3, [pc, #456]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	4a70      	ldr	r2, [pc, #448]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002146:	e00f      	b.n	8002168 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002148:	4b6d      	ldr	r3, [pc, #436]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	4a6c      	ldr	r2, [pc, #432]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002158:	4b69      	ldr	r3, [pc, #420]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 800215a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215e:	4a68      	ldr	r2, [pc, #416]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 8002160:	f023 0304 	bic.w	r3, r3, #4
 8002164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d016      	beq.n	800219e <HAL_RCC_OscConfig+0x60e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002170:	f7ff fa0a 	bl	8001588 <HAL_GetTick>
 8002174:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002176:	e00a      	b.n	800218e <HAL_RCC_OscConfig+0x5fe>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002178:	f7ff fa06 	bl	8001588 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	f241 3288 	movw	r2, #5000	; 0x1388
 8002186:	4293      	cmp	r3, r2
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0x5fe>
        {
          return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e159      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218e:	4b5c      	ldr	r3, [pc, #368]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 8002190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0ed      	beq.n	8002178 <HAL_RCC_OscConfig+0x5e8>
 800219c:	e01d      	b.n	80021da <HAL_RCC_OscConfig+0x64a>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800219e:	f7ff f9f3 	bl	8001588 <HAL_GetTick>
 80021a2:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021a4:	e00a      	b.n	80021bc <HAL_RCC_OscConfig+0x62c>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a6:	f7ff f9ef 	bl	8001588 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d901      	bls.n	80021bc <HAL_RCC_OscConfig+0x62c>
        {
          return HAL_TIMEOUT;
 80021b8:	2303      	movs	r3, #3
 80021ba:	e142      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021bc:	4b50      	ldr	r3, [pc, #320]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 80021be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d1ed      	bne.n	80021a6 <HAL_RCC_OscConfig+0x616>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80021ca:	4b4d      	ldr	r3, [pc, #308]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 80021cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021d0:	4a4b      	ldr	r2, [pc, #300]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 80021d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d105      	bne.n	80021ee <HAL_RCC_OscConfig+0x65e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	4b47      	ldr	r3, [pc, #284]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 80021e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e6:	4a46      	ldr	r2, [pc, #280]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 80021e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0320 	and.w	r3, r3, #32
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d03c      	beq.n	8002274 <HAL_RCC_OscConfig+0x6e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d01c      	beq.n	800223c <HAL_RCC_OscConfig+0x6ac>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002202:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 8002204:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002208:	4a3d      	ldr	r2, [pc, #244]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002212:	f7ff f9b9 	bl	8001588 <HAL_GetTick>
 8002216:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x69c>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800221a:	f7ff f9b5 	bl	8001588 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x69c>
        {
          return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e10a      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800222c:	4b34      	ldr	r3, [pc, #208]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 800222e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d0ef      	beq.n	800221a <HAL_RCC_OscConfig+0x68a>
 800223a:	e01b      	b.n	8002274 <HAL_RCC_OscConfig+0x6e4>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800223c:	4b30      	ldr	r3, [pc, #192]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 800223e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002242:	4a2f      	ldr	r2, [pc, #188]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800224c:	f7ff f99c 	bl	8001588 <HAL_GetTick>
 8002250:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x6d6>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002254:	f7ff f998 	bl	8001588 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x6d6>
        {
          return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e0ed      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002266:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 8002268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800226c:	f003 0302 	and.w	r3, r3, #2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1ef      	bne.n	8002254 <HAL_RCC_OscConfig+0x6c4>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	2b00      	cmp	r3, #0
 800227a:	f000 80e1 	beq.w	8002440 <HAL_RCC_OscConfig+0x8b0>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002282:	2b02      	cmp	r3, #2
 8002284:	f040 80b5 	bne.w	80023f2 <HAL_RCC_OscConfig+0x862>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002288:	4b1d      	ldr	r3, [pc, #116]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	f003 0203 	and.w	r2, r3, #3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	429a      	cmp	r2, r3
 800229a:	d124      	bne.n	80022e6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	3b01      	subs	r3, #1
 80022a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d11b      	bne.n	80022e6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d113      	bne.n	80022e6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022c8:	085b      	lsrs	r3, r3, #1
 80022ca:	3b01      	subs	r3, #1
 80022cc:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80022ce:	429a      	cmp	r2, r3
 80022d0:	d109      	bne.n	80022e6 <HAL_RCC_OscConfig+0x756>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	085b      	lsrs	r3, r3, #1
 80022de:	3b01      	subs	r3, #1
 80022e0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d05f      	beq.n	80023a6 <HAL_RCC_OscConfig+0x816>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022e6:	6a3b      	ldr	r3, [r7, #32]
 80022e8:	2b0c      	cmp	r3, #12
 80022ea:	d05a      	beq.n	80023a2 <HAL_RCC_OscConfig+0x812>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022ec:	4b04      	ldr	r3, [pc, #16]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a03      	ldr	r2, [pc, #12]	; (8002300 <HAL_RCC_OscConfig+0x770>)
 80022f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022f6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022f8:	f7ff f946 	bl	8001588 <HAL_GetTick>
 80022fc:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fe:	e00c      	b.n	800231a <HAL_RCC_OscConfig+0x78a>
 8002300:	40021000 	.word	0x40021000
 8002304:	40007000 	.word	0x40007000
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002308:	f7ff f93e 	bl	8001588 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x78a>
              {
                return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e093      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800231a:	4b4c      	ldr	r3, [pc, #304]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d1f0      	bne.n	8002308 <HAL_RCC_OscConfig+0x778>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002326:	4b49      	ldr	r3, [pc, #292]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	4b49      	ldr	r3, [pc, #292]	; (8002450 <HAL_RCC_OscConfig+0x8c0>)
 800232c:	4013      	ands	r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002336:	3a01      	subs	r2, #1
 8002338:	0112      	lsls	r2, r2, #4
 800233a:	4311      	orrs	r1, r2
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002340:	0212      	lsls	r2, r2, #8
 8002342:	4311      	orrs	r1, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002348:	0852      	lsrs	r2, r2, #1
 800234a:	3a01      	subs	r2, #1
 800234c:	0552      	lsls	r2, r2, #21
 800234e:	4311      	orrs	r1, r2
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002354:	0852      	lsrs	r2, r2, #1
 8002356:	3a01      	subs	r2, #1
 8002358:	0652      	lsls	r2, r2, #25
 800235a:	430a      	orrs	r2, r1
 800235c:	493b      	ldr	r1, [pc, #236]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 800235e:	4313      	orrs	r3, r2
 8002360:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002362:	4b3a      	ldr	r3, [pc, #232]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a39      	ldr	r2, [pc, #228]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 8002368:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800236c:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800236e:	4b37      	ldr	r3, [pc, #220]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	4a36      	ldr	r2, [pc, #216]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 8002374:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002378:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800237a:	f7ff f905 	bl	8001588 <HAL_GetTick>
 800237e:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002380:	e008      	b.n	8002394 <HAL_RCC_OscConfig+0x804>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002382:	f7ff f901 	bl	8001588 <HAL_GetTick>
 8002386:	4602      	mov	r2, r0
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	2b02      	cmp	r3, #2
 800238e:	d901      	bls.n	8002394 <HAL_RCC_OscConfig+0x804>
              {
                return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e056      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002394:	4b2d      	ldr	r3, [pc, #180]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d0f0      	beq.n	8002382 <HAL_RCC_OscConfig+0x7f2>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023a0:	e04e      	b.n	8002440 <HAL_RCC_OscConfig+0x8b0>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e04d      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a6:	4b29      	ldr	r3, [pc, #164]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d146      	bne.n	8002440 <HAL_RCC_OscConfig+0x8b0>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a25      	ldr	r2, [pc, #148]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 80023b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023bc:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023be:	4b23      	ldr	r3, [pc, #140]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	4a22      	ldr	r2, [pc, #136]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 80023c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023c8:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023ca:	f7ff f8dd 	bl	8001588 <HAL_GetTick>
 80023ce:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d0:	e008      	b.n	80023e4 <HAL_RCC_OscConfig+0x854>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d2:	f7ff f8d9 	bl	8001588 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d901      	bls.n	80023e4 <HAL_RCC_OscConfig+0x854>
            {
              return HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	e02e      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e4:	4b19      	ldr	r3, [pc, #100]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d0f0      	beq.n	80023d2 <HAL_RCC_OscConfig+0x842>
 80023f0:	e026      	b.n	8002440 <HAL_RCC_OscConfig+0x8b0>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	2b0c      	cmp	r3, #12
 80023f6:	d021      	beq.n	800243c <HAL_RCC_OscConfig+0x8ac>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f8:	4b14      	ldr	r3, [pc, #80]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a13      	ldr	r2, [pc, #76]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 80023fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002402:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002404:	f7ff f8c0 	bl	8001588 <HAL_GetTick>
 8002408:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800240a:	e008      	b.n	800241e <HAL_RCC_OscConfig+0x88e>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800240c:	f7ff f8bc 	bl	8001588 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d901      	bls.n	800241e <HAL_RCC_OscConfig+0x88e>
          {
            return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e011      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241e:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1f0      	bne.n	800240c <HAL_RCC_OscConfig+0x87c>
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 800242a:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_RCC_OscConfig+0x8bc>)
 8002430:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002434:	f023 0303 	bic.w	r3, r3, #3
 8002438:	60d3      	str	r3, [r2, #12]
 800243a:	e001      	b.n	8002440 <HAL_RCC_OscConfig+0x8b0>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <HAL_RCC_OscConfig+0x8b2>
      }
    }
  }
  return HAL_OK;
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	3728      	adds	r7, #40	; 0x28
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40021000 	.word	0x40021000
 8002450:	f99f808c 	.word	0xf99f808c

08002454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e0e7      	b.n	8002638 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4b75      	ldr	r3, [pc, #468]	; (8002640 <HAL_RCC_ClockConfig+0x1ec>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d910      	bls.n	8002498 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b72      	ldr	r3, [pc, #456]	; (8002640 <HAL_RCC_ClockConfig+0x1ec>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 0207 	bic.w	r2, r3, #7
 800247e:	4970      	ldr	r1, [pc, #448]	; (8002640 <HAL_RCC_ClockConfig+0x1ec>)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b6e      	ldr	r3, [pc, #440]	; (8002640 <HAL_RCC_ClockConfig+0x1ec>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0307 	and.w	r3, r3, #7
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e0cf      	b.n	8002638 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d010      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689a      	ldr	r2, [r3, #8]
 80024a8:	4b66      	ldr	r3, [pc, #408]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d908      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b4:	4b63      	ldr	r3, [pc, #396]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4960      	ldr	r1, [pc, #384]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04c      	beq.n	800256c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b03      	cmp	r3, #3
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024da:	4b5a      	ldr	r3, [pc, #360]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d121      	bne.n	800252a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e0a6      	b.n	8002638 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d107      	bne.n	8002502 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024f2:	4b54      	ldr	r3, [pc, #336]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d115      	bne.n	800252a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e09a      	b.n	8002638 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d107      	bne.n	800251a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800250a:	4b4e      	ldr	r3, [pc, #312]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d109      	bne.n	800252a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e08e      	b.n	8002638 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800251a:	4b4a      	ldr	r3, [pc, #296]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e086      	b.n	8002638 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800252a:	4b46      	ldr	r3, [pc, #280]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f023 0203 	bic.w	r2, r3, #3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	4943      	ldr	r1, [pc, #268]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800253c:	f7ff f824 	bl	8001588 <HAL_GetTick>
 8002540:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002542:	e00a      	b.n	800255a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002544:	f7ff f820 	bl	8001588 <HAL_GetTick>
 8002548:	4602      	mov	r2, r0
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002552:	4293      	cmp	r3, r2
 8002554:	d901      	bls.n	800255a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002556:	2303      	movs	r3, #3
 8002558:	e06e      	b.n	8002638 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800255a:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 020c 	and.w	r2, r3, #12
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	429a      	cmp	r2, r3
 800256a:	d1eb      	bne.n	8002544 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d010      	beq.n	800259a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	4b31      	ldr	r3, [pc, #196]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002584:	429a      	cmp	r2, r3
 8002586:	d208      	bcs.n	800259a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002588:	4b2e      	ldr	r3, [pc, #184]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	492b      	ldr	r1, [pc, #172]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800259a:	4b29      	ldr	r3, [pc, #164]	; (8002640 <HAL_RCC_ClockConfig+0x1ec>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0307 	and.w	r3, r3, #7
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d210      	bcs.n	80025ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a8:	4b25      	ldr	r3, [pc, #148]	; (8002640 <HAL_RCC_ClockConfig+0x1ec>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 0207 	bic.w	r2, r3, #7
 80025b0:	4923      	ldr	r1, [pc, #140]	; (8002640 <HAL_RCC_ClockConfig+0x1ec>)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b8:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_RCC_ClockConfig+0x1ec>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d001      	beq.n	80025ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e036      	b.n	8002638 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d008      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80025d6:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	4918      	ldr	r1, [pc, #96]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d009      	beq.n	8002608 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025f4:	4b13      	ldr	r3, [pc, #76]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	00db      	lsls	r3, r3, #3
 8002602:	4910      	ldr	r1, [pc, #64]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 8002604:	4313      	orrs	r3, r2
 8002606:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002608:	f000 f824 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b0d      	ldr	r3, [pc, #52]	; (8002644 <HAL_RCC_ClockConfig+0x1f0>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	091b      	lsrs	r3, r3, #4
 8002614:	f003 030f 	and.w	r3, r3, #15
 8002618:	490b      	ldr	r1, [pc, #44]	; (8002648 <HAL_RCC_ClockConfig+0x1f4>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	f003 031f 	and.w	r3, r3, #31
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
 8002624:	4a09      	ldr	r2, [pc, #36]	; (800264c <HAL_RCC_ClockConfig+0x1f8>)
 8002626:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002628:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_RCC_ClockConfig+0x1fc>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7fe ff5b 	bl	80014e8 <HAL_InitTick>
 8002632:	4603      	mov	r3, r0
 8002634:	72fb      	strb	r3, [r7, #11]

  return status;
 8002636:	7afb      	ldrb	r3, [r7, #11]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40022000 	.word	0x40022000
 8002644:	40021000 	.word	0x40021000
 8002648:	08005a74 	.word	0x08005a74
 800264c:	20000000 	.word	0x20000000
 8002650:	20000004 	.word	0x20000004

08002654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	2300      	movs	r3, #0
 8002660:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002662:	4b3e      	ldr	r3, [pc, #248]	; (800275c <HAL_RCC_GetSysClockFreq+0x108>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800266c:	4b3b      	ldr	r3, [pc, #236]	; (800275c <HAL_RCC_GetSysClockFreq+0x108>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0303 	and.w	r3, r3, #3
 8002674:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_RCC_GetSysClockFreq+0x34>
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d121      	bne.n	80026c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b01      	cmp	r3, #1
 8002686:	d11e      	bne.n	80026c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002688:	4b34      	ldr	r3, [pc, #208]	; (800275c <HAL_RCC_GetSysClockFreq+0x108>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 0308 	and.w	r3, r3, #8
 8002690:	2b00      	cmp	r3, #0
 8002692:	d107      	bne.n	80026a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002694:	4b31      	ldr	r3, [pc, #196]	; (800275c <HAL_RCC_GetSysClockFreq+0x108>)
 8002696:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	f003 030f 	and.w	r3, r3, #15
 80026a0:	61fb      	str	r3, [r7, #28]
 80026a2:	e005      	b.n	80026b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80026a4:	4b2d      	ldr	r3, [pc, #180]	; (800275c <HAL_RCC_GetSysClockFreq+0x108>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	091b      	lsrs	r3, r3, #4
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80026b0:	4a2b      	ldr	r2, [pc, #172]	; (8002760 <HAL_RCC_GetSysClockFreq+0x10c>)
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10d      	bne.n	80026dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026c4:	e00a      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d102      	bne.n	80026d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026cc:	4b25      	ldr	r3, [pc, #148]	; (8002764 <HAL_RCC_GetSysClockFreq+0x110>)
 80026ce:	61bb      	str	r3, [r7, #24]
 80026d0:	e004      	b.n	80026dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d101      	bne.n	80026dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_RCC_GetSysClockFreq+0x114>)
 80026da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	d134      	bne.n	800274c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_RCC_GetSysClockFreq+0x108>)
 80026e4:	68db      	ldr	r3, [r3, #12]
 80026e6:	f003 0303 	and.w	r3, r3, #3
 80026ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80026ec:	68bb      	ldr	r3, [r7, #8]
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d003      	beq.n	80026fa <HAL_RCC_GetSysClockFreq+0xa6>
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	d003      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0xac>
 80026f8:	e005      	b.n	8002706 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80026fa:	4b1a      	ldr	r3, [pc, #104]	; (8002764 <HAL_RCC_GetSysClockFreq+0x110>)
 80026fc:	617b      	str	r3, [r7, #20]
      break;
 80026fe:	e005      	b.n	800270c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_RCC_GetSysClockFreq+0x114>)
 8002702:	617b      	str	r3, [r7, #20]
      break;
 8002704:	e002      	b.n	800270c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	617b      	str	r3, [r7, #20]
      break;
 800270a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800270c:	4b13      	ldr	r3, [pc, #76]	; (800275c <HAL_RCC_GetSysClockFreq+0x108>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	f003 0307 	and.w	r3, r3, #7
 8002716:	3301      	adds	r3, #1
 8002718:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800271a:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_RCC_GetSysClockFreq+0x108>)
 800271c:	68db      	ldr	r3, [r3, #12]
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	fb03 f202 	mul.w	r2, r3, r2
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002730:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002732:	4b0a      	ldr	r3, [pc, #40]	; (800275c <HAL_RCC_GetSysClockFreq+0x108>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	0e5b      	lsrs	r3, r3, #25
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	3301      	adds	r3, #1
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	fbb2 f3f3 	udiv	r3, r2, r3
 800274a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800274c:	69bb      	ldr	r3, [r7, #24]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr
 800275a:	bf00      	nop
 800275c:	40021000 	.word	0x40021000
 8002760:	08005a8c 	.word	0x08005a8c
 8002764:	00f42400 	.word	0x00f42400
 8002768:	007a1200 	.word	0x007a1200

0800276c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002770:	4b03      	ldr	r3, [pc, #12]	; (8002780 <HAL_RCC_GetHCLKFreq+0x14>)
 8002772:	681b      	ldr	r3, [r3, #0]
}
 8002774:	4618      	mov	r0, r3
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	20000000 	.word	0x20000000

08002784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002788:	f7ff fff0 	bl	800276c <HAL_RCC_GetHCLKFreq>
 800278c:	4602      	mov	r2, r0
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	f003 0307 	and.w	r3, r3, #7
 8002798:	4904      	ldr	r1, [pc, #16]	; (80027ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800279a:	5ccb      	ldrb	r3, [r1, r3]
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000
 80027ac:	08005a84 	.word	0x08005a84

080027b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027b4:	f7ff ffda 	bl	800276c <HAL_RCC_GetHCLKFreq>
 80027b8:	4602      	mov	r2, r0
 80027ba:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	0adb      	lsrs	r3, r3, #11
 80027c0:	f003 0307 	and.w	r3, r3, #7
 80027c4:	4904      	ldr	r1, [pc, #16]	; (80027d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027c6:	5ccb      	ldrb	r3, [r1, r3]
 80027c8:	f003 031f 	and.w	r3, r3, #31
 80027cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40021000 	.word	0x40021000
 80027d8:	08005a84 	.word	0x08005a84

080027dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b086      	sub	sp, #24
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027e8:	4b2a      	ldr	r3, [pc, #168]	; (8002894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d003      	beq.n	80027fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027f4:	f7ff f968 	bl	8001ac8 <HAL_PWREx_GetVoltageRange>
 80027f8:	6178      	str	r0, [r7, #20]
 80027fa:	e014      	b.n	8002826 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027fc:	4b25      	ldr	r3, [pc, #148]	; (8002894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	4a24      	ldr	r2, [pc, #144]	; (8002894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002802:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002806:	6593      	str	r3, [r2, #88]	; 0x58
 8002808:	4b22      	ldr	r3, [pc, #136]	; (8002894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800280a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800280c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002814:	f7ff f958 	bl	8001ac8 <HAL_PWREx_GetVoltageRange>
 8002818:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800281a:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800281c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281e:	4a1d      	ldr	r2, [pc, #116]	; (8002894 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002820:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002824:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800282c:	d10b      	bne.n	8002846 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b80      	cmp	r3, #128	; 0x80
 8002832:	d919      	bls.n	8002868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2ba0      	cmp	r3, #160	; 0xa0
 8002838:	d902      	bls.n	8002840 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800283a:	2302      	movs	r3, #2
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	e013      	b.n	8002868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002840:	2301      	movs	r3, #1
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e010      	b.n	8002868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2b80      	cmp	r3, #128	; 0x80
 800284a:	d902      	bls.n	8002852 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800284c:	2303      	movs	r3, #3
 800284e:	613b      	str	r3, [r7, #16]
 8002850:	e00a      	b.n	8002868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2b80      	cmp	r3, #128	; 0x80
 8002856:	d102      	bne.n	800285e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002858:	2302      	movs	r3, #2
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	e004      	b.n	8002868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2b70      	cmp	r3, #112	; 0x70
 8002862:	d101      	bne.n	8002868 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002864:	2301      	movs	r3, #1
 8002866:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002868:	4b0b      	ldr	r3, [pc, #44]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f023 0207 	bic.w	r2, r3, #7
 8002870:	4909      	ldr	r1, [pc, #36]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002878:	4b07      	ldr	r3, [pc, #28]	; (8002898 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0307 	and.w	r3, r3, #7
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	429a      	cmp	r2, r3
 8002884:	d001      	beq.n	800288a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	40021000 	.word	0x40021000
 8002898:	40022000 	.word	0x40022000

0800289c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80028a4:	2300      	movs	r3, #0
 80028a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028a8:	2300      	movs	r3, #0
 80028aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 809e 	beq.w	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ba:	2300      	movs	r3, #0
 80028bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028be:	4b46      	ldr	r3, [pc, #280]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d101      	bne.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x32>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80028ce:	2300      	movs	r3, #0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00d      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028d4:	4b40      	ldr	r3, [pc, #256]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d8:	4a3f      	ldr	r2, [pc, #252]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028de:	6593      	str	r3, [r2, #88]	; 0x58
 80028e0:	4b3d      	ldr	r3, [pc, #244]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80028e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e8:	60bb      	str	r3, [r7, #8]
 80028ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ec:	2301      	movs	r3, #1
 80028ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028f0:	4b3a      	ldr	r3, [pc, #232]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a39      	ldr	r2, [pc, #228]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028fc:	f7fe fe44 	bl	8001588 <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002902:	e009      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002904:	f7fe fe40 	bl	8001588 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d902      	bls.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	74fb      	strb	r3, [r7, #19]
        break;
 8002916:	e005      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002918:	4b30      	ldr	r3, [pc, #192]	; (80029dc <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ef      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002924:	7cfb      	ldrb	r3, [r7, #19]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d15a      	bne.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800292a:	4b2b      	ldr	r3, [pc, #172]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002934:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d01e      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0xde>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	429a      	cmp	r2, r3
 8002944:	d019      	beq.n	800297a <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002946:	4b24      	ldr	r3, [pc, #144]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002950:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002952:	4b21      	ldr	r3, [pc, #132]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002958:	4a1f      	ldr	r2, [pc, #124]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800295a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800295e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002962:	4b1d      	ldr	r3, [pc, #116]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002964:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002968:	4a1b      	ldr	r2, [pc, #108]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800296a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002972:	4a19      	ldr	r2, [pc, #100]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b00      	cmp	r3, #0
 8002982:	d016      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fe00 	bl	8001588 <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298a:	e00b      	b.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800298c:	f7fe fdfc 	bl	8001588 <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d902      	bls.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	74fb      	strb	r3, [r7, #19]
            break;
 80029a2:	e006      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a4:	4b0c      	ldr	r3, [pc, #48]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0ec      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10b      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b8:	4b07      	ldr	r3, [pc, #28]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c6:	4904      	ldr	r1, [pc, #16]	; (80029d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029ce:	e009      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029d0:	7cfb      	ldrb	r3, [r7, #19]
 80029d2:	74bb      	strb	r3, [r7, #18]
 80029d4:	e006      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80029d6:	bf00      	nop
 80029d8:	40021000 	.word	0x40021000
 80029dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029e0:	7cfb      	ldrb	r3, [r7, #19]
 80029e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029e4:	7c7b      	ldrb	r3, [r7, #17]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d105      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ea:	4b6e      	ldr	r3, [pc, #440]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ee:	4a6d      	ldr	r2, [pc, #436]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80029f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0301 	and.w	r3, r3, #1
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a02:	4b68      	ldr	r3, [pc, #416]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a08:	f023 0203 	bic.w	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	4964      	ldr	r1, [pc, #400]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00a      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a24:	4b5f      	ldr	r3, [pc, #380]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2a:	f023 020c 	bic.w	r2, r3, #12
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	495c      	ldr	r1, [pc, #368]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0304 	and.w	r3, r3, #4
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00a      	beq.n	8002a5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a46:	4b57      	ldr	r3, [pc, #348]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	4953      	ldr	r1, [pc, #332]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00a      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a68:	4b4e      	ldr	r3, [pc, #312]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	494b      	ldr	r1, [pc, #300]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d00a      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002a8a:	4b46      	ldr	r3, [pc, #280]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	4942      	ldr	r1, [pc, #264]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00a      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002aac:	4b3d      	ldr	r3, [pc, #244]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	493a      	ldr	r1, [pc, #232]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00a      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ace:	4b35      	ldr	r3, [pc, #212]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	4931      	ldr	r1, [pc, #196]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002af0:	4b2c      	ldr	r3, [pc, #176]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	4929      	ldr	r1, [pc, #164]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b12:	4b24      	ldr	r3, [pc, #144]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b18:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	4920      	ldr	r1, [pc, #128]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d015      	beq.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002b34:	4b1b      	ldr	r3, [pc, #108]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b42:	4918      	ldr	r1, [pc, #96]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b52:	d105      	bne.n	8002b60 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b54:	4b13      	ldr	r3, [pc, #76]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	4a12      	ldr	r2, [pc, #72]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b5e:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d015      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b6c:	4b0d      	ldr	r3, [pc, #52]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	490a      	ldr	r1, [pc, #40]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b8a:	d105      	bne.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002b92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b98:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3718      	adds	r7, #24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	40021000 	.word	0x40021000

08002ba8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e095      	b.n	8002ce6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d108      	bne.n	8002bd4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bca:	d009      	beq.n	8002be0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	61da      	str	r2, [r3, #28]
 8002bd2:	e005      	b.n	8002be0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d106      	bne.n	8002c00 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7fd feba 	bl	8000974 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2202      	movs	r2, #2
 8002c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c16:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c20:	d902      	bls.n	8002c28 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	e002      	b.n	8002c2e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c2c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c36:	d007      	beq.n	8002c48 <HAL_SPI_Init+0xa0>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c40:	d002      	beq.n	8002c48 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c58:	431a      	orrs	r2, r3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	431a      	orrs	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	699b      	ldr	r3, [r3, #24]
 8002c72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c76:	431a      	orrs	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	69db      	ldr	r3, [r3, #28]
 8002c7c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c80:	431a      	orrs	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c8a:	ea42 0103 	orr.w	r1, r2, r3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c92:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	0c1b      	lsrs	r3, r3, #16
 8002ca4:	f003 0204 	and.w	r2, r3, #4
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	f003 0310 	and.w	r3, r3, #16
 8002cb0:	431a      	orrs	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002cc4:	ea42 0103 	orr.w	r1, r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	430a      	orrs	r2, r1
 8002cd4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b088      	sub	sp, #32
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	60f8      	str	r0, [r7, #12]
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	603b      	str	r3, [r7, #0]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d101      	bne.n	8002d10 <HAL_SPI_Transmit+0x22>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	e158      	b.n	8002fc2 <HAL_SPI_Transmit+0x2d4>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d18:	f7fe fc36 	bl	8001588 <HAL_GetTick>
 8002d1c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d1e:	88fb      	ldrh	r3, [r7, #6]
 8002d20:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d002      	beq.n	8002d34 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d32:	e13d      	b.n	8002fb0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d002      	beq.n	8002d40 <HAL_SPI_Transmit+0x52>
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d102      	bne.n	8002d46 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d44:	e134      	b.n	8002fb0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2200      	movs	r2, #0
 8002d52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	88fa      	ldrh	r2, [r7, #6]
 8002d5e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	88fa      	ldrh	r2, [r7, #6]
 8002d64:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d90:	d10f      	bne.n	8002db2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681a      	ldr	r2, [r3, #0]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002da0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002db0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dbc:	2b40      	cmp	r3, #64	; 0x40
 8002dbe:	d007      	beq.n	8002dd0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002dce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002dd8:	d94b      	bls.n	8002e72 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d002      	beq.n	8002de8 <HAL_SPI_Transmit+0xfa>
 8002de2:	8afb      	ldrh	r3, [r7, #22]
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d13e      	bne.n	8002e66 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dec:	881a      	ldrh	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df8:	1c9a      	adds	r2, r3, #2
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e0c:	e02b      	b.n	8002e66 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d112      	bne.n	8002e42 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	881a      	ldrh	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2c:	1c9a      	adds	r2, r3, #2
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b29a      	uxth	r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e40:	e011      	b.n	8002e66 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e42:	f7fe fba1 	bl	8001588 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	683a      	ldr	r2, [r7, #0]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d803      	bhi.n	8002e5a <HAL_SPI_Transmit+0x16c>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d102      	bne.n	8002e60 <HAL_SPI_Transmit+0x172>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d102      	bne.n	8002e66 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e64:	e0a4      	b.n	8002fb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1ce      	bne.n	8002e0e <HAL_SPI_Transmit+0x120>
 8002e70:	e07c      	b.n	8002f6c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_SPI_Transmit+0x192>
 8002e7a:	8afb      	ldrh	r3, [r7, #22]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d170      	bne.n	8002f62 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d912      	bls.n	8002eb0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	881a      	ldrh	r2, [r3, #0]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	1c9a      	adds	r2, r3, #2
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	3b02      	subs	r3, #2
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eae:	e058      	b.n	8002f62 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	330c      	adds	r3, #12
 8002eba:	7812      	ldrb	r2, [r2, #0]
 8002ebc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ed6:	e044      	b.n	8002f62 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d12b      	bne.n	8002f3e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d912      	bls.n	8002f16 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef4:	881a      	ldrh	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f00:	1c9a      	adds	r2, r3, #2
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b02      	subs	r3, #2
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f14:	e025      	b.n	8002f62 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	330c      	adds	r3, #12
 8002f20:	7812      	ldrb	r2, [r2, #0]
 8002f22:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f28:	1c5a      	adds	r2, r3, #1
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f3c:	e011      	b.n	8002f62 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f3e:	f7fe fb23 	bl	8001588 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d803      	bhi.n	8002f56 <HAL_SPI_Transmit+0x268>
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d102      	bne.n	8002f5c <HAL_SPI_Transmit+0x26e>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d102      	bne.n	8002f62 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f60:	e026      	b.n	8002fb0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1b5      	bne.n	8002ed8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	6839      	ldr	r1, [r7, #0]
 8002f70:	68f8      	ldr	r0, [r7, #12]
 8002f72:	f000 fce3 	bl	800393c <SPI_EndRxTxTransaction>
 8002f76:	4603      	mov	r3, r0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d002      	beq.n	8002f82 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2220      	movs	r2, #32
 8002f80:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	613b      	str	r3, [r7, #16]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	613b      	str	r3, [r7, #16]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	e000      	b.n	8002fb0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002fae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002fc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b088      	sub	sp, #32
 8002fce:	af02      	add	r7, sp, #8
 8002fd0:	60f8      	str	r0, [r7, #12]
 8002fd2:	60b9      	str	r1, [r7, #8]
 8002fd4:	603b      	str	r3, [r7, #0]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002fe6:	d112      	bne.n	800300e <HAL_SPI_Receive+0x44>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d10e      	bne.n	800300e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002ff8:	88fa      	ldrh	r2, [r7, #6]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	4613      	mov	r3, r2
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 f910 	bl	800322a <HAL_SPI_TransmitReceive>
 800300a:	4603      	mov	r3, r0
 800300c:	e109      	b.n	8003222 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003014:	2b01      	cmp	r3, #1
 8003016:	d101      	bne.n	800301c <HAL_SPI_Receive+0x52>
 8003018:	2302      	movs	r3, #2
 800301a:	e102      	b.n	8003222 <HAL_SPI_Receive+0x258>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003024:	f7fe fab0 	bl	8001588 <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b01      	cmp	r3, #1
 8003034:	d002      	beq.n	800303c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8003036:	2302      	movs	r3, #2
 8003038:	75fb      	strb	r3, [r7, #23]
    goto error;
 800303a:	e0e9      	b.n	8003210 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d002      	beq.n	8003048 <HAL_SPI_Receive+0x7e>
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d102      	bne.n	800304e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800304c:	e0e0      	b.n	8003210 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2204      	movs	r2, #4
 8003052:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	68ba      	ldr	r2, [r7, #8]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	88fa      	ldrh	r2, [r7, #6]
 8003066:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	88fa      	ldrh	r2, [r7, #6]
 800306e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2200      	movs	r2, #0
 8003082:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003098:	d908      	bls.n	80030ac <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	e007      	b.n	80030bc <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030ba:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c4:	d10f      	bne.n	80030e6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80030e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d007      	beq.n	8003104 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003102:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800310c:	d867      	bhi.n	80031de <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800310e:	e030      	b.n	8003172 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b01      	cmp	r3, #1
 800311c:	d117      	bne.n	800314e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f103 020c 	add.w	r2, r3, #12
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	7812      	ldrb	r2, [r2, #0]
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003134:	1c5a      	adds	r2, r3, #1
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003140:	b29b      	uxth	r3, r3
 8003142:	3b01      	subs	r3, #1
 8003144:	b29a      	uxth	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800314c:	e011      	b.n	8003172 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800314e:	f7fe fa1b 	bl	8001588 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	683a      	ldr	r2, [r7, #0]
 800315a:	429a      	cmp	r2, r3
 800315c:	d803      	bhi.n	8003166 <HAL_SPI_Receive+0x19c>
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003164:	d102      	bne.n	800316c <HAL_SPI_Receive+0x1a2>
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d102      	bne.n	8003172 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003170:	e04e      	b.n	8003210 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003178:	b29b      	uxth	r3, r3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1c8      	bne.n	8003110 <HAL_SPI_Receive+0x146>
 800317e:	e034      	b.n	80031ea <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	f003 0301 	and.w	r3, r3, #1
 800318a:	2b01      	cmp	r3, #1
 800318c:	d115      	bne.n	80031ba <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	b292      	uxth	r2, r2
 800319a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a0:	1c9a      	adds	r2, r3, #2
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80031b8:	e011      	b.n	80031de <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031ba:	f7fe f9e5 	bl	8001588 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d803      	bhi.n	80031d2 <HAL_SPI_Receive+0x208>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d0:	d102      	bne.n	80031d8 <HAL_SPI_Receive+0x20e>
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d102      	bne.n	80031de <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031dc:	e018      	b.n	8003210 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1ca      	bne.n	8003180 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	6839      	ldr	r1, [r7, #0]
 80031ee:	68f8      	ldr	r0, [r7, #12]
 80031f0:	f000 fb4c 	bl	800388c <SPI_EndRxTransaction>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2220      	movs	r2, #32
 80031fe:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003204:	2b00      	cmp	r3, #0
 8003206:	d002      	beq.n	800320e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
 800320c:	e000      	b.n	8003210 <HAL_SPI_Receive+0x246>
  }

error :
 800320e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003220:	7dfb      	ldrb	r3, [r7, #23]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3718      	adds	r7, #24
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b08a      	sub	sp, #40	; 0x28
 800322e:	af00      	add	r7, sp, #0
 8003230:	60f8      	str	r0, [r7, #12]
 8003232:	60b9      	str	r1, [r7, #8]
 8003234:	607a      	str	r2, [r7, #4]
 8003236:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003238:	2301      	movs	r3, #1
 800323a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_SPI_TransmitReceive+0x26>
 800324c:	2302      	movs	r3, #2
 800324e:	e1fb      	b.n	8003648 <HAL_SPI_TransmitReceive+0x41e>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003258:	f7fe f996 	bl	8001588 <HAL_GetTick>
 800325c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003264:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800326c:	887b      	ldrh	r3, [r7, #2]
 800326e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003270:	887b      	ldrh	r3, [r7, #2]
 8003272:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003274:	7efb      	ldrb	r3, [r7, #27]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d00e      	beq.n	8003298 <HAL_SPI_TransmitReceive+0x6e>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003280:	d106      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d102      	bne.n	8003290 <HAL_SPI_TransmitReceive+0x66>
 800328a:	7efb      	ldrb	r3, [r7, #27]
 800328c:	2b04      	cmp	r3, #4
 800328e:	d003      	beq.n	8003298 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003290:	2302      	movs	r3, #2
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003296:	e1cd      	b.n	8003634 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d005      	beq.n	80032aa <HAL_SPI_TransmitReceive+0x80>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d002      	beq.n	80032aa <HAL_SPI_TransmitReceive+0x80>
 80032a4:	887b      	ldrh	r3, [r7, #2]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80032b0:	e1c0      	b.n	8003634 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d003      	beq.n	80032c6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2205      	movs	r2, #5
 80032c2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2200      	movs	r2, #0
 80032ca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	887a      	ldrh	r2, [r7, #2]
 80032d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	887a      	ldrh	r2, [r7, #2]
 80032de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	887a      	ldrh	r2, [r7, #2]
 80032ec:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	887a      	ldrh	r2, [r7, #2]
 80032f2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003308:	d802      	bhi.n	8003310 <HAL_SPI_TransmitReceive+0xe6>
 800330a:	8a3b      	ldrh	r3, [r7, #16]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d908      	bls.n	8003322 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685a      	ldr	r2, [r3, #4]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	e007      	b.n	8003332 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003330:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333c:	2b40      	cmp	r3, #64	; 0x40
 800333e:	d007      	beq.n	8003350 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800334e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003358:	d97c      	bls.n	8003454 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_SPI_TransmitReceive+0x13e>
 8003362:	8a7b      	ldrh	r3, [r7, #18]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d169      	bne.n	800343c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	881a      	ldrh	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	1c9a      	adds	r2, r3, #2
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800338c:	e056      	b.n	800343c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b02      	cmp	r3, #2
 800339a:	d11b      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x1aa>
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_SPI_TransmitReceive+0x1aa>
 80033a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d113      	bne.n	80033d4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b0:	881a      	ldrh	r2, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033bc:	1c9a      	adds	r2, r3, #2
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d11c      	bne.n	800341c <HAL_SPI_TransmitReceive+0x1f2>
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d016      	beq.n	800341c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f8:	b292      	uxth	r2, r2
 80033fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003400:	1c9a      	adds	r2, r3, #2
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003418:	2301      	movs	r3, #1
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800341c:	f7fe f8b4 	bl	8001588 <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003428:	429a      	cmp	r2, r3
 800342a:	d807      	bhi.n	800343c <HAL_SPI_TransmitReceive+0x212>
 800342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003432:	d003      	beq.n	800343c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800343a:	e0fb      	b.n	8003634 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1a3      	bne.n	800338e <HAL_SPI_TransmitReceive+0x164>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	d19d      	bne.n	800338e <HAL_SPI_TransmitReceive+0x164>
 8003452:	e0df      	b.n	8003614 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_SPI_TransmitReceive+0x23a>
 800345c:	8a7b      	ldrh	r3, [r7, #18]
 800345e:	2b01      	cmp	r3, #1
 8003460:	f040 80cb 	bne.w	80035fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003468:	b29b      	uxth	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d912      	bls.n	8003494 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003472:	881a      	ldrh	r2, [r3, #0]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800347e:	1c9a      	adds	r2, r3, #2
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003488:	b29b      	uxth	r3, r3
 800348a:	3b02      	subs	r3, #2
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003492:	e0b2      	b.n	80035fa <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	7812      	ldrb	r2, [r2, #0]
 80034a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	3b01      	subs	r3, #1
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034ba:	e09e      	b.n	80035fa <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d134      	bne.n	8003534 <HAL_SPI_TransmitReceive+0x30a>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02f      	beq.n	8003534 <HAL_SPI_TransmitReceive+0x30a>
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d12c      	bne.n	8003534 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034de:	b29b      	uxth	r3, r3
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d912      	bls.n	800350a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e8:	881a      	ldrh	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	1c9a      	adds	r2, r3, #2
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b02      	subs	r3, #2
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003508:	e012      	b.n	8003530 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	330c      	adds	r3, #12
 8003514:	7812      	ldrb	r2, [r2, #0]
 8003516:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351c:	1c5a      	adds	r2, r3, #1
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003526:	b29b      	uxth	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	b29a      	uxth	r2, r3
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003530:	2300      	movs	r3, #0
 8003532:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0301 	and.w	r3, r3, #1
 800353e:	2b01      	cmp	r3, #1
 8003540:	d148      	bne.n	80035d4 <HAL_SPI_TransmitReceive+0x3aa>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003548:	b29b      	uxth	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d042      	beq.n	80035d4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b01      	cmp	r3, #1
 8003558:	d923      	bls.n	80035a2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	b292      	uxth	r2, r2
 8003566:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356c:	1c9a      	adds	r2, r3, #2
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003578:	b29b      	uxth	r3, r3
 800357a:	3b02      	subs	r3, #2
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b01      	cmp	r3, #1
 800358e:	d81f      	bhi.n	80035d0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800359e:	605a      	str	r2, [r3, #4]
 80035a0:	e016      	b.n	80035d0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f103 020c 	add.w	r2, r3, #12
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	7812      	ldrb	r2, [r2, #0]
 80035b0:	b2d2      	uxtb	r2, r2
 80035b2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80035d0:	2301      	movs	r3, #1
 80035d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80035d4:	f7fd ffd8 	bl	8001588 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d803      	bhi.n	80035ec <HAL_SPI_TransmitReceive+0x3c2>
 80035e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	d102      	bne.n	80035f2 <HAL_SPI_TransmitReceive+0x3c8>
 80035ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d103      	bne.n	80035fa <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80035f8:	e01c      	b.n	8003634 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80035fe:	b29b      	uxth	r3, r3
 8003600:	2b00      	cmp	r3, #0
 8003602:	f47f af5b 	bne.w	80034bc <HAL_SPI_TransmitReceive+0x292>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	f47f af54 	bne.w	80034bc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f000 f98f 	bl	800393c <SPI_EndRxTxTransaction>
 800361e:	4603      	mov	r3, r0
 8003620:	2b00      	cmp	r3, #0
 8003622:	d006      	beq.n	8003632 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2220      	movs	r2, #32
 800362e:	661a      	str	r2, [r3, #96]	; 0x60
 8003630:	e000      	b.n	8003634 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003632:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003644:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003648:	4618      	mov	r0, r3
 800364a:	3728      	adds	r7, #40	; 0x28
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	603b      	str	r3, [r7, #0]
 800365c:	4613      	mov	r3, r2
 800365e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003660:	f7fd ff92 	bl	8001588 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	683a      	ldr	r2, [r7, #0]
 800366c:	4413      	add	r3, r2
 800366e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003670:	f7fd ff8a 	bl	8001588 <HAL_GetTick>
 8003674:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003676:	4b39      	ldr	r3, [pc, #228]	; (800375c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	015b      	lsls	r3, r3, #5
 800367c:	0d1b      	lsrs	r3, r3, #20
 800367e:	69fa      	ldr	r2, [r7, #28]
 8003680:	fb02 f303 	mul.w	r3, r2, r3
 8003684:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003686:	e054      	b.n	8003732 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800368e:	d050      	beq.n	8003732 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003690:	f7fd ff7a 	bl	8001588 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	429a      	cmp	r2, r3
 800369e:	d902      	bls.n	80036a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d13d      	bne.n	8003722 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036be:	d111      	bne.n	80036e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036c8:	d004      	beq.n	80036d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036d2:	d107      	bne.n	80036e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ec:	d10f      	bne.n	800370e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800370c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2201      	movs	r2, #1
 8003712:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800371e:	2303      	movs	r3, #3
 8003720:	e017      	b.n	8003752 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d101      	bne.n	800372c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	3b01      	subs	r3, #1
 8003730:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689a      	ldr	r2, [r3, #8]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4013      	ands	r3, r2
 800373c:	68ba      	ldr	r2, [r7, #8]
 800373e:	429a      	cmp	r2, r3
 8003740:	bf0c      	ite	eq
 8003742:	2301      	moveq	r3, #1
 8003744:	2300      	movne	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	461a      	mov	r2, r3
 800374a:	79fb      	ldrb	r3, [r7, #7]
 800374c:	429a      	cmp	r2, r3
 800374e:	d19b      	bne.n	8003688 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3720      	adds	r7, #32
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000000 	.word	0x20000000

08003760 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b08a      	sub	sp, #40	; 0x28
 8003764:	af00      	add	r7, sp, #0
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003772:	f7fd ff09 	bl	8001588 <HAL_GetTick>
 8003776:	4602      	mov	r2, r0
 8003778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	683a      	ldr	r2, [r7, #0]
 800377e:	4413      	add	r3, r2
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003782:	f7fd ff01 	bl	8001588 <HAL_GetTick>
 8003786:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	330c      	adds	r3, #12
 800378e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003790:	4b3d      	ldr	r3, [pc, #244]	; (8003888 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	4413      	add	r3, r2
 800379a:	00da      	lsls	r2, r3, #3
 800379c:	1ad3      	subs	r3, r2, r3
 800379e:	0d1b      	lsrs	r3, r3, #20
 80037a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037a2:	fb02 f303 	mul.w	r3, r2, r3
 80037a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80037a8:	e060      	b.n	800386c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80037b0:	d107      	bne.n	80037c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d104      	bne.n	80037c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80037c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c8:	d050      	beq.n	800386c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80037ca:	f7fd fedd 	bl	8001588 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	6a3b      	ldr	r3, [r7, #32]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d902      	bls.n	80037e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80037da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d13d      	bne.n	800385c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80037ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037f8:	d111      	bne.n	800381e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003802:	d004      	beq.n	800380e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800380c:	d107      	bne.n	800381e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800381c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003826:	d10f      	bne.n	8003848 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003836:	601a      	str	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003846:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003858:	2303      	movs	r3, #3
 800385a:	e010      	b.n	800387e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800385c:	69bb      	ldr	r3, [r7, #24]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003862:	2300      	movs	r3, #0
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	3b01      	subs	r3, #1
 800386a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689a      	ldr	r2, [r3, #8]
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4013      	ands	r3, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	429a      	cmp	r2, r3
 800387a:	d196      	bne.n	80037aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3728      	adds	r7, #40	; 0x28
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	20000000 	.word	0x20000000

0800388c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af02      	add	r7, sp, #8
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038a0:	d111      	bne.n	80038c6 <SPI_EndRxTransaction+0x3a>
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038aa:	d004      	beq.n	80038b6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038b4:	d107      	bne.n	80038c6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038c4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	9300      	str	r3, [sp, #0]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2180      	movs	r1, #128	; 0x80
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f7ff febd 	bl	8003650 <SPI_WaitFlagStateUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d007      	beq.n	80038ec <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e023      	b.n	8003934 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038f4:	d11d      	bne.n	8003932 <SPI_EndRxTransaction+0xa6>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038fe:	d004      	beq.n	800390a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003908:	d113      	bne.n	8003932 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	2200      	movs	r2, #0
 8003912:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f7ff ff22 	bl	8003760 <SPI_WaitFifoStateUntilTimeout>
 800391c:	4603      	mov	r3, r0
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003926:	f043 0220 	orr.w	r2, r3, #32
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e000      	b.n	8003934 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003932:	2300      	movs	r3, #0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3710      	adds	r7, #16
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	9300      	str	r3, [sp, #0]
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	2200      	movs	r2, #0
 8003950:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f7ff ff03 	bl	8003760 <SPI_WaitFifoStateUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d007      	beq.n	8003970 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e027      	b.n	80039c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	9300      	str	r3, [sp, #0]
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2200      	movs	r2, #0
 8003978:	2180      	movs	r1, #128	; 0x80
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f7ff fe68 	bl	8003650 <SPI_WaitFlagStateUntilTimeout>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d007      	beq.n	8003996 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398a:	f043 0220 	orr.w	r2, r3, #32
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e014      	b.n	80039c0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2200      	movs	r2, #0
 800399e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff fedc 	bl	8003760 <SPI_WaitFifoStateUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039b2:	f043 0220 	orr.w	r2, r3, #32
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e000      	b.n	80039c0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80039be:	2300      	movs	r3, #0
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3710      	adds	r7, #16
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e040      	b.n	8003a5c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7fd f806 	bl	80009fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2224      	movs	r2, #36	; 0x24
 80039f4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 f8c0 	bl	8003b8c <UART_SetConfig>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d101      	bne.n	8003a16 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e022      	b.n	8003a5c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fb0e 	bl	8004040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f042 0201 	orr.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 fb95 	bl	8004184 <UART_CheckIdleState>
 8003a5a:	4603      	mov	r3, r0
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3708      	adds	r7, #8
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af02      	add	r7, sp, #8
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	603b      	str	r3, [r7, #0]
 8003a70:	4613      	mov	r3, r2
 8003a72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a78:	2b20      	cmp	r3, #32
 8003a7a:	f040 8082 	bne.w	8003b82 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d002      	beq.n	8003a8a <HAL_UART_Transmit+0x26>
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07a      	b.n	8003b84 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d101      	bne.n	8003a9c <HAL_UART_Transmit+0x38>
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e073      	b.n	8003b84 <HAL_UART_Transmit+0x120>
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	2221      	movs	r2, #33	; 0x21
 8003ab0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ab2:	f7fd fd69 	bl	8001588 <HAL_GetTick>
 8003ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	88fa      	ldrh	r2, [r7, #6]
 8003abc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	88fa      	ldrh	r2, [r7, #6]
 8003ac4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad0:	d108      	bne.n	8003ae4 <HAL_UART_Transmit+0x80>
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d104      	bne.n	8003ae4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	61bb      	str	r3, [r7, #24]
 8003ae2:	e003      	b.n	8003aec <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2200      	movs	r2, #0
 8003af0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003af4:	e02d      	b.n	8003b52 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2200      	movs	r2, #0
 8003afe:	2180      	movs	r1, #128	; 0x80
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 fb88 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e039      	b.n	8003b84 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	881a      	ldrh	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b22:	b292      	uxth	r2, r2
 8003b24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b26:	69bb      	ldr	r3, [r7, #24]
 8003b28:	3302      	adds	r3, #2
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	e008      	b.n	8003b40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	781a      	ldrb	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	b292      	uxth	r2, r2
 8003b38:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	3301      	adds	r3, #1
 8003b3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	b29a      	uxth	r2, r3
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1cb      	bne.n	8003af6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	9300      	str	r3, [sp, #0]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2200      	movs	r2, #0
 8003b66:	2140      	movs	r1, #64	; 0x40
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 fb54 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e005      	b.n	8003b84 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e000      	b.n	8003b84 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003b82:	2302      	movs	r3, #2
  }
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b90:	b08a      	sub	sp, #40	; 0x28
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	69db      	ldr	r3, [r3, #28]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b9e      	ldr	r3, [pc, #632]	; (8003e34 <UART_SetConfig+0x2a8>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	6812      	ldr	r2, [r2, #0]
 8003bc2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a93      	ldr	r2, [pc, #588]	; (8003e38 <UART_SetConfig+0x2ac>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d004      	beq.n	8003bf8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a8a      	ldr	r2, [pc, #552]	; (8003e3c <UART_SetConfig+0x2b0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d126      	bne.n	8003c64 <UART_SetConfig+0xd8>
 8003c16:	4b8a      	ldr	r3, [pc, #552]	; (8003e40 <UART_SetConfig+0x2b4>)
 8003c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1c:	f003 0303 	and.w	r3, r3, #3
 8003c20:	2b03      	cmp	r3, #3
 8003c22:	d81b      	bhi.n	8003c5c <UART_SetConfig+0xd0>
 8003c24:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <UART_SetConfig+0xa0>)
 8003c26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2a:	bf00      	nop
 8003c2c:	08003c3d 	.word	0x08003c3d
 8003c30:	08003c4d 	.word	0x08003c4d
 8003c34:	08003c45 	.word	0x08003c45
 8003c38:	08003c55 	.word	0x08003c55
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e0ab      	b.n	8003d9c <UART_SetConfig+0x210>
 8003c44:	2302      	movs	r3, #2
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4a:	e0a7      	b.n	8003d9c <UART_SetConfig+0x210>
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c52:	e0a3      	b.n	8003d9c <UART_SetConfig+0x210>
 8003c54:	2308      	movs	r3, #8
 8003c56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c5a:	e09f      	b.n	8003d9c <UART_SetConfig+0x210>
 8003c5c:	2310      	movs	r3, #16
 8003c5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c62:	e09b      	b.n	8003d9c <UART_SetConfig+0x210>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a76      	ldr	r2, [pc, #472]	; (8003e44 <UART_SetConfig+0x2b8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d138      	bne.n	8003ce0 <UART_SetConfig+0x154>
 8003c6e:	4b74      	ldr	r3, [pc, #464]	; (8003e40 <UART_SetConfig+0x2b4>)
 8003c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c74:	f003 030c 	and.w	r3, r3, #12
 8003c78:	2b0c      	cmp	r3, #12
 8003c7a:	d82d      	bhi.n	8003cd8 <UART_SetConfig+0x14c>
 8003c7c:	a201      	add	r2, pc, #4	; (adr r2, 8003c84 <UART_SetConfig+0xf8>)
 8003c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c82:	bf00      	nop
 8003c84:	08003cb9 	.word	0x08003cb9
 8003c88:	08003cd9 	.word	0x08003cd9
 8003c8c:	08003cd9 	.word	0x08003cd9
 8003c90:	08003cd9 	.word	0x08003cd9
 8003c94:	08003cc9 	.word	0x08003cc9
 8003c98:	08003cd9 	.word	0x08003cd9
 8003c9c:	08003cd9 	.word	0x08003cd9
 8003ca0:	08003cd9 	.word	0x08003cd9
 8003ca4:	08003cc1 	.word	0x08003cc1
 8003ca8:	08003cd9 	.word	0x08003cd9
 8003cac:	08003cd9 	.word	0x08003cd9
 8003cb0:	08003cd9 	.word	0x08003cd9
 8003cb4:	08003cd1 	.word	0x08003cd1
 8003cb8:	2300      	movs	r3, #0
 8003cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cbe:	e06d      	b.n	8003d9c <UART_SetConfig+0x210>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc6:	e069      	b.n	8003d9c <UART_SetConfig+0x210>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cce:	e065      	b.n	8003d9c <UART_SetConfig+0x210>
 8003cd0:	2308      	movs	r3, #8
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd6:	e061      	b.n	8003d9c <UART_SetConfig+0x210>
 8003cd8:	2310      	movs	r3, #16
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cde:	e05d      	b.n	8003d9c <UART_SetConfig+0x210>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a58      	ldr	r2, [pc, #352]	; (8003e48 <UART_SetConfig+0x2bc>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d125      	bne.n	8003d36 <UART_SetConfig+0x1aa>
 8003cea:	4b55      	ldr	r3, [pc, #340]	; (8003e40 <UART_SetConfig+0x2b4>)
 8003cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cf0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cf4:	2b30      	cmp	r3, #48	; 0x30
 8003cf6:	d016      	beq.n	8003d26 <UART_SetConfig+0x19a>
 8003cf8:	2b30      	cmp	r3, #48	; 0x30
 8003cfa:	d818      	bhi.n	8003d2e <UART_SetConfig+0x1a2>
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d00a      	beq.n	8003d16 <UART_SetConfig+0x18a>
 8003d00:	2b20      	cmp	r3, #32
 8003d02:	d814      	bhi.n	8003d2e <UART_SetConfig+0x1a2>
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <UART_SetConfig+0x182>
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d008      	beq.n	8003d1e <UART_SetConfig+0x192>
 8003d0c:	e00f      	b.n	8003d2e <UART_SetConfig+0x1a2>
 8003d0e:	2300      	movs	r3, #0
 8003d10:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d14:	e042      	b.n	8003d9c <UART_SetConfig+0x210>
 8003d16:	2302      	movs	r3, #2
 8003d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d1c:	e03e      	b.n	8003d9c <UART_SetConfig+0x210>
 8003d1e:	2304      	movs	r3, #4
 8003d20:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d24:	e03a      	b.n	8003d9c <UART_SetConfig+0x210>
 8003d26:	2308      	movs	r3, #8
 8003d28:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d2c:	e036      	b.n	8003d9c <UART_SetConfig+0x210>
 8003d2e:	2310      	movs	r3, #16
 8003d30:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d34:	e032      	b.n	8003d9c <UART_SetConfig+0x210>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a3f      	ldr	r2, [pc, #252]	; (8003e38 <UART_SetConfig+0x2ac>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d12a      	bne.n	8003d96 <UART_SetConfig+0x20a>
 8003d40:	4b3f      	ldr	r3, [pc, #252]	; (8003e40 <UART_SetConfig+0x2b4>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d4e:	d01a      	beq.n	8003d86 <UART_SetConfig+0x1fa>
 8003d50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d54:	d81b      	bhi.n	8003d8e <UART_SetConfig+0x202>
 8003d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5a:	d00c      	beq.n	8003d76 <UART_SetConfig+0x1ea>
 8003d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d60:	d815      	bhi.n	8003d8e <UART_SetConfig+0x202>
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <UART_SetConfig+0x1e2>
 8003d66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d6a:	d008      	beq.n	8003d7e <UART_SetConfig+0x1f2>
 8003d6c:	e00f      	b.n	8003d8e <UART_SetConfig+0x202>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d74:	e012      	b.n	8003d9c <UART_SetConfig+0x210>
 8003d76:	2302      	movs	r3, #2
 8003d78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d7c:	e00e      	b.n	8003d9c <UART_SetConfig+0x210>
 8003d7e:	2304      	movs	r3, #4
 8003d80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d84:	e00a      	b.n	8003d9c <UART_SetConfig+0x210>
 8003d86:	2308      	movs	r3, #8
 8003d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8c:	e006      	b.n	8003d9c <UART_SetConfig+0x210>
 8003d8e:	2310      	movs	r3, #16
 8003d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d94:	e002      	b.n	8003d9c <UART_SetConfig+0x210>
 8003d96:	2310      	movs	r3, #16
 8003d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a25      	ldr	r2, [pc, #148]	; (8003e38 <UART_SetConfig+0x2ac>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	f040 808a 	bne.w	8003ebc <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003da8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dac:	2b08      	cmp	r3, #8
 8003dae:	d824      	bhi.n	8003dfa <UART_SetConfig+0x26e>
 8003db0:	a201      	add	r2, pc, #4	; (adr r2, 8003db8 <UART_SetConfig+0x22c>)
 8003db2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db6:	bf00      	nop
 8003db8:	08003ddd 	.word	0x08003ddd
 8003dbc:	08003dfb 	.word	0x08003dfb
 8003dc0:	08003de5 	.word	0x08003de5
 8003dc4:	08003dfb 	.word	0x08003dfb
 8003dc8:	08003deb 	.word	0x08003deb
 8003dcc:	08003dfb 	.word	0x08003dfb
 8003dd0:	08003dfb 	.word	0x08003dfb
 8003dd4:	08003dfb 	.word	0x08003dfb
 8003dd8:	08003df3 	.word	0x08003df3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ddc:	f7fe fcd2 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8003de0:	61f8      	str	r0, [r7, #28]
        break;
 8003de2:	e010      	b.n	8003e06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003de4:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <UART_SetConfig+0x2c0>)
 8003de6:	61fb      	str	r3, [r7, #28]
        break;
 8003de8:	e00d      	b.n	8003e06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dea:	f7fe fc33 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 8003dee:	61f8      	str	r0, [r7, #28]
        break;
 8003df0:	e009      	b.n	8003e06 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003df2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003df6:	61fb      	str	r3, [r7, #28]
        break;
 8003df8:	e005      	b.n	8003e06 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e04:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 8109 	beq.w	8004020 <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	685a      	ldr	r2, [r3, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	4413      	add	r3, r2
 8003e18:	69fa      	ldr	r2, [r7, #28]
 8003e1a:	429a      	cmp	r2, r3
 8003e1c:	d305      	bcc.n	8003e2a <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e24:	69fa      	ldr	r2, [r7, #28]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	d912      	bls.n	8003e50 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e30:	e0f6      	b.n	8004020 <UART_SetConfig+0x494>
 8003e32:	bf00      	nop
 8003e34:	efff69f3 	.word	0xefff69f3
 8003e38:	40008000 	.word	0x40008000
 8003e3c:	40013800 	.word	0x40013800
 8003e40:	40021000 	.word	0x40021000
 8003e44:	40004400 	.word	0x40004400
 8003e48:	40004800 	.word	0x40004800
 8003e4c:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	2200      	movs	r2, #0
 8003e54:	461c      	mov	r4, r3
 8003e56:	4615      	mov	r5, r2
 8003e58:	f04f 0200 	mov.w	r2, #0
 8003e5c:	f04f 0300 	mov.w	r3, #0
 8003e60:	022b      	lsls	r3, r5, #8
 8003e62:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e66:	0222      	lsls	r2, r4, #8
 8003e68:	68f9      	ldr	r1, [r7, #12]
 8003e6a:	6849      	ldr	r1, [r1, #4]
 8003e6c:	0849      	lsrs	r1, r1, #1
 8003e6e:	2000      	movs	r0, #0
 8003e70:	4688      	mov	r8, r1
 8003e72:	4681      	mov	r9, r0
 8003e74:	eb12 0a08 	adds.w	sl, r2, r8
 8003e78:	eb43 0b09 	adc.w	fp, r3, r9
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	603b      	str	r3, [r7, #0]
 8003e84:	607a      	str	r2, [r7, #4]
 8003e86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e8a:	4650      	mov	r0, sl
 8003e8c:	4659      	mov	r1, fp
 8003e8e:	f7fc f9ef 	bl	8000270 <__aeabi_uldivmod>
 8003e92:	4602      	mov	r2, r0
 8003e94:	460b      	mov	r3, r1
 8003e96:	4613      	mov	r3, r2
 8003e98:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ea0:	d308      	bcc.n	8003eb4 <UART_SetConfig+0x328>
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ea8:	d204      	bcs.n	8003eb4 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	60da      	str	r2, [r3, #12]
 8003eb2:	e0b5      	b.n	8004020 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003eba:	e0b1      	b.n	8004020 <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ec4:	d15d      	bne.n	8003f82 <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8003ec6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eca:	2b08      	cmp	r3, #8
 8003ecc:	d827      	bhi.n	8003f1e <UART_SetConfig+0x392>
 8003ece:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <UART_SetConfig+0x348>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003ef9 	.word	0x08003ef9
 8003ed8:	08003f01 	.word	0x08003f01
 8003edc:	08003f09 	.word	0x08003f09
 8003ee0:	08003f1f 	.word	0x08003f1f
 8003ee4:	08003f0f 	.word	0x08003f0f
 8003ee8:	08003f1f 	.word	0x08003f1f
 8003eec:	08003f1f 	.word	0x08003f1f
 8003ef0:	08003f1f 	.word	0x08003f1f
 8003ef4:	08003f17 	.word	0x08003f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ef8:	f7fe fc44 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8003efc:	61f8      	str	r0, [r7, #28]
        break;
 8003efe:	e014      	b.n	8003f2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f00:	f7fe fc56 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8003f04:	61f8      	str	r0, [r7, #28]
        break;
 8003f06:	e010      	b.n	8003f2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f08:	4b4c      	ldr	r3, [pc, #304]	; (800403c <UART_SetConfig+0x4b0>)
 8003f0a:	61fb      	str	r3, [r7, #28]
        break;
 8003f0c:	e00d      	b.n	8003f2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f0e:	f7fe fba1 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 8003f12:	61f8      	str	r0, [r7, #28]
        break;
 8003f14:	e009      	b.n	8003f2a <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1a:	61fb      	str	r3, [r7, #28]
        break;
 8003f1c:	e005      	b.n	8003f2a <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d077      	beq.n	8004020 <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	005a      	lsls	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	085b      	lsrs	r3, r3, #1
 8003f3a:	441a      	add	r2, r3
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b0f      	cmp	r3, #15
 8003f4a:	d916      	bls.n	8003f7a <UART_SetConfig+0x3ee>
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f52:	d212      	bcs.n	8003f7a <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	f023 030f 	bic.w	r3, r3, #15
 8003f5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	085b      	lsrs	r3, r3, #1
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	b29a      	uxth	r2, r3
 8003f6a:	8afb      	ldrh	r3, [r7, #22]
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	8afa      	ldrh	r2, [r7, #22]
 8003f76:	60da      	str	r2, [r3, #12]
 8003f78:	e052      	b.n	8004020 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f80:	e04e      	b.n	8004020 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d827      	bhi.n	8003fda <UART_SetConfig+0x44e>
 8003f8a:	a201      	add	r2, pc, #4	; (adr r2, 8003f90 <UART_SetConfig+0x404>)
 8003f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f90:	08003fb5 	.word	0x08003fb5
 8003f94:	08003fbd 	.word	0x08003fbd
 8003f98:	08003fc5 	.word	0x08003fc5
 8003f9c:	08003fdb 	.word	0x08003fdb
 8003fa0:	08003fcb 	.word	0x08003fcb
 8003fa4:	08003fdb 	.word	0x08003fdb
 8003fa8:	08003fdb 	.word	0x08003fdb
 8003fac:	08003fdb 	.word	0x08003fdb
 8003fb0:	08003fd3 	.word	0x08003fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fb4:	f7fe fbe6 	bl	8002784 <HAL_RCC_GetPCLK1Freq>
 8003fb8:	61f8      	str	r0, [r7, #28]
        break;
 8003fba:	e014      	b.n	8003fe6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fbc:	f7fe fbf8 	bl	80027b0 <HAL_RCC_GetPCLK2Freq>
 8003fc0:	61f8      	str	r0, [r7, #28]
        break;
 8003fc2:	e010      	b.n	8003fe6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fc4:	4b1d      	ldr	r3, [pc, #116]	; (800403c <UART_SetConfig+0x4b0>)
 8003fc6:	61fb      	str	r3, [r7, #28]
        break;
 8003fc8:	e00d      	b.n	8003fe6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fca:	f7fe fb43 	bl	8002654 <HAL_RCC_GetSysClockFreq>
 8003fce:	61f8      	str	r0, [r7, #28]
        break;
 8003fd0:	e009      	b.n	8003fe6 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fd6:	61fb      	str	r3, [r7, #28]
        break;
 8003fd8:	e005      	b.n	8003fe6 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003fe4:	bf00      	nop
    }

    if (pclk != 0U)
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d019      	beq.n	8004020 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	085a      	lsrs	r2, r3, #1
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	441a      	add	r2, r3
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	2b0f      	cmp	r3, #15
 8004004:	d909      	bls.n	800401a <UART_SetConfig+0x48e>
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400c:	d205      	bcs.n	800401a <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	b29a      	uxth	r2, r3
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	60da      	str	r2, [r3, #12]
 8004018:	e002      	b.n	8004020 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800402c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004030:	4618      	mov	r0, r3
 8004032:	3728      	adds	r7, #40	; 0x28
 8004034:	46bd      	mov	sp, r7
 8004036:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800403a:	bf00      	nop
 800403c:	00f42400 	.word	0x00f42400

08004040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01a      	beq.n	8004156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413e:	d10a      	bne.n	8004156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af02      	add	r7, sp, #8
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004194:	f7fd f9f8 	bl	8001588 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d10e      	bne.n	80041c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f82d 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e023      	b.n	800420e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d10e      	bne.n	80041f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f817 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e00d      	b.n	800420e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b09c      	sub	sp, #112	; 0x70
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004226:	e0a5      	b.n	8004374 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	f000 80a1 	beq.w	8004374 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7fd f9a9 	bl	8001588 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <UART_WaitOnFlagUntilTimeout+0x32>
 8004242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004244:	2b00      	cmp	r3, #0
 8004246:	d13e      	bne.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004258:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800425c:	667b      	str	r3, [r7, #100]	; 0x64
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004266:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004268:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800426c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e6      	bne.n	8004248 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3308      	adds	r3, #8
 8004280:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800428a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	663b      	str	r3, [r7, #96]	; 0x60
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3308      	adds	r3, #8
 8004298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800429a:	64ba      	str	r2, [r7, #72]	; 0x48
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e5      	bne.n	800427a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e067      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d04f      	beq.n	8004374 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e2:	d147      	bne.n	8004374 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004302:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430c:	637b      	str	r3, [r7, #52]	; 0x34
 800430e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e6      	bne.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3308      	adds	r3, #8
 8004326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	613b      	str	r3, [r7, #16]
   return(result);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	66bb      	str	r3, [r7, #104]	; 0x68
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3308      	adds	r3, #8
 800433e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004340:	623a      	str	r2, [r7, #32]
 8004342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	69f9      	ldr	r1, [r7, #28]
 8004346:	6a3a      	ldr	r2, [r7, #32]
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	61bb      	str	r3, [r7, #24]
   return(result);
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e5      	bne.n	8004320 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e010      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4013      	ands	r3, r2
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	429a      	cmp	r2, r3
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	429a      	cmp	r2, r3
 8004390:	f43f af4a 	beq.w	8004228 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3770      	adds	r7, #112	; 0x70
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <__errno>:
 80043a0:	4b01      	ldr	r3, [pc, #4]	; (80043a8 <__errno+0x8>)
 80043a2:	6818      	ldr	r0, [r3, #0]
 80043a4:	4770      	bx	lr
 80043a6:	bf00      	nop
 80043a8:	2000000c 	.word	0x2000000c

080043ac <__libc_init_array>:
 80043ac:	b570      	push	{r4, r5, r6, lr}
 80043ae:	4d0d      	ldr	r5, [pc, #52]	; (80043e4 <__libc_init_array+0x38>)
 80043b0:	4c0d      	ldr	r4, [pc, #52]	; (80043e8 <__libc_init_array+0x3c>)
 80043b2:	1b64      	subs	r4, r4, r5
 80043b4:	10a4      	asrs	r4, r4, #2
 80043b6:	2600      	movs	r6, #0
 80043b8:	42a6      	cmp	r6, r4
 80043ba:	d109      	bne.n	80043d0 <__libc_init_array+0x24>
 80043bc:	4d0b      	ldr	r5, [pc, #44]	; (80043ec <__libc_init_array+0x40>)
 80043be:	4c0c      	ldr	r4, [pc, #48]	; (80043f0 <__libc_init_array+0x44>)
 80043c0:	f000 ffbc 	bl	800533c <_init>
 80043c4:	1b64      	subs	r4, r4, r5
 80043c6:	10a4      	asrs	r4, r4, #2
 80043c8:	2600      	movs	r6, #0
 80043ca:	42a6      	cmp	r6, r4
 80043cc:	d105      	bne.n	80043da <__libc_init_array+0x2e>
 80043ce:	bd70      	pop	{r4, r5, r6, pc}
 80043d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80043d4:	4798      	blx	r3
 80043d6:	3601      	adds	r6, #1
 80043d8:	e7ee      	b.n	80043b8 <__libc_init_array+0xc>
 80043da:	f855 3b04 	ldr.w	r3, [r5], #4
 80043de:	4798      	blx	r3
 80043e0:	3601      	adds	r6, #1
 80043e2:	e7f2      	b.n	80043ca <__libc_init_array+0x1e>
 80043e4:	08005b5c 	.word	0x08005b5c
 80043e8:	08005b5c 	.word	0x08005b5c
 80043ec:	08005b5c 	.word	0x08005b5c
 80043f0:	08005b60 	.word	0x08005b60

080043f4 <memcpy>:
 80043f4:	440a      	add	r2, r1
 80043f6:	4291      	cmp	r1, r2
 80043f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80043fc:	d100      	bne.n	8004400 <memcpy+0xc>
 80043fe:	4770      	bx	lr
 8004400:	b510      	push	{r4, lr}
 8004402:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004406:	f803 4f01 	strb.w	r4, [r3, #1]!
 800440a:	4291      	cmp	r1, r2
 800440c:	d1f9      	bne.n	8004402 <memcpy+0xe>
 800440e:	bd10      	pop	{r4, pc}

08004410 <memset>:
 8004410:	4402      	add	r2, r0
 8004412:	4603      	mov	r3, r0
 8004414:	4293      	cmp	r3, r2
 8004416:	d100      	bne.n	800441a <memset+0xa>
 8004418:	4770      	bx	lr
 800441a:	f803 1b01 	strb.w	r1, [r3], #1
 800441e:	e7f9      	b.n	8004414 <memset+0x4>

08004420 <iprintf>:
 8004420:	b40f      	push	{r0, r1, r2, r3}
 8004422:	4b0a      	ldr	r3, [pc, #40]	; (800444c <iprintf+0x2c>)
 8004424:	b513      	push	{r0, r1, r4, lr}
 8004426:	681c      	ldr	r4, [r3, #0]
 8004428:	b124      	cbz	r4, 8004434 <iprintf+0x14>
 800442a:	69a3      	ldr	r3, [r4, #24]
 800442c:	b913      	cbnz	r3, 8004434 <iprintf+0x14>
 800442e:	4620      	mov	r0, r4
 8004430:	f000 f866 	bl	8004500 <__sinit>
 8004434:	ab05      	add	r3, sp, #20
 8004436:	9a04      	ldr	r2, [sp, #16]
 8004438:	68a1      	ldr	r1, [r4, #8]
 800443a:	9301      	str	r3, [sp, #4]
 800443c:	4620      	mov	r0, r4
 800443e:	f000 f9bd 	bl	80047bc <_vfiprintf_r>
 8004442:	b002      	add	sp, #8
 8004444:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004448:	b004      	add	sp, #16
 800444a:	4770      	bx	lr
 800444c:	2000000c 	.word	0x2000000c

08004450 <std>:
 8004450:	2300      	movs	r3, #0
 8004452:	b510      	push	{r4, lr}
 8004454:	4604      	mov	r4, r0
 8004456:	e9c0 3300 	strd	r3, r3, [r0]
 800445a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800445e:	6083      	str	r3, [r0, #8]
 8004460:	8181      	strh	r1, [r0, #12]
 8004462:	6643      	str	r3, [r0, #100]	; 0x64
 8004464:	81c2      	strh	r2, [r0, #14]
 8004466:	6183      	str	r3, [r0, #24]
 8004468:	4619      	mov	r1, r3
 800446a:	2208      	movs	r2, #8
 800446c:	305c      	adds	r0, #92	; 0x5c
 800446e:	f7ff ffcf 	bl	8004410 <memset>
 8004472:	4b05      	ldr	r3, [pc, #20]	; (8004488 <std+0x38>)
 8004474:	6263      	str	r3, [r4, #36]	; 0x24
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <std+0x3c>)
 8004478:	62a3      	str	r3, [r4, #40]	; 0x28
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <std+0x40>)
 800447c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <std+0x44>)
 8004480:	6224      	str	r4, [r4, #32]
 8004482:	6323      	str	r3, [r4, #48]	; 0x30
 8004484:	bd10      	pop	{r4, pc}
 8004486:	bf00      	nop
 8004488:	08004d65 	.word	0x08004d65
 800448c:	08004d87 	.word	0x08004d87
 8004490:	08004dbf 	.word	0x08004dbf
 8004494:	08004de3 	.word	0x08004de3

08004498 <_cleanup_r>:
 8004498:	4901      	ldr	r1, [pc, #4]	; (80044a0 <_cleanup_r+0x8>)
 800449a:	f000 b8af 	b.w	80045fc <_fwalk_reent>
 800449e:	bf00      	nop
 80044a0:	080050bd 	.word	0x080050bd

080044a4 <__sfmoreglue>:
 80044a4:	b570      	push	{r4, r5, r6, lr}
 80044a6:	2268      	movs	r2, #104	; 0x68
 80044a8:	1e4d      	subs	r5, r1, #1
 80044aa:	4355      	muls	r5, r2
 80044ac:	460e      	mov	r6, r1
 80044ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80044b2:	f000 f8e5 	bl	8004680 <_malloc_r>
 80044b6:	4604      	mov	r4, r0
 80044b8:	b140      	cbz	r0, 80044cc <__sfmoreglue+0x28>
 80044ba:	2100      	movs	r1, #0
 80044bc:	e9c0 1600 	strd	r1, r6, [r0]
 80044c0:	300c      	adds	r0, #12
 80044c2:	60a0      	str	r0, [r4, #8]
 80044c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80044c8:	f7ff ffa2 	bl	8004410 <memset>
 80044cc:	4620      	mov	r0, r4
 80044ce:	bd70      	pop	{r4, r5, r6, pc}

080044d0 <__sfp_lock_acquire>:
 80044d0:	4801      	ldr	r0, [pc, #4]	; (80044d8 <__sfp_lock_acquire+0x8>)
 80044d2:	f000 b8b3 	b.w	800463c <__retarget_lock_acquire_recursive>
 80044d6:	bf00      	nop
 80044d8:	2000017d 	.word	0x2000017d

080044dc <__sfp_lock_release>:
 80044dc:	4801      	ldr	r0, [pc, #4]	; (80044e4 <__sfp_lock_release+0x8>)
 80044de:	f000 b8ae 	b.w	800463e <__retarget_lock_release_recursive>
 80044e2:	bf00      	nop
 80044e4:	2000017d 	.word	0x2000017d

080044e8 <__sinit_lock_acquire>:
 80044e8:	4801      	ldr	r0, [pc, #4]	; (80044f0 <__sinit_lock_acquire+0x8>)
 80044ea:	f000 b8a7 	b.w	800463c <__retarget_lock_acquire_recursive>
 80044ee:	bf00      	nop
 80044f0:	2000017e 	.word	0x2000017e

080044f4 <__sinit_lock_release>:
 80044f4:	4801      	ldr	r0, [pc, #4]	; (80044fc <__sinit_lock_release+0x8>)
 80044f6:	f000 b8a2 	b.w	800463e <__retarget_lock_release_recursive>
 80044fa:	bf00      	nop
 80044fc:	2000017e 	.word	0x2000017e

08004500 <__sinit>:
 8004500:	b510      	push	{r4, lr}
 8004502:	4604      	mov	r4, r0
 8004504:	f7ff fff0 	bl	80044e8 <__sinit_lock_acquire>
 8004508:	69a3      	ldr	r3, [r4, #24]
 800450a:	b11b      	cbz	r3, 8004514 <__sinit+0x14>
 800450c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004510:	f7ff bff0 	b.w	80044f4 <__sinit_lock_release>
 8004514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004518:	6523      	str	r3, [r4, #80]	; 0x50
 800451a:	4b13      	ldr	r3, [pc, #76]	; (8004568 <__sinit+0x68>)
 800451c:	4a13      	ldr	r2, [pc, #76]	; (800456c <__sinit+0x6c>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	62a2      	str	r2, [r4, #40]	; 0x28
 8004522:	42a3      	cmp	r3, r4
 8004524:	bf04      	itt	eq
 8004526:	2301      	moveq	r3, #1
 8004528:	61a3      	streq	r3, [r4, #24]
 800452a:	4620      	mov	r0, r4
 800452c:	f000 f820 	bl	8004570 <__sfp>
 8004530:	6060      	str	r0, [r4, #4]
 8004532:	4620      	mov	r0, r4
 8004534:	f000 f81c 	bl	8004570 <__sfp>
 8004538:	60a0      	str	r0, [r4, #8]
 800453a:	4620      	mov	r0, r4
 800453c:	f000 f818 	bl	8004570 <__sfp>
 8004540:	2200      	movs	r2, #0
 8004542:	60e0      	str	r0, [r4, #12]
 8004544:	2104      	movs	r1, #4
 8004546:	6860      	ldr	r0, [r4, #4]
 8004548:	f7ff ff82 	bl	8004450 <std>
 800454c:	68a0      	ldr	r0, [r4, #8]
 800454e:	2201      	movs	r2, #1
 8004550:	2109      	movs	r1, #9
 8004552:	f7ff ff7d 	bl	8004450 <std>
 8004556:	68e0      	ldr	r0, [r4, #12]
 8004558:	2202      	movs	r2, #2
 800455a:	2112      	movs	r1, #18
 800455c:	f7ff ff78 	bl	8004450 <std>
 8004560:	2301      	movs	r3, #1
 8004562:	61a3      	str	r3, [r4, #24]
 8004564:	e7d2      	b.n	800450c <__sinit+0xc>
 8004566:	bf00      	nop
 8004568:	08005abc 	.word	0x08005abc
 800456c:	08004499 	.word	0x08004499

08004570 <__sfp>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	4607      	mov	r7, r0
 8004574:	f7ff ffac 	bl	80044d0 <__sfp_lock_acquire>
 8004578:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <__sfp+0x84>)
 800457a:	681e      	ldr	r6, [r3, #0]
 800457c:	69b3      	ldr	r3, [r6, #24]
 800457e:	b913      	cbnz	r3, 8004586 <__sfp+0x16>
 8004580:	4630      	mov	r0, r6
 8004582:	f7ff ffbd 	bl	8004500 <__sinit>
 8004586:	3648      	adds	r6, #72	; 0x48
 8004588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800458c:	3b01      	subs	r3, #1
 800458e:	d503      	bpl.n	8004598 <__sfp+0x28>
 8004590:	6833      	ldr	r3, [r6, #0]
 8004592:	b30b      	cbz	r3, 80045d8 <__sfp+0x68>
 8004594:	6836      	ldr	r6, [r6, #0]
 8004596:	e7f7      	b.n	8004588 <__sfp+0x18>
 8004598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800459c:	b9d5      	cbnz	r5, 80045d4 <__sfp+0x64>
 800459e:	4b16      	ldr	r3, [pc, #88]	; (80045f8 <__sfp+0x88>)
 80045a0:	60e3      	str	r3, [r4, #12]
 80045a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045a6:	6665      	str	r5, [r4, #100]	; 0x64
 80045a8:	f000 f847 	bl	800463a <__retarget_lock_init_recursive>
 80045ac:	f7ff ff96 	bl	80044dc <__sfp_lock_release>
 80045b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80045b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80045b8:	6025      	str	r5, [r4, #0]
 80045ba:	61a5      	str	r5, [r4, #24]
 80045bc:	2208      	movs	r2, #8
 80045be:	4629      	mov	r1, r5
 80045c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80045c4:	f7ff ff24 	bl	8004410 <memset>
 80045c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80045cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80045d0:	4620      	mov	r0, r4
 80045d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045d4:	3468      	adds	r4, #104	; 0x68
 80045d6:	e7d9      	b.n	800458c <__sfp+0x1c>
 80045d8:	2104      	movs	r1, #4
 80045da:	4638      	mov	r0, r7
 80045dc:	f7ff ff62 	bl	80044a4 <__sfmoreglue>
 80045e0:	4604      	mov	r4, r0
 80045e2:	6030      	str	r0, [r6, #0]
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d1d5      	bne.n	8004594 <__sfp+0x24>
 80045e8:	f7ff ff78 	bl	80044dc <__sfp_lock_release>
 80045ec:	230c      	movs	r3, #12
 80045ee:	603b      	str	r3, [r7, #0]
 80045f0:	e7ee      	b.n	80045d0 <__sfp+0x60>
 80045f2:	bf00      	nop
 80045f4:	08005abc 	.word	0x08005abc
 80045f8:	ffff0001 	.word	0xffff0001

080045fc <_fwalk_reent>:
 80045fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004600:	4606      	mov	r6, r0
 8004602:	4688      	mov	r8, r1
 8004604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004608:	2700      	movs	r7, #0
 800460a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800460e:	f1b9 0901 	subs.w	r9, r9, #1
 8004612:	d505      	bpl.n	8004620 <_fwalk_reent+0x24>
 8004614:	6824      	ldr	r4, [r4, #0]
 8004616:	2c00      	cmp	r4, #0
 8004618:	d1f7      	bne.n	800460a <_fwalk_reent+0xe>
 800461a:	4638      	mov	r0, r7
 800461c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004620:	89ab      	ldrh	r3, [r5, #12]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d907      	bls.n	8004636 <_fwalk_reent+0x3a>
 8004626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800462a:	3301      	adds	r3, #1
 800462c:	d003      	beq.n	8004636 <_fwalk_reent+0x3a>
 800462e:	4629      	mov	r1, r5
 8004630:	4630      	mov	r0, r6
 8004632:	47c0      	blx	r8
 8004634:	4307      	orrs	r7, r0
 8004636:	3568      	adds	r5, #104	; 0x68
 8004638:	e7e9      	b.n	800460e <_fwalk_reent+0x12>

0800463a <__retarget_lock_init_recursive>:
 800463a:	4770      	bx	lr

0800463c <__retarget_lock_acquire_recursive>:
 800463c:	4770      	bx	lr

0800463e <__retarget_lock_release_recursive>:
 800463e:	4770      	bx	lr

08004640 <sbrk_aligned>:
 8004640:	b570      	push	{r4, r5, r6, lr}
 8004642:	4e0e      	ldr	r6, [pc, #56]	; (800467c <sbrk_aligned+0x3c>)
 8004644:	460c      	mov	r4, r1
 8004646:	6831      	ldr	r1, [r6, #0]
 8004648:	4605      	mov	r5, r0
 800464a:	b911      	cbnz	r1, 8004652 <sbrk_aligned+0x12>
 800464c:	f000 fb7a 	bl	8004d44 <_sbrk_r>
 8004650:	6030      	str	r0, [r6, #0]
 8004652:	4621      	mov	r1, r4
 8004654:	4628      	mov	r0, r5
 8004656:	f000 fb75 	bl	8004d44 <_sbrk_r>
 800465a:	1c43      	adds	r3, r0, #1
 800465c:	d00a      	beq.n	8004674 <sbrk_aligned+0x34>
 800465e:	1cc4      	adds	r4, r0, #3
 8004660:	f024 0403 	bic.w	r4, r4, #3
 8004664:	42a0      	cmp	r0, r4
 8004666:	d007      	beq.n	8004678 <sbrk_aligned+0x38>
 8004668:	1a21      	subs	r1, r4, r0
 800466a:	4628      	mov	r0, r5
 800466c:	f000 fb6a 	bl	8004d44 <_sbrk_r>
 8004670:	3001      	adds	r0, #1
 8004672:	d101      	bne.n	8004678 <sbrk_aligned+0x38>
 8004674:	f04f 34ff 	mov.w	r4, #4294967295
 8004678:	4620      	mov	r0, r4
 800467a:	bd70      	pop	{r4, r5, r6, pc}
 800467c:	20000184 	.word	0x20000184

08004680 <_malloc_r>:
 8004680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004684:	1ccd      	adds	r5, r1, #3
 8004686:	f025 0503 	bic.w	r5, r5, #3
 800468a:	3508      	adds	r5, #8
 800468c:	2d0c      	cmp	r5, #12
 800468e:	bf38      	it	cc
 8004690:	250c      	movcc	r5, #12
 8004692:	2d00      	cmp	r5, #0
 8004694:	4607      	mov	r7, r0
 8004696:	db01      	blt.n	800469c <_malloc_r+0x1c>
 8004698:	42a9      	cmp	r1, r5
 800469a:	d905      	bls.n	80046a8 <_malloc_r+0x28>
 800469c:	230c      	movs	r3, #12
 800469e:	603b      	str	r3, [r7, #0]
 80046a0:	2600      	movs	r6, #0
 80046a2:	4630      	mov	r0, r6
 80046a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046a8:	4e2e      	ldr	r6, [pc, #184]	; (8004764 <_malloc_r+0xe4>)
 80046aa:	f000 fdbb 	bl	8005224 <__malloc_lock>
 80046ae:	6833      	ldr	r3, [r6, #0]
 80046b0:	461c      	mov	r4, r3
 80046b2:	bb34      	cbnz	r4, 8004702 <_malloc_r+0x82>
 80046b4:	4629      	mov	r1, r5
 80046b6:	4638      	mov	r0, r7
 80046b8:	f7ff ffc2 	bl	8004640 <sbrk_aligned>
 80046bc:	1c43      	adds	r3, r0, #1
 80046be:	4604      	mov	r4, r0
 80046c0:	d14d      	bne.n	800475e <_malloc_r+0xde>
 80046c2:	6834      	ldr	r4, [r6, #0]
 80046c4:	4626      	mov	r6, r4
 80046c6:	2e00      	cmp	r6, #0
 80046c8:	d140      	bne.n	800474c <_malloc_r+0xcc>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	4631      	mov	r1, r6
 80046ce:	4638      	mov	r0, r7
 80046d0:	eb04 0803 	add.w	r8, r4, r3
 80046d4:	f000 fb36 	bl	8004d44 <_sbrk_r>
 80046d8:	4580      	cmp	r8, r0
 80046da:	d13a      	bne.n	8004752 <_malloc_r+0xd2>
 80046dc:	6821      	ldr	r1, [r4, #0]
 80046de:	3503      	adds	r5, #3
 80046e0:	1a6d      	subs	r5, r5, r1
 80046e2:	f025 0503 	bic.w	r5, r5, #3
 80046e6:	3508      	adds	r5, #8
 80046e8:	2d0c      	cmp	r5, #12
 80046ea:	bf38      	it	cc
 80046ec:	250c      	movcc	r5, #12
 80046ee:	4629      	mov	r1, r5
 80046f0:	4638      	mov	r0, r7
 80046f2:	f7ff ffa5 	bl	8004640 <sbrk_aligned>
 80046f6:	3001      	adds	r0, #1
 80046f8:	d02b      	beq.n	8004752 <_malloc_r+0xd2>
 80046fa:	6823      	ldr	r3, [r4, #0]
 80046fc:	442b      	add	r3, r5
 80046fe:	6023      	str	r3, [r4, #0]
 8004700:	e00e      	b.n	8004720 <_malloc_r+0xa0>
 8004702:	6822      	ldr	r2, [r4, #0]
 8004704:	1b52      	subs	r2, r2, r5
 8004706:	d41e      	bmi.n	8004746 <_malloc_r+0xc6>
 8004708:	2a0b      	cmp	r2, #11
 800470a:	d916      	bls.n	800473a <_malloc_r+0xba>
 800470c:	1961      	adds	r1, r4, r5
 800470e:	42a3      	cmp	r3, r4
 8004710:	6025      	str	r5, [r4, #0]
 8004712:	bf18      	it	ne
 8004714:	6059      	strne	r1, [r3, #4]
 8004716:	6863      	ldr	r3, [r4, #4]
 8004718:	bf08      	it	eq
 800471a:	6031      	streq	r1, [r6, #0]
 800471c:	5162      	str	r2, [r4, r5]
 800471e:	604b      	str	r3, [r1, #4]
 8004720:	4638      	mov	r0, r7
 8004722:	f104 060b 	add.w	r6, r4, #11
 8004726:	f000 fd83 	bl	8005230 <__malloc_unlock>
 800472a:	f026 0607 	bic.w	r6, r6, #7
 800472e:	1d23      	adds	r3, r4, #4
 8004730:	1af2      	subs	r2, r6, r3
 8004732:	d0b6      	beq.n	80046a2 <_malloc_r+0x22>
 8004734:	1b9b      	subs	r3, r3, r6
 8004736:	50a3      	str	r3, [r4, r2]
 8004738:	e7b3      	b.n	80046a2 <_malloc_r+0x22>
 800473a:	6862      	ldr	r2, [r4, #4]
 800473c:	42a3      	cmp	r3, r4
 800473e:	bf0c      	ite	eq
 8004740:	6032      	streq	r2, [r6, #0]
 8004742:	605a      	strne	r2, [r3, #4]
 8004744:	e7ec      	b.n	8004720 <_malloc_r+0xa0>
 8004746:	4623      	mov	r3, r4
 8004748:	6864      	ldr	r4, [r4, #4]
 800474a:	e7b2      	b.n	80046b2 <_malloc_r+0x32>
 800474c:	4634      	mov	r4, r6
 800474e:	6876      	ldr	r6, [r6, #4]
 8004750:	e7b9      	b.n	80046c6 <_malloc_r+0x46>
 8004752:	230c      	movs	r3, #12
 8004754:	603b      	str	r3, [r7, #0]
 8004756:	4638      	mov	r0, r7
 8004758:	f000 fd6a 	bl	8005230 <__malloc_unlock>
 800475c:	e7a1      	b.n	80046a2 <_malloc_r+0x22>
 800475e:	6025      	str	r5, [r4, #0]
 8004760:	e7de      	b.n	8004720 <_malloc_r+0xa0>
 8004762:	bf00      	nop
 8004764:	20000180 	.word	0x20000180

08004768 <__sfputc_r>:
 8004768:	6893      	ldr	r3, [r2, #8]
 800476a:	3b01      	subs	r3, #1
 800476c:	2b00      	cmp	r3, #0
 800476e:	b410      	push	{r4}
 8004770:	6093      	str	r3, [r2, #8]
 8004772:	da08      	bge.n	8004786 <__sfputc_r+0x1e>
 8004774:	6994      	ldr	r4, [r2, #24]
 8004776:	42a3      	cmp	r3, r4
 8004778:	db01      	blt.n	800477e <__sfputc_r+0x16>
 800477a:	290a      	cmp	r1, #10
 800477c:	d103      	bne.n	8004786 <__sfputc_r+0x1e>
 800477e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004782:	f000 bb33 	b.w	8004dec <__swbuf_r>
 8004786:	6813      	ldr	r3, [r2, #0]
 8004788:	1c58      	adds	r0, r3, #1
 800478a:	6010      	str	r0, [r2, #0]
 800478c:	7019      	strb	r1, [r3, #0]
 800478e:	4608      	mov	r0, r1
 8004790:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004794:	4770      	bx	lr

08004796 <__sfputs_r>:
 8004796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004798:	4606      	mov	r6, r0
 800479a:	460f      	mov	r7, r1
 800479c:	4614      	mov	r4, r2
 800479e:	18d5      	adds	r5, r2, r3
 80047a0:	42ac      	cmp	r4, r5
 80047a2:	d101      	bne.n	80047a8 <__sfputs_r+0x12>
 80047a4:	2000      	movs	r0, #0
 80047a6:	e007      	b.n	80047b8 <__sfputs_r+0x22>
 80047a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047ac:	463a      	mov	r2, r7
 80047ae:	4630      	mov	r0, r6
 80047b0:	f7ff ffda 	bl	8004768 <__sfputc_r>
 80047b4:	1c43      	adds	r3, r0, #1
 80047b6:	d1f3      	bne.n	80047a0 <__sfputs_r+0xa>
 80047b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047bc <_vfiprintf_r>:
 80047bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047c0:	460d      	mov	r5, r1
 80047c2:	b09d      	sub	sp, #116	; 0x74
 80047c4:	4614      	mov	r4, r2
 80047c6:	4698      	mov	r8, r3
 80047c8:	4606      	mov	r6, r0
 80047ca:	b118      	cbz	r0, 80047d4 <_vfiprintf_r+0x18>
 80047cc:	6983      	ldr	r3, [r0, #24]
 80047ce:	b90b      	cbnz	r3, 80047d4 <_vfiprintf_r+0x18>
 80047d0:	f7ff fe96 	bl	8004500 <__sinit>
 80047d4:	4b89      	ldr	r3, [pc, #548]	; (80049fc <_vfiprintf_r+0x240>)
 80047d6:	429d      	cmp	r5, r3
 80047d8:	d11b      	bne.n	8004812 <_vfiprintf_r+0x56>
 80047da:	6875      	ldr	r5, [r6, #4]
 80047dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80047de:	07d9      	lsls	r1, r3, #31
 80047e0:	d405      	bmi.n	80047ee <_vfiprintf_r+0x32>
 80047e2:	89ab      	ldrh	r3, [r5, #12]
 80047e4:	059a      	lsls	r2, r3, #22
 80047e6:	d402      	bmi.n	80047ee <_vfiprintf_r+0x32>
 80047e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80047ea:	f7ff ff27 	bl	800463c <__retarget_lock_acquire_recursive>
 80047ee:	89ab      	ldrh	r3, [r5, #12]
 80047f0:	071b      	lsls	r3, r3, #28
 80047f2:	d501      	bpl.n	80047f8 <_vfiprintf_r+0x3c>
 80047f4:	692b      	ldr	r3, [r5, #16]
 80047f6:	b9eb      	cbnz	r3, 8004834 <_vfiprintf_r+0x78>
 80047f8:	4629      	mov	r1, r5
 80047fa:	4630      	mov	r0, r6
 80047fc:	f000 fb5a 	bl	8004eb4 <__swsetup_r>
 8004800:	b1c0      	cbz	r0, 8004834 <_vfiprintf_r+0x78>
 8004802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004804:	07dc      	lsls	r4, r3, #31
 8004806:	d50e      	bpl.n	8004826 <_vfiprintf_r+0x6a>
 8004808:	f04f 30ff 	mov.w	r0, #4294967295
 800480c:	b01d      	add	sp, #116	; 0x74
 800480e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004812:	4b7b      	ldr	r3, [pc, #492]	; (8004a00 <_vfiprintf_r+0x244>)
 8004814:	429d      	cmp	r5, r3
 8004816:	d101      	bne.n	800481c <_vfiprintf_r+0x60>
 8004818:	68b5      	ldr	r5, [r6, #8]
 800481a:	e7df      	b.n	80047dc <_vfiprintf_r+0x20>
 800481c:	4b79      	ldr	r3, [pc, #484]	; (8004a04 <_vfiprintf_r+0x248>)
 800481e:	429d      	cmp	r5, r3
 8004820:	bf08      	it	eq
 8004822:	68f5      	ldreq	r5, [r6, #12]
 8004824:	e7da      	b.n	80047dc <_vfiprintf_r+0x20>
 8004826:	89ab      	ldrh	r3, [r5, #12]
 8004828:	0598      	lsls	r0, r3, #22
 800482a:	d4ed      	bmi.n	8004808 <_vfiprintf_r+0x4c>
 800482c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800482e:	f7ff ff06 	bl	800463e <__retarget_lock_release_recursive>
 8004832:	e7e9      	b.n	8004808 <_vfiprintf_r+0x4c>
 8004834:	2300      	movs	r3, #0
 8004836:	9309      	str	r3, [sp, #36]	; 0x24
 8004838:	2320      	movs	r3, #32
 800483a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800483e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004842:	2330      	movs	r3, #48	; 0x30
 8004844:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a08 <_vfiprintf_r+0x24c>
 8004848:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800484c:	f04f 0901 	mov.w	r9, #1
 8004850:	4623      	mov	r3, r4
 8004852:	469a      	mov	sl, r3
 8004854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004858:	b10a      	cbz	r2, 800485e <_vfiprintf_r+0xa2>
 800485a:	2a25      	cmp	r2, #37	; 0x25
 800485c:	d1f9      	bne.n	8004852 <_vfiprintf_r+0x96>
 800485e:	ebba 0b04 	subs.w	fp, sl, r4
 8004862:	d00b      	beq.n	800487c <_vfiprintf_r+0xc0>
 8004864:	465b      	mov	r3, fp
 8004866:	4622      	mov	r2, r4
 8004868:	4629      	mov	r1, r5
 800486a:	4630      	mov	r0, r6
 800486c:	f7ff ff93 	bl	8004796 <__sfputs_r>
 8004870:	3001      	adds	r0, #1
 8004872:	f000 80aa 	beq.w	80049ca <_vfiprintf_r+0x20e>
 8004876:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004878:	445a      	add	r2, fp
 800487a:	9209      	str	r2, [sp, #36]	; 0x24
 800487c:	f89a 3000 	ldrb.w	r3, [sl]
 8004880:	2b00      	cmp	r3, #0
 8004882:	f000 80a2 	beq.w	80049ca <_vfiprintf_r+0x20e>
 8004886:	2300      	movs	r3, #0
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004890:	f10a 0a01 	add.w	sl, sl, #1
 8004894:	9304      	str	r3, [sp, #16]
 8004896:	9307      	str	r3, [sp, #28]
 8004898:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800489c:	931a      	str	r3, [sp, #104]	; 0x68
 800489e:	4654      	mov	r4, sl
 80048a0:	2205      	movs	r2, #5
 80048a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048a6:	4858      	ldr	r0, [pc, #352]	; (8004a08 <_vfiprintf_r+0x24c>)
 80048a8:	f7fb fc92 	bl	80001d0 <memchr>
 80048ac:	9a04      	ldr	r2, [sp, #16]
 80048ae:	b9d8      	cbnz	r0, 80048e8 <_vfiprintf_r+0x12c>
 80048b0:	06d1      	lsls	r1, r2, #27
 80048b2:	bf44      	itt	mi
 80048b4:	2320      	movmi	r3, #32
 80048b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ba:	0713      	lsls	r3, r2, #28
 80048bc:	bf44      	itt	mi
 80048be:	232b      	movmi	r3, #43	; 0x2b
 80048c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048c4:	f89a 3000 	ldrb.w	r3, [sl]
 80048c8:	2b2a      	cmp	r3, #42	; 0x2a
 80048ca:	d015      	beq.n	80048f8 <_vfiprintf_r+0x13c>
 80048cc:	9a07      	ldr	r2, [sp, #28]
 80048ce:	4654      	mov	r4, sl
 80048d0:	2000      	movs	r0, #0
 80048d2:	f04f 0c0a 	mov.w	ip, #10
 80048d6:	4621      	mov	r1, r4
 80048d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048dc:	3b30      	subs	r3, #48	; 0x30
 80048de:	2b09      	cmp	r3, #9
 80048e0:	d94e      	bls.n	8004980 <_vfiprintf_r+0x1c4>
 80048e2:	b1b0      	cbz	r0, 8004912 <_vfiprintf_r+0x156>
 80048e4:	9207      	str	r2, [sp, #28]
 80048e6:	e014      	b.n	8004912 <_vfiprintf_r+0x156>
 80048e8:	eba0 0308 	sub.w	r3, r0, r8
 80048ec:	fa09 f303 	lsl.w	r3, r9, r3
 80048f0:	4313      	orrs	r3, r2
 80048f2:	9304      	str	r3, [sp, #16]
 80048f4:	46a2      	mov	sl, r4
 80048f6:	e7d2      	b.n	800489e <_vfiprintf_r+0xe2>
 80048f8:	9b03      	ldr	r3, [sp, #12]
 80048fa:	1d19      	adds	r1, r3, #4
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	9103      	str	r1, [sp, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	bfbb      	ittet	lt
 8004904:	425b      	neglt	r3, r3
 8004906:	f042 0202 	orrlt.w	r2, r2, #2
 800490a:	9307      	strge	r3, [sp, #28]
 800490c:	9307      	strlt	r3, [sp, #28]
 800490e:	bfb8      	it	lt
 8004910:	9204      	strlt	r2, [sp, #16]
 8004912:	7823      	ldrb	r3, [r4, #0]
 8004914:	2b2e      	cmp	r3, #46	; 0x2e
 8004916:	d10c      	bne.n	8004932 <_vfiprintf_r+0x176>
 8004918:	7863      	ldrb	r3, [r4, #1]
 800491a:	2b2a      	cmp	r3, #42	; 0x2a
 800491c:	d135      	bne.n	800498a <_vfiprintf_r+0x1ce>
 800491e:	9b03      	ldr	r3, [sp, #12]
 8004920:	1d1a      	adds	r2, r3, #4
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	9203      	str	r2, [sp, #12]
 8004926:	2b00      	cmp	r3, #0
 8004928:	bfb8      	it	lt
 800492a:	f04f 33ff 	movlt.w	r3, #4294967295
 800492e:	3402      	adds	r4, #2
 8004930:	9305      	str	r3, [sp, #20]
 8004932:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a18 <_vfiprintf_r+0x25c>
 8004936:	7821      	ldrb	r1, [r4, #0]
 8004938:	2203      	movs	r2, #3
 800493a:	4650      	mov	r0, sl
 800493c:	f7fb fc48 	bl	80001d0 <memchr>
 8004940:	b140      	cbz	r0, 8004954 <_vfiprintf_r+0x198>
 8004942:	2340      	movs	r3, #64	; 0x40
 8004944:	eba0 000a 	sub.w	r0, r0, sl
 8004948:	fa03 f000 	lsl.w	r0, r3, r0
 800494c:	9b04      	ldr	r3, [sp, #16]
 800494e:	4303      	orrs	r3, r0
 8004950:	3401      	adds	r4, #1
 8004952:	9304      	str	r3, [sp, #16]
 8004954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004958:	482c      	ldr	r0, [pc, #176]	; (8004a0c <_vfiprintf_r+0x250>)
 800495a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800495e:	2206      	movs	r2, #6
 8004960:	f7fb fc36 	bl	80001d0 <memchr>
 8004964:	2800      	cmp	r0, #0
 8004966:	d03f      	beq.n	80049e8 <_vfiprintf_r+0x22c>
 8004968:	4b29      	ldr	r3, [pc, #164]	; (8004a10 <_vfiprintf_r+0x254>)
 800496a:	bb1b      	cbnz	r3, 80049b4 <_vfiprintf_r+0x1f8>
 800496c:	9b03      	ldr	r3, [sp, #12]
 800496e:	3307      	adds	r3, #7
 8004970:	f023 0307 	bic.w	r3, r3, #7
 8004974:	3308      	adds	r3, #8
 8004976:	9303      	str	r3, [sp, #12]
 8004978:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800497a:	443b      	add	r3, r7
 800497c:	9309      	str	r3, [sp, #36]	; 0x24
 800497e:	e767      	b.n	8004850 <_vfiprintf_r+0x94>
 8004980:	fb0c 3202 	mla	r2, ip, r2, r3
 8004984:	460c      	mov	r4, r1
 8004986:	2001      	movs	r0, #1
 8004988:	e7a5      	b.n	80048d6 <_vfiprintf_r+0x11a>
 800498a:	2300      	movs	r3, #0
 800498c:	3401      	adds	r4, #1
 800498e:	9305      	str	r3, [sp, #20]
 8004990:	4619      	mov	r1, r3
 8004992:	f04f 0c0a 	mov.w	ip, #10
 8004996:	4620      	mov	r0, r4
 8004998:	f810 2b01 	ldrb.w	r2, [r0], #1
 800499c:	3a30      	subs	r2, #48	; 0x30
 800499e:	2a09      	cmp	r2, #9
 80049a0:	d903      	bls.n	80049aa <_vfiprintf_r+0x1ee>
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0c5      	beq.n	8004932 <_vfiprintf_r+0x176>
 80049a6:	9105      	str	r1, [sp, #20]
 80049a8:	e7c3      	b.n	8004932 <_vfiprintf_r+0x176>
 80049aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80049ae:	4604      	mov	r4, r0
 80049b0:	2301      	movs	r3, #1
 80049b2:	e7f0      	b.n	8004996 <_vfiprintf_r+0x1da>
 80049b4:	ab03      	add	r3, sp, #12
 80049b6:	9300      	str	r3, [sp, #0]
 80049b8:	462a      	mov	r2, r5
 80049ba:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <_vfiprintf_r+0x258>)
 80049bc:	a904      	add	r1, sp, #16
 80049be:	4630      	mov	r0, r6
 80049c0:	f3af 8000 	nop.w
 80049c4:	4607      	mov	r7, r0
 80049c6:	1c78      	adds	r0, r7, #1
 80049c8:	d1d6      	bne.n	8004978 <_vfiprintf_r+0x1bc>
 80049ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80049cc:	07d9      	lsls	r1, r3, #31
 80049ce:	d405      	bmi.n	80049dc <_vfiprintf_r+0x220>
 80049d0:	89ab      	ldrh	r3, [r5, #12]
 80049d2:	059a      	lsls	r2, r3, #22
 80049d4:	d402      	bmi.n	80049dc <_vfiprintf_r+0x220>
 80049d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80049d8:	f7ff fe31 	bl	800463e <__retarget_lock_release_recursive>
 80049dc:	89ab      	ldrh	r3, [r5, #12]
 80049de:	065b      	lsls	r3, r3, #25
 80049e0:	f53f af12 	bmi.w	8004808 <_vfiprintf_r+0x4c>
 80049e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80049e6:	e711      	b.n	800480c <_vfiprintf_r+0x50>
 80049e8:	ab03      	add	r3, sp, #12
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	462a      	mov	r2, r5
 80049ee:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <_vfiprintf_r+0x258>)
 80049f0:	a904      	add	r1, sp, #16
 80049f2:	4630      	mov	r0, r6
 80049f4:	f000 f880 	bl	8004af8 <_printf_i>
 80049f8:	e7e4      	b.n	80049c4 <_vfiprintf_r+0x208>
 80049fa:	bf00      	nop
 80049fc:	08005ae0 	.word	0x08005ae0
 8004a00:	08005b00 	.word	0x08005b00
 8004a04:	08005ac0 	.word	0x08005ac0
 8004a08:	08005b20 	.word	0x08005b20
 8004a0c:	08005b2a 	.word	0x08005b2a
 8004a10:	00000000 	.word	0x00000000
 8004a14:	08004797 	.word	0x08004797
 8004a18:	08005b26 	.word	0x08005b26

08004a1c <_printf_common>:
 8004a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a20:	4616      	mov	r6, r2
 8004a22:	4699      	mov	r9, r3
 8004a24:	688a      	ldr	r2, [r1, #8]
 8004a26:	690b      	ldr	r3, [r1, #16]
 8004a28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	bfb8      	it	lt
 8004a30:	4613      	movlt	r3, r2
 8004a32:	6033      	str	r3, [r6, #0]
 8004a34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a38:	4607      	mov	r7, r0
 8004a3a:	460c      	mov	r4, r1
 8004a3c:	b10a      	cbz	r2, 8004a42 <_printf_common+0x26>
 8004a3e:	3301      	adds	r3, #1
 8004a40:	6033      	str	r3, [r6, #0]
 8004a42:	6823      	ldr	r3, [r4, #0]
 8004a44:	0699      	lsls	r1, r3, #26
 8004a46:	bf42      	ittt	mi
 8004a48:	6833      	ldrmi	r3, [r6, #0]
 8004a4a:	3302      	addmi	r3, #2
 8004a4c:	6033      	strmi	r3, [r6, #0]
 8004a4e:	6825      	ldr	r5, [r4, #0]
 8004a50:	f015 0506 	ands.w	r5, r5, #6
 8004a54:	d106      	bne.n	8004a64 <_printf_common+0x48>
 8004a56:	f104 0a19 	add.w	sl, r4, #25
 8004a5a:	68e3      	ldr	r3, [r4, #12]
 8004a5c:	6832      	ldr	r2, [r6, #0]
 8004a5e:	1a9b      	subs	r3, r3, r2
 8004a60:	42ab      	cmp	r3, r5
 8004a62:	dc26      	bgt.n	8004ab2 <_printf_common+0x96>
 8004a64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a68:	1e13      	subs	r3, r2, #0
 8004a6a:	6822      	ldr	r2, [r4, #0]
 8004a6c:	bf18      	it	ne
 8004a6e:	2301      	movne	r3, #1
 8004a70:	0692      	lsls	r2, r2, #26
 8004a72:	d42b      	bmi.n	8004acc <_printf_common+0xb0>
 8004a74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a78:	4649      	mov	r1, r9
 8004a7a:	4638      	mov	r0, r7
 8004a7c:	47c0      	blx	r8
 8004a7e:	3001      	adds	r0, #1
 8004a80:	d01e      	beq.n	8004ac0 <_printf_common+0xa4>
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	68e5      	ldr	r5, [r4, #12]
 8004a86:	6832      	ldr	r2, [r6, #0]
 8004a88:	f003 0306 	and.w	r3, r3, #6
 8004a8c:	2b04      	cmp	r3, #4
 8004a8e:	bf08      	it	eq
 8004a90:	1aad      	subeq	r5, r5, r2
 8004a92:	68a3      	ldr	r3, [r4, #8]
 8004a94:	6922      	ldr	r2, [r4, #16]
 8004a96:	bf0c      	ite	eq
 8004a98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a9c:	2500      	movne	r5, #0
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	bfc4      	itt	gt
 8004aa2:	1a9b      	subgt	r3, r3, r2
 8004aa4:	18ed      	addgt	r5, r5, r3
 8004aa6:	2600      	movs	r6, #0
 8004aa8:	341a      	adds	r4, #26
 8004aaa:	42b5      	cmp	r5, r6
 8004aac:	d11a      	bne.n	8004ae4 <_printf_common+0xc8>
 8004aae:	2000      	movs	r0, #0
 8004ab0:	e008      	b.n	8004ac4 <_printf_common+0xa8>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	4652      	mov	r2, sl
 8004ab6:	4649      	mov	r1, r9
 8004ab8:	4638      	mov	r0, r7
 8004aba:	47c0      	blx	r8
 8004abc:	3001      	adds	r0, #1
 8004abe:	d103      	bne.n	8004ac8 <_printf_common+0xac>
 8004ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ac8:	3501      	adds	r5, #1
 8004aca:	e7c6      	b.n	8004a5a <_printf_common+0x3e>
 8004acc:	18e1      	adds	r1, r4, r3
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	2030      	movs	r0, #48	; 0x30
 8004ad2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ad6:	4422      	add	r2, r4
 8004ad8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004adc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ae0:	3302      	adds	r3, #2
 8004ae2:	e7c7      	b.n	8004a74 <_printf_common+0x58>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	4622      	mov	r2, r4
 8004ae8:	4649      	mov	r1, r9
 8004aea:	4638      	mov	r0, r7
 8004aec:	47c0      	blx	r8
 8004aee:	3001      	adds	r0, #1
 8004af0:	d0e6      	beq.n	8004ac0 <_printf_common+0xa4>
 8004af2:	3601      	adds	r6, #1
 8004af4:	e7d9      	b.n	8004aaa <_printf_common+0x8e>
	...

08004af8 <_printf_i>:
 8004af8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004afc:	7e0f      	ldrb	r7, [r1, #24]
 8004afe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b00:	2f78      	cmp	r7, #120	; 0x78
 8004b02:	4691      	mov	r9, r2
 8004b04:	4680      	mov	r8, r0
 8004b06:	460c      	mov	r4, r1
 8004b08:	469a      	mov	sl, r3
 8004b0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b0e:	d807      	bhi.n	8004b20 <_printf_i+0x28>
 8004b10:	2f62      	cmp	r7, #98	; 0x62
 8004b12:	d80a      	bhi.n	8004b2a <_printf_i+0x32>
 8004b14:	2f00      	cmp	r7, #0
 8004b16:	f000 80d8 	beq.w	8004cca <_printf_i+0x1d2>
 8004b1a:	2f58      	cmp	r7, #88	; 0x58
 8004b1c:	f000 80a3 	beq.w	8004c66 <_printf_i+0x16e>
 8004b20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b28:	e03a      	b.n	8004ba0 <_printf_i+0xa8>
 8004b2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b2e:	2b15      	cmp	r3, #21
 8004b30:	d8f6      	bhi.n	8004b20 <_printf_i+0x28>
 8004b32:	a101      	add	r1, pc, #4	; (adr r1, 8004b38 <_printf_i+0x40>)
 8004b34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b38:	08004b91 	.word	0x08004b91
 8004b3c:	08004ba5 	.word	0x08004ba5
 8004b40:	08004b21 	.word	0x08004b21
 8004b44:	08004b21 	.word	0x08004b21
 8004b48:	08004b21 	.word	0x08004b21
 8004b4c:	08004b21 	.word	0x08004b21
 8004b50:	08004ba5 	.word	0x08004ba5
 8004b54:	08004b21 	.word	0x08004b21
 8004b58:	08004b21 	.word	0x08004b21
 8004b5c:	08004b21 	.word	0x08004b21
 8004b60:	08004b21 	.word	0x08004b21
 8004b64:	08004cb1 	.word	0x08004cb1
 8004b68:	08004bd5 	.word	0x08004bd5
 8004b6c:	08004c93 	.word	0x08004c93
 8004b70:	08004b21 	.word	0x08004b21
 8004b74:	08004b21 	.word	0x08004b21
 8004b78:	08004cd3 	.word	0x08004cd3
 8004b7c:	08004b21 	.word	0x08004b21
 8004b80:	08004bd5 	.word	0x08004bd5
 8004b84:	08004b21 	.word	0x08004b21
 8004b88:	08004b21 	.word	0x08004b21
 8004b8c:	08004c9b 	.word	0x08004c9b
 8004b90:	682b      	ldr	r3, [r5, #0]
 8004b92:	1d1a      	adds	r2, r3, #4
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	602a      	str	r2, [r5, #0]
 8004b98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e0a3      	b.n	8004cec <_printf_i+0x1f4>
 8004ba4:	6820      	ldr	r0, [r4, #0]
 8004ba6:	6829      	ldr	r1, [r5, #0]
 8004ba8:	0606      	lsls	r6, r0, #24
 8004baa:	f101 0304 	add.w	r3, r1, #4
 8004bae:	d50a      	bpl.n	8004bc6 <_printf_i+0xce>
 8004bb0:	680e      	ldr	r6, [r1, #0]
 8004bb2:	602b      	str	r3, [r5, #0]
 8004bb4:	2e00      	cmp	r6, #0
 8004bb6:	da03      	bge.n	8004bc0 <_printf_i+0xc8>
 8004bb8:	232d      	movs	r3, #45	; 0x2d
 8004bba:	4276      	negs	r6, r6
 8004bbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bc0:	485e      	ldr	r0, [pc, #376]	; (8004d3c <_printf_i+0x244>)
 8004bc2:	230a      	movs	r3, #10
 8004bc4:	e019      	b.n	8004bfa <_printf_i+0x102>
 8004bc6:	680e      	ldr	r6, [r1, #0]
 8004bc8:	602b      	str	r3, [r5, #0]
 8004bca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004bce:	bf18      	it	ne
 8004bd0:	b236      	sxthne	r6, r6
 8004bd2:	e7ef      	b.n	8004bb4 <_printf_i+0xbc>
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	6820      	ldr	r0, [r4, #0]
 8004bd8:	1d19      	adds	r1, r3, #4
 8004bda:	6029      	str	r1, [r5, #0]
 8004bdc:	0601      	lsls	r1, r0, #24
 8004bde:	d501      	bpl.n	8004be4 <_printf_i+0xec>
 8004be0:	681e      	ldr	r6, [r3, #0]
 8004be2:	e002      	b.n	8004bea <_printf_i+0xf2>
 8004be4:	0646      	lsls	r6, r0, #25
 8004be6:	d5fb      	bpl.n	8004be0 <_printf_i+0xe8>
 8004be8:	881e      	ldrh	r6, [r3, #0]
 8004bea:	4854      	ldr	r0, [pc, #336]	; (8004d3c <_printf_i+0x244>)
 8004bec:	2f6f      	cmp	r7, #111	; 0x6f
 8004bee:	bf0c      	ite	eq
 8004bf0:	2308      	moveq	r3, #8
 8004bf2:	230a      	movne	r3, #10
 8004bf4:	2100      	movs	r1, #0
 8004bf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004bfa:	6865      	ldr	r5, [r4, #4]
 8004bfc:	60a5      	str	r5, [r4, #8]
 8004bfe:	2d00      	cmp	r5, #0
 8004c00:	bfa2      	ittt	ge
 8004c02:	6821      	ldrge	r1, [r4, #0]
 8004c04:	f021 0104 	bicge.w	r1, r1, #4
 8004c08:	6021      	strge	r1, [r4, #0]
 8004c0a:	b90e      	cbnz	r6, 8004c10 <_printf_i+0x118>
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	d04d      	beq.n	8004cac <_printf_i+0x1b4>
 8004c10:	4615      	mov	r5, r2
 8004c12:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c16:	fb03 6711 	mls	r7, r3, r1, r6
 8004c1a:	5dc7      	ldrb	r7, [r0, r7]
 8004c1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c20:	4637      	mov	r7, r6
 8004c22:	42bb      	cmp	r3, r7
 8004c24:	460e      	mov	r6, r1
 8004c26:	d9f4      	bls.n	8004c12 <_printf_i+0x11a>
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d10b      	bne.n	8004c44 <_printf_i+0x14c>
 8004c2c:	6823      	ldr	r3, [r4, #0]
 8004c2e:	07de      	lsls	r6, r3, #31
 8004c30:	d508      	bpl.n	8004c44 <_printf_i+0x14c>
 8004c32:	6923      	ldr	r3, [r4, #16]
 8004c34:	6861      	ldr	r1, [r4, #4]
 8004c36:	4299      	cmp	r1, r3
 8004c38:	bfde      	ittt	le
 8004c3a:	2330      	movle	r3, #48	; 0x30
 8004c3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c40:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c44:	1b52      	subs	r2, r2, r5
 8004c46:	6122      	str	r2, [r4, #16]
 8004c48:	f8cd a000 	str.w	sl, [sp]
 8004c4c:	464b      	mov	r3, r9
 8004c4e:	aa03      	add	r2, sp, #12
 8004c50:	4621      	mov	r1, r4
 8004c52:	4640      	mov	r0, r8
 8004c54:	f7ff fee2 	bl	8004a1c <_printf_common>
 8004c58:	3001      	adds	r0, #1
 8004c5a:	d14c      	bne.n	8004cf6 <_printf_i+0x1fe>
 8004c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c60:	b004      	add	sp, #16
 8004c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c66:	4835      	ldr	r0, [pc, #212]	; (8004d3c <_printf_i+0x244>)
 8004c68:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004c6c:	6829      	ldr	r1, [r5, #0]
 8004c6e:	6823      	ldr	r3, [r4, #0]
 8004c70:	f851 6b04 	ldr.w	r6, [r1], #4
 8004c74:	6029      	str	r1, [r5, #0]
 8004c76:	061d      	lsls	r5, r3, #24
 8004c78:	d514      	bpl.n	8004ca4 <_printf_i+0x1ac>
 8004c7a:	07df      	lsls	r7, r3, #31
 8004c7c:	bf44      	itt	mi
 8004c7e:	f043 0320 	orrmi.w	r3, r3, #32
 8004c82:	6023      	strmi	r3, [r4, #0]
 8004c84:	b91e      	cbnz	r6, 8004c8e <_printf_i+0x196>
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	f023 0320 	bic.w	r3, r3, #32
 8004c8c:	6023      	str	r3, [r4, #0]
 8004c8e:	2310      	movs	r3, #16
 8004c90:	e7b0      	b.n	8004bf4 <_printf_i+0xfc>
 8004c92:	6823      	ldr	r3, [r4, #0]
 8004c94:	f043 0320 	orr.w	r3, r3, #32
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	2378      	movs	r3, #120	; 0x78
 8004c9c:	4828      	ldr	r0, [pc, #160]	; (8004d40 <_printf_i+0x248>)
 8004c9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ca2:	e7e3      	b.n	8004c6c <_printf_i+0x174>
 8004ca4:	0659      	lsls	r1, r3, #25
 8004ca6:	bf48      	it	mi
 8004ca8:	b2b6      	uxthmi	r6, r6
 8004caa:	e7e6      	b.n	8004c7a <_printf_i+0x182>
 8004cac:	4615      	mov	r5, r2
 8004cae:	e7bb      	b.n	8004c28 <_printf_i+0x130>
 8004cb0:	682b      	ldr	r3, [r5, #0]
 8004cb2:	6826      	ldr	r6, [r4, #0]
 8004cb4:	6961      	ldr	r1, [r4, #20]
 8004cb6:	1d18      	adds	r0, r3, #4
 8004cb8:	6028      	str	r0, [r5, #0]
 8004cba:	0635      	lsls	r5, r6, #24
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	d501      	bpl.n	8004cc4 <_printf_i+0x1cc>
 8004cc0:	6019      	str	r1, [r3, #0]
 8004cc2:	e002      	b.n	8004cca <_printf_i+0x1d2>
 8004cc4:	0670      	lsls	r0, r6, #25
 8004cc6:	d5fb      	bpl.n	8004cc0 <_printf_i+0x1c8>
 8004cc8:	8019      	strh	r1, [r3, #0]
 8004cca:	2300      	movs	r3, #0
 8004ccc:	6123      	str	r3, [r4, #16]
 8004cce:	4615      	mov	r5, r2
 8004cd0:	e7ba      	b.n	8004c48 <_printf_i+0x150>
 8004cd2:	682b      	ldr	r3, [r5, #0]
 8004cd4:	1d1a      	adds	r2, r3, #4
 8004cd6:	602a      	str	r2, [r5, #0]
 8004cd8:	681d      	ldr	r5, [r3, #0]
 8004cda:	6862      	ldr	r2, [r4, #4]
 8004cdc:	2100      	movs	r1, #0
 8004cde:	4628      	mov	r0, r5
 8004ce0:	f7fb fa76 	bl	80001d0 <memchr>
 8004ce4:	b108      	cbz	r0, 8004cea <_printf_i+0x1f2>
 8004ce6:	1b40      	subs	r0, r0, r5
 8004ce8:	6060      	str	r0, [r4, #4]
 8004cea:	6863      	ldr	r3, [r4, #4]
 8004cec:	6123      	str	r3, [r4, #16]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf4:	e7a8      	b.n	8004c48 <_printf_i+0x150>
 8004cf6:	6923      	ldr	r3, [r4, #16]
 8004cf8:	462a      	mov	r2, r5
 8004cfa:	4649      	mov	r1, r9
 8004cfc:	4640      	mov	r0, r8
 8004cfe:	47d0      	blx	sl
 8004d00:	3001      	adds	r0, #1
 8004d02:	d0ab      	beq.n	8004c5c <_printf_i+0x164>
 8004d04:	6823      	ldr	r3, [r4, #0]
 8004d06:	079b      	lsls	r3, r3, #30
 8004d08:	d413      	bmi.n	8004d32 <_printf_i+0x23a>
 8004d0a:	68e0      	ldr	r0, [r4, #12]
 8004d0c:	9b03      	ldr	r3, [sp, #12]
 8004d0e:	4298      	cmp	r0, r3
 8004d10:	bfb8      	it	lt
 8004d12:	4618      	movlt	r0, r3
 8004d14:	e7a4      	b.n	8004c60 <_printf_i+0x168>
 8004d16:	2301      	movs	r3, #1
 8004d18:	4632      	mov	r2, r6
 8004d1a:	4649      	mov	r1, r9
 8004d1c:	4640      	mov	r0, r8
 8004d1e:	47d0      	blx	sl
 8004d20:	3001      	adds	r0, #1
 8004d22:	d09b      	beq.n	8004c5c <_printf_i+0x164>
 8004d24:	3501      	adds	r5, #1
 8004d26:	68e3      	ldr	r3, [r4, #12]
 8004d28:	9903      	ldr	r1, [sp, #12]
 8004d2a:	1a5b      	subs	r3, r3, r1
 8004d2c:	42ab      	cmp	r3, r5
 8004d2e:	dcf2      	bgt.n	8004d16 <_printf_i+0x21e>
 8004d30:	e7eb      	b.n	8004d0a <_printf_i+0x212>
 8004d32:	2500      	movs	r5, #0
 8004d34:	f104 0619 	add.w	r6, r4, #25
 8004d38:	e7f5      	b.n	8004d26 <_printf_i+0x22e>
 8004d3a:	bf00      	nop
 8004d3c:	08005b31 	.word	0x08005b31
 8004d40:	08005b42 	.word	0x08005b42

08004d44 <_sbrk_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4d06      	ldr	r5, [pc, #24]	; (8004d60 <_sbrk_r+0x1c>)
 8004d48:	2300      	movs	r3, #0
 8004d4a:	4604      	mov	r4, r0
 8004d4c:	4608      	mov	r0, r1
 8004d4e:	602b      	str	r3, [r5, #0]
 8004d50:	f7fb ff44 	bl	8000bdc <_sbrk>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_sbrk_r+0x1a>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_sbrk_r+0x1a>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	20000188 	.word	0x20000188

08004d64 <__sread>:
 8004d64:	b510      	push	{r4, lr}
 8004d66:	460c      	mov	r4, r1
 8004d68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d6c:	f000 fab2 	bl	80052d4 <_read_r>
 8004d70:	2800      	cmp	r0, #0
 8004d72:	bfab      	itete	ge
 8004d74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d76:	89a3      	ldrhlt	r3, [r4, #12]
 8004d78:	181b      	addge	r3, r3, r0
 8004d7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d7e:	bfac      	ite	ge
 8004d80:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d82:	81a3      	strhlt	r3, [r4, #12]
 8004d84:	bd10      	pop	{r4, pc}

08004d86 <__swrite>:
 8004d86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d8a:	461f      	mov	r7, r3
 8004d8c:	898b      	ldrh	r3, [r1, #12]
 8004d8e:	05db      	lsls	r3, r3, #23
 8004d90:	4605      	mov	r5, r0
 8004d92:	460c      	mov	r4, r1
 8004d94:	4616      	mov	r6, r2
 8004d96:	d505      	bpl.n	8004da4 <__swrite+0x1e>
 8004d98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d9c:	2302      	movs	r3, #2
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f000 f9c8 	bl	8005134 <_lseek_r>
 8004da4:	89a3      	ldrh	r3, [r4, #12]
 8004da6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004daa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	4632      	mov	r2, r6
 8004db2:	463b      	mov	r3, r7
 8004db4:	4628      	mov	r0, r5
 8004db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dba:	f000 b869 	b.w	8004e90 <_write_r>

08004dbe <__sseek>:
 8004dbe:	b510      	push	{r4, lr}
 8004dc0:	460c      	mov	r4, r1
 8004dc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dc6:	f000 f9b5 	bl	8005134 <_lseek_r>
 8004dca:	1c43      	adds	r3, r0, #1
 8004dcc:	89a3      	ldrh	r3, [r4, #12]
 8004dce:	bf15      	itete	ne
 8004dd0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004dd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004dd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004dda:	81a3      	strheq	r3, [r4, #12]
 8004ddc:	bf18      	it	ne
 8004dde:	81a3      	strhne	r3, [r4, #12]
 8004de0:	bd10      	pop	{r4, pc}

08004de2 <__sclose>:
 8004de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004de6:	f000 b8d3 	b.w	8004f90 <_close_r>
	...

08004dec <__swbuf_r>:
 8004dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dee:	460e      	mov	r6, r1
 8004df0:	4614      	mov	r4, r2
 8004df2:	4605      	mov	r5, r0
 8004df4:	b118      	cbz	r0, 8004dfe <__swbuf_r+0x12>
 8004df6:	6983      	ldr	r3, [r0, #24]
 8004df8:	b90b      	cbnz	r3, 8004dfe <__swbuf_r+0x12>
 8004dfa:	f7ff fb81 	bl	8004500 <__sinit>
 8004dfe:	4b21      	ldr	r3, [pc, #132]	; (8004e84 <__swbuf_r+0x98>)
 8004e00:	429c      	cmp	r4, r3
 8004e02:	d12b      	bne.n	8004e5c <__swbuf_r+0x70>
 8004e04:	686c      	ldr	r4, [r5, #4]
 8004e06:	69a3      	ldr	r3, [r4, #24]
 8004e08:	60a3      	str	r3, [r4, #8]
 8004e0a:	89a3      	ldrh	r3, [r4, #12]
 8004e0c:	071a      	lsls	r2, r3, #28
 8004e0e:	d52f      	bpl.n	8004e70 <__swbuf_r+0x84>
 8004e10:	6923      	ldr	r3, [r4, #16]
 8004e12:	b36b      	cbz	r3, 8004e70 <__swbuf_r+0x84>
 8004e14:	6923      	ldr	r3, [r4, #16]
 8004e16:	6820      	ldr	r0, [r4, #0]
 8004e18:	1ac0      	subs	r0, r0, r3
 8004e1a:	6963      	ldr	r3, [r4, #20]
 8004e1c:	b2f6      	uxtb	r6, r6
 8004e1e:	4283      	cmp	r3, r0
 8004e20:	4637      	mov	r7, r6
 8004e22:	dc04      	bgt.n	8004e2e <__swbuf_r+0x42>
 8004e24:	4621      	mov	r1, r4
 8004e26:	4628      	mov	r0, r5
 8004e28:	f000 f948 	bl	80050bc <_fflush_r>
 8004e2c:	bb30      	cbnz	r0, 8004e7c <__swbuf_r+0x90>
 8004e2e:	68a3      	ldr	r3, [r4, #8]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	60a3      	str	r3, [r4, #8]
 8004e34:	6823      	ldr	r3, [r4, #0]
 8004e36:	1c5a      	adds	r2, r3, #1
 8004e38:	6022      	str	r2, [r4, #0]
 8004e3a:	701e      	strb	r6, [r3, #0]
 8004e3c:	6963      	ldr	r3, [r4, #20]
 8004e3e:	3001      	adds	r0, #1
 8004e40:	4283      	cmp	r3, r0
 8004e42:	d004      	beq.n	8004e4e <__swbuf_r+0x62>
 8004e44:	89a3      	ldrh	r3, [r4, #12]
 8004e46:	07db      	lsls	r3, r3, #31
 8004e48:	d506      	bpl.n	8004e58 <__swbuf_r+0x6c>
 8004e4a:	2e0a      	cmp	r6, #10
 8004e4c:	d104      	bne.n	8004e58 <__swbuf_r+0x6c>
 8004e4e:	4621      	mov	r1, r4
 8004e50:	4628      	mov	r0, r5
 8004e52:	f000 f933 	bl	80050bc <_fflush_r>
 8004e56:	b988      	cbnz	r0, 8004e7c <__swbuf_r+0x90>
 8004e58:	4638      	mov	r0, r7
 8004e5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e5c:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <__swbuf_r+0x9c>)
 8004e5e:	429c      	cmp	r4, r3
 8004e60:	d101      	bne.n	8004e66 <__swbuf_r+0x7a>
 8004e62:	68ac      	ldr	r4, [r5, #8]
 8004e64:	e7cf      	b.n	8004e06 <__swbuf_r+0x1a>
 8004e66:	4b09      	ldr	r3, [pc, #36]	; (8004e8c <__swbuf_r+0xa0>)
 8004e68:	429c      	cmp	r4, r3
 8004e6a:	bf08      	it	eq
 8004e6c:	68ec      	ldreq	r4, [r5, #12]
 8004e6e:	e7ca      	b.n	8004e06 <__swbuf_r+0x1a>
 8004e70:	4621      	mov	r1, r4
 8004e72:	4628      	mov	r0, r5
 8004e74:	f000 f81e 	bl	8004eb4 <__swsetup_r>
 8004e78:	2800      	cmp	r0, #0
 8004e7a:	d0cb      	beq.n	8004e14 <__swbuf_r+0x28>
 8004e7c:	f04f 37ff 	mov.w	r7, #4294967295
 8004e80:	e7ea      	b.n	8004e58 <__swbuf_r+0x6c>
 8004e82:	bf00      	nop
 8004e84:	08005ae0 	.word	0x08005ae0
 8004e88:	08005b00 	.word	0x08005b00
 8004e8c:	08005ac0 	.word	0x08005ac0

08004e90 <_write_r>:
 8004e90:	b538      	push	{r3, r4, r5, lr}
 8004e92:	4d07      	ldr	r5, [pc, #28]	; (8004eb0 <_write_r+0x20>)
 8004e94:	4604      	mov	r4, r0
 8004e96:	4608      	mov	r0, r1
 8004e98:	4611      	mov	r1, r2
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	602a      	str	r2, [r5, #0]
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f7fb fe4b 	bl	8000b3a <_write>
 8004ea4:	1c43      	adds	r3, r0, #1
 8004ea6:	d102      	bne.n	8004eae <_write_r+0x1e>
 8004ea8:	682b      	ldr	r3, [r5, #0]
 8004eaa:	b103      	cbz	r3, 8004eae <_write_r+0x1e>
 8004eac:	6023      	str	r3, [r4, #0]
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	20000188 	.word	0x20000188

08004eb4 <__swsetup_r>:
 8004eb4:	4b32      	ldr	r3, [pc, #200]	; (8004f80 <__swsetup_r+0xcc>)
 8004eb6:	b570      	push	{r4, r5, r6, lr}
 8004eb8:	681d      	ldr	r5, [r3, #0]
 8004eba:	4606      	mov	r6, r0
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	b125      	cbz	r5, 8004eca <__swsetup_r+0x16>
 8004ec0:	69ab      	ldr	r3, [r5, #24]
 8004ec2:	b913      	cbnz	r3, 8004eca <__swsetup_r+0x16>
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f7ff fb1b 	bl	8004500 <__sinit>
 8004eca:	4b2e      	ldr	r3, [pc, #184]	; (8004f84 <__swsetup_r+0xd0>)
 8004ecc:	429c      	cmp	r4, r3
 8004ece:	d10f      	bne.n	8004ef0 <__swsetup_r+0x3c>
 8004ed0:	686c      	ldr	r4, [r5, #4]
 8004ed2:	89a3      	ldrh	r3, [r4, #12]
 8004ed4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ed8:	0719      	lsls	r1, r3, #28
 8004eda:	d42c      	bmi.n	8004f36 <__swsetup_r+0x82>
 8004edc:	06dd      	lsls	r5, r3, #27
 8004ede:	d411      	bmi.n	8004f04 <__swsetup_r+0x50>
 8004ee0:	2309      	movs	r3, #9
 8004ee2:	6033      	str	r3, [r6, #0]
 8004ee4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004ee8:	81a3      	strh	r3, [r4, #12]
 8004eea:	f04f 30ff 	mov.w	r0, #4294967295
 8004eee:	e03e      	b.n	8004f6e <__swsetup_r+0xba>
 8004ef0:	4b25      	ldr	r3, [pc, #148]	; (8004f88 <__swsetup_r+0xd4>)
 8004ef2:	429c      	cmp	r4, r3
 8004ef4:	d101      	bne.n	8004efa <__swsetup_r+0x46>
 8004ef6:	68ac      	ldr	r4, [r5, #8]
 8004ef8:	e7eb      	b.n	8004ed2 <__swsetup_r+0x1e>
 8004efa:	4b24      	ldr	r3, [pc, #144]	; (8004f8c <__swsetup_r+0xd8>)
 8004efc:	429c      	cmp	r4, r3
 8004efe:	bf08      	it	eq
 8004f00:	68ec      	ldreq	r4, [r5, #12]
 8004f02:	e7e6      	b.n	8004ed2 <__swsetup_r+0x1e>
 8004f04:	0758      	lsls	r0, r3, #29
 8004f06:	d512      	bpl.n	8004f2e <__swsetup_r+0x7a>
 8004f08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f0a:	b141      	cbz	r1, 8004f1e <__swsetup_r+0x6a>
 8004f0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004f10:	4299      	cmp	r1, r3
 8004f12:	d002      	beq.n	8004f1a <__swsetup_r+0x66>
 8004f14:	4630      	mov	r0, r6
 8004f16:	f000 f991 	bl	800523c <_free_r>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	6363      	str	r3, [r4, #52]	; 0x34
 8004f1e:	89a3      	ldrh	r3, [r4, #12]
 8004f20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004f24:	81a3      	strh	r3, [r4, #12]
 8004f26:	2300      	movs	r3, #0
 8004f28:	6063      	str	r3, [r4, #4]
 8004f2a:	6923      	ldr	r3, [r4, #16]
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	89a3      	ldrh	r3, [r4, #12]
 8004f30:	f043 0308 	orr.w	r3, r3, #8
 8004f34:	81a3      	strh	r3, [r4, #12]
 8004f36:	6923      	ldr	r3, [r4, #16]
 8004f38:	b94b      	cbnz	r3, 8004f4e <__swsetup_r+0x9a>
 8004f3a:	89a3      	ldrh	r3, [r4, #12]
 8004f3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f44:	d003      	beq.n	8004f4e <__swsetup_r+0x9a>
 8004f46:	4621      	mov	r1, r4
 8004f48:	4630      	mov	r0, r6
 8004f4a:	f000 f92b 	bl	80051a4 <__smakebuf_r>
 8004f4e:	89a0      	ldrh	r0, [r4, #12]
 8004f50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004f54:	f010 0301 	ands.w	r3, r0, #1
 8004f58:	d00a      	beq.n	8004f70 <__swsetup_r+0xbc>
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	60a3      	str	r3, [r4, #8]
 8004f5e:	6963      	ldr	r3, [r4, #20]
 8004f60:	425b      	negs	r3, r3
 8004f62:	61a3      	str	r3, [r4, #24]
 8004f64:	6923      	ldr	r3, [r4, #16]
 8004f66:	b943      	cbnz	r3, 8004f7a <__swsetup_r+0xc6>
 8004f68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004f6c:	d1ba      	bne.n	8004ee4 <__swsetup_r+0x30>
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	0781      	lsls	r1, r0, #30
 8004f72:	bf58      	it	pl
 8004f74:	6963      	ldrpl	r3, [r4, #20]
 8004f76:	60a3      	str	r3, [r4, #8]
 8004f78:	e7f4      	b.n	8004f64 <__swsetup_r+0xb0>
 8004f7a:	2000      	movs	r0, #0
 8004f7c:	e7f7      	b.n	8004f6e <__swsetup_r+0xba>
 8004f7e:	bf00      	nop
 8004f80:	2000000c 	.word	0x2000000c
 8004f84:	08005ae0 	.word	0x08005ae0
 8004f88:	08005b00 	.word	0x08005b00
 8004f8c:	08005ac0 	.word	0x08005ac0

08004f90 <_close_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4d06      	ldr	r5, [pc, #24]	; (8004fac <_close_r+0x1c>)
 8004f94:	2300      	movs	r3, #0
 8004f96:	4604      	mov	r4, r0
 8004f98:	4608      	mov	r0, r1
 8004f9a:	602b      	str	r3, [r5, #0]
 8004f9c:	f7fb fde9 	bl	8000b72 <_close>
 8004fa0:	1c43      	adds	r3, r0, #1
 8004fa2:	d102      	bne.n	8004faa <_close_r+0x1a>
 8004fa4:	682b      	ldr	r3, [r5, #0]
 8004fa6:	b103      	cbz	r3, 8004faa <_close_r+0x1a>
 8004fa8:	6023      	str	r3, [r4, #0]
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	20000188 	.word	0x20000188

08004fb0 <__sflush_r>:
 8004fb0:	898a      	ldrh	r2, [r1, #12]
 8004fb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	0710      	lsls	r0, r2, #28
 8004fba:	460c      	mov	r4, r1
 8004fbc:	d458      	bmi.n	8005070 <__sflush_r+0xc0>
 8004fbe:	684b      	ldr	r3, [r1, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	dc05      	bgt.n	8004fd0 <__sflush_r+0x20>
 8004fc4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	dc02      	bgt.n	8004fd0 <__sflush_r+0x20>
 8004fca:	2000      	movs	r0, #0
 8004fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004fd2:	2e00      	cmp	r6, #0
 8004fd4:	d0f9      	beq.n	8004fca <__sflush_r+0x1a>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004fdc:	682f      	ldr	r7, [r5, #0]
 8004fde:	602b      	str	r3, [r5, #0]
 8004fe0:	d032      	beq.n	8005048 <__sflush_r+0x98>
 8004fe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004fe4:	89a3      	ldrh	r3, [r4, #12]
 8004fe6:	075a      	lsls	r2, r3, #29
 8004fe8:	d505      	bpl.n	8004ff6 <__sflush_r+0x46>
 8004fea:	6863      	ldr	r3, [r4, #4]
 8004fec:	1ac0      	subs	r0, r0, r3
 8004fee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004ff0:	b10b      	cbz	r3, 8004ff6 <__sflush_r+0x46>
 8004ff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ff4:	1ac0      	subs	r0, r0, r3
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004ffc:	6a21      	ldr	r1, [r4, #32]
 8004ffe:	4628      	mov	r0, r5
 8005000:	47b0      	blx	r6
 8005002:	1c43      	adds	r3, r0, #1
 8005004:	89a3      	ldrh	r3, [r4, #12]
 8005006:	d106      	bne.n	8005016 <__sflush_r+0x66>
 8005008:	6829      	ldr	r1, [r5, #0]
 800500a:	291d      	cmp	r1, #29
 800500c:	d82c      	bhi.n	8005068 <__sflush_r+0xb8>
 800500e:	4a2a      	ldr	r2, [pc, #168]	; (80050b8 <__sflush_r+0x108>)
 8005010:	40ca      	lsrs	r2, r1
 8005012:	07d6      	lsls	r6, r2, #31
 8005014:	d528      	bpl.n	8005068 <__sflush_r+0xb8>
 8005016:	2200      	movs	r2, #0
 8005018:	6062      	str	r2, [r4, #4]
 800501a:	04d9      	lsls	r1, r3, #19
 800501c:	6922      	ldr	r2, [r4, #16]
 800501e:	6022      	str	r2, [r4, #0]
 8005020:	d504      	bpl.n	800502c <__sflush_r+0x7c>
 8005022:	1c42      	adds	r2, r0, #1
 8005024:	d101      	bne.n	800502a <__sflush_r+0x7a>
 8005026:	682b      	ldr	r3, [r5, #0]
 8005028:	b903      	cbnz	r3, 800502c <__sflush_r+0x7c>
 800502a:	6560      	str	r0, [r4, #84]	; 0x54
 800502c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800502e:	602f      	str	r7, [r5, #0]
 8005030:	2900      	cmp	r1, #0
 8005032:	d0ca      	beq.n	8004fca <__sflush_r+0x1a>
 8005034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005038:	4299      	cmp	r1, r3
 800503a:	d002      	beq.n	8005042 <__sflush_r+0x92>
 800503c:	4628      	mov	r0, r5
 800503e:	f000 f8fd 	bl	800523c <_free_r>
 8005042:	2000      	movs	r0, #0
 8005044:	6360      	str	r0, [r4, #52]	; 0x34
 8005046:	e7c1      	b.n	8004fcc <__sflush_r+0x1c>
 8005048:	6a21      	ldr	r1, [r4, #32]
 800504a:	2301      	movs	r3, #1
 800504c:	4628      	mov	r0, r5
 800504e:	47b0      	blx	r6
 8005050:	1c41      	adds	r1, r0, #1
 8005052:	d1c7      	bne.n	8004fe4 <__sflush_r+0x34>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0c4      	beq.n	8004fe4 <__sflush_r+0x34>
 800505a:	2b1d      	cmp	r3, #29
 800505c:	d001      	beq.n	8005062 <__sflush_r+0xb2>
 800505e:	2b16      	cmp	r3, #22
 8005060:	d101      	bne.n	8005066 <__sflush_r+0xb6>
 8005062:	602f      	str	r7, [r5, #0]
 8005064:	e7b1      	b.n	8004fca <__sflush_r+0x1a>
 8005066:	89a3      	ldrh	r3, [r4, #12]
 8005068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800506c:	81a3      	strh	r3, [r4, #12]
 800506e:	e7ad      	b.n	8004fcc <__sflush_r+0x1c>
 8005070:	690f      	ldr	r7, [r1, #16]
 8005072:	2f00      	cmp	r7, #0
 8005074:	d0a9      	beq.n	8004fca <__sflush_r+0x1a>
 8005076:	0793      	lsls	r3, r2, #30
 8005078:	680e      	ldr	r6, [r1, #0]
 800507a:	bf08      	it	eq
 800507c:	694b      	ldreq	r3, [r1, #20]
 800507e:	600f      	str	r7, [r1, #0]
 8005080:	bf18      	it	ne
 8005082:	2300      	movne	r3, #0
 8005084:	eba6 0807 	sub.w	r8, r6, r7
 8005088:	608b      	str	r3, [r1, #8]
 800508a:	f1b8 0f00 	cmp.w	r8, #0
 800508e:	dd9c      	ble.n	8004fca <__sflush_r+0x1a>
 8005090:	6a21      	ldr	r1, [r4, #32]
 8005092:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005094:	4643      	mov	r3, r8
 8005096:	463a      	mov	r2, r7
 8005098:	4628      	mov	r0, r5
 800509a:	47b0      	blx	r6
 800509c:	2800      	cmp	r0, #0
 800509e:	dc06      	bgt.n	80050ae <__sflush_r+0xfe>
 80050a0:	89a3      	ldrh	r3, [r4, #12]
 80050a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050a6:	81a3      	strh	r3, [r4, #12]
 80050a8:	f04f 30ff 	mov.w	r0, #4294967295
 80050ac:	e78e      	b.n	8004fcc <__sflush_r+0x1c>
 80050ae:	4407      	add	r7, r0
 80050b0:	eba8 0800 	sub.w	r8, r8, r0
 80050b4:	e7e9      	b.n	800508a <__sflush_r+0xda>
 80050b6:	bf00      	nop
 80050b8:	20400001 	.word	0x20400001

080050bc <_fflush_r>:
 80050bc:	b538      	push	{r3, r4, r5, lr}
 80050be:	690b      	ldr	r3, [r1, #16]
 80050c0:	4605      	mov	r5, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	b913      	cbnz	r3, 80050cc <_fflush_r+0x10>
 80050c6:	2500      	movs	r5, #0
 80050c8:	4628      	mov	r0, r5
 80050ca:	bd38      	pop	{r3, r4, r5, pc}
 80050cc:	b118      	cbz	r0, 80050d6 <_fflush_r+0x1a>
 80050ce:	6983      	ldr	r3, [r0, #24]
 80050d0:	b90b      	cbnz	r3, 80050d6 <_fflush_r+0x1a>
 80050d2:	f7ff fa15 	bl	8004500 <__sinit>
 80050d6:	4b14      	ldr	r3, [pc, #80]	; (8005128 <_fflush_r+0x6c>)
 80050d8:	429c      	cmp	r4, r3
 80050da:	d11b      	bne.n	8005114 <_fflush_r+0x58>
 80050dc:	686c      	ldr	r4, [r5, #4]
 80050de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d0ef      	beq.n	80050c6 <_fflush_r+0xa>
 80050e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80050e8:	07d0      	lsls	r0, r2, #31
 80050ea:	d404      	bmi.n	80050f6 <_fflush_r+0x3a>
 80050ec:	0599      	lsls	r1, r3, #22
 80050ee:	d402      	bmi.n	80050f6 <_fflush_r+0x3a>
 80050f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80050f2:	f7ff faa3 	bl	800463c <__retarget_lock_acquire_recursive>
 80050f6:	4628      	mov	r0, r5
 80050f8:	4621      	mov	r1, r4
 80050fa:	f7ff ff59 	bl	8004fb0 <__sflush_r>
 80050fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005100:	07da      	lsls	r2, r3, #31
 8005102:	4605      	mov	r5, r0
 8005104:	d4e0      	bmi.n	80050c8 <_fflush_r+0xc>
 8005106:	89a3      	ldrh	r3, [r4, #12]
 8005108:	059b      	lsls	r3, r3, #22
 800510a:	d4dd      	bmi.n	80050c8 <_fflush_r+0xc>
 800510c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800510e:	f7ff fa96 	bl	800463e <__retarget_lock_release_recursive>
 8005112:	e7d9      	b.n	80050c8 <_fflush_r+0xc>
 8005114:	4b05      	ldr	r3, [pc, #20]	; (800512c <_fflush_r+0x70>)
 8005116:	429c      	cmp	r4, r3
 8005118:	d101      	bne.n	800511e <_fflush_r+0x62>
 800511a:	68ac      	ldr	r4, [r5, #8]
 800511c:	e7df      	b.n	80050de <_fflush_r+0x22>
 800511e:	4b04      	ldr	r3, [pc, #16]	; (8005130 <_fflush_r+0x74>)
 8005120:	429c      	cmp	r4, r3
 8005122:	bf08      	it	eq
 8005124:	68ec      	ldreq	r4, [r5, #12]
 8005126:	e7da      	b.n	80050de <_fflush_r+0x22>
 8005128:	08005ae0 	.word	0x08005ae0
 800512c:	08005b00 	.word	0x08005b00
 8005130:	08005ac0 	.word	0x08005ac0

08005134 <_lseek_r>:
 8005134:	b538      	push	{r3, r4, r5, lr}
 8005136:	4d07      	ldr	r5, [pc, #28]	; (8005154 <_lseek_r+0x20>)
 8005138:	4604      	mov	r4, r0
 800513a:	4608      	mov	r0, r1
 800513c:	4611      	mov	r1, r2
 800513e:	2200      	movs	r2, #0
 8005140:	602a      	str	r2, [r5, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	f7fb fd3c 	bl	8000bc0 <_lseek>
 8005148:	1c43      	adds	r3, r0, #1
 800514a:	d102      	bne.n	8005152 <_lseek_r+0x1e>
 800514c:	682b      	ldr	r3, [r5, #0]
 800514e:	b103      	cbz	r3, 8005152 <_lseek_r+0x1e>
 8005150:	6023      	str	r3, [r4, #0]
 8005152:	bd38      	pop	{r3, r4, r5, pc}
 8005154:	20000188 	.word	0x20000188

08005158 <__swhatbuf_r>:
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	460e      	mov	r6, r1
 800515c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005160:	2900      	cmp	r1, #0
 8005162:	b096      	sub	sp, #88	; 0x58
 8005164:	4614      	mov	r4, r2
 8005166:	461d      	mov	r5, r3
 8005168:	da08      	bge.n	800517c <__swhatbuf_r+0x24>
 800516a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	602a      	str	r2, [r5, #0]
 8005172:	061a      	lsls	r2, r3, #24
 8005174:	d410      	bmi.n	8005198 <__swhatbuf_r+0x40>
 8005176:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800517a:	e00e      	b.n	800519a <__swhatbuf_r+0x42>
 800517c:	466a      	mov	r2, sp
 800517e:	f000 f8bb 	bl	80052f8 <_fstat_r>
 8005182:	2800      	cmp	r0, #0
 8005184:	dbf1      	blt.n	800516a <__swhatbuf_r+0x12>
 8005186:	9a01      	ldr	r2, [sp, #4]
 8005188:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800518c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005190:	425a      	negs	r2, r3
 8005192:	415a      	adcs	r2, r3
 8005194:	602a      	str	r2, [r5, #0]
 8005196:	e7ee      	b.n	8005176 <__swhatbuf_r+0x1e>
 8005198:	2340      	movs	r3, #64	; 0x40
 800519a:	2000      	movs	r0, #0
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	b016      	add	sp, #88	; 0x58
 80051a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080051a4 <__smakebuf_r>:
 80051a4:	898b      	ldrh	r3, [r1, #12]
 80051a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80051a8:	079d      	lsls	r5, r3, #30
 80051aa:	4606      	mov	r6, r0
 80051ac:	460c      	mov	r4, r1
 80051ae:	d507      	bpl.n	80051c0 <__smakebuf_r+0x1c>
 80051b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80051b4:	6023      	str	r3, [r4, #0]
 80051b6:	6123      	str	r3, [r4, #16]
 80051b8:	2301      	movs	r3, #1
 80051ba:	6163      	str	r3, [r4, #20]
 80051bc:	b002      	add	sp, #8
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	ab01      	add	r3, sp, #4
 80051c2:	466a      	mov	r2, sp
 80051c4:	f7ff ffc8 	bl	8005158 <__swhatbuf_r>
 80051c8:	9900      	ldr	r1, [sp, #0]
 80051ca:	4605      	mov	r5, r0
 80051cc:	4630      	mov	r0, r6
 80051ce:	f7ff fa57 	bl	8004680 <_malloc_r>
 80051d2:	b948      	cbnz	r0, 80051e8 <__smakebuf_r+0x44>
 80051d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051d8:	059a      	lsls	r2, r3, #22
 80051da:	d4ef      	bmi.n	80051bc <__smakebuf_r+0x18>
 80051dc:	f023 0303 	bic.w	r3, r3, #3
 80051e0:	f043 0302 	orr.w	r3, r3, #2
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	e7e3      	b.n	80051b0 <__smakebuf_r+0xc>
 80051e8:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <__smakebuf_r+0x7c>)
 80051ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80051ec:	89a3      	ldrh	r3, [r4, #12]
 80051ee:	6020      	str	r0, [r4, #0]
 80051f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051f4:	81a3      	strh	r3, [r4, #12]
 80051f6:	9b00      	ldr	r3, [sp, #0]
 80051f8:	6163      	str	r3, [r4, #20]
 80051fa:	9b01      	ldr	r3, [sp, #4]
 80051fc:	6120      	str	r0, [r4, #16]
 80051fe:	b15b      	cbz	r3, 8005218 <__smakebuf_r+0x74>
 8005200:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005204:	4630      	mov	r0, r6
 8005206:	f000 f889 	bl	800531c <_isatty_r>
 800520a:	b128      	cbz	r0, 8005218 <__smakebuf_r+0x74>
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	f023 0303 	bic.w	r3, r3, #3
 8005212:	f043 0301 	orr.w	r3, r3, #1
 8005216:	81a3      	strh	r3, [r4, #12]
 8005218:	89a0      	ldrh	r0, [r4, #12]
 800521a:	4305      	orrs	r5, r0
 800521c:	81a5      	strh	r5, [r4, #12]
 800521e:	e7cd      	b.n	80051bc <__smakebuf_r+0x18>
 8005220:	08004499 	.word	0x08004499

08005224 <__malloc_lock>:
 8005224:	4801      	ldr	r0, [pc, #4]	; (800522c <__malloc_lock+0x8>)
 8005226:	f7ff ba09 	b.w	800463c <__retarget_lock_acquire_recursive>
 800522a:	bf00      	nop
 800522c:	2000017c 	.word	0x2000017c

08005230 <__malloc_unlock>:
 8005230:	4801      	ldr	r0, [pc, #4]	; (8005238 <__malloc_unlock+0x8>)
 8005232:	f7ff ba04 	b.w	800463e <__retarget_lock_release_recursive>
 8005236:	bf00      	nop
 8005238:	2000017c 	.word	0x2000017c

0800523c <_free_r>:
 800523c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800523e:	2900      	cmp	r1, #0
 8005240:	d044      	beq.n	80052cc <_free_r+0x90>
 8005242:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005246:	9001      	str	r0, [sp, #4]
 8005248:	2b00      	cmp	r3, #0
 800524a:	f1a1 0404 	sub.w	r4, r1, #4
 800524e:	bfb8      	it	lt
 8005250:	18e4      	addlt	r4, r4, r3
 8005252:	f7ff ffe7 	bl	8005224 <__malloc_lock>
 8005256:	4a1e      	ldr	r2, [pc, #120]	; (80052d0 <_free_r+0x94>)
 8005258:	9801      	ldr	r0, [sp, #4]
 800525a:	6813      	ldr	r3, [r2, #0]
 800525c:	b933      	cbnz	r3, 800526c <_free_r+0x30>
 800525e:	6063      	str	r3, [r4, #4]
 8005260:	6014      	str	r4, [r2, #0]
 8005262:	b003      	add	sp, #12
 8005264:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005268:	f7ff bfe2 	b.w	8005230 <__malloc_unlock>
 800526c:	42a3      	cmp	r3, r4
 800526e:	d908      	bls.n	8005282 <_free_r+0x46>
 8005270:	6825      	ldr	r5, [r4, #0]
 8005272:	1961      	adds	r1, r4, r5
 8005274:	428b      	cmp	r3, r1
 8005276:	bf01      	itttt	eq
 8005278:	6819      	ldreq	r1, [r3, #0]
 800527a:	685b      	ldreq	r3, [r3, #4]
 800527c:	1949      	addeq	r1, r1, r5
 800527e:	6021      	streq	r1, [r4, #0]
 8005280:	e7ed      	b.n	800525e <_free_r+0x22>
 8005282:	461a      	mov	r2, r3
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	b10b      	cbz	r3, 800528c <_free_r+0x50>
 8005288:	42a3      	cmp	r3, r4
 800528a:	d9fa      	bls.n	8005282 <_free_r+0x46>
 800528c:	6811      	ldr	r1, [r2, #0]
 800528e:	1855      	adds	r5, r2, r1
 8005290:	42a5      	cmp	r5, r4
 8005292:	d10b      	bne.n	80052ac <_free_r+0x70>
 8005294:	6824      	ldr	r4, [r4, #0]
 8005296:	4421      	add	r1, r4
 8005298:	1854      	adds	r4, r2, r1
 800529a:	42a3      	cmp	r3, r4
 800529c:	6011      	str	r1, [r2, #0]
 800529e:	d1e0      	bne.n	8005262 <_free_r+0x26>
 80052a0:	681c      	ldr	r4, [r3, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	6053      	str	r3, [r2, #4]
 80052a6:	4421      	add	r1, r4
 80052a8:	6011      	str	r1, [r2, #0]
 80052aa:	e7da      	b.n	8005262 <_free_r+0x26>
 80052ac:	d902      	bls.n	80052b4 <_free_r+0x78>
 80052ae:	230c      	movs	r3, #12
 80052b0:	6003      	str	r3, [r0, #0]
 80052b2:	e7d6      	b.n	8005262 <_free_r+0x26>
 80052b4:	6825      	ldr	r5, [r4, #0]
 80052b6:	1961      	adds	r1, r4, r5
 80052b8:	428b      	cmp	r3, r1
 80052ba:	bf04      	itt	eq
 80052bc:	6819      	ldreq	r1, [r3, #0]
 80052be:	685b      	ldreq	r3, [r3, #4]
 80052c0:	6063      	str	r3, [r4, #4]
 80052c2:	bf04      	itt	eq
 80052c4:	1949      	addeq	r1, r1, r5
 80052c6:	6021      	streq	r1, [r4, #0]
 80052c8:	6054      	str	r4, [r2, #4]
 80052ca:	e7ca      	b.n	8005262 <_free_r+0x26>
 80052cc:	b003      	add	sp, #12
 80052ce:	bd30      	pop	{r4, r5, pc}
 80052d0:	20000180 	.word	0x20000180

080052d4 <_read_r>:
 80052d4:	b538      	push	{r3, r4, r5, lr}
 80052d6:	4d07      	ldr	r5, [pc, #28]	; (80052f4 <_read_r+0x20>)
 80052d8:	4604      	mov	r4, r0
 80052da:	4608      	mov	r0, r1
 80052dc:	4611      	mov	r1, r2
 80052de:	2200      	movs	r2, #0
 80052e0:	602a      	str	r2, [r5, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	f7fb fc0c 	bl	8000b00 <_read>
 80052e8:	1c43      	adds	r3, r0, #1
 80052ea:	d102      	bne.n	80052f2 <_read_r+0x1e>
 80052ec:	682b      	ldr	r3, [r5, #0]
 80052ee:	b103      	cbz	r3, 80052f2 <_read_r+0x1e>
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	bd38      	pop	{r3, r4, r5, pc}
 80052f4:	20000188 	.word	0x20000188

080052f8 <_fstat_r>:
 80052f8:	b538      	push	{r3, r4, r5, lr}
 80052fa:	4d07      	ldr	r5, [pc, #28]	; (8005318 <_fstat_r+0x20>)
 80052fc:	2300      	movs	r3, #0
 80052fe:	4604      	mov	r4, r0
 8005300:	4608      	mov	r0, r1
 8005302:	4611      	mov	r1, r2
 8005304:	602b      	str	r3, [r5, #0]
 8005306:	f7fb fc40 	bl	8000b8a <_fstat>
 800530a:	1c43      	adds	r3, r0, #1
 800530c:	d102      	bne.n	8005314 <_fstat_r+0x1c>
 800530e:	682b      	ldr	r3, [r5, #0]
 8005310:	b103      	cbz	r3, 8005314 <_fstat_r+0x1c>
 8005312:	6023      	str	r3, [r4, #0]
 8005314:	bd38      	pop	{r3, r4, r5, pc}
 8005316:	bf00      	nop
 8005318:	20000188 	.word	0x20000188

0800531c <_isatty_r>:
 800531c:	b538      	push	{r3, r4, r5, lr}
 800531e:	4d06      	ldr	r5, [pc, #24]	; (8005338 <_isatty_r+0x1c>)
 8005320:	2300      	movs	r3, #0
 8005322:	4604      	mov	r4, r0
 8005324:	4608      	mov	r0, r1
 8005326:	602b      	str	r3, [r5, #0]
 8005328:	f7fb fc3f 	bl	8000baa <_isatty>
 800532c:	1c43      	adds	r3, r0, #1
 800532e:	d102      	bne.n	8005336 <_isatty_r+0x1a>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	b103      	cbz	r3, 8005336 <_isatty_r+0x1a>
 8005334:	6023      	str	r3, [r4, #0]
 8005336:	bd38      	pop	{r3, r4, r5, pc}
 8005338:	20000188 	.word	0x20000188

0800533c <_init>:
 800533c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800533e:	bf00      	nop
 8005340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005342:	bc08      	pop	{r3}
 8005344:	469e      	mov	lr, r3
 8005346:	4770      	bx	lr

08005348 <_fini>:
 8005348:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800534a:	bf00      	nop
 800534c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534e:	bc08      	pop	{r3}
 8005350:	469e      	mov	lr, r3
 8005352:	4770      	bx	lr
